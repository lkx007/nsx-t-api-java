/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.AddClusterNodeVMInfo;
import io.swagger.client.model.ApiError;
import io.swagger.client.model.ClusterNodeVMDeploymentRequest;
import io.swagger.client.model.ClusterNodeVMDeploymentRequestList;
import io.swagger.client.model.ClusterNodeVMDeploymentStatusReport;
import io.swagger.client.model.RepoSyncStatusReport;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ManagementPlaneApiClusterNodesDeploymentsApi
 */
@Ignore
public class ManagementPlaneApiClusterNodesDeploymentsApiTest {

    private final ManagementPlaneApiClusterNodesDeploymentsApi api = new ManagementPlaneApiClusterNodesDeploymentsApi();

    /**
     * Deploy and register a cluster node VM
     *
     * Deploys a cluster node VM as specified by the deployment config. Once the VM is deployed and powered on, it will automatically join the existing cluster. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addClusterNodeVMTest() throws ApiException {
        AddClusterNodeVMInfo body = null;
        ClusterNodeVMDeploymentRequestList response = api.addClusterNodeVM(body);

        // TODO: test validations
    }
    /**
     * Attempt to delete an auto-deployed cluster node VM
     *
     * Attempts to unregister and undeploy a specified auto-deployed cluster node VM. If it is a member of a cluster, then the VM will be automatically detached from the cluster before being unregistered and undeployed. Alternatively, if the original deployment attempt failed or the VM is not found, cleans up the deployment information associated with the deployment attempt. Note: If a VM has been successfully auto-deployed, then the associated deployment information will not be deleted unless and until the VM is successfully deleted. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAutoDeployedClusterNodeVMDeleteTest() throws ApiException {
        String nodeId = null;
        Boolean forceDelete = null;
        api.deleteAutoDeployedClusterNodeVMDelete(nodeId, forceDelete);

        // TODO: test validations
    }
    /**
     * Synchronizes the repository data between nsx managers.
     *
     * Returns the synchronization status for the manager represented by given &lt;node-id&gt;. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRepoSyncStatusTest() throws ApiException {
        String nodeId = null;
        RepoSyncStatusReport response = api.getRepoSyncStatus(nodeId);

        // TODO: test validations
    }
    /**
     * Returns info for all cluster node VM auto-deployment attempts
     *
     * Returns request information for every attempted deployment of a cluster node VM. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listClusterNodeVMDeploymentRequestsTest() throws ApiException {
        ClusterNodeVMDeploymentRequestList response = api.listClusterNodeVMDeploymentRequests();

        // TODO: test validations
    }
    /**
     * Synchronizes the repository data between nsx managers.
     *
     * Attempts to synchronize the repository partition on nsx manager. Repository partition contains packages required for the install and upgrade of nsx components.Normally there is no need to call this API explicitely by the user. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void performRepoSyncRepoSyncTest() throws ApiException {
        api.performRepoSyncRepoSync();

        // TODO: test validations
    }
    /**
     * Returns info for a cluster-node VM auto-deployment attempt
     *
     * Returns deployment request information for a specific attempted deployment of a cluster node VM. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readClusterNodeVMDeploymentRequestTest() throws ApiException {
        String nodeId = null;
        ClusterNodeVMDeploymentRequest response = api.readClusterNodeVMDeploymentRequest(nodeId);

        // TODO: test validations
    }
    /**
     * Returns the status of the VM creation/deletion
     *
     * Returns the current deployment or undeployment status for a VM along with any other relevant current information, such as error messages. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readClusterNodeVMDeploymentStatusTest() throws ApiException {
        String nodeId = null;
        ClusterNodeVMDeploymentStatusReport response = api.readClusterNodeVMDeploymentStatus(nodeId);

        // TODO: test validations
    }
}
