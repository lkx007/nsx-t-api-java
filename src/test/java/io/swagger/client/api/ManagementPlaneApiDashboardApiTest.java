/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.ApiError;
import io.swagger.client.model.View;
import io.swagger.client.model.ViewList;
import io.swagger.client.model.WidgetConfiguration;
import io.swagger.client.model.WidgetConfigurationList;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ManagementPlaneApiDashboardApi
 */
@Ignore
public class ManagementPlaneApiDashboardApiTest {

    private final ManagementPlaneApiDashboardApi api = new ManagementPlaneApiDashboardApi();

    /**
     * Creates a new View.
     *
     * Creates a new View.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createViewTest() throws ApiException {
        View body = null;
        View response = api.createView(body);

        // TODO: test validations
    }
    /**
     * Creates a new Widget Configuration.
     *
     * Creates a new Widget Configuration and adds it to the specified view. Supported resource_types are LabelValueConfiguration, DonutConfiguration, GridConfiguration, StatsConfiguration, MultiWidgetConfiguration, GraphConfiguration and ContainerConfiguration.  Note: Expressions should be given in a single line. If an expression spans   multiple lines, then form the expression in a single line. For label-value pairs, expressions are evaluated as follows:   a. First, render configurations are evaluated in their order of      appearance in the widget config. The &#x27;field&#x27; is evaluated at the end.   b. Second, when render configuration is provided then the order of      evaluation is      1. If expressions provided in &#x27;condition&#x27; and &#x27;display value&#x27; are         well-formed and free of runtime-errors such as &#x27;null pointers&#x27; and         evaluates to &#x27;true&#x27;; Then remaining render configurations are not         evaluated, and the current render configuration&#x27;s &#x27;display value&#x27;         is taken as the final value.      2. If expression provided in &#x27;condition&#x27; of render configuration is         false, then next render configuration is evaluated.      3. Finally, &#x27;field&#x27; is evaluated only when every render configuration         evaluates to false and no error occurs during steps 1 and 2 above.  If an error occurs during evaluation of render configuration, then an   error message is shown. The display value corresponding to that label is   not shown and evaluation of the remaining render configurations continues   to collect and show all the error messages (marked with the &#x27;Label&#x27; for   identification) as &#x27;Error_Messages: {}&#x27;.  If during evaluation of expressions for any label-value pair an error   occurs, then it is marked with error. The errors are shown in the report,   along with the label value pairs that are error-free.  Important: For elements that take expressions, strings should be provided   by escaping them with a back-slash. These elements are - condition, field,   tooltip text and render_configuration&#x27;s display_value. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createWidgetConfigurationTest() throws ApiException {
        WidgetConfiguration body = null;
        String viewId = null;
        WidgetConfiguration response = api.createWidgetConfiguration(body, viewId);

        // TODO: test validations
    }
    /**
     * Delete View
     *
     * Delete View
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletViewTest() throws ApiException {
        String viewId = null;
        api.deletView(viewId);

        // TODO: test validations
    }
    /**
     * Delete Widget Configuration
     *
     * Detaches widget from a given view. If the widget is no longer part of any view, then it will be purged. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteWidgetConfigurationTest() throws ApiException {
        String viewId = null;
        String widgetconfigurationId = null;
        api.deleteWidgetConfiguration(viewId, widgetconfigurationId);

        // TODO: test validations
    }
    /**
     * Returns View Information
     *
     * Returns Information about a specific View. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getViewTest() throws ApiException {
        String viewId = null;
        View response = api.getView(viewId);

        // TODO: test validations
    }
    /**
     * Returns Widget Configuration Information
     *
     * Returns Information about a specific Widget Configuration. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getWidgetConfigurationTest() throws ApiException {
        String viewId = null;
        String widgetconfigurationId = null;
        WidgetConfiguration response = api.getWidgetConfiguration(viewId, widgetconfigurationId);

        // TODO: test validations
    }
    /**
     * Returns the Views based on query criteria defined in ViewQueryParameters.
     *
     * If no query params are specified then all the views entitled for the user are returned. The views to which a user is entitled to include the views created by the user and the shared views. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listViewsTest() throws ApiException {
        String tag = null;
        String viewIds = null;
        String widgetId = null;
        ViewList response = api.listViews(tag, viewIds, widgetId);

        // TODO: test validations
    }
    /**
     * Returns the Widget Configurations based on query criteria defined in WidgetQueryParameters.
     *
     * If no query params are specified then all the Widget Configurations of the specified view are returned. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listWidgetConfigurationsTest() throws ApiException {
        String viewId = null;
        String container = null;
        String widgetIds = null;
        WidgetConfigurationList response = api.listWidgetConfigurations(viewId, container, widgetIds);

        // TODO: test validations
    }
    /**
     * Update View
     *
     * Update View
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateViewTest() throws ApiException {
        View body = null;
        String viewId = null;
        View response = api.updateView(body, viewId);

        // TODO: test validations
    }
    /**
     * Update Widget Configuration
     *
     * Updates the widget at the given view. If the widget is referenced by other views, then the widget will be updated in all the views that it is part of. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateWidgetConfigurationTest() throws ApiException {
        WidgetConfiguration body = null;
        String viewId = null;
        String widgetconfigurationId = null;
        WidgetConfiguration response = api.updateWidgetConfiguration(body, viewId, widgetconfigurationId);

        // TODO: test validations
    }
}
