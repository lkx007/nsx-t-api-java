/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.ApiError;
import io.swagger.client.model.ConfigurationState;
import io.swagger.client.model.DnsAnswer;
import io.swagger.client.model.DnsFailedQueries;
import io.swagger.client.model.DnsForwarder;
import io.swagger.client.model.DnsForwarderListResult;
import io.swagger.client.model.DnsForwarderStatistics;
import io.swagger.client.model.DnsForwarderStatus;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ManagementPlaneApiServicesDnsApi
 */
@Ignore
public class ManagementPlaneApiServicesDnsApiTest {

    private final ManagementPlaneApiServicesDnsApi api = new ManagementPlaneApiServicesDnsApi();

    /**
     * Clear the current cache of the DNS forwarder.
     *
     * Clear the current cache of the DNS forwarder. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void clearDnsForwarderCacheClearCacheTest() throws ApiException {
        String forwarderId = null;
        api.clearDnsForwarderCacheClearCache(forwarderId);

        // TODO: test validations
    }
    /**
     * Create a DNS forwader
     *
     * Create a DNS forwader upon a logical router. There is only one DNS forwarder can be created upon a given logical router. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createDnsForwaderTest() throws ApiException {
        DnsForwarder body = null;
        DnsForwarder response = api.createDnsForwader(body);

        // TODO: test validations
    }
    /**
     * Delete a specific DNS forwarder
     *
     * Delete a specific DNS forwarder. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteDnsForwarderTest() throws ApiException {
        String forwarderId = null;
        api.deleteDnsForwarder(forwarderId);

        // TODO: test validations
    }
    /**
     * Disable the DNS forwarder.
     *
     * Disable the DNS forwarder if the forwarder is currently enbled. If the DNS forwarder is already disabled, the forwarder will not be re-disabled.  Please note, once a DNS forwarder is disabled then enabled, the previous DNS forwarder statistics counters will be reset. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void disableDnsForwarderDisableTest() throws ApiException {
        String forwarderId = null;
        api.disableDnsForwarderDisable(forwarderId);

        // TODO: test validations
    }
    /**
     * Enable the DNS forwarder.
     *
     * Enable the DNS forwarder if the forwarder is currently disabled. If the DNS forwarder is already enabled, the forwarder will not be re-enabled.  Please note, once a DNS forwarder is disabled then enabled, the previous DNS forwarder statistics counters will be reset. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void enableDnsForwarderEnableTest() throws ApiException {
        String forwarderId = null;
        api.enableDnsForwarderEnable(forwarderId);

        // TODO: test validations
    }
    /**
     * Get the realized state of a DNS forwarder
     *
     * Return the realized state information of a DNS forwarder. After a DNS forwarder was created or updated, you can invoke this API to check the realization state of the forwarder. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDnsForwarderStateTest() throws ApiException {
        String forwarderId = null;
        Long barrierId = null;
        String requestId = null;
        ConfigurationState response = api.getDnsForwarderState(forwarderId, barrierId, requestId);

        // TODO: test validations
    }
    /**
     * Get statistics of given dns forwarder
     *
     * Returns the statistics of the given dns forwarder specified by forwarder id. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDnsForwarderStatisticsTest() throws ApiException {
        String forwarderId = null;
        DnsForwarderStatistics response = api.getDnsForwarderStatistics(forwarderId);

        // TODO: test validations
    }
    /**
     * Get current status of the given DNS forwarder
     *
     * Returns the current status of the given DNS forwarder. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDnsForwarderStatusTest() throws ApiException {
        String forwarderId = null;
        DnsForwarderStatus response = api.getDnsForwarderStatus(forwarderId);

        // TODO: test validations
    }
    /**
     * Get the recent failed DNS queries
     *
     * Return the given count of recent failed DNS queries from DNS forwarder. Since the DNS forwarder is running in Acitve/Standby HA mode on transport nodes, the given count of queries will be returned from each nodes. Hence the total queries returned could be doubled. If no count is specified, 100 recent failed queries are returned. If the recent failures is less than the given count, all the failures will be returned. The maximum count is 1,000. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFailedDnsQueriesTest() throws ApiException {
        String forwarderId = null;
        Long count = null;
        DnsFailedQueries response = api.getFailedDnsQueries(forwarderId, count);

        // TODO: test validations
    }
    /**
     * Get a paginated list of DNS forwarders
     *
     * Get a paginated list of DNS forwarders. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listDnsForwadersTest() throws ApiException {
        String cursor = null;
        String includedFields = null;
        Long pageSize = null;
        Boolean sortAscending = null;
        String sortBy = null;
        DnsForwarderListResult response = api.listDnsForwaders(cursor, includedFields, pageSize, sortAscending, sortBy);

        // TODO: test validations
    }
    /**
     * Resolve a given address via the DNS forwarder
     *
     * Query the nameserver for an ip-address or a FQDN of the given an address optionally using an specified DNS server. If the address is a fqdn, nslookup will resolve ip-address with it. If the address is an ip-address, do a reverse lookup and answer fqdn(s). 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void lookupAddressTest() throws ApiException {
        String forwarderId = null;
        String address = null;
        String serverIp = null;
        String sourceIp = null;
        DnsAnswer response = api.lookupAddress(forwarderId, address, serverIp, sourceIp);

        // TODO: test validations
    }
    /**
     * Retrieve a DNS forwarder
     *
     * Retrieve a DNS forwarder. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readDnsForwaderTest() throws ApiException {
        String forwarderId = null;
        DnsForwarder response = api.readDnsForwader(forwarderId);

        // TODO: test validations
    }
    /**
     * Update a specific DNS forwarder
     *
     * Update a specific DNS forwarder. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateDnsForwarderTest() throws ApiException {
        DnsForwarder body = null;
        String forwarderId = null;
        DnsForwarder response = api.updateDnsForwarder(body, forwarderId);

        // TODO: test validations
    }
}
