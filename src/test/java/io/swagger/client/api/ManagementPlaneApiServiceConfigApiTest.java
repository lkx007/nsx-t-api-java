/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.ApiError;
import io.swagger.client.model.EffectiveProfileListResult;
import io.swagger.client.model.ServiceConfig;
import io.swagger.client.model.ServiceConfigList;
import io.swagger.client.model.ServiceConfigListResult;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ManagementPlaneApiServiceConfigApi
 */
@Ignore
public class ManagementPlaneApiServiceConfigApiTest {

    private final ManagementPlaneApiServiceConfigApi api = new ManagementPlaneApiServiceConfigApi();

    /**
     * Create service config
     *
     * Creates a new service config that can group profiles and configs 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createServiceConfigTest() throws ApiException {
        ServiceConfig body = null;
        ServiceConfig response = api.createServiceConfig(body);

        // TODO: test validations
    }
    /**
     * Delete Service Config
     *
     * Deletes the specified service config 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteServiceConfigTest() throws ApiException {
        String configSetId = null;
        api.deleteServiceConfig(configSetId);

        // TODO: test validations
    }
    /**
     * Get Effective Profiles for an Entity
     *
     * Returns the effective profiles applied to the specified Resource. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void effectiveProfilesTest() throws ApiException {
        String resourceId = null;
        String resourceType = null;
        String cursor = null;
        String includedFields = null;
        Long pageSize = null;
        Boolean sortAscending = null;
        String sortBy = null;
        EffectiveProfileListResult response = api.effectiveProfiles(resourceId, resourceType, cursor, includedFields, pageSize, sortAscending, sortBy);

        // TODO: test validations
    }
    /**
     * List service configs
     *
     * List of all service configs. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listServiceConfigsTest() throws ApiException {
        String cursor = null;
        String includedFields = null;
        Long pageSize = null;
        String profileType = null;
        Boolean sortAscending = null;
        String sortBy = null;
        ServiceConfigListResult response = api.listServiceConfigs(cursor, includedFields, pageSize, profileType, sortAscending, sortBy);

        // TODO: test validations
    }
    /**
     * Read Service Config
     *
     * Returns information about the specified Service Config. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readServiceConfigTest() throws ApiException {
        String configSetId = null;
        ServiceConfig response = api.readServiceConfig(configSetId);

        // TODO: test validations
    }
    /**
     * Creates/Updates service configs sent in batch request
     *
     * Creates/Updates new service configs sent in batch request. This API returns ALL the service configs that are created/updated. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void serviceConfigBatchOperationTest() throws ApiException {
        ServiceConfigList body = null;
        ServiceConfigListResult response = api.serviceConfigBatchOperation(body);

        // TODO: test validations
    }
    /**
     * Update service config
     *
     * Updates the specified ServiceConfig. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateServiceConfigTest() throws ApiException {
        ServiceConfig body = null;
        String configSetId = null;
        ServiceConfig response = api.updateServiceConfig(body, configSetId);

        // TODO: test validations
    }
}
