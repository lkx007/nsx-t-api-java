/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.AlarmListResult;
import io.swagger.client.model.ApiError;
import io.swagger.client.model.ApplianceManagementTaskListResult;
import io.swagger.client.model.ApplianceManagementTaskProperties;
import io.swagger.client.model.AuditLogListResult;
import io.swagger.client.model.AuditLogRequest;
import io.swagger.client.model.CertificateKeyPair;
import io.swagger.client.model.ControllerProfilerProperties;
import io.swagger.client.model.CopyFromRemoteFileProperties;
import io.swagger.client.model.CopyToRemoteFileProperties;
import io.swagger.client.model.CreateRemoteDirectoryProperties;
import io.swagger.client.model.FileProperties;
import io.swagger.client.model.FilePropertiesListResult;
import io.swagger.client.model.FileThumbprint;
import io.swagger.client.model.KnownHostParameter;
import io.swagger.client.model.MandatoryAccessControlProperties;
import io.swagger.client.model.NodeAuthProviderVidmProperties;
import io.swagger.client.model.NodeAuthProviderVidmStatus;
import io.swagger.client.model.NodeHttpServiceProperties;
import io.swagger.client.model.NodeInstallUpgradeServiceProperties;
import io.swagger.client.model.NodeInterfaceStatisticsProperties;
import io.swagger.client.model.NodeNameServersProperties;
import io.swagger.client.model.NodeNetworkInterfaceProperties;
import io.swagger.client.model.NodeNetworkInterfacePropertiesListResult;
import io.swagger.client.model.NodeNetworkProperties;
import io.swagger.client.model.NodeNtpServiceProperties;
import io.swagger.client.model.NodePolicyServiceProperties;
import io.swagger.client.model.NodeProcessProperties;
import io.swagger.client.model.NodeProcessPropertiesListResult;
import io.swagger.client.model.NodeProperties;
import io.swagger.client.model.NodeProtonServiceProperties;
import io.swagger.client.model.NodeRouteProperties;
import io.swagger.client.model.NodeRoutePropertiesListResult;
import io.swagger.client.model.NodeSearchDomainsProperties;
import io.swagger.client.model.NodeServiceProperties;
import io.swagger.client.model.NodeServicePropertiesListResult;
import io.swagger.client.model.NodeServiceStatusProperties;
import io.swagger.client.model.NodeSnmpServiceProperties;
import io.swagger.client.model.NodeSnmpV3EngineID;
import io.swagger.client.model.NodeSshServiceProperties;
import io.swagger.client.model.NodeStatusProperties;
import io.swagger.client.model.NodeSyslogExporterProperties;
import io.swagger.client.model.NodeSyslogExporterPropertiesListResult;
import io.swagger.client.model.NodeUserProperties;
import io.swagger.client.model.NodeUserPropertiesListResult;
import io.swagger.client.model.NodeVersion;
import io.swagger.client.model.PortStatus;
import io.swagger.client.model.SshKeyBaseProperties;
import io.swagger.client.model.SshKeyProperties;
import io.swagger.client.model.SshKeyPropertiesListResult;
import io.swagger.client.model.SupportBundleRequest;
import io.swagger.client.model.SupportBundleResult;
import io.swagger.client.model.UcStateProperties;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ManagementPlaneApiNsxComponentAdministrationApplianceManagementApi
 */
@Ignore
public class ManagementPlaneApiNsxComponentAdministrationApplianceManagementApiTest {

    private final ManagementPlaneApiNsxComponentAdministrationApplianceManagementApi api = new ManagementPlaneApiNsxComponentAdministrationApplianceManagementApi();

    /**
     * Add SSH public key to authorized_keys file for node user
     *
     * Add SSH public key to authorized_keys file for node user
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addNodeUserSshKeyAddSshKeyTest() throws ApiException {
        SshKeyProperties body = null;
        String userid = null;
        api.addNodeUserSshKeyAddSshKey(body, userid);

        // TODO: test validations
    }
    /**
     * Cancel specified task
     *
     * Cancel specified task
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void cancelApplianceManagementTaskCancelTest() throws ApiException {
        String taskId = null;
        api.cancelApplianceManagementTaskCancel(taskId);

        // TODO: test validations
    }
    /**
     * Check if RabbitMQ management port is enabled or not
     *
     * Returns status as true if RabbitMQ management port is enabled else false
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void checkRabbitMQManagementPortTest() throws ApiException {
        PortStatus response = api.checkRabbitMQManagementPort();

        // TODO: test validations
    }
    /**
     * Collect alarms from all NSX nodes
     *
     * This API is executed on a manager node to return current alarms from all NSX nodes. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void collectAlarmsTest() throws ApiException {
        Long cursor = null;
        String fields = null;
        Long pageSize = null;
        AlarmListResult response = api.collectAlarms(cursor, fields, pageSize);

        // TODO: test validations
    }
    /**
     * Collect audit logs from registered manager nodes
     *
     * This API is executed on a manager node to display audit logs from all nodes inside the management plane cluster. An audit log collection will be triggered if the local master audit log is outdated. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void collectAuditLogsTest() throws ApiException {
        AuditLogRequest body = null;
        Long cursor = null;
        String fields = null;
        Long pageSize = null;
        AuditLogListResult response = api.collectAuditLogs(body, cursor, fields, pageSize);

        // TODO: test validations
    }
    /**
     * Collect support bundles from registered cluster and fabric nodes
     *
     * Collect support bundles from registered cluster and fabric nodes.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void collectSupportBundlesCollectTest() throws ApiException {
        SupportBundleRequest body = null;
        Boolean overrideAsyncResponse = null;
        Boolean requireDeleteOrOverrideAsyncResponse = null;
        SupportBundleResult response = api.collectSupportBundlesCollect(body, overrideAsyncResponse, requireDeleteOrOverrideAsyncResponse);

        // TODO: test validations
    }
    /**
     * Copy a remote file to the file store
     *
     * Copy a remote file to the file store. If you use scp or sftp, you must provide the remote server&#x27;s SSH fingerprint. See the &lt;i&gt;NSX-T Administration Guide&lt;/i&gt; for information and instructions about finding the SSH fingerprint. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void copyFromRemoteFileCopyFromRemoteFileTest() throws ApiException {
        CopyFromRemoteFileProperties body = null;
        String fileName = null;
        FileProperties response = api.copyFromRemoteFileCopyFromRemoteFile(body, fileName);

        // TODO: test validations
    }
    /**
     * Copy file in the file store to a remote file store
     *
     * Copy a file in the file store to a remote server. If you use scp or sftp, you must provide the remote server&#x27;s SSH fingerprint. See the &lt;i&gt;NSX-T Administration Guide&lt;/i&gt; for information and instructions about finding the SSH fingerprint. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void copyToRemoteFileCopyToRemoteFileTest() throws ApiException {
        CopyToRemoteFileProperties body = null;
        String fileName = null;
        api.copyToRemoteFileCopyToRemoteFile(body, fileName);

        // TODO: test validations
    }
    /**
     * Restart the node management service
     *
     * Restart the node management service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createApplianceManagementServiceActionRestartTest() throws ApiException {
        api.createApplianceManagementServiceActionRestart();

        // TODO: test validations
    }
    /**
     * Restart, start or stop the cluster boot manager service
     *
     * Restart, start or stop the cluster boot manager service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createClusterBootManagerServiceActionRestartTest() throws ApiException {
        NodeServiceStatusProperties response = api.createClusterBootManagerServiceActionRestart();

        // TODO: test validations
    }
    /**
     * Restart, start or stop the cluster boot manager service
     *
     * Restart, start or stop the cluster boot manager service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createClusterBootManagerServiceActionStartTest() throws ApiException {
        NodeServiceStatusProperties response = api.createClusterBootManagerServiceActionStart();

        // TODO: test validations
    }
    /**
     * Restart, start or stop the cluster boot manager service
     *
     * Restart, start or stop the cluster boot manager service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createClusterBootManagerServiceActionStopTest() throws ApiException {
        NodeServiceStatusProperties response = api.createClusterBootManagerServiceActionStop();

        // TODO: test validations
    }
    /**
     * Restart, start or stop the manager service
     *
     * Restart, start or stop the manager service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createCminventoryServiceActionRestartTest() throws ApiException {
        NodeServiceStatusProperties response = api.createCminventoryServiceActionRestart();

        // TODO: test validations
    }
    /**
     * Restart, start or stop the manager service
     *
     * Restart, start or stop the manager service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createCminventoryServiceActionStartTest() throws ApiException {
        NodeServiceStatusProperties response = api.createCminventoryServiceActionStart();

        // TODO: test validations
    }
    /**
     * Restart, start or stop the manager service
     *
     * Restart, start or stop the manager service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createCminventoryServiceActionStopTest() throws ApiException {
        NodeServiceStatusProperties response = api.createCminventoryServiceActionStop();

        // TODO: test validations
    }
    /**
     * Restart, start or stop the controller service
     *
     * Restart, start or stop the controller service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createControllerServerServiceActionRestartTest() throws ApiException {
        NodeServiceStatusProperties response = api.createControllerServerServiceActionRestart();

        // TODO: test validations
    }
    /**
     * Restart, start or stop the controller service
     *
     * Restart, start or stop the controller service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createControllerServerServiceActionStartTest() throws ApiException {
        NodeServiceStatusProperties response = api.createControllerServerServiceActionStart();

        // TODO: test validations
    }
    /**
     * Restart, start or stop the controller service
     *
     * Restart, start or stop the controller service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createControllerServerServiceActionStopTest() throws ApiException {
        NodeServiceStatusProperties response = api.createControllerServerServiceActionStop();

        // TODO: test validations
    }
    /**
     * Upload a file to the file store
     *
     * When you issue this API, the client must specify: - HTTP header Content-Type:application/octet-stream. - Request body with the contents of the file in the filestore. In the CLI, you can view the filestore with the &lt;em&gt;get files&lt;/em&gt; command. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createFileTest() throws ApiException {
        String fileName = null;
        FileProperties response = api.createFile(fileName);

        // TODO: test validations
    }
    /**
     * Restart, start or stop the liagent service
     *
     * Restart, start or stop the liagent service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createLiagentServiceActionRestartTest() throws ApiException {
        NodeServiceStatusProperties response = api.createLiagentServiceActionRestart();

        // TODO: test validations
    }
    /**
     * Restart, start or stop the liagent service
     *
     * Restart, start or stop the liagent service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createLiagentServiceActionStartTest() throws ApiException {
        NodeServiceStatusProperties response = api.createLiagentServiceActionStart();

        // TODO: test validations
    }
    /**
     * Restart, start or stop the liagent service
     *
     * Restart, start or stop the liagent service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createLiagentServiceActionStopTest() throws ApiException {
        NodeServiceStatusProperties response = api.createLiagentServiceActionStop();

        // TODO: test validations
    }
    /**
     * Restart, start or stop the migration coordinator service
     *
     * Restart, start or stop the migration coordinator service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createMigrationCoordinatorServiceActionRestartTest() throws ApiException {
        NodeServiceStatusProperties response = api.createMigrationCoordinatorServiceActionRestart();

        // TODO: test validations
    }
    /**
     * Restart, start or stop the migration coordinator service
     *
     * Restart, start or stop the migration coordinator service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createMigrationCoordinatorServiceActionStartTest() throws ApiException {
        NodeServiceStatusProperties response = api.createMigrationCoordinatorServiceActionStart();

        // TODO: test validations
    }
    /**
     * Restart, start or stop the migration coordinator service
     *
     * Restart, start or stop the migration coordinator service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createMigrationCoordinatorServiceActionStopTest() throws ApiException {
        NodeServiceStatusProperties response = api.createMigrationCoordinatorServiceActionStop();

        // TODO: test validations
    }
    /**
     * Restart, start or stop the NSX Message Bus service
     *
     * Restart, start or stop the NSX Message Bus service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNSXMessageBusServiceActionRestartTest() throws ApiException {
        NodeServiceStatusProperties response = api.createNSXMessageBusServiceActionRestart();

        // TODO: test validations
    }
    /**
     * Restart, start or stop the NSX Message Bus service
     *
     * Restart, start or stop the NSX Message Bus service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNSXMessageBusServiceActionStartTest() throws ApiException {
        NodeServiceStatusProperties response = api.createNSXMessageBusServiceActionStart();

        // TODO: test validations
    }
    /**
     * Restart, start or stop the NSX Message Bus service
     *
     * Restart, start or stop the NSX Message Bus service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNSXMessageBusServiceActionStopTest() throws ApiException {
        NodeServiceStatusProperties response = api.createNSXMessageBusServiceActionStop();

        // TODO: test validations
    }
    /**
     * Restart, start or stop the NTP service
     *
     * Restart, start or stop the NTP service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNTPServiceActionRestartTest() throws ApiException {
        NodeServiceStatusProperties response = api.createNTPServiceActionRestart();

        // TODO: test validations
    }
    /**
     * Restart, start or stop the NTP service
     *
     * Restart, start or stop the NTP service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNTPServiceActionStartTest() throws ApiException {
        NodeServiceStatusProperties response = api.createNTPServiceActionStart();

        // TODO: test validations
    }
    /**
     * Restart, start or stop the NTP service
     *
     * Restart, start or stop the NTP service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNTPServiceActionStopTest() throws ApiException {
        NodeServiceStatusProperties response = api.createNTPServiceActionStop();

        // TODO: test validations
    }
    /**
     * Create node network route
     *
     * Add a route to the NSX Manager routing table. For static routes, the route_type, interface_id, netmask, and destination are required parameters. For default routes, the route_type, gateway address, and interface_id are required. For blackhole routes, the route_type and destination are required. All other parameters are optional. When you add a static route, the scope and route_id are created automatically. When you add a default or blackhole route, the route_id is created automatically. The route_id is read-only, meaning that it cannot be modified. All other properties can be modified by deleting and readding the route. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNodeNetworkRouteTest() throws ApiException {
        NodeRouteProperties body = null;
        NodeRouteProperties response = api.createNodeNetworkRoute(body);

        // TODO: test validations
    }
    /**
     * Restart, start or stop the NSX node-stats service
     *
     * Restart, start or stop the NSX node-stats service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNodeStatsServiceActionRestartTest() throws ApiException {
        NodeServiceStatusProperties response = api.createNodeStatsServiceActionRestart();

        // TODO: test validations
    }
    /**
     * Restart, start or stop the NSX node-stats service
     *
     * Restart, start or stop the NSX node-stats service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNodeStatsServiceActionStartTest() throws ApiException {
        NodeServiceStatusProperties response = api.createNodeStatsServiceActionStart();

        // TODO: test validations
    }
    /**
     * Restart, start or stop the NSX node-stats service
     *
     * Restart, start or stop the NSX node-stats service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNodeStatsServiceActionStopTest() throws ApiException {
        NodeServiceStatusProperties response = api.createNodeStatsServiceActionStop();

        // TODO: test validations
    }
    /**
     * Restart, Start and Stop the ui service
     *
     * Restart, Start and Stop the ui service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNsxUiServiceServiceActionRestartTest() throws ApiException {
        NodeServiceStatusProperties response = api.createNsxUiServiceServiceActionRestart();

        // TODO: test validations
    }
    /**
     * Restart, Start and Stop the ui service
     *
     * Restart, Start and Stop the ui service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNsxUiServiceServiceActionStartTest() throws ApiException {
        NodeServiceStatusProperties response = api.createNsxUiServiceServiceActionStart();

        // TODO: test validations
    }
    /**
     * Restart, Start and Stop the ui service
     *
     * Restart, Start and Stop the ui service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNsxUiServiceServiceActionStopTest() throws ApiException {
        NodeServiceStatusProperties response = api.createNsxUiServiceServiceActionStop();

        // TODO: test validations
    }
    /**
     * Restart, start or stop the NSX upgrade agent service
     *
     * Restart, start or stop the NSX upgrade agent service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNsxUpgradeAgentServiceActionRestartTest() throws ApiException {
        NodeServiceStatusProperties response = api.createNsxUpgradeAgentServiceActionRestart();

        // TODO: test validations
    }
    /**
     * Restart, start or stop the NSX upgrade agent service
     *
     * Restart, start or stop the NSX upgrade agent service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNsxUpgradeAgentServiceActionStartTest() throws ApiException {
        NodeServiceStatusProperties response = api.createNsxUpgradeAgentServiceActionStart();

        // TODO: test validations
    }
    /**
     * Restart, start or stop the NSX upgrade agent service
     *
     * Restart, start or stop the NSX upgrade agent service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNsxUpgradeAgentServiceActionStopTest() throws ApiException {
        NodeServiceStatusProperties response = api.createNsxUpgradeAgentServiceActionStop();

        // TODO: test validations
    }
    /**
     * Restart, start or stop Telemetry service
     *
     * Restart, start or stop Telemetry service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPhonehomeCoordinatorServiceActionRestartTest() throws ApiException {
        NodeServiceStatusProperties response = api.createPhonehomeCoordinatorServiceActionRestart();

        // TODO: test validations
    }
    /**
     * Restart, start or stop Telemetry service
     *
     * Restart, start or stop Telemetry service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPhonehomeCoordinatorServiceActionStartTest() throws ApiException {
        NodeServiceStatusProperties response = api.createPhonehomeCoordinatorServiceActionStart();

        // TODO: test validations
    }
    /**
     * Restart, start or stop Telemetry service
     *
     * Restart, start or stop Telemetry service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPhonehomeCoordinatorServiceActionStopTest() throws ApiException {
        NodeServiceStatusProperties response = api.createPhonehomeCoordinatorServiceActionStop();

        // TODO: test validations
    }
    /**
     * Restart, start or stop the NSX Platform Client service
     *
     * Restart, start or stop the NSX Platform Client service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPlatformClientServiceActionRestartTest() throws ApiException {
        NodeServiceStatusProperties response = api.createPlatformClientServiceActionRestart();

        // TODO: test validations
    }
    /**
     * Restart, start or stop the NSX Platform Client service
     *
     * Restart, start or stop the NSX Platform Client service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPlatformClientServiceActionStartTest() throws ApiException {
        NodeServiceStatusProperties response = api.createPlatformClientServiceActionStart();

        // TODO: test validations
    }
    /**
     * Restart, start or stop the NSX Platform Client service
     *
     * Restart, start or stop the NSX Platform Client service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPlatformClientServiceActionStopTest() throws ApiException {
        NodeServiceStatusProperties response = api.createPlatformClientServiceActionStop();

        // TODO: test validations
    }
    /**
     * Restart, start or stop the service
     *
     * Restart, start or stop the service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPolicyServiceActionRestartTest() throws ApiException {
        NodeServiceStatusProperties response = api.createPolicyServiceActionRestart();

        // TODO: test validations
    }
    /**
     * Restart, start or stop the service
     *
     * Restart, start or stop the service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPolicyServiceActionStartTest() throws ApiException {
        NodeServiceStatusProperties response = api.createPolicyServiceActionStart();

        // TODO: test validations
    }
    /**
     * Restart, start or stop the service
     *
     * Restart, start or stop the service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPolicyServiceActionStopTest() throws ApiException {
        NodeServiceStatusProperties response = api.createPolicyServiceActionStop();

        // TODO: test validations
    }
    /**
     * Restart, start or stop the service
     *
     * Restart, start or stop the service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createProtonServiceActionRestartTest() throws ApiException {
        NodeServiceStatusProperties response = api.createProtonServiceActionRestart();

        // TODO: test validations
    }
    /**
     * Restart, start or stop the service
     *
     * Restart, start or stop the service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createProtonServiceActionStartTest() throws ApiException {
        NodeServiceStatusProperties response = api.createProtonServiceActionStart();

        // TODO: test validations
    }
    /**
     * Restart, start or stop the service
     *
     * Restart, start or stop the service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createProtonServiceActionStopTest() throws ApiException {
        NodeServiceStatusProperties response = api.createProtonServiceActionStop();

        // TODO: test validations
    }
    /**
     * Restart the http service
     *
     * Restart the http service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createProxyServiceActionRestartTest() throws ApiException {
        api.createProxyServiceActionRestart();

        // TODO: test validations
    }
    /**
     * Start the http service
     *
     * Start the http service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createProxyServiceActionStartTest() throws ApiException {
        NodeServiceStatusProperties response = api.createProxyServiceActionStart();

        // TODO: test validations
    }
    /**
     * Stop the http service
     *
     * Stop the http service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createProxyServiceActionStopTest() throws ApiException {
        api.createProxyServiceActionStop();

        // TODO: test validations
    }
    /**
     * Update http service certificate
     *
     * Applies a security certificate to the http service. In the POST request, the CERTIFICATE_ID references a certificate created with the /api/v1/trust-management APIs. Issuing this request causes the http service to restart so that the service can begin using the new certificate. When the POST request succeeds, it doesn&#x27;t return a valid response. The request times out because of the restart. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createProxyServiceApplyCertificateActionApplyCertificateTest() throws ApiException {
        String certificateId = null;
        api.createProxyServiceApplyCertificateActionApplyCertificate(certificateId);

        // TODO: test validations
    }
    /**
     * Restart, start or stop the Rabbit MQ service
     *
     * Restart, start or stop the Rabbit MQ service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createRabbitMQServiceActionRestartTest() throws ApiException {
        NodeServiceStatusProperties response = api.createRabbitMQServiceActionRestart();

        // TODO: test validations
    }
    /**
     * Restart, start or stop the Rabbit MQ service
     *
     * Restart, start or stop the Rabbit MQ service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createRabbitMQServiceActionStartTest() throws ApiException {
        NodeServiceStatusProperties response = api.createRabbitMQServiceActionStart();

        // TODO: test validations
    }
    /**
     * Restart, start or stop the Rabbit MQ service
     *
     * Restart, start or stop the Rabbit MQ service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createRabbitMQServiceActionStopTest() throws ApiException {
        NodeServiceStatusProperties response = api.createRabbitMQServiceActionStop();

        // TODO: test validations
    }
    /**
     * Create directory in remote file server
     *
     * Create a directory on the remote remote server. Supports only SFTP. You must provide the remote server&#x27;s SSH fingerprint. See the &lt;i&gt;NSX Administration Guide&lt;/i&gt; for information and instructions about finding the SSH fingerprint. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createRemoteDirectoryCreateRemoteDirectoryTest() throws ApiException {
        CreateRemoteDirectoryProperties body = null;
        api.createRemoteDirectoryCreateRemoteDirectory(body);

        // TODO: test validations
    }
    /**
     * Restart, start or stop the NSX install-upgrade service
     *
     * Restart, start or stop the NSX install-upgrade service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createRepositoryServiceActionRestartTest() throws ApiException {
        NodeServiceStatusProperties response = api.createRepositoryServiceActionRestart();

        // TODO: test validations
    }
    /**
     * Restart, start or stop the NSX install-upgrade service
     *
     * Restart, start or stop the NSX install-upgrade service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createRepositoryServiceActionStartTest() throws ApiException {
        NodeServiceStatusProperties response = api.createRepositoryServiceActionStart();

        // TODO: test validations
    }
    /**
     * Restart, start or stop the NSX install-upgrade service
     *
     * Restart, start or stop the NSX install-upgrade service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createRepositoryServiceActionStopTest() throws ApiException {
        NodeServiceStatusProperties response = api.createRepositoryServiceActionStop();

        // TODO: test validations
    }
    /**
     * Restart, start or stop the SNMP service
     *
     * Restart, start or stop the SNMP service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSNMPServiceActionRestartTest() throws ApiException {
        NodeServiceStatusProperties response = api.createSNMPServiceActionRestart();

        // TODO: test validations
    }
    /**
     * Restart, start or stop the SNMP service
     *
     * Restart, start or stop the SNMP service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSNMPServiceActionStartTest() throws ApiException {
        NodeServiceStatusProperties response = api.createSNMPServiceActionStart();

        // TODO: test validations
    }
    /**
     * Restart, start or stop the SNMP service
     *
     * Restart, start or stop the SNMP service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSNMPServiceActionStopTest() throws ApiException {
        NodeServiceStatusProperties response = api.createSNMPServiceActionStop();

        // TODO: test validations
    }
    /**
     * Restart, start or stop the ssh service
     *
     * Restart, start or stop the ssh service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSSHServiceActionNotifyMpaRestartTest() throws ApiException {
        NodeServiceStatusProperties response = api.createSSHServiceActionNotifyMpaRestart();

        // TODO: test validations
    }
    /**
     * Restart, start or stop the ssh service
     *
     * Restart, start or stop the ssh service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSSHServiceActionNotifyMpaStartTest() throws ApiException {
        NodeServiceStatusProperties response = api.createSSHServiceActionNotifyMpaStart();

        // TODO: test validations
    }
    /**
     * Restart, start or stop the ssh service
     *
     * Restart, start or stop the ssh service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSSHServiceActionNotifyMpaStopTest() throws ApiException {
        NodeServiceStatusProperties response = api.createSSHServiceActionNotifyMpaStop();

        // TODO: test validations
    }
    /**
     * Restart, start or stop the ssh service
     *
     * Restart, start or stop the ssh service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSSHServiceActionRestartTest() throws ApiException {
        NodeServiceStatusProperties response = api.createSSHServiceActionRestart();

        // TODO: test validations
    }
    /**
     * Restart, start or stop the ssh service
     *
     * Restart, start or stop the ssh service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSSHServiceActionStartTest() throws ApiException {
        NodeServiceStatusProperties response = api.createSSHServiceActionStart();

        // TODO: test validations
    }
    /**
     * Restart, start or stop the ssh service
     *
     * Restart, start or stop the ssh service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSSHServiceActionStopTest() throws ApiException {
        NodeServiceStatusProperties response = api.createSSHServiceActionStop();

        // TODO: test validations
    }
    /**
     * Remove a host&#x27;s fingerprint from known hosts file
     *
     * Remove a host&#x27;s fingerprint from known hosts file
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSSHServiceRemoveHostFingerprintActionRemoveHostFingerprintTest() throws ApiException {
        KnownHostParameter body = null;
        api.createSSHServiceRemoveHostFingerprintActionRemoveHostFingerprint(body);

        // TODO: test validations
    }
    /**
     * Restart, start or stop the NSX Search service
     *
     * Restart, start or stop the NSX Search service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSearchServiceActionRestartTest() throws ApiException {
        NodeServiceStatusProperties response = api.createSearchServiceActionRestart();

        // TODO: test validations
    }
    /**
     * Restart, start or stop the NSX Search service
     *
     * Restart, start or stop the NSX Search service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSearchServiceActionStartTest() throws ApiException {
        NodeServiceStatusProperties response = api.createSearchServiceActionStart();

        // TODO: test validations
    }
    /**
     * Restart, start or stop the NSX Search service
     *
     * Restart, start or stop the NSX Search service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSearchServiceActionStopTest() throws ApiException {
        NodeServiceStatusProperties response = api.createSearchServiceActionStop();

        // TODO: test validations
    }
    /**
     * Restart, start or stop the syslog service
     *
     * Restart, start or stop the syslog service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSyslogServiceActionRestartTest() throws ApiException {
        NodeServiceStatusProperties response = api.createSyslogServiceActionRestart();

        // TODO: test validations
    }
    /**
     * Restart, start or stop the syslog service
     *
     * Restart, start or stop the syslog service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSyslogServiceActionStartTest() throws ApiException {
        NodeServiceStatusProperties response = api.createSyslogServiceActionStart();

        // TODO: test validations
    }
    /**
     * Restart, start or stop the syslog service
     *
     * Restart, start or stop the syslog service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSyslogServiceActionStopTest() throws ApiException {
        NodeServiceStatusProperties response = api.createSyslogServiceActionStop();

        // TODO: test validations
    }
    /**
     * Delete RabbitMQ management port
     *
     * Delete RabbitMQ management port
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void dELETERabbitMQManagementPortTest() throws ApiException {
        api.dELETERabbitMQManagementPort();

        // TODO: test validations
    }
    /**
     * Delete task
     *
     * Delete task
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteApplianceManagementTaskTest() throws ApiException {
        String taskId = null;
        api.deleteApplianceManagementTask(taskId);

        // TODO: test validations
    }
    /**
     * Delete file
     *
     * Delete file
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteFileTest() throws ApiException {
        String fileName = null;
        api.deleteFile(fileName);

        // TODO: test validations
    }
    /**
     * Delete node network route
     *
     * Delete a route from the NSX Manager routing table. You can modify an existing route by deleting it and then posting the modified version of the route. To verify, remove the route ID from the URI, issue a GET request, and note the absense of the deleted route. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNodeNetworkRouteTest() throws ApiException {
        String routeId = null;
        api.deleteNodeNetworkRoute(routeId);

        // TODO: test validations
    }
    /**
     * Delete node syslog exporter
     *
     * Removes a specified rule from the collection of syslog exporter rules. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNodeSyslogExporterTest() throws ApiException {
        String exporterName = null;
        api.deleteNodeSyslogExporter(exporterName);

        // TODO: test validations
    }
    /**
     * Remove SSH public key from authorized_keys file for node user
     *
     * Remove SSH public key from authorized_keys file for node user
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNodeUserSshKeyRemoveSshKeyTest() throws ApiException {
        SshKeyBaseProperties body = null;
        String userid = null;
        api.deleteNodeUserSshKeyRemoveSshKey(body, userid);

        // TODO: test validations
    }
    /**
     * Delete existing support bundles waiting to be downloaded
     *
     * Delete existing support bundles waiting to be downloaded.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSupportBundlesAsyncResponseDeleteAsyncResponseTest() throws ApiException {
        api.deleteSupportBundlesAsyncResponseDeleteAsyncResponse();

        // TODO: test validations
    }
    /**
     * Get the status (Enabled/Disabled) of controller profiler
     *
     * Get the status (Enabled/Disabled) of controller profiler
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getControllerProfilerStatusTest() throws ApiException {
        ControllerProfilerProperties response = api.getControllerProfilerStatus();

        // TODO: test validations
    }
    /**
     * Gets the enable status for Mandatory Access Control
     *
     * Gets the enable status for Mandatory Access Control
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNodeMandatoryAccessControlTest() throws ApiException {
        MandatoryAccessControlProperties response = api.getNodeMandatoryAccessControl();

        // TODO: test validations
    }
    /**
     * Get the report for Mandatory Access Control
     *
     * Get the report for Mandatory Access Control
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNodeMandatoryAccessControlReportTest() throws ApiException {
        api.getNodeMandatoryAccessControlReport();

        // TODO: test validations
    }
    /**
     * Invoke DELETE request on target cluster node
     *
     * Invoke DELETE request on target cluster node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void invokeDeleteClusterCentralAPITest() throws ApiException {
        String targetNodeId = null;
        String targetUri = null;
        api.invokeDeleteClusterCentralAPI(targetNodeId, targetUri);

        // TODO: test validations
    }
    /**
     * Invoke DELETE request on target fabric node
     *
     * Invoke DELETE request on target fabric node. This api is deprecated as part of FN+TN unification. Please use Transport Node API DELETE /transport-nodes/&amp;lt;transport-node-id&amp;gt;/&amp;lt;target-node-id&amp;gt;/&amp;lt;target-uri&amp;gt; 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void invokeDeleteFabricCentralAPITest() throws ApiException {
        String targetNodeId = null;
        String targetUri = null;
        api.invokeDeleteFabricCentralAPI(targetNodeId, targetUri);

        // TODO: test validations
    }
    /**
     * Invoke DELETE request on target transport node
     *
     * Invoke DELETE request on target transport node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void invokeDeleteTransportNodeCentralAPITest() throws ApiException {
        String targetNodeId = null;
        String targetUri = null;
        api.invokeDeleteTransportNodeCentralAPI(targetNodeId, targetUri);

        // TODO: test validations
    }
    /**
     * Invoke GET request on target cluster node
     *
     * Invoke GET request on target cluster node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void invokeGetClusterCentralAPITest() throws ApiException {
        String targetNodeId = null;
        String targetUri = null;
        api.invokeGetClusterCentralAPI(targetNodeId, targetUri);

        // TODO: test validations
    }
    /**
     * Invoke GET request on target fabric node
     *
     * Invoke GET request on target fabric node. This api is deprecated as part of FN+TN unification. Please use Transport Node API GET /transport-nodes/&amp;lt;transport-node-id&amp;gt;/&amp;lt;target-node-id&amp;gt;/&amp;lt;target-uri&amp;gt; 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void invokeGetFabricCentralAPITest() throws ApiException {
        String targetNodeId = null;
        String targetUri = null;
        api.invokeGetFabricCentralAPI(targetNodeId, targetUri);

        // TODO: test validations
    }
    /**
     * Invoke GET request on target transport node
     *
     * Invoke GET request on target transport node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void invokeGetTransportNodeCentralAPITest() throws ApiException {
        String targetNodeId = null;
        String targetUri = null;
        api.invokeGetTransportNodeCentralAPI(targetNodeId, targetUri);

        // TODO: test validations
    }
    /**
     * Invoke POST request on target cluster node
     *
     * Invoke POST request on target cluster node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void invokePostClusterCentralAPITest() throws ApiException {
        String targetNodeId = null;
        String targetUri = null;
        api.invokePostClusterCentralAPI(targetNodeId, targetUri);

        // TODO: test validations
    }
    /**
     * Invoke POST request on target fabric node
     *
     * Invoke POST request on target fabric node. This api is deprecated as part of FN+TN unification. Please use Transport Node API POST /transport-nodes/&amp;lt;transport-node-id&amp;gt;/&amp;lt;target-node-id&amp;gt;/&amp;lt;target-uri&amp;gt; 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void invokePostFabricCentralAPITest() throws ApiException {
        String targetNodeId = null;
        String targetUri = null;
        api.invokePostFabricCentralAPI(targetNodeId, targetUri);

        // TODO: test validations
    }
    /**
     * Invoke POST request on target transport node
     *
     * Invoke POST request on target transport node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void invokePostTransportNodeCentralAPITest() throws ApiException {
        String targetNodeId = null;
        String targetUri = null;
        api.invokePostTransportNodeCentralAPI(targetNodeId, targetUri);

        // TODO: test validations
    }
    /**
     * Invoke PUT request on target cluster node
     *
     * Invoke PUT request on target cluster node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void invokePutClusterCentralAPITest() throws ApiException {
        String targetNodeId = null;
        String targetUri = null;
        api.invokePutClusterCentralAPI(targetNodeId, targetUri);

        // TODO: test validations
    }
    /**
     * Invoke PUT request on target fabric node
     *
     * Invoke PUT request on target fabric node. This api is deprecated as part of FN+TN unification. Please use Transport Node API PUT /transport-nodes/&amp;lt;transport-node-id&amp;gt;/&amp;lt;target-node-id&amp;gt;/&amp;lt;target-uri&amp;gt; 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void invokePutFabricCentralAPITest() throws ApiException {
        String targetNodeId = null;
        String targetUri = null;
        api.invokePutFabricCentralAPI(targetNodeId, targetUri);

        // TODO: test validations
    }
    /**
     * Invoke PUT request on target transport node
     *
     * Invoke PUT request on target transport node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void invokePutTransportNodeCentralAPITest() throws ApiException {
        String targetNodeId = null;
        String targetUri = null;
        api.invokePutTransportNodeCentralAPI(targetNodeId, targetUri);

        // TODO: test validations
    }
    /**
     * List appliance management tasks
     *
     * List appliance management tasks
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listApplianceManagementTasksTest() throws ApiException {
        String fields = null;
        String requestMethod = null;
        String requestPath = null;
        String requestUri = null;
        String status = null;
        String user = null;
        ApplianceManagementTaskListResult response = api.listApplianceManagementTasks(fields, requestMethod, requestPath, requestUri, status, user);

        // TODO: test validations
    }
    /**
     * List node files
     *
     * List node files
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listFilesTest() throws ApiException {
        FilePropertiesListResult response = api.listFiles();

        // TODO: test validations
    }
    /**
     * List the NSX Manager&#x27;s Network Interfaces
     *
     * Returns the number of interfaces on the NSX Manager appliance and detailed information about each interface. Interface information includes MTU, broadcast and host IP addresses, link and admin status, MAC address, network mask, and the IP configuration method (static or DHCP). 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listNodeInterfacesTest() throws ApiException {
        NodeNetworkInterfacePropertiesListResult response = api.listNodeInterfaces();

        // TODO: test validations
    }
    /**
     * List node network routes
     *
     * Returns detailed information about each route in the NSX Manager routing table. Route information includes the route type (default, static, and so on), a unique route identifier, the route metric, the protocol from which the route was learned, the route source (which is the preferred egress interface), the route destination, and the route scope. The route scope refers to the distance to the destination network: The \&quot;host\&quot; scope leads to a destination address on the NSX Manager, such as a loopback address; the \&quot;link\&quot; scope leads to a destination on the local network; and the \&quot;global\&quot; scope leads to addresses that are more than one hop away. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listNodeNetworkRoutesTest() throws ApiException {
        NodeRoutePropertiesListResult response = api.listNodeNetworkRoutes();

        // TODO: test validations
    }
    /**
     * List node processes
     *
     * Returns the number of processes and information about each process. Process information includes 1) mem_resident, which is roughly equivalent to the amount of RAM, in bytes, currently used by the process, 2) parent process ID (ppid), 3) process name, 4) process up time in milliseconds, 5) mem_used, wich is the amount of virtual memory used by the process, in bytes, 6) process start time, in milliseconds since epoch, 7) process ID (pid), 8) CPU time, both user and the system, consumed by the process in milliseconds. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listNodeProcessesTest() throws ApiException {
        NodeProcessPropertiesListResult response = api.listNodeProcesses();

        // TODO: test validations
    }
    /**
     * List node services
     *
     * Returns a list of all services available on the NSX Manager applicance. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listNodeServicesTest() throws ApiException {
        NodeServicePropertiesListResult response = api.listNodeServices();

        // TODO: test validations
    }
    /**
     * List node syslog exporters
     *
     * Returns the collection of registered syslog exporter rules, if any. The rules specify the collector IP address and port, and the protocol to use. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listNodeSyslogExportersTest() throws ApiException {
        NodeSyslogExporterPropertiesListResult response = api.listNodeSyslogExporters();

        // TODO: test validations
    }
    /**
     * List SSH keys from authorized_keys file for node user
     *
     * Returns a list of all SSH keys from authorized_keys file for node user 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listNodeUserSshKeysTest() throws ApiException {
        String userid = null;
        SshKeyPropertiesListResult response = api.listNodeUserSshKeys(userid);

        // TODO: test validations
    }
    /**
     * List node users
     *
     * Returns the list of users configued to log in to the NSX appliance. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listNodeUsersTest() throws ApiException {
        NodeUserPropertiesListResult response = api.listNodeUsers();

        // TODO: test validations
    }
    /**
     * Add node syslog exporter
     *
     * Adds a rule for exporting syslog information to a specified server. The required parameters are the rule name (exporter_name); severity level (emerg, alert, crit, and so on); transmission protocol (TCP or UDP); and server IP address or hostname. The optional parameters are the syslog port number, which can be 1 through 65,535 (514, by default); facility level to use when logging messages to syslog (kern, user, mail, and so on); and message IDs (msgids), which identify the types of messages to export. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postNodeSyslogExporterTest() throws ApiException {
        NodeSyslogExporterProperties body = null;
        NodeSyslogExporterProperties response = api.postNodeSyslogExporter(body);

        // TODO: test validations
    }
    /**
     * Read appliance management service properties
     *
     * Read appliance management service properties
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readApplianceManagementServiceTest() throws ApiException {
        NodeServiceProperties response = api.readApplianceManagementService();

        // TODO: test validations
    }
    /**
     * Read appliance management service status
     *
     * Read appliance management service status
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readApplianceManagementServiceStatusTest() throws ApiException {
        NodeServiceStatusProperties response = api.readApplianceManagementServiceStatus();

        // TODO: test validations
    }
    /**
     * Read task properties
     *
     * Read task properties
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readApplianceManagementTaskPropertiesTest() throws ApiException {
        String taskId = null;
        Boolean suppressRedirect = null;
        ApplianceManagementTaskProperties response = api.readApplianceManagementTaskProperties(taskId, suppressRedirect);

        // TODO: test validations
    }
    /**
     * Read node status
     *
     * Returns information about the NSX Manager appliance&#x27;s file system, CPU, memory, disk usage, and uptime. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readApplianceNodeStatusTest() throws ApiException {
        NodeStatusProperties response = api.readApplianceNodeStatus();

        // TODO: test validations
    }
    /**
     * Read asynchronous task response
     *
     * Read asynchronous task response
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readAsyncApplianceManagementTaskResponseTest() throws ApiException {
        String taskId = null;
        api.readAsyncApplianceManagementTaskResponse(taskId);

        // TODO: test validations
    }
    /**
     * Read AAA provider vIDM properties
     *
     * Read AAA provider vIDM properties
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readAuthProviderVidmTest() throws ApiException {
        NodeAuthProviderVidmProperties response = api.readAuthProviderVidm();

        // TODO: test validations
    }
    /**
     * Read AAA provider vIDM status
     *
     * Read AAA provider vIDM status
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readAuthProviderVidmStatusTest() throws ApiException {
        NodeAuthProviderVidmStatus response = api.readAuthProviderVidmStatus();

        // TODO: test validations
    }
    /**
     * Read cluster boot manager service properties
     *
     * Read cluster boot manager service properties
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readClusterBootManagerServiceTest() throws ApiException {
        NodeServiceProperties response = api.readClusterBootManagerService();

        // TODO: test validations
    }
    /**
     * Read cluster boot manager service status
     *
     * Read cluster boot manager service status
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readClusterBootManagerServiceStatusTest() throws ApiException {
        NodeServiceStatusProperties response = api.readClusterBootManagerServiceStatus();

        // TODO: test validations
    }
    /**
     * Read cm inventory service properties
     *
     * Read cm inventory service properties
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readCminventoryServiceTest() throws ApiException {
        NodeServiceProperties response = api.readCminventoryService();

        // TODO: test validations
    }
    /**
     * Read manager service status
     *
     * Read manager service status
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readCminventoryServiceStatusTest() throws ApiException {
        NodeServiceStatusProperties response = api.readCminventoryServiceStatus();

        // TODO: test validations
    }
    /**
     * Read controller server certificate properties
     *
     * Read controller server certificate properties
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readControllerServerCertificateTest() throws ApiException {
        CertificateKeyPair response = api.readControllerServerCertificate();

        // TODO: test validations
    }
    /**
     * Read controller service properties
     *
     * Read controller service properties
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readControllerServerServiceTest() throws ApiException {
        NodeServiceProperties response = api.readControllerServerService();

        // TODO: test validations
    }
    /**
     * Read controller service status
     *
     * Read controller service status
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readControllerServerServiceStatusTest() throws ApiException {
        NodeServiceStatusProperties response = api.readControllerServerServiceStatus();

        // TODO: test validations
    }
    /**
     * Read file contents
     *
     * Read file contents
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readFileTest() throws ApiException {
        String fileName = null;
        api.readFile(fileName);

        // TODO: test validations
    }
    /**
     * Read file properties
     *
     * Read file properties
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readFilePropertiesTest() throws ApiException {
        String fileName = null;
        FileProperties response = api.readFileProperties(fileName);

        // TODO: test validations
    }
    /**
     * Read file thumbprint
     *
     * Read file thumbprint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readFileThumbprintTest() throws ApiException {
        String fileName = null;
        FileThumbprint response = api.readFileThumbprint(fileName);

        // TODO: test validations
    }
    /**
     * Read liagent service properties
     *
     * Read liagent service properties
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readLiagentServiceTest() throws ApiException {
        NodeServiceProperties response = api.readLiagentService();

        // TODO: test validations
    }
    /**
     * Read liagent service status
     *
     * Read liagent service status
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readLiagentServiceStatusTest() throws ApiException {
        NodeServiceStatusProperties response = api.readLiagentServiceStatus();

        // TODO: test validations
    }
    /**
     * Read migration coordinator service properties
     *
     * Read migration coordinator service properties
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readMigrationCoordinatorServiceTest() throws ApiException {
        NodeServiceProperties response = api.readMigrationCoordinatorService();

        // TODO: test validations
    }
    /**
     * Read migration coordinator service status
     *
     * Read migration coordinator service status
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readMigrationCoordinatorServiceStatusTest() throws ApiException {
        NodeServiceStatusProperties response = api.readMigrationCoordinatorServiceStatus();

        // TODO: test validations
    }
    /**
     * Read NSX Message Bus service properties
     *
     * Read NSX Message Bus service properties
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNSXMessageBusServiceTest() throws ApiException {
        NodeServiceProperties response = api.readNSXMessageBusService();

        // TODO: test validations
    }
    /**
     * Read NSX Message Bus service status
     *
     * Read NSX Message Bus service status
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNSXMessageBusServiceStatusTest() throws ApiException {
        NodeServiceStatusProperties response = api.readNSXMessageBusServiceStatus();

        // TODO: test validations
    }
    /**
     * Read NTP service properties
     *
     * Read NTP service properties
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNTPServiceTest() throws ApiException {
        NodeNtpServiceProperties response = api.readNTPService();

        // TODO: test validations
    }
    /**
     * Read NTP service status
     *
     * Read NTP service status
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNTPServiceStatusTest() throws ApiException {
        NodeServiceStatusProperties response = api.readNTPServiceStatus();

        // TODO: test validations
    }
    /**
     * Read the NSX Manager&#x27;s Network Interface Statistics
     *
     * On the specified interface, returns the number of received (rx), transmitted (tx), and dropped packets; the number of bytes and errors received and transmitted on the interface; and the number of detected collisions. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNetworkInterfaceStatisticsTest() throws ApiException {
        String interfaceId = null;
        NodeInterfaceStatisticsProperties response = api.readNetworkInterfaceStatistics(interfaceId);

        // TODO: test validations
    }
    /**
     * Read network configuration properties
     *
     * Read network configuration properties
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNetworkPropertiesTest() throws ApiException {
        NodeNetworkProperties response = api.readNetworkProperties();

        // TODO: test validations
    }
    /**
     * Read the NSX Manager&#x27;s Network Interface
     *
     * Returns detailed information about the specified interface. Interface information includes MTU, broadcast and host IP addresses, link and admin status, MAC address, network  mask, and the IP configuration method. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNodeInterfaceTest() throws ApiException {
        String interfaceId = null;
        NodeNetworkInterfaceProperties response = api.readNodeInterface(interfaceId);

        // TODO: test validations
    }
    /**
     * Read the NSX Manager&#x27;s Name Servers
     *
     * Returns the list of servers that the NSX Manager node uses to look up IP addresses associated with given domain names. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNodeNameServersTest() throws ApiException {
        NodeNameServersProperties response = api.readNodeNameServers();

        // TODO: test validations
    }
    /**
     * Read node network route
     *
     * Returns detailed information about a specified route in the NSX Manager routing table. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNodeNetworkRouteTest() throws ApiException {
        String routeId = null;
        NodeRouteProperties response = api.readNodeNetworkRoute(routeId);

        // TODO: test validations
    }
    /**
     * Read node process
     *
     * Returns information for a specified process ID (pid).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNodeProcessTest() throws ApiException {
        String processId = null;
        NodeProcessProperties response = api.readNodeProcess(processId);

        // TODO: test validations
    }
    /**
     * Read node properties
     *
     * Returns information about the NSX appliance. Information includes release number, time zone, system time, kernel version, message of the day (motd), and host name. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNodePropertiesTest() throws ApiException {
        NodeProperties response = api.readNodeProperties();

        // TODO: test validations
    }
    /**
     * Read the NSX Manager&#x27;s Search Domains
     *
     * Returns the domain list that the NSX Manager node uses to complete unqualified host names. When a host name does not include a fully qualified domain name (FQDN), the NSX Management node appends the first-listed domain name to the host name before the host name is looked up. The NSX Management node continues this for each entry in the domain list until it finds a match. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNodeSearchDomainsTest() throws ApiException {
        NodeSearchDomainsProperties response = api.readNodeSearchDomains();

        // TODO: test validations
    }
    /**
     * Read NSX node-stats service properties
     *
     * Read NSX node-stats service properties
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNodeStatsServiceTest() throws ApiException {
        NodeServiceProperties response = api.readNodeStatsService();

        // TODO: test validations
    }
    /**
     * Read NSX node-stats service status
     *
     * Read NSX node-stats service status
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNodeStatsServiceStatusTest() throws ApiException {
        NodeServiceStatusProperties response = api.readNodeStatsServiceStatus();

        // TODO: test validations
    }
    /**
     * Read node support bundle
     *
     * Read node support bundle
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNodeSupportBundleTest() throws ApiException {
        Boolean all = null;
        api.readNodeSupportBundle(all);

        // TODO: test validations
    }
    /**
     * Read node syslog exporter
     *
     * Returns information about a specific syslog collection point.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNodeSyslogExporterTest() throws ApiException {
        String exporterName = null;
        NodeSyslogExporterProperties response = api.readNodeSyslogExporter(exporterName);

        // TODO: test validations
    }
    /**
     * Read node user
     *
     * Returns information about a specified user who is configued to log in to the NSX appliance 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNodeUserTest() throws ApiException {
        String userid = null;
        NodeUserProperties response = api.readNodeUser(userid);

        // TODO: test validations
    }
    /**
     * Read node version
     *
     * Read node version
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNodeVersionTest() throws ApiException {
        NodeVersion response = api.readNodeVersion();

        // TODO: test validations
    }
    /**
     * Read ui service properties
     *
     * Read ui service properties
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNsxUiServiceServiceTest() throws ApiException {
        NodeServiceProperties response = api.readNsxUiServiceService();

        // TODO: test validations
    }
    /**
     * Read ui service status
     *
     * Read ui service status
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNsxUiServiceServiceStatusTest() throws ApiException {
        NodeServiceStatusProperties response = api.readNsxUiServiceServiceStatus();

        // TODO: test validations
    }
    /**
     * Read NSX upgrade Agent service properties
     *
     * Read NSX upgrade Agent service properties
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNsxUpgradeAgentServiceTest() throws ApiException {
        NodeServiceProperties response = api.readNsxUpgradeAgentService();

        // TODO: test validations
    }
    /**
     * Read Nsx upgrade agent service status
     *
     * Read Nsx upgrade agent service status
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNsxUpgradeAgentServiceStatusTest() throws ApiException {
        NodeServiceStatusProperties response = api.readNsxUpgradeAgentServiceStatus();

        // TODO: test validations
    }
    /**
     * Read Telemetry service properties
     *
     * Read Telemetry service properties
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readPhonehomeCoordinatorServiceTest() throws ApiException {
        NodeServiceProperties response = api.readPhonehomeCoordinatorService();

        // TODO: test validations
    }
    /**
     * Read Telemetry service status
     *
     * Read Telemetry service status
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readPhonehomeCoordinatorServiceStatusTest() throws ApiException {
        NodeServiceStatusProperties response = api.readPhonehomeCoordinatorServiceStatus();

        // TODO: test validations
    }
    /**
     * Read NSX Platform Client service properties
     *
     * Read NSX Platform Client service properties
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readPlatformClientServiceTest() throws ApiException {
        NodeServiceProperties response = api.readPlatformClientService();

        // TODO: test validations
    }
    /**
     * Read NSX Platform Client service status
     *
     * Read NSX Platform Client service status
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readPlatformClientServiceStatusTest() throws ApiException {
        NodeServiceStatusProperties response = api.readPlatformClientServiceStatus();

        // TODO: test validations
    }
    /**
     * Read service properties
     *
     * Read service properties
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readPolicyServiceTest() throws ApiException {
        NodePolicyServiceProperties response = api.readPolicyService();

        // TODO: test validations
    }
    /**
     * Read service status
     *
     * Read service status
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readPolicyServiceStatusTest() throws ApiException {
        NodeServiceStatusProperties response = api.readPolicyServiceStatus();

        // TODO: test validations
    }
    /**
     * Read service properties
     *
     * Read service properties
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readProtonServiceTest() throws ApiException {
        NodeProtonServiceProperties response = api.readProtonService();

        // TODO: test validations
    }
    /**
     * Read service status
     *
     * Read service status
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readProtonServiceStatusTest() throws ApiException {
        NodeServiceStatusProperties response = api.readProtonServiceStatus();

        // TODO: test validations
    }
    /**
     * Read http service properties
     *
     * This API is deprecated.  Read the configuration of the http service by calling the GET /api/v1/cluster/api-service API. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readProxyServiceTest() throws ApiException {
        NodeHttpServiceProperties response = api.readProxyService();

        // TODO: test validations
    }
    /**
     * Read http service status
     *
     * Read http service status
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readProxyServiceStatusTest() throws ApiException {
        NodeServiceStatusProperties response = api.readProxyServiceStatus();

        // TODO: test validations
    }
    /**
     * Read Rabbit MQ service properties
     *
     * Read Rabbit MQ service properties
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readRabbitMQServiceTest() throws ApiException {
        NodeServiceProperties response = api.readRabbitMQService();

        // TODO: test validations
    }
    /**
     * Read Rabbit MQ service status
     *
     * Read Rabbit MQ service status
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readRabbitMQServiceStatusTest() throws ApiException {
        NodeServiceStatusProperties response = api.readRabbitMQServiceStatus();

        // TODO: test validations
    }
    /**
     * Read NSX install-upgrade service properties
     *
     * Read NSX install-upgrade service properties
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readRepositoryServiceTest() throws ApiException {
        NodeInstallUpgradeServiceProperties response = api.readRepositoryService();

        // TODO: test validations
    }
    /**
     * Read NSX install-upgrade service status
     *
     * Read NSX install-upgrade service status
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readRepositoryServiceStatusTest() throws ApiException {
        NodeServiceStatusProperties response = api.readRepositoryServiceStatus();

        // TODO: test validations
    }
    /**
     * Read SNMP service properties
     *
     * Read SNMP service properties
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readSNMPServiceTest() throws ApiException {
        NodeSnmpServiceProperties response = api.readSNMPService();

        // TODO: test validations
    }
    /**
     * Read SNMP service status
     *
     * Read SNMP service status
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readSNMPServiceStatusTest() throws ApiException {
        NodeServiceStatusProperties response = api.readSNMPServiceStatus();

        // TODO: test validations
    }
    /**
     * Read SNMP V3 Engine ID
     *
     * Read SNMP V3 Engine ID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readSNMPV3EngineIDTest() throws ApiException {
        NodeSnmpV3EngineID response = api.readSNMPV3EngineID();

        // TODO: test validations
    }
    /**
     * Read ssh service properties
     *
     * Read ssh service properties
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readSSHServiceTest() throws ApiException {
        NodeSshServiceProperties response = api.readSSHService();

        // TODO: test validations
    }
    /**
     * Read ssh service status
     *
     * Read ssh service status
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readSSHServiceStatusTest() throws ApiException {
        NodeServiceStatusProperties response = api.readSSHServiceStatus();

        // TODO: test validations
    }
    /**
     * Read NSX Search service properties
     *
     * Read NSX Search service properties
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readSearchServiceTest() throws ApiException {
        NodeServiceProperties response = api.readSearchService();

        // TODO: test validations
    }
    /**
     * Read NSX Search service status
     *
     * Read NSX Search service status
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readSearchServiceStatusTest() throws ApiException {
        NodeServiceStatusProperties response = api.readSearchServiceStatus();

        // TODO: test validations
    }
    /**
     * Read syslog service properties
     *
     * Read syslog service properties
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readSyslogServiceTest() throws ApiException {
        NodeServiceProperties response = api.readSyslogService();

        // TODO: test validations
    }
    /**
     * Read syslog service status
     *
     * Read syslog service status
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readSyslogServiceStatusTest() throws ApiException {
        NodeServiceStatusProperties response = api.readSyslogServiceStatus();

        // TODO: test validations
    }
    /**
     * Reset the logging levels to default values
     *
     * Reset the logging levels to default values
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void resetPolicyServiceLoggingLevelActionResetManagerLoggingLevelsTest() throws ApiException {
        api.resetPolicyServiceLoggingLevelActionResetManagerLoggingLevels();

        // TODO: test validations
    }
    /**
     * Reset the logging levels to default values
     *
     * Reset the logging levels to default values
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void resetProtonServiceLoggingLevelActionResetManagerLoggingLevelsTest() throws ApiException {
        api.resetProtonServiceLoggingLevelActionResetManagerLoggingLevels();

        // TODO: test validations
    }
    /**
     * Restart or shutdown node
     *
     * Restarts or shuts down the NSX appliance.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restartOrShutdownNodeRestartTest() throws ApiException {
        api.restartOrShutdownNodeRestart();

        // TODO: test validations
    }
    /**
     * Restart or shutdown node
     *
     * Restarts or shuts down the NSX appliance.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restartOrShutdownNodeShutdownTest() throws ApiException {
        api.restartOrShutdownNodeShutdown();

        // TODO: test validations
    }
    /**
     * Enable or disable controller profiler
     *
     * Enable or disable controller profiler
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setControllerProfilerTest() throws ApiException {
        ControllerProfilerProperties body = null;
        api.setControllerProfiler(body);

        // TODO: test validations
    }
    /**
     * Enable or disable  Mandatory Access Control
     *
     * Enable or disable  Mandatory Access Control
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setNodeMandatoryAccessControlTest() throws ApiException {
        MandatoryAccessControlProperties body = null;
        MandatoryAccessControlProperties response = api.setNodeMandatoryAccessControl(body);

        // TODO: test validations
    }
    /**
     * Set RabbitMQ management port
     *
     * Set RabbitMQ management port
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setRabbitMQManagementPortTest() throws ApiException {
        api.setRabbitMQManagementPort();

        // TODO: test validations
    }
    /**
     * Update node status
     *
     * Clear node bootup status 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateApplianceNodeStatusClearBootupErrorTest() throws ApiException {
        NodeStatusProperties response = api.updateApplianceNodeStatusClearBootupError();

        // TODO: test validations
    }
    /**
     * Update AAA provider vIDM properties
     *
     * Update AAA provider vIDM properties
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateAuthProviderVidmTest() throws ApiException {
        NodeAuthProviderVidmProperties body = null;
        NodeAuthProviderVidmProperties response = api.updateAuthProviderVidm(body);

        // TODO: test validations
    }
    /**
     * Replace file contents
     *
     * Replace file contents
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateFileTest() throws ApiException {
        String fileName = null;
        FileProperties response = api.updateFile(fileName);

        // TODO: test validations
    }
    /**
     * Update NTP service properties
     *
     * Update NTP service properties
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateNTPServiceTest() throws ApiException {
        NodeNtpServiceProperties body = null;
        NodeNtpServiceProperties response = api.updateNTPService(body);

        // TODO: test validations
    }
    /**
     * Update the NSX Manager&#x27;s Network Interface
     *
     * Updates the specified interface properties. You cannot change the properties &lt;code&gt;ip_configuration&lt;/code&gt;, &lt;code&gt;ip_addresses&lt;/code&gt;, or &lt;code&gt;plane&lt;/code&gt;. NSX Manager must have a static IP address. You must use NSX CLI to configure a controller or an edge node. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateNodeInterfaceTest() throws ApiException {
        NodeNetworkInterfaceProperties body = null;
        String interfaceId = null;
        NodeNetworkInterfaceProperties response = api.updateNodeInterface(body, interfaceId);

        // TODO: test validations
    }
    /**
     * Update the NSX Manager&#x27;s Name Servers
     *
     * Modifies the list of servers that the NSX Manager node uses to look up IP addresses associated with given domain names. If DHCP is configured, this method returns a 409 CONFLICT error, because DHCP manages the list of name servers. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateNodeNameServersTest() throws ApiException {
        NodeNameServersProperties body = null;
        NodeNameServersProperties response = api.updateNodeNameServers(body);

        // TODO: test validations
    }
    /**
     * Update node properties
     *
     * Modifies NSX appliance properties. Modifiable properties include the timezone, message of the day (motd), and hostname. The NSX appliance node_version, system_time, and kernel_version are read only and cannot be modified with this method. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateNodePropertiesTest() throws ApiException {
        NodeProperties body = null;
        NodeProperties response = api.updateNodeProperties(body);

        // TODO: test validations
    }
    /**
     * Update the NSX Manager&#x27;s Search Domains
     *
     * Modifies the list of domain names that the NSX Manager node uses to complete unqualified host names. If DHCP is configured, this method returns a 409 CONFLICT error, because DHCP manages the list of name servers. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateNodeSearchDomainsTest() throws ApiException {
        NodeSearchDomainsProperties body = null;
        NodeSearchDomainsProperties response = api.updateNodeSearchDomains(body);

        // TODO: test validations
    }
    /**
     * Update node user
     *
     * Updates attributes of an existing NSX appliance user. This method cannot be used to add a new user. Modifiable attributes include the username, full name of the user, and password. If you specify a password in a PUT request, it is not returned in the response. Nor is it returned in a GET request. The specified password does not meet the following complexity requirements: - minimum 12 characters in length - minimum 1 uppercase character - minimum 1 lowercase character - minimum 1 numeric character - minimum 1 special character - minimum 5 unique characters - default password complexity rules as enforced by the Linux PAM module 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateNodeUserTest() throws ApiException {
        NodeUserProperties body = null;
        String userid = null;
        NodeUserProperties response = api.updateNodeUser(body, userid);

        // TODO: test validations
    }
    /**
     * Update service properties
     *
     * Update service properties
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updatePolicyServiceTest() throws ApiException {
        NodePolicyServiceProperties body = null;
        NodePolicyServiceProperties response = api.updatePolicyService(body);

        // TODO: test validations
    }
    /**
     * Update service properties
     *
     * Update service properties
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateProtonServiceTest() throws ApiException {
        NodeProtonServiceProperties body = null;
        NodeProtonServiceProperties response = api.updateProtonService(body);

        // TODO: test validations
    }
    /**
     * Update http service properties
     *
     * This API is deprecated.  Make changes to the http service configuration by calling the PUT /api/v1/cluster/api-service API. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateProxyServiceTest() throws ApiException {
        NodeHttpServiceProperties body = null;
        NodeHttpServiceProperties response = api.updateProxyService(body);

        // TODO: test validations
    }
    /**
     * Update NSX install-upgrade service properties
     *
     * Update NSX install-upgrade service properties
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateRepositoryServiceTest() throws ApiException {
        NodeInstallUpgradeServiceProperties body = null;
        NodeInstallUpgradeServiceProperties response = api.updateRepositoryService(body);

        // TODO: test validations
    }
    /**
     * Update SNMP service properties
     *
     * Update SNMP service properties
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSNMPServiceTest() throws ApiException {
        NodeSnmpServiceProperties body = null;
        NodeSnmpServiceProperties response = api.updateSNMPService(body);

        // TODO: test validations
    }
    /**
     * Update SNMP V3 Engine ID
     *
     * Update SNMP V3 Engine ID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSNMPV3EngineIDTest() throws ApiException {
        NodeSnmpV3EngineID body = null;
        NodeSnmpV3EngineID response = api.updateSNMPV3EngineID(body);

        // TODO: test validations
    }
    /**
     * Update ssh service properties
     *
     * Update ssh service properties. If the start_on_boot property is updated to true, existing ssh sessions if any are stopped and the ssh service is restarted.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSSHServiceTest() throws ApiException {
        NodeSshServiceProperties body = null;
        NodeSshServiceProperties response = api.updateSSHService(body);

        // TODO: test validations
    }
    /**
     * Update UC state properties
     *
     * Update UC state properties
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateUcStateTest() throws ApiException {
        UcStateProperties body = null;
        api.updateUcState(body);

        // TODO: test validations
    }
    /**
     * Verify node syslog exporter
     *
     * Collect iptables rules needed for all existing syslog exporters and verify if the existing iptables rules are the same. If not, remove the stale rules and add the new rules to make sure all exporters work properly. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void verifyNodeSyslogExporterVerifyTest() throws ApiException {
        api.verifyNodeSyslogExporterVerify();

        // TODO: test validations
    }
}
