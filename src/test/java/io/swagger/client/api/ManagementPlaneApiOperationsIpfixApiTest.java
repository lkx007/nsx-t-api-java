/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.ApiError;
import io.swagger.client.model.IpfixCollectorConfig;
import io.swagger.client.model.IpfixCollectorConfigListResult;
import io.swagger.client.model.IpfixConfig;
import io.swagger.client.model.IpfixConfigListResult;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ManagementPlaneApiOperationsIpfixApi
 */
@Ignore
public class ManagementPlaneApiOperationsIpfixApiTest {

    private final ManagementPlaneApiOperationsIpfixApi api = new ManagementPlaneApiOperationsIpfixApi();

    /**
     * Create a new IPFIX collector configuration
     *
     * Create a new IPFIX collector configuration
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createIpfixCollectorConfigTest() throws ApiException {
        IpfixCollectorConfig body = null;
        IpfixCollectorConfig response = api.createIpfixCollectorConfig(body);

        // TODO: test validations
    }
    /**
     * Create a new IPFIX configuration
     *
     * Create a new IPFIX configuration
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createIpfixConfigTest() throws ApiException {
        IpfixConfig body = null;
        IpfixConfig response = api.createIpfixConfig(body);

        // TODO: test validations
    }
    /**
     * Delete an existing IPFIX collector configuration
     *
     * Delete an existing IPFIX collector configuration
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteIpfixCollectorConfigTest() throws ApiException {
        String collectorConfigId = null;
        api.deleteIpfixCollectorConfig(collectorConfigId);

        // TODO: test validations
    }
    /**
     * Delete an existing IPFIX configuration
     *
     * Delete an existing IPFIX configuration
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteIpfixConfigTest() throws ApiException {
        String configId = null;
        api.deleteIpfixConfig(configId);

        // TODO: test validations
    }
    /**
     * Get an existing IPFIX collector configuration
     *
     * Get an existing IPFIX collector configuration
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getIpfixCollectorConfigTest() throws ApiException {
        String collectorConfigId = null;
        IpfixCollectorConfig response = api.getIpfixCollectorConfig(collectorConfigId);

        // TODO: test validations
    }
    /**
     * Get an existing IPFIX configuration
     *
     * Get an existing IPFIX configuration
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getIpfixConfigTest() throws ApiException {
        String configId = null;
        IpfixConfig response = api.getIpfixConfig(configId);

        // TODO: test validations
    }
    /**
     * List IPFIX collector configurations
     *
     * List IPFIX collector configurations
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listIpfixCollectorConfigTest() throws ApiException {
        String cursor = null;
        String includedFields = null;
        Long pageSize = null;
        Boolean sortAscending = null;
        String sortBy = null;
        IpfixCollectorConfigListResult response = api.listIpfixCollectorConfig(cursor, includedFields, pageSize, sortAscending, sortBy);

        // TODO: test validations
    }
    /**
     * List IPFIX configuration
     *
     * List IPFIX configuration
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listIpfixConfigTest() throws ApiException {
        String appliedTo = null;
        String cursor = null;
        String includedFields = null;
        String ipfixConfigType = null;
        Long pageSize = null;
        Boolean sortAscending = null;
        String sortBy = null;
        IpfixConfigListResult response = api.listIpfixConfig(appliedTo, cursor, includedFields, ipfixConfigType, pageSize, sortAscending, sortBy);

        // TODO: test validations
    }
    /**
     * Update an existing IPFIX collector configuration
     *
     * Update an existing IPFIX collector configuration
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateIpfixCollectorConfigTest() throws ApiException {
        IpfixCollectorConfig body = null;
        String collectorConfigId = null;
        IpfixCollectorConfig response = api.updateIpfixCollectorConfig(body, collectorConfigId);

        // TODO: test validations
    }
    /**
     * Update an existing IPFIX configuration
     *
     * Update an existing IPFIX configuration
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateIpfixConfigTest() throws ApiException {
        IpfixConfig body = null;
        String configId = null;
        IpfixConfig response = api.updateIpfixConfig(body, configId);

        // TODO: test validations
    }
}
