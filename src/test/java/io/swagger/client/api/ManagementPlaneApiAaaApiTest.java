/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.ApiError;
import io.swagger.client.model.RegistrationToken;
import io.swagger.client.model.RoleBinding;
import io.swagger.client.model.RoleBindingListResult;
import io.swagger.client.model.RoleListResult;
import io.swagger.client.model.RoleWithFeatures;
import io.swagger.client.model.UserInfo;
import io.swagger.client.model.VidmInfoListResult;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ManagementPlaneApiAaaApi
 */
@Ignore
public class ManagementPlaneApiAaaApiTest {

    private final ManagementPlaneApiAaaApi api = new ManagementPlaneApiAaaApi();

    /**
     * Create registration access token
     *
     * The privileges of the registration token will be the same as the caller.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createRegistrationTokenTest() throws ApiException {
        RegistrationToken response = api.createRegistrationToken();

        // TODO: test validations
    }
    /**
     * Assign roles to User or Group
     *
     * When assigning a user role, specify the user name with the same case as it appears in vIDM to access the NSX-T user interface. For example, if vIDM has the user name User1@example.com then the name attribute in the API call must be be User1@example.com and cannot be user1@example.com. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createRoleBindingTest() throws ApiException {
        RoleBinding body = null;
        RoleBinding response = api.createRoleBinding(body);

        // TODO: test validations
    }
    /**
     * Delete all stale role assignments
     *
     * Delete all stale role assignments
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAllStaleRoleBindingsDeleteStaleBindingsTest() throws ApiException {
        api.deleteAllStaleRoleBindingsDeleteStaleBindings();

        // TODO: test validations
    }
    /**
     * Delete registration access token
     *
     * Delete registration access token
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteRegistrationTokenTest() throws ApiException {
        String token = null;
        api.deleteRegistrationToken(token);

        // TODO: test validations
    }
    /**
     * Delete user/group&#x27;s roles assignment
     *
     * Delete user/group&#x27;s roles assignment
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteRoleBindingTest() throws ApiException {
        String bindingId = null;
        api.deleteRoleBinding(bindingId);

        // TODO: test validations
    }
    /**
     * Get all users and groups with their roles
     *
     * Get all users and groups with their roles
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllRoleBindingsTest() throws ApiException {
        String cursor = null;
        String includedFields = null;
        String name = null;
        Long pageSize = null;
        Boolean sortAscending = null;
        String sortBy = null;
        String type = null;
        RoleBindingListResult response = api.getAllRoleBindings(cursor, includedFields, name, pageSize, sortAscending, sortBy, type);

        // TODO: test validations
    }
    /**
     * Get information about all roles
     *
     * Get information about all roles
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllRolesInfoTest() throws ApiException {
        RoleListResult response = api.getAllRolesInfo();

        // TODO: test validations
    }
    /**
     * Get information about logged-in user. The permissions parameter of the NsxRole has been deprecated.
     *
     * Get information about logged-in user. The permissions parameter of the NsxRole has been deprecated.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCurrentUserInfoTest() throws ApiException {
        UserInfo response = api.getCurrentUserInfo();

        // TODO: test validations
    }
    /**
     * Get all the User Groups where vIDM display name matches the search key case insensitively. The search key is checked to be a substring of display name. This is a non paginated API.
     *
     * Get all the User Groups where vIDM display name matches the search key case insensitively. The search key is checked to be a substring of display name. This is a non paginated API.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getGroupVidmSearchResultTest() throws ApiException {
        String searchString = null;
        String cursor = null;
        String includedFields = null;
        Long pageSize = null;
        Boolean sortAscending = null;
        String sortBy = null;
        VidmInfoListResult response = api.getGroupVidmSearchResult(searchString, cursor, includedFields, pageSize, sortAscending, sortBy);

        // TODO: test validations
    }
    /**
     * Get registration access token
     *
     * Get registration access token
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRegistrationTokenTest() throws ApiException {
        String token = null;
        RegistrationToken response = api.getRegistrationToken(token);

        // TODO: test validations
    }
    /**
     * Get user/group&#x27;s role information
     *
     * Get user/group&#x27;s role information
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRoleBindingTest() throws ApiException {
        String bindingId = null;
        RoleBinding response = api.getRoleBinding(bindingId);

        // TODO: test validations
    }
    /**
     * Get role information
     *
     * Get role information
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRoleInfoTest() throws ApiException {
        String role = null;
        RoleWithFeatures response = api.getRoleInfo(role);

        // TODO: test validations
    }
    /**
     * Get all the users from vIDM whose userName, givenName or familyName matches the search key case insensitively. The search key is checked to be a substring of name or given name or family name. This is a non paginated API.
     *
     * Get all the users from vIDM whose userName, givenName or familyName matches the search key case insensitively. The search key is checked to be a substring of name or given name or family name. This is a non paginated API.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserVidmSearchResultTest() throws ApiException {
        String searchString = null;
        String cursor = null;
        String includedFields = null;
        Long pageSize = null;
        Boolean sortAscending = null;
        String sortBy = null;
        VidmInfoListResult response = api.getUserVidmSearchResult(searchString, cursor, includedFields, pageSize, sortAscending, sortBy);

        // TODO: test validations
    }
    /**
     * Get all the users and groups from vIDM matching the search key case insensitively. The search key is checked to be a substring of name or given name or family name of user and display name of group. This is a non paginated API.
     *
     * Get all the users and groups from vIDM matching the search key case insensitively. The search key is checked to be a substring of name or given name or family name of user and display name of group. This is a non paginated API.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getVidmSearchResultTest() throws ApiException {
        String searchString = null;
        String cursor = null;
        String includedFields = null;
        Long pageSize = null;
        Boolean sortAscending = null;
        String sortBy = null;
        VidmInfoListResult response = api.getVidmSearchResult(searchString, cursor, includedFields, pageSize, sortAscending, sortBy);

        // TODO: test validations
    }
    /**
     * Update User or Group&#x27;s roles
     *
     * Update User or Group&#x27;s roles
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateRoleBindingTest() throws ApiException {
        RoleBinding body = null;
        String bindingId = null;
        RoleBinding response = api.updateRoleBinding(body, bindingId);

        // TODO: test validations
    }
}
