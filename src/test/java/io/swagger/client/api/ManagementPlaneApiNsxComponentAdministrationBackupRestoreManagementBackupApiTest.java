/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.ApiError;
import io.swagger.client.model.BackupConfiguration;
import io.swagger.client.model.BackupOperationHistory;
import io.swagger.client.model.CurrentBackupOperationStatus;
import io.swagger.client.model.RemoteServerFingerprint;
import io.swagger.client.model.RemoteServerFingerprintRequest;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ManagementPlaneApiNsxComponentAdministrationBackupRestoreManagementBackupApi
 */
@Ignore
public class ManagementPlaneApiNsxComponentAdministrationBackupRestoreManagementBackupApiTest {

    private final ManagementPlaneApiNsxComponentAdministrationBackupRestoreManagementBackupApi api = new ManagementPlaneApiNsxComponentAdministrationBackupRestoreManagementBackupApi();

    /**
     * Configure backup
     *
     * Configure file server and timers for automated backup. If secret fields are omitted (password, passphrase) then use the previously set value. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void configureBackupConfigTest() throws ApiException {
        BackupConfiguration body = null;
        BackupConfiguration response = api.configureBackupConfig(body);

        // TODO: test validations
    }
    /**
     * Get backup configuration
     *
     * Get a configuration of a file server and timers for automated backup. Fields that contain secrets (password, passphrase) are not returned. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBackupConfigTest() throws ApiException {
        BackupConfiguration response = api.getBackupConfig();

        // TODO: test validations
    }
    /**
     * Get backup history
     *
     * Get history of previous backup operations 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBackupHistoryTest() throws ApiException {
        BackupOperationHistory response = api.getBackupHistory();

        // TODO: test validations
    }
    /**
     * Get backup status
     *
     * Get status of active backup operations 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBackupStatusTest() throws ApiException {
        CurrentBackupOperationStatus response = api.getBackupStatus();

        // TODO: test validations
    }
    /**
     * Get ssh fingerprint of remote(backup) server
     *
     * Get SHA256 fingerprint of ECDSA key of remote server. The caller should independently verify that the key is trusted. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSshFingerprintOfServerRetrieveSshFingerprintTest() throws ApiException {
        RemoteServerFingerprintRequest body = null;
        RemoteServerFingerprint response = api.getSshFingerprintOfServerRetrieveSshFingerprint(body);

        // TODO: test validations
    }
    /**
     * Request one-time backup
     *
     * Request one-time backup. The backup will be uploaded using the same server configuration as for automatic backup. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void requestOnetimeBackupBackupToRemoteTest() throws ApiException {
        api.requestOnetimeBackupBackupToRemote();

        // TODO: test validations
    }
    /**
     * Request one-time inventory summary.
     *
     * Request one-time inventory summary. The backup will be uploaded using the same server configuration as for an automatic backup. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void requestOnetimeInventorySummarySummarizeInventoryToRemoteTest() throws ApiException {
        api.requestOnetimeInventorySummarySummarizeInventoryToRemote();

        // TODO: test validations
    }
}
