/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.ApiError;
import io.swagger.client.model.PortMirroringSession;
import io.swagger.client.model.PortMirroringSessionListResult;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ManagementPlaneApiTroubleshootingAndMonitoringPortMirroringApi
 */
@Ignore
public class ManagementPlaneApiTroubleshootingAndMonitoringPortMirroringApiTest {

    private final ManagementPlaneApiTroubleshootingAndMonitoringPortMirroringApi api = new ManagementPlaneApiTroubleshootingAndMonitoringPortMirroringApi();

    /**
     * Create a mirror session
     *
     * Create a mirror session
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPortMirroringSessionsTest() throws ApiException {
        PortMirroringSession body = null;
        PortMirroringSession response = api.createPortMirroringSessions(body);

        // TODO: test validations
    }
    /**
     * Delete the mirror session
     *
     * Delete the mirror session
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePortMirroringSessionTest() throws ApiException {
        String mirrorSessionId = null;
        api.deletePortMirroringSession(mirrorSessionId);

        // TODO: test validations
    }
    /**
     * Get the mirror session
     *
     * Get the mirror session
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPortMirroringSessionTest() throws ApiException {
        String mirrorSessionId = null;
        PortMirroringSession response = api.getPortMirroringSession(mirrorSessionId);

        // TODO: test validations
    }
    /**
     * List all mirror sessions
     *
     * List all mirror sessions
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listPortMirroringSessionTest() throws ApiException {
        String cursor = null;
        String includedFields = null;
        Long pageSize = null;
        Boolean sortAscending = null;
        String sortBy = null;
        PortMirroringSessionListResult response = api.listPortMirroringSession(cursor, includedFields, pageSize, sortAscending, sortBy);

        // TODO: test validations
    }
    /**
     * Update the mirror session
     *
     * Update the mirror session
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updatePortMirroringSessionTest() throws ApiException {
        PortMirroringSession body = null;
        String mirrorSessionId = null;
        PortMirroringSession response = api.updatePortMirroringSession(body, mirrorSessionId);

        // TODO: test validations
    }
    /**
     * Verify whether the mirror session is still valid
     *
     * Verify whether all participants are on the same transport node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void verifyPortMirroringSessionVerifyTest() throws ApiException {
        String mirrorSessionId = null;
        api.verifyPortMirroringSessionVerify(mirrorSessionId);

        // TODO: test validations
    }
}
