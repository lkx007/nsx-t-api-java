/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.ApiError;
import io.swagger.client.model.EdgeCluster;
import io.swagger.client.model.EdgeClusterAllocationStatus;
import io.swagger.client.model.EdgeClusterListResult;
import io.swagger.client.model.EdgeClusterMemberTransportNode;
import io.swagger.client.model.EdgeClusterState;
import io.swagger.client.model.EdgeClusterStatus;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ManagementPlaneApiNetworkTransportEdgeClustersApi
 */
@Ignore
public class ManagementPlaneApiNetworkTransportEdgeClustersApiTest {

    private final ManagementPlaneApiNetworkTransportEdgeClustersApi api = new ManagementPlaneApiNetworkTransportEdgeClustersApi();

    /**
     * Create Edge Cluster
     *
     * Creates a new edge cluster. It only supports homogeneous members. The TransportNodes backed by EdgeNode are only allowed in cluster members. DeploymentType (VIRTUAL_MACHINE|PHYSICAL_MACHINE) of these EdgeNodes is recommended to be the same. EdgeCluster supports members of different deployment types. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createEdgeClusterTest() throws ApiException {
        EdgeCluster body = null;
        EdgeCluster response = api.createEdgeCluster(body);

        // TODO: test validations
    }
    /**
     * Delete Edge Cluster
     *
     * Deletes the specified edge cluster.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteEdgeClusterTest() throws ApiException {
        String edgeClusterId = null;
        api.deleteEdgeCluster(edgeClusterId);

        // TODO: test validations
    }
    /**
     * Get the Allocation details of an edge cluster
     *
     * Returns the allocation details of cluster and its members. Lists the edge node members, active and standby services of each node, utilization details of configured sub-pools. These allocation details can be monitored by customers to trigger migration of certain service contexts to different edge nodes, to balance the utilization of edge node resources. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEdgeClusterAllocationStatusTest() throws ApiException {
        String edgeClusterId = null;
        EdgeClusterAllocationStatus response = api.getEdgeClusterAllocationStatus(edgeClusterId);

        // TODO: test validations
    }
    /**
     * Get the Realized State of a Edge Cluster
     *
     * Return realized state information of a edge cluster. Any configuration update that affects the edge cluster can use this API to get its realized state by passing a request_id returned by the configuration change operation. e.g. Update configuration of edge cluster. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEdgeClusterStateTest() throws ApiException {
        String edgeClusterId = null;
        Long barrierId = null;
        String requestId = null;
        EdgeClusterState response = api.getEdgeClusterState(edgeClusterId, barrierId, requestId);

        // TODO: test validations
    }
    /**
     * Get the status for the Edge cluster of the given id
     *
     * Returns the aggregated status for the Edge cluster along with status of all edge nodes in the cluster. Query parameter \&quot;source&#x3D;realtime\&quot; is the only supported source. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEdgeClusterStatusTest() throws ApiException {
        String edgeClusterId = null;
        String source = null;
        EdgeClusterStatus response = api.getEdgeClusterStatus(edgeClusterId, source);

        // TODO: test validations
    }
    /**
     * List Edge Clusters
     *
     * Returns information about the configured edge clusters, which enable you to group together transport nodes of the type EdgeNode and apply fabric profiles to all members of the edge cluster. Each edge node can participate in only one edge cluster. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listEdgeClustersTest() throws ApiException {
        String cursor = null;
        String includedFields = null;
        Long pageSize = null;
        Boolean sortAscending = null;
        String sortBy = null;
        EdgeClusterListResult response = api.listEdgeClusters(cursor, includedFields, pageSize, sortAscending, sortBy);

        // TODO: test validations
    }
    /**
     * Read Edge Cluster
     *
     * Returns information about the specified edge cluster.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readEdgeClusterTest() throws ApiException {
        String edgeClusterId = null;
        EdgeCluster response = api.readEdgeCluster(edgeClusterId);

        // TODO: test validations
    }
    /**
     * Replace the transport node in the specified member of the edge-cluster
     *
     * Replace the transport node in the specified member of the edge-cluster. This is a disruptive action. This will move all the LogicalRouterPorts(uplink and routerLink) host on the old transport_node to the new transport_node. The transportNode cannot be present in another member of any edgeClusters. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceEdgeClusterMemberTransportNodeReplaceTransportNodeTest() throws ApiException {
        EdgeClusterMemberTransportNode body = null;
        String edgeClusterId = null;
        EdgeCluster response = api.replaceEdgeClusterMemberTransportNodeReplaceTransportNode(body, edgeClusterId);

        // TODO: test validations
    }
    /**
     * Update Edge Cluster
     *
     * Modifies the specified edge cluster. Modifiable parameters include the description, display_name, transport-node-id. If the optional fabric_profile_binding is included, resource_type and profile_id are required. User should do a GET on the edge-cluster and obtain the payload and retain the member_index of the existing members as returning in the GET output. For new member additions, the member_index cannot be defined by the user, user can read the system allocated index to the new member in the output of this API call or by doing a GET call. User cannot use this PUT api to replace the transport_node of an existing member because this is a disruption action, we have exposed a explicit API for doing so, refer to \&quot;ReplaceEdgeClusterMemberTransportNode\&quot; EdgeCluster only supports homogeneous members. The TransportNodes backed by EdgeNode are only allowed in cluster members. DeploymentType (VIRTUAL_MACHINE|PHYSICAL_MACHINE) of these EdgeNodes is recommended to be the same. EdgeCluster supports members of different deployment types. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateEdgeClusterTest() throws ApiException {
        EdgeCluster body = null;
        String edgeClusterId = null;
        EdgeCluster response = api.updateEdgeCluster(body, edgeClusterId);

        // TODO: test validations
    }
}
