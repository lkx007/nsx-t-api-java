/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.ActionableResourceListResult;
import io.swagger.client.model.AdvanceClusterRestoreRequest;
import io.swagger.client.model.ApiError;
import io.swagger.client.model.ClusterBackupInfoListResult;
import io.swagger.client.model.ClusterRestoreStatus;
import io.swagger.client.model.InitiateClusterRestoreRequest;
import io.swagger.client.model.RestoreConfiguration;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ManagementPlaneApiNsxComponentAdministrationBackupRestoreManagementRestoreApi
 */
@Ignore
public class ManagementPlaneApiNsxComponentAdministrationBackupRestoreManagementRestoreApiTest {

    private final ManagementPlaneApiNsxComponentAdministrationBackupRestoreManagementRestoreApi api = new ManagementPlaneApiNsxComponentAdministrationBackupRestoreManagementRestoreApi();

    /**
     * Advance any suspended restore operation
     *
     * Advance any currently suspended restore operation. The operation might have been suspended because (1) the user had suspended it previously, or (2) the operation is waiting for user input, to be provided as a part of the POST request body. This operation is only valid when a GET cluster/restore/status returns a status with value SUSPENDED. Otherwise, a 409 response is returned. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void advanceClusterRestoreAdvanceTest() throws ApiException {
        AdvanceClusterRestoreRequest body = null;
        ClusterRestoreStatus response = api.advanceClusterRestoreAdvance(body);

        // TODO: test validations
    }
    /**
     * Cancel any running restore operation
     *
     * This operation is only valid when a restore is in suspended state. The UI user can cancel any restore operation when the restore is suspended either due to an error, or for a user input. The API user would need to monitor the progression of a restore by calling periodically \&quot;/api/v1/cluster/restore/status\&quot; API. The response object (ClusterRestoreStatus), contains a field \&quot;endpoints\&quot;. The API user can cancel the restore process if &#x27;cancel&#x27; action is shown in the endpoint field. This operation is only valid when a GET cluster/restore/status returns a status with value SUSPENDED. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void cancelClusterRestoreCancelTest() throws ApiException {
        ClusterRestoreStatus response = api.cancelClusterRestoreCancel();

        // TODO: test validations
    }
    /**
     * Configure Restore SFTP server credentials
     *
     * Configure file server where the backed-up files used for the Restore operation are available. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void configureRestoreConfigTest() throws ApiException {
        RestoreConfiguration body = null;
        RestoreConfiguration response = api.configureRestoreConfig(body);

        // TODO: test validations
    }
    /**
     * Get Restore configuration
     *
     * Get configuration information for the file server used to store backed-up files. Fields that contain secrets (password, passphrase) are not returned. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRestoreConfigTest() throws ApiException {
        RestoreConfiguration response = api.getRestoreConfig();

        // TODO: test validations
    }
    /**
     * Initiate a restore operation
     *
     * Start the restore of an NSX cluster, from some previously backed-up configuration. This operation is only valid when a GET cluster/restore/status returns a status with value NOT_STARTED. Otherwise, a 409 response is returned. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void initiateClusterRestoreStartTest() throws ApiException {
        InitiateClusterRestoreRequest body = null;
        ClusterRestoreStatus response = api.initiateClusterRestoreStart(body);

        // TODO: test validations
    }
    /**
     * List timestamps of all available Cluster Backups.
     *
     * Returns timestamps for all backup files that are available on the SFTP server. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listClusterBackupTimestampsTest() throws ApiException {
        String cursor = null;
        String includedFields = null;
        Long pageSize = null;
        Boolean sortAscending = null;
        String sortBy = null;
        ClusterBackupInfoListResult response = api.listClusterBackupTimestamps(cursor, includedFields, pageSize, sortAscending, sortBy);

        // TODO: test validations
    }
    /**
     * List resources for a given instruction, to be shown to/executed by users. 
     *
     * For restore operations requiring user input e.g. performing an action, accepting/rejecting an action, etc. the information to be conveyed to users is provided in this call. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listRestoreInstructionResourcesTest() throws ApiException {
        String instructionId = null;
        String cursor = null;
        String includedFields = null;
        Long pageSize = null;
        Boolean sortAscending = null;
        String sortBy = null;
        ActionableResourceListResult response = api.listRestoreInstructionResources(instructionId, cursor, includedFields, pageSize, sortAscending, sortBy);

        // TODO: test validations
    }
    /**
     * Query Restore Request Status
     *
     * Returns status information for the specified NSX cluster restore request. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void queryClusterRestoreStatusTest() throws ApiException {
        ClusterRestoreStatus response = api.queryClusterRestoreStatus();

        // TODO: test validations
    }
    /**
     * Retry any failed restore operation
     *
     * Retry any currently in-progress, failed restore operation. Only the last step of the multi-step restore operation would have failed,and only that step is retried. This operation is only valid when a GET cluster/restore/status returns a status with value FAILED. Otherwise, a 409 response is returned. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retryClusterRestoreRetryTest() throws ApiException {
        ClusterRestoreStatus response = api.retryClusterRestoreRetry();

        // TODO: test validations
    }
    /**
     * Suspend any running restore operation
     *
     * Suspend any currently running restore operation. The restore operation is made up of a number of steps. When this call is issued, any currently running step is allowed to finish (successfully or with errors), and the next step (and therefore the entire restore operation) is suspended until a subsequent resume or cancel call is issued. This operation is only valid when a GET cluster/restore/status returns a status with value RUNNING. Otherwise, a 409 response is returned. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void suspendClusterRestoreSuspendTest() throws ApiException {
        ClusterRestoreStatus response = api.suspendClusterRestoreSuspend();

        // TODO: test validations
    }
}
