/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.ApiError;
import java.io.File;
import io.swagger.client.model.UpgradeBundleFetchRequest;
import io.swagger.client.model.UpgradeBundleId;
import io.swagger.client.model.UpgradeBundleInfo;
import io.swagger.client.model.UpgradeBundleUploadStatus;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ManagementPlaneApiUpgradeBundlesApi
 */
@Ignore
public class ManagementPlaneApiUpgradeBundlesApiTest {

    private final ManagementPlaneApiUpgradeBundlesApi api = new ManagementPlaneApiUpgradeBundlesApi();

    /**
     * Cancel upgrade bundle upload
     *
     * Cancel upload of upgrade bundle. This API works only when bundle upload is in-progress and will not work during post-processing of upgrade bundle. If bundle upload is in-progress, then the API call returns http OK response after cancelling the upload and deleting partially uploaded bundle. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void cancelUpgradeBundleUploadCancelUploadTest() throws ApiException {
        String bundleId = null;
        api.cancelUpgradeBundleUploadCancelUpload(bundleId);

        // TODO: test validations
    }
    /**
     * Fetch upgrade bundle from given url
     *
     * Fetches the upgrade bundle from url. The call returns after fetch is initiated. Check status by periodically retrieving upgrade bundle upload status using GET /upgrade/bundles/&lt;bundle-id&gt;/upload-status. The upload is complete when the status is SUCCESS. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void fetchUpgradeBundleFromUrlTest() throws ApiException {
        UpgradeBundleFetchRequest body = null;
        UpgradeBundleId response = api.fetchUpgradeBundleFromUrl(body);

        // TODO: test validations
    }
    /**
     * Get uploaded upgrade bundle information
     *
     * Get uploaded upgrade bundle information 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUpgradeBundleInfoTest() throws ApiException {
        String bundleId = null;
        UpgradeBundleInfo response = api.getUpgradeBundleInfo(bundleId);

        // TODO: test validations
    }
    /**
     * Get uploaded upgrade bundle upload status
     *
     * Get uploaded upgrade bundle upload status 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUpgradeBundleUploadStatusTest() throws ApiException {
        String bundleId = null;
        UpgradeBundleUploadStatus response = api.getUpgradeBundleUploadStatus(bundleId);

        // TODO: test validations
    }
    /**
     * Upload upgrade bundle
     *
     * Upload the upgrade bundle. This call returns after upload is completed. You can check bundle processing status periodically by retrieving upgrade bundle upload status to find out if the upload and processing is completed. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void uploadUpgradeBundleAsyncUploadTest() throws ApiException {
        File file = null;
        UpgradeBundleId response = api.uploadUpgradeBundleAsyncUpload(file);

        // TODO: test validations
    }
}
