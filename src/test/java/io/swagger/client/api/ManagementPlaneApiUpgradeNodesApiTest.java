/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.AcceptableComponentVersion;
import io.swagger.client.model.AcceptableComponentVersionList;
import io.swagger.client.model.ApiError;
import io.swagger.client.model.NodeInfoListResult;
import io.swagger.client.model.NodeSummaryList;
import io.swagger.client.model.VersionList;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ManagementPlaneApiUpgradeNodesApi
 */
@Ignore
public class ManagementPlaneApiUpgradeNodesApiTest {

    private final ManagementPlaneApiUpgradeNodesApi api = new ManagementPlaneApiUpgradeNodesApi();

    /**
     * Get list of nodes across all types
     *
     * Get list of nodes. If request parameter component type is specified, then all nodes for that component will be returned. If request parameter component version is specified, then all nodes at that version will be returned. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNodesTest() throws ApiException {
        String componentType = null;
        String componentVersion = null;
        String cursor = null;
        String includedFields = null;
        Long pageSize = null;
        Boolean sortAscending = null;
        String sortBy = null;
        NodeInfoListResult response = api.getNodes(componentType, componentVersion, cursor, includedFields, pageSize, sortAscending, sortBy);

        // TODO: test validations
    }
    /**
     * Get summary of nodes
     *
     * Get summary of nodes, which includes node count for each type and component version.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNodesSummaryTest() throws ApiException {
        NodeSummaryList response = api.getNodesSummary();

        // TODO: test validations
    }
    /**
     * Get the version whitelist
     *
     * Get whitelist of versions for different components
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getVersionWhitelistTest() throws ApiException {
        AcceptableComponentVersionList response = api.getVersionWhitelist();

        // TODO: test validations
    }
    /**
     * Get the version whitelist for the specified component
     *
     * Get whitelist of versions for a component. Component can include HOST, EDGE, CCP, MP
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getVersionWhitelistByComponentTest() throws ApiException {
        String componentType = null;
        AcceptableComponentVersion response = api.getVersionWhitelistByComponent(componentType);

        // TODO: test validations
    }
    /**
     * Update the version whitelist for the specified component type
     *
     * Update the version whitelist for the specified component type (HOST, EDGE, CCP, MP).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateVersionWhitelistTest() throws ApiException {
        VersionList body = null;
        String componentType = null;
        api.updateVersionWhitelist(body, componentType);

        // TODO: test validations
    }
}
