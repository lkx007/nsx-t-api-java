/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.ApiError;
import io.swagger.client.model.LogicalSwitch;
import io.swagger.client.model.LogicalSwitchListResult;
import io.swagger.client.model.LogicalSwitchState;
import io.swagger.client.model.LogicalSwitchStateListResult;
import io.swagger.client.model.LogicalSwitchStatistics;
import io.swagger.client.model.LogicalSwitchStatus;
import io.swagger.client.model.LogicalSwitchStatusSummary;
import io.swagger.client.model.MacAddressCsvListResult;
import io.swagger.client.model.MacAddressListResult;
import io.swagger.client.model.VtepCsvListResult;
import io.swagger.client.model.VtepListResult;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ManagementPlaneApiLogicalSwitchingLogicalSwitchesApi
 */
@Ignore
public class ManagementPlaneApiLogicalSwitchingLogicalSwitchesApiTest {

    private final ManagementPlaneApiLogicalSwitchingLogicalSwitchesApi api = new ManagementPlaneApiLogicalSwitchingLogicalSwitchesApi();

    /**
     * Create a Logical Switch
     *
     * Creates a new logical switch. The request must include the transport_zone_id, display_name, and admin_state (UP or DOWN). The replication_mode (MTEP or SOURCE) is required for overlay logical switches, but not for VLAN-based logical switches. A vlan needs to be provided for VLAN-based logical switches 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createLogicalSwitchTest() throws ApiException {
        LogicalSwitch body = null;
        LogicalSwitch response = api.createLogicalSwitch(body);

        // TODO: test validations
    }
    /**
     * Delete a Logical Switch
     *
     * Removes a logical switch from the associated overlay or VLAN transport zone. By default, a logical switch cannot be deleted if there are logical ports on the switch, or it is added to a NSGroup. Cascade option can be used to delete all ports and the logical switch. Detach option can be used to delete the logical switch forcibly. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteLogicalSwitchTest() throws ApiException {
        String lswitchId = null;
        Boolean cascade = null;
        Boolean detach = null;
        api.deleteLogicalSwitch(lswitchId, cascade, detach);

        // TODO: test validations
    }
    /**
     * Get Logical Switch associated with the provided id (lswitch-id)
     *
     * Returns information about the specified logical switch Id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLogicalSwitchTest() throws ApiException {
        String lswitchId = null;
        LogicalSwitch response = api.getLogicalSwitch(lswitchId);

        // TODO: test validations
    }
    /**
     * Get MAC Table for Logical Switch of the Given ID (lswitch-id)
     *
     * Returns MAC table of a specified logical switch from the given transport node if a transport node id is given in the query parameter from the Central Controller Plane. The query parameter \&quot;source&#x3D;cached\&quot; is not supported. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLogicalSwitchMacTableTest() throws ApiException {
        String lswitchId = null;
        String cursor = null;
        String includedFields = null;
        Long pageSize = null;
        Boolean sortAscending = null;
        String sortBy = null;
        String source = null;
        String transportNodeId = null;
        MacAddressListResult response = api.getLogicalSwitchMacTable(lswitchId, cursor, includedFields, pageSize, sortAscending, sortBy, source, transportNodeId);

        // TODO: test validations
    }
    /**
     * Get MAC Table for Logical Switch of the Given ID (lswitch-id)
     *
     * Returns MAC table of a specified logical switch in CSV format from the given transport node if a transport node id is given in the query parameter from the Central Controller Plane. The query parameter \&quot;source&#x3D;cached\&quot; is not supported. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLogicalSwitchMacTableInCsvFormatCsvTest() throws ApiException {
        String lswitchId = null;
        String source = null;
        String transportNodeId = null;
        MacAddressCsvListResult response = api.getLogicalSwitchMacTableInCsvFormatCsv(lswitchId, source, transportNodeId);

        // TODO: test validations
    }
    /**
     * Get the realized state associated with provided logical switch id
     *
     * Returns current state of the logical switch configuration and details of only out-of-sync transport nodes. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLogicalSwitchStateTest() throws ApiException {
        String lswitchId = null;
        LogicalSwitchState response = api.getLogicalSwitchState(lswitchId);

        // TODO: test validations
    }
    /**
     * Get Statistics for Logical Switch of the Given ID (lswitch-id)
     *
     * Returns statistics  of a specified logical switch. The query parameter \&quot;source&#x3D;realtime\&quot; is not supported. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLogicalSwitchStatisticsTest() throws ApiException {
        String lswitchId = null;
        String source = null;
        LogicalSwitchStatistics response = api.getLogicalSwitchStatistics(lswitchId, source);

        // TODO: test validations
    }
    /**
     * Get Logical Switch runtime status info for a given logical switch
     *
     * Returns the number of ports assigned to a logical switch.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLogicalSwitchStatusTest() throws ApiException {
        String lswitchId = null;
        LogicalSwitchStatus response = api.getLogicalSwitchStatus(lswitchId);

        // TODO: test validations
    }
    /**
     * Get Status Summary of All Logical Switches in the System
     *
     * Returns Operational status of all logical switches. The query parameter \&quot;source&#x3D;realtime\&quot; is not supported. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLogicalSwitchStatusSummaryTest() throws ApiException {
        String cursor = null;
        Boolean diagnostic = null;
        String includedFields = null;
        Long pageSize = null;
        Boolean sortAscending = null;
        String sortBy = null;
        String source = null;
        String switchingProfileId = null;
        String transportType = null;
        String transportZoneId = null;
        String uplinkTeamingPolicyName = null;
        Long vlan = null;
        Integer vni = null;
        LogicalSwitchStatusSummary response = api.getLogicalSwitchStatusSummary(cursor, diagnostic, includedFields, pageSize, sortAscending, sortBy, source, switchingProfileId, transportType, transportZoneId, uplinkTeamingPolicyName, vlan, vni);

        // TODO: test validations
    }
    /**
     * Get virtual tunnel endpoint table for logical switch of the given ID (lswitch-id) 
     *
     * Returns the virtual tunnel endpoint table of a specified logical switch from the given transport node if a transport node id is given in the query parameter, from the Central Controller Plane. The query parameter \&quot;source&#x3D;cached\&quot; is not supported. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLogicalSwitchVtepTableTest() throws ApiException {
        String lswitchId = null;
        String cursor = null;
        String includedFields = null;
        Long pageSize = null;
        Boolean sortAscending = null;
        String sortBy = null;
        String source = null;
        String transportNodeId = null;
        VtepListResult response = api.getLogicalSwitchVtepTable(lswitchId, cursor, includedFields, pageSize, sortAscending, sortBy, source, transportNodeId);

        // TODO: test validations
    }
    /**
     * Get virtual tunnel endpoint table for logical switch of the given ID (lswitch-id) 
     *
     * Returns virtual tunnel endpoint table of a specified logical switch in CSV format from the given transport node if a transport node id is given in the query parameter from the Central Controller Plane. The query parameter \&quot;source&#x3D;cached\&quot; is not supported. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLogicalSwitchVtepTableInCsvFormatCsvTest() throws ApiException {
        String lswitchId = null;
        String source = null;
        String transportNodeId = null;
        VtepCsvListResult response = api.getLogicalSwitchVtepTableInCsvFormatCsv(lswitchId, source, transportNodeId);

        // TODO: test validations
    }
    /**
     * List all Logical Switches
     *
     * Returns information about all configured logical switches.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listLogicalSwitchesTest() throws ApiException {
        String cursor = null;
        Boolean diagnostic = null;
        String includedFields = null;
        Long pageSize = null;
        Boolean sortAscending = null;
        String sortBy = null;
        String switchingProfileId = null;
        String transportType = null;
        String transportZoneId = null;
        String uplinkTeamingPolicyName = null;
        Long vlan = null;
        Integer vni = null;
        LogicalSwitchListResult response = api.listLogicalSwitches(cursor, diagnostic, includedFields, pageSize, sortAscending, sortBy, switchingProfileId, transportType, transportZoneId, uplinkTeamingPolicyName, vlan, vni);

        // TODO: test validations
    }
    /**
     * List logical switches by realized state
     *
     * Returns a list of logical switches states that have realized state as provided as query parameter. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listLogicalSwitchesByStateTest() throws ApiException {
        String status = null;
        LogicalSwitchStateListResult response = api.listLogicalSwitchesByState(status);

        // TODO: test validations
    }
    /**
     * Update a Logical Switch
     *
     * Modifies attributes of an existing logical switch. Modifiable attributes include admin_state, replication_mode, switching_profile_ids and VLAN spec. You cannot modify the original transport_zone_id. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateLogicalSwitchTest() throws ApiException {
        LogicalSwitch body = null;
        String lswitchId = null;
        LogicalSwitch response = api.updateLogicalSwitch(body, lswitchId);

        // TODO: test validations
    }
}
