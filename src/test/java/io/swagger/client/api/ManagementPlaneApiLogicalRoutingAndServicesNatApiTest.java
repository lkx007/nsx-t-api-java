/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.ApiError;
import io.swagger.client.model.NatRule;
import io.swagger.client.model.NatRuleList;
import io.swagger.client.model.NatRuleListResult;
import io.swagger.client.model.NatStatisticsPerLogicalRouter;
import io.swagger.client.model.NatStatisticsPerRule;
import io.swagger.client.model.NatStatisticsPerTransportNode;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ManagementPlaneApiLogicalRoutingAndServicesNatApi
 */
@Ignore
public class ManagementPlaneApiLogicalRoutingAndServicesNatApiTest {

    private final ManagementPlaneApiLogicalRoutingAndServicesNatApi api = new ManagementPlaneApiLogicalRoutingAndServicesNatApi();

    /**
     * Add a NAT rule in a specific logical router
     *
     * Add a NAT rule in a specific logical router. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addNatRuleTest() throws ApiException {
        NatRule body = null;
        String logicalRouterId = null;
        NatRule response = api.addNatRule(body, logicalRouterId);

        // TODO: test validations
    }
    /**
     * Add multiple NAT rules in a specific logical router
     *
     * Create multiple NAT rules in a specific logical router. The API succeeds only when all rules are accepted and created successfully. Any one validation voilation will fail the API, no rule will be created. The ruleIds of each rules can be found from the responsed message. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addNatRulesCreateMultipleTest() throws ApiException {
        NatRuleList body = null;
        String logicalRouterId = null;
        NatRuleList response = api.addNatRulesCreateMultiple(body, logicalRouterId);

        // TODO: test validations
    }
    /**
     * Delete a specific NAT rule from a logical router
     *
     * Delete a specific NAT rule from a logical router 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNatRuleTest() throws ApiException {
        String logicalRouterId = null;
        String ruleId = null;
        api.deleteNatRule(logicalRouterId, ruleId);

        // TODO: test validations
    }
    /**
     * Get a specific NAT rule from a given logical router
     *
     * Get a specific NAT rule from a given logical router 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNatRuleTest() throws ApiException {
        String logicalRouterId = null;
        String ruleId = null;
        NatRule response = api.getNatRule(logicalRouterId, ruleId);

        // TODO: test validations
    }
    /**
     * Get the statistics of all rules of the logical router
     *
     * Returns the summation of statistics for all rules from all nodes for the Specified Logical Router. Also gives the per transport node statistics for provided logical router. The query parameter \&quot;source&#x3D;realtime\&quot; is not supported. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNatStatisticsPerLogicalRouterTest() throws ApiException {
        String logicalRouterId = null;
        String source = null;
        NatStatisticsPerLogicalRouter response = api.getNatStatisticsPerLogicalRouter(logicalRouterId, source);

        // TODO: test validations
    }
    /**
     * Get the statistics of a specified logical router NAT Rule
     *
     * Returns the summation of statistics from all nodes for the Specified Logical Router NAT Rule. Query parameter \&quot;source&#x3D;realtime\&quot; is the only supported source. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNatStatisticsPerRuleTest() throws ApiException {
        String logicalRouterId = null;
        String ruleId = null;
        String source = null;
        NatStatisticsPerRule response = api.getNatStatisticsPerRule(logicalRouterId, ruleId, source);

        // TODO: test validations
    }
    /**
     * Get statistics for all logical router NAT rules on a transport node
     *
     * Returns the summation of statistics for all rules from all logical routers which are present on given transport node. Only cached statistics are supported. The query parameter \&quot;source&#x3D;realtime\&quot; is not supported. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNatStatisticsPerTransportNodeTest() throws ApiException {
        String nodeId = null;
        String source = null;
        NatStatisticsPerTransportNode response = api.getNatStatisticsPerTransportNode(nodeId, source);

        // TODO: test validations
    }
    /**
     * List NAT rules of the logical router
     *
     * Returns paginated list of all user defined NAT rules of the specific logical router 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listNatRulesTest() throws ApiException {
        String logicalRouterId = null;
        String cursor = null;
        String includedFields = null;
        Long pageSize = null;
        Boolean sortAscending = null;
        String sortBy = null;
        NatRuleListResult response = api.listNatRules(logicalRouterId, cursor, includedFields, pageSize, sortAscending, sortBy);

        // TODO: test validations
    }
    /**
     * Update a specific NAT rule from a given logical router
     *
     * Update a specific NAT rule from a given logical router. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateNatRuleTest() throws ApiException {
        NatRule body = null;
        String logicalRouterId = null;
        String ruleId = null;
        NatRule response = api.updateNatRule(body, logicalRouterId, ruleId);

        // TODO: test validations
    }
}
