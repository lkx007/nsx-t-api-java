/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.ApiError;
import io.swagger.client.model.MigrationUnitGroup;
import io.swagger.client.model.MigrationUnitGroupAggregateInfoListResult;
import io.swagger.client.model.MigrationUnitGroupListResult;
import io.swagger.client.model.MigrationUnitGroupStatusListResult;
import io.swagger.client.model.MigrationUnitList;
import io.swagger.client.model.MigrationUnitStatusListResult;
import io.swagger.client.model.ReorderMigrationRequest;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ManagementPlaneApiMigrationGroupApi
 */
@Ignore
public class ManagementPlaneApiMigrationGroupApiTest {

    private final ManagementPlaneApiMigrationGroupApi api = new ManagementPlaneApiMigrationGroupApi();

    /**
     * Add migration units to specified migration unit group
     *
     * Add migration units to specified migration unit group. The migration units will be added at the end of the migration unit list. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addMigrationUnitsToGroupAddMigrationUnitsTest() throws ApiException {
        MigrationUnitList body = null;
        String groupId = null;
        MigrationUnitList response = api.addMigrationUnitsToGroupAddMigrationUnits(body, groupId);

        // TODO: test validations
    }
    /**
     * Create a group
     *
     * Create a group of migration units. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createMigrationUnitGroupTest() throws ApiException {
        MigrationUnitGroup body = null;
        MigrationUnitGroup response = api.createMigrationUnitGroup(body);

        // TODO: test validations
    }
    /**
     * Delete the migration unit group
     *
     * Delete the specified group. NOTE - A group can be deleted only if it is empty. If user tries to delete a group containing one or more migration units, the operation will fail and an error will be returned. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteMigrationUnitGroupTest() throws ApiException {
        String groupId = null;
        api.deleteMigrationUnitGroup(groupId);

        // TODO: test validations
    }
    /**
     * Return migration unit group information
     *
     * Returns information about a specific migration unit group in the migration plan.  If request parameter summary is set to true, then only count of migration units will be returned, migration units list will be empty. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMigrationUnitGroupTest() throws ApiException {
        String groupId = null;
        Boolean summary = null;
        MigrationUnitGroup response = api.getMigrationUnitGroup(groupId, summary);

        // TODO: test validations
    }
    /**
     * Return aggregate information of all migration unit groups
     *
     * Return information of all migration unit groups in the migration plan.  If request parameter summary is set to true, then only count of migration units will be returned, migration units list will be empty. If request parameter component type is specified, then all migration unit groups for that component will be returned. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMigrationUnitGroupAggregateInfoTest() throws ApiException {
        String componentType = null;
        String cursor = null;
        String includedFields = null;
        Long pageSize = null;
        Boolean sortAscending = null;
        String sortBy = null;
        Boolean summary = null;
        Boolean sync = null;
        MigrationUnitGroupAggregateInfoListResult response = api.getMigrationUnitGroupAggregateInfo(componentType, cursor, includedFields, pageSize, sortAscending, sortBy, summary, sync);

        // TODO: test validations
    }
    /**
     * Get migration status for group
     *
     * Get migration status for migration units in the specified group. User can specify whether to show only the migration units with errors. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMigrationUnitGroupStatusTest() throws ApiException {
        String groupId = null;
        String cursor = null;
        Boolean hasErrors = null;
        String includedFields = null;
        Long pageSize = null;
        Boolean sortAscending = null;
        String sortBy = null;
        MigrationUnitStatusListResult response = api.getMigrationUnitGroupStatus(groupId, cursor, hasErrors, includedFields, pageSize, sortAscending, sortBy);

        // TODO: test validations
    }
    /**
     * Return information of all migration unit groups
     *
     * Return information of all migration unit groups in the migration plan.  If request parameter summary is set to true, then only count of migration units will be returned, migration units list will be empty. If request parameter component type is specified, then all migration unit groups for that component will be returned. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMigrationUnitGroupsTest() throws ApiException {
        String componentType = null;
        String cursor = null;
        String includedFields = null;
        Long pageSize = null;
        Boolean sortAscending = null;
        String sortBy = null;
        Boolean summary = null;
        Boolean sync = null;
        MigrationUnitGroupListResult response = api.getMigrationUnitGroups(componentType, cursor, includedFields, pageSize, sortAscending, sortBy, summary, sync);

        // TODO: test validations
    }
    /**
     * Get migration status for migration unit groups
     *
     * Get migration status for migration unit groups
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMigrationUnitGroupsStatusTest() throws ApiException {
        String componentType = null;
        String cursor = null;
        String includedFields = null;
        Long pageSize = null;
        Boolean sortAscending = null;
        String sortBy = null;
        MigrationUnitGroupStatusListResult response = api.getMigrationUnitGroupsStatus(componentType, cursor, includedFields, pageSize, sortAscending, sortBy);

        // TODO: test validations
    }
    /**
     * Reorder migration unit group
     *
     * Reorder an migration unit group by placing it before/after the specified migration unit group. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void reorderMigrationUnitGroupReorderTest() throws ApiException {
        ReorderMigrationRequest body = null;
        String groupId = null;
        api.reorderMigrationUnitGroupReorder(body, groupId);

        // TODO: test validations
    }
    /**
     * Reorder an migration unit within the migration unit group
     *
     * Reorder an migration unit within the migration unit group by placing it before/after the specified migration unit 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void reorderMigrationUnitReorderTest() throws ApiException {
        ReorderMigrationRequest body = null;
        String groupId = null;
        String migrationUnitId = null;
        api.reorderMigrationUnitReorder(body, groupId, migrationUnitId);

        // TODO: test validations
    }
    /**
     * Update the migration unit group
     *
     * Update the specified migration unit group. Removal of migration units from the group using this is not allowed. An error will be returned in that case. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateMigrationUnitGroupTest() throws ApiException {
        MigrationUnitGroup body = null;
        String groupId = null;
        MigrationUnitGroup response = api.updateMigrationUnitGroup(body, groupId);

        // TODO: test validations
    }
}
