/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.ApiError;
import io.swagger.client.model.GlobalConfigs;
import io.swagger.client.model.GlobalConfigsListResult;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ManagementPlaneApiGlobalConfigsApi
 */
@Ignore
public class ManagementPlaneApiGlobalConfigsApiTest {

    private final ManagementPlaneApiGlobalConfigsApi api = new ManagementPlaneApiGlobalConfigsApi();

    /**
     * Get global configs for a config type
     *
     * Returns global configurations that belong to the config type 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getGlobalConfigsTest() throws ApiException {
        String configType = null;
        GlobalConfigs response = api.getGlobalConfigs(configType);

        // TODO: test validations
    }
    /**
     * List global configurations of a NSX domain
     *
     * Returns global configurations of a NSX domain grouped by the config types. These global configurations are valid across NSX domain for their respective types unless they are overridden by a more granular configurations. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listGlobalConfigsTest() throws ApiException {
        GlobalConfigsListResult response = api.listGlobalConfigs();

        // TODO: test validations
    }
    /**
     * Resyncs global configurations of a config-type
     *
     * It is similar to update global configurations but this request would trigger update even if the configs are unmodified. However, the realization of the new configurations is config-type specific. Refer to config-type specific documentation for details about the configuration push state. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void resyncGlobalConfigsResyncConfigTest() throws ApiException {
        GlobalConfigs body = null;
        String configType = null;
        GlobalConfigs response = api.resyncGlobalConfigsResyncConfig(body, configType);

        // TODO: test validations
    }
    /**
     * Update global configurations of a config type
     *
     * Updates global configurations that belong to a config type. The request must include the updated values along with the unmodified values. The values that are updated(different) would trigger update to config-type specific state. However, the realization of the new configurations is config-type specific. Refer to config-type specific documentation for details about the config- uration push state. Policy api will overwrite the fipsGlobalConfig set using MP api. Always use https://&lt;policyIp&gt;/policy/api/v1/infra/global-config to update fips config- uration. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateGlobalConfigsTest() throws ApiException {
        GlobalConfigs body = null;
        String configType = null;
        GlobalConfigs response = api.updateGlobalConfigs(body, configType);

        // TODO: test validations
    }
}
