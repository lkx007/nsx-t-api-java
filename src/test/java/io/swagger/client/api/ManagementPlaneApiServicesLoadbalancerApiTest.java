/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.ApiError;
import io.swagger.client.model.LbAppProfile;
import io.swagger.client.model.LbAppProfileListResult;
import io.swagger.client.model.LbClientSslProfile;
import io.swagger.client.model.LbClientSslProfileListResult;
import io.swagger.client.model.LbMonitor;
import io.swagger.client.model.LbMonitorListResult;
import io.swagger.client.model.LbNodeUsage;
import io.swagger.client.model.LbNodeUsageSummary;
import io.swagger.client.model.LbPersistenceProfile;
import io.swagger.client.model.LbPersistenceProfileListResult;
import io.swagger.client.model.LbPool;
import io.swagger.client.model.LbPoolListResult;
import io.swagger.client.model.LbPoolStatistics;
import io.swagger.client.model.LbPoolStatisticsListResult;
import io.swagger.client.model.LbPoolStatus;
import io.swagger.client.model.LbPoolStatusListResult;
import io.swagger.client.model.LbRule;
import io.swagger.client.model.LbRuleListResult;
import io.swagger.client.model.LbServerSslProfile;
import io.swagger.client.model.LbServerSslProfileListResult;
import io.swagger.client.model.LbService;
import io.swagger.client.model.LbServiceDebugInfo;
import io.swagger.client.model.LbServiceListResult;
import io.swagger.client.model.LbServiceStatistics;
import io.swagger.client.model.LbServiceStatus;
import io.swagger.client.model.LbServiceUsage;
import io.swagger.client.model.LbSslCipherAndProtocolListResult;
import io.swagger.client.model.LbTcpProfile;
import io.swagger.client.model.LbTcpProfileListResult;
import io.swagger.client.model.LbVirtualServer;
import io.swagger.client.model.LbVirtualServerListResult;
import io.swagger.client.model.LbVirtualServerStatistics;
import io.swagger.client.model.LbVirtualServerStatisticsListResult;
import io.swagger.client.model.LbVirtualServerStatus;
import io.swagger.client.model.LbVirtualServerStatusListResult;
import io.swagger.client.model.LbVirtualServerWithRule;
import io.swagger.client.model.PoolMemberSettingList;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ManagementPlaneApiServicesLoadbalancerApi
 */
@Ignore
public class ManagementPlaneApiServicesLoadbalancerApiTest {

    private final ManagementPlaneApiServicesLoadbalancerApi api = new ManagementPlaneApiServicesLoadbalancerApi();

    /**
     * Create a load balancer application profile
     *
     * Create a load balancer application profile. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createLoadBalancerApplicationProfileTest() throws ApiException {
        LbAppProfile body = null;
        LbAppProfile response = api.createLoadBalancerApplicationProfile(body);

        // TODO: test validations
    }
    /**
     * Create a load balancer client-ssl profile
     *
     * Create a load balancer client-ssl profile. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createLoadBalancerClientSslProfileTest() throws ApiException {
        LbClientSslProfile body = null;
        LbClientSslProfile response = api.createLoadBalancerClientSslProfile(body);

        // TODO: test validations
    }
    /**
     * Create a load balancer monitor
     *
     * Create a load balancer monitor. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createLoadBalancerMonitorTest() throws ApiException {
        LbMonitor body = null;
        LbMonitor response = api.createLoadBalancerMonitor(body);

        // TODO: test validations
    }
    /**
     * Create a load balancer persistence profile
     *
     * Create a load balancer persistence profile. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createLoadBalancerPersistenceProfileTest() throws ApiException {
        LbPersistenceProfile body = null;
        LbPersistenceProfile response = api.createLoadBalancerPersistenceProfile(body);

        // TODO: test validations
    }
    /**
     * Create a load balancer pool
     *
     * Create a load balancer pool. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createLoadBalancerPoolTest() throws ApiException {
        LbPool body = null;
        LbPool response = api.createLoadBalancerPool(body);

        // TODO: test validations
    }
    /**
     * Create a load balancer rule
     *
     * Create a load balancer rule. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createLoadBalancerRuleTest() throws ApiException {
        LbRule body = null;
        LbRule response = api.createLoadBalancerRule(body);

        // TODO: test validations
    }
    /**
     * Create a load balancer server-ssl profile
     *
     * Create a load balancer server-ssl profile. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createLoadBalancerServerSslProfileTest() throws ApiException {
        LbServerSslProfile body = null;
        LbServerSslProfile response = api.createLoadBalancerServerSslProfile(body);

        // TODO: test validations
    }
    /**
     * Create a load balancer service
     *
     * Create a load balancer service. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createLoadBalancerServiceTest() throws ApiException {
        LbService body = null;
        LbService response = api.createLoadBalancerService(body);

        // TODO: test validations
    }
    /**
     * Create a load balancer TCP profile
     *
     * Create a load balancer TCP profile. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createLoadBalancerTcpProfileTest() throws ApiException {
        LbTcpProfile body = null;
        LbTcpProfile response = api.createLoadBalancerTcpProfile(body);

        // TODO: test validations
    }
    /**
     * Create a load balancer virtual server
     *
     * Create a load balancer virtual server. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createLoadBalancerVirtualServerTest() throws ApiException {
        LbVirtualServer body = null;
        LbVirtualServer response = api.createLoadBalancerVirtualServer(body);

        // TODO: test validations
    }
    /**
     * Create a load balancer virtual server with rules
     *
     * It is used to create virtual servers, the associated rules and bind the rules to the virtual server. To add new rules, make sure the rules which have no identifier specified, the new rules are automatically generated and associated to the virtual server. If the virtual server need to consume some existed rules without change, those rules should not be specified in this array, otherwise, the rules are updated. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createLoadBalancerVirtualServerWithRulesCreateWithRulesTest() throws ApiException {
        LbVirtualServerWithRule body = null;
        LbVirtualServerWithRule response = api.createLoadBalancerVirtualServerWithRulesCreateWithRules(body);

        // TODO: test validations
    }
    /**
     * Delete a load balancer application profile
     *
     * Delete a load balancer application profile. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteLoadBalancerApplicationProfileTest() throws ApiException {
        String applicationProfileId = null;
        api.deleteLoadBalancerApplicationProfile(applicationProfileId);

        // TODO: test validations
    }
    /**
     * Delete a load balancer client-ssl profile
     *
     * Delete a load balancer client-ssl profile. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteLoadBalancerClientSslProfileTest() throws ApiException {
        String clientSslProfileId = null;
        api.deleteLoadBalancerClientSslProfile(clientSslProfileId);

        // TODO: test validations
    }
    /**
     * Delete a load balancer monitor
     *
     * Delete a load balancer monitor. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteLoadBalancerMonitorTest() throws ApiException {
        String monitorId = null;
        api.deleteLoadBalancerMonitor(monitorId);

        // TODO: test validations
    }
    /**
     * Delete a load balancer persistence profile
     *
     * Delete a load balancer persistence profile. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteLoadBalancerPersistenceProfileTest() throws ApiException {
        String persistenceProfileId = null;
        api.deleteLoadBalancerPersistenceProfile(persistenceProfileId);

        // TODO: test validations
    }
    /**
     * Delete a load balancer pool
     *
     * Delete a load balancer pool. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteLoadBalancerPoolTest() throws ApiException {
        String poolId = null;
        api.deleteLoadBalancerPool(poolId);

        // TODO: test validations
    }
    /**
     * Delete a load balancer rule
     *
     * Delete a load balancer rule. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteLoadBalancerRuleTest() throws ApiException {
        String ruleId = null;
        api.deleteLoadBalancerRule(ruleId);

        // TODO: test validations
    }
    /**
     * Delete a load balancer server-ssl profile
     *
     * Delete a load balancer server-ssl profile. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteLoadBalancerServerSslProfileTest() throws ApiException {
        String serverSslProfileId = null;
        api.deleteLoadBalancerServerSslProfile(serverSslProfileId);

        // TODO: test validations
    }
    /**
     * Delete a load balancer service
     *
     * Delete a load balancer service. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteLoadBalancerServiceTest() throws ApiException {
        String serviceId = null;
        api.deleteLoadBalancerService(serviceId);

        // TODO: test validations
    }
    /**
     * Delete a load balancer TCP profile
     *
     * Delete a load balancer TCP profile. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteLoadBalancerTcpProfileTest() throws ApiException {
        String tcpProfileId = null;
        api.deleteLoadBalancerTcpProfile(tcpProfileId);

        // TODO: test validations
    }
    /**
     * Delete a load balancer virtual server
     *
     * Delete a load balancer virtual server. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteLoadBalancerVirtualServerTest() throws ApiException {
        String virtualServerId = null;
        Boolean deleteAssociatedRules = null;
        api.deleteLoadBalancerVirtualServer(virtualServerId, deleteAssociatedRules);

        // TODO: test validations
    }
    /**
     * Get the statistics of load balancer pool
     *
     * Returns the statistics of the given load balancer pool by given load balancer serives id and load balancer pool id. Currently, only realtime mode is supported. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLoadBalancerPoolStatisticsTest() throws ApiException {
        String serviceId = null;
        String poolId = null;
        String source = null;
        LbPoolStatistics response = api.getLoadBalancerPoolStatistics(serviceId, poolId, source);

        // TODO: test validations
    }
    /**
     * Get the status of load balancer pool
     *
     * Returns the status of the given load balancer pool by given load balancer serives id and load balancer pool id. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLoadBalancerPoolStatusTest() throws ApiException {
        String serviceId = null;
        String poolId = null;
        String source = null;
        LbPoolStatus response = api.getLoadBalancerPoolStatus(serviceId, poolId, source);

        // TODO: test validations
    }
    /**
     * Get the statistics of load balancer service
     *
     * Returns the statistics of the given load balancer service. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLoadBalancerServiceStatisticsTest() throws ApiException {
        String serviceId = null;
        String source = null;
        LbServiceStatistics response = api.getLoadBalancerServiceStatistics(serviceId, source);

        // TODO: test validations
    }
    /**
     * Get the status of the given load balancer service
     *
     * Returns the status of the given load balancer service. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLoadBalancerServiceStatusTest() throws ApiException {
        String serviceId = null;
        String source = null;
        LbServiceStatus response = api.getLoadBalancerServiceStatus(serviceId, source);

        // TODO: test validations
    }
    /**
     * Get the statistics of the given load balancer virtual server
     *
     * Returns the statistics of the load balancer virtual server by given load  balancer serives id and load balancer virtual server id. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLoadBalancerVirtualServerStatisticsTest() throws ApiException {
        String serviceId = null;
        String virtualServerId = null;
        String source = null;
        LbVirtualServerStatistics response = api.getLoadBalancerVirtualServerStatistics(serviceId, virtualServerId, source);

        // TODO: test validations
    }
    /**
     * Get the status of the load balancer virtual server
     *
     * Returns the status of the virtual server by given load balancer serives id and load balancer virtual server id. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLoadBalancerVirtualServerStatusTest() throws ApiException {
        String serviceId = null;
        String virtualServerId = null;
        String source = null;
        LbVirtualServerStatus response = api.getLoadBalancerVirtualServerStatus(serviceId, virtualServerId, source);

        // TODO: test validations
    }
    /**
     * Retrieve a paginated list of load balancer application profiles
     *
     * Retrieve a paginated list of load balancer application profiles. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listLoadBalancerApplicationProfilesTest() throws ApiException {
        String cursor = null;
        String includedFields = null;
        Long pageSize = null;
        Boolean sortAscending = null;
        String sortBy = null;
        String type = null;
        LbAppProfileListResult response = api.listLoadBalancerApplicationProfiles(cursor, includedFields, pageSize, sortAscending, sortBy, type);

        // TODO: test validations
    }
    /**
     * Retrieve a paginated list of load balancer client-ssl profiles
     *
     * Retrieve a paginated list of load balancer client-ssl profiles. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listLoadBalancerClientSslProfilesTest() throws ApiException {
        String cursor = null;
        String includedFields = null;
        Long pageSize = null;
        Boolean sortAscending = null;
        String sortBy = null;
        LbClientSslProfileListResult response = api.listLoadBalancerClientSslProfiles(cursor, includedFields, pageSize, sortAscending, sortBy);

        // TODO: test validations
    }
    /**
     * Retrieve a paginated list of load balancer monitors
     *
     * Retrieve a paginated list of load balancer monitors. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listLoadBalancerMonitorsTest() throws ApiException {
        String cursor = null;
        String includedFields = null;
        Long pageSize = null;
        Boolean sortAscending = null;
        String sortBy = null;
        String type = null;
        LbMonitorListResult response = api.listLoadBalancerMonitors(cursor, includedFields, pageSize, sortAscending, sortBy, type);

        // TODO: test validations
    }
    /**
     * Retrieve a paginated list of load balancer persistence profiles
     *
     * Retrieve a paginated list of load balancer persistence profiles. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listLoadBalancerPersistenceProfilesTest() throws ApiException {
        String cursor = null;
        String includedFields = null;
        Long pageSize = null;
        Boolean sortAscending = null;
        String sortBy = null;
        String type = null;
        LbPersistenceProfileListResult response = api.listLoadBalancerPersistenceProfiles(cursor, includedFields, pageSize, sortAscending, sortBy, type);

        // TODO: test validations
    }
    /**
     * Get the statistics list of load balancer pools
     *
     * Returns the statistics list of load balancer pools in given load balancer service. Currently, only realtime mode is supported. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listLoadBalancerPoolStatisticsTest() throws ApiException {
        String serviceId = null;
        String source = null;
        LbPoolStatisticsListResult response = api.listLoadBalancerPoolStatistics(serviceId, source);

        // TODO: test validations
    }
    /**
     * Get the status list of load balancer pools
     *
     * Returns the status list of load balancer pools in given load balancer service. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listLoadBalancerPoolStatusesTest() throws ApiException {
        String serviceId = null;
        String source = null;
        LbPoolStatusListResult response = api.listLoadBalancerPoolStatuses(serviceId, source);

        // TODO: test validations
    }
    /**
     * Retrieve a paginated list of load balancer pools
     *
     * Retrieve a paginated list of load balancer pools. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listLoadBalancerPoolsTest() throws ApiException {
        String cursor = null;
        String includedFields = null;
        Long pageSize = null;
        Boolean sortAscending = null;
        String sortBy = null;
        LbPoolListResult response = api.listLoadBalancerPools(cursor, includedFields, pageSize, sortAscending, sortBy);

        // TODO: test validations
    }
    /**
     * Retrieve a paginated list of load balancer rules
     *
     * Retrieve a paginated list of load balancer rules. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listLoadBalancerRulesTest() throws ApiException {
        String cursor = null;
        String includedFields = null;
        Long pageSize = null;
        Boolean sortAscending = null;
        String sortBy = null;
        LbRuleListResult response = api.listLoadBalancerRules(cursor, includedFields, pageSize, sortAscending, sortBy);

        // TODO: test validations
    }
    /**
     * Retrieve a paginated list of load balancer server-ssl profiles
     *
     * Retrieve a paginated list of load balancer server-ssl profiles. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listLoadBalancerServerSslProfilesTest() throws ApiException {
        String cursor = null;
        String includedFields = null;
        Long pageSize = null;
        Boolean sortAscending = null;
        String sortBy = null;
        LbServerSslProfileListResult response = api.listLoadBalancerServerSslProfiles(cursor, includedFields, pageSize, sortAscending, sortBy);

        // TODO: test validations
    }
    /**
     * Retrieve a paginated list of load balancer services
     *
     * Retrieve a paginated list of load balancer services. When logical_router_id is specified in request parameters, the associated load balancer services which are related to the given logical router returned. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listLoadBalancerServicesTest() throws ApiException {
        String cursor = null;
        String includedFields = null;
        String logicalRouterId = null;
        Long pageSize = null;
        Boolean sortAscending = null;
        String sortBy = null;
        LbServiceListResult response = api.listLoadBalancerServices(cursor, includedFields, logicalRouterId, pageSize, sortAscending, sortBy);

        // TODO: test validations
    }
    /**
     * Retrieve a list of supported SSL ciphers and protocols
     *
     * Retrieve a list of supported SSL ciphers and protocols. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listLoadBalancerSslCiphersAndProtocolsTest() throws ApiException {
        String cursor = null;
        String includedFields = null;
        Long pageSize = null;
        Boolean sortAscending = null;
        String sortBy = null;
        LbSslCipherAndProtocolListResult response = api.listLoadBalancerSslCiphersAndProtocols(cursor, includedFields, pageSize, sortAscending, sortBy);

        // TODO: test validations
    }
    /**
     * Retrieve a paginated list of load balancer TCP profiles
     *
     * Retrieve a paginated list of load balancer TCP profiles. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listLoadBalancerTcpProfilesTest() throws ApiException {
        String cursor = null;
        String includedFields = null;
        Long pageSize = null;
        Boolean sortAscending = null;
        String sortBy = null;
        LbTcpProfileListResult response = api.listLoadBalancerTcpProfiles(cursor, includedFields, pageSize, sortAscending, sortBy);

        // TODO: test validations
    }
    /**
     * Get the status list of virtual servers in given load balancer service
     *
     * Returns the status list of virtual servers in given load balancer service. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listLoadBalancerVirtualServerStatusesTest() throws ApiException {
        String serviceId = null;
        String source = null;
        LbVirtualServerStatusListResult response = api.listLoadBalancerVirtualServerStatuses(serviceId, source);

        // TODO: test validations
    }
    /**
     * Retrieve a paginated list of load balancer virtual servers
     *
     * Retrieve a paginated list of load balancer virtual servers. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listLoadBalancerVirtualServersTest() throws ApiException {
        String cursor = null;
        String includedFields = null;
        Long pageSize = null;
        Boolean sortAscending = null;
        String sortBy = null;
        LbVirtualServerListResult response = api.listLoadBalancerVirtualServers(cursor, includedFields, pageSize, sortAscending, sortBy);

        // TODO: test validations
    }
    /**
     * Get the statistics list of virtual servers
     *
     * Returns the statistics list of virtual servers in given load balancer service. Currently, only realtime mode is supported. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listLoadBalancerVirtualServersStatisticsTest() throws ApiException {
        String serviceId = null;
        String source = null;
        LbVirtualServerStatisticsListResult response = api.listLoadBalancerVirtualServersStatistics(serviceId, source);

        // TODO: test validations
    }
    /**
     * Add, remove, or modify load balancer pool members
     *
     * For ADD_MEMBERS, pool members will be created and added to load balancer pool. This action is only valid for static pool members. For REMOVE_MEMBERS, pool members will be removed from load balancer pool via IP and port in pool member settings. This action is only valid for static pool members. For UPDATE_MEMBERS, pool members admin state will be updated. This action is valid for both static pool members and dynamic pool members. For dynamic pool members, this update will be stored in customized_members field in load balancer pool member group. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void performPoolMemberActionTest() throws ApiException {
        PoolMemberSettingList body = null;
        String action = null;
        String poolId = null;
        LbPool response = api.performPoolMemberAction(body, action, poolId);

        // TODO: test validations
    }
    /**
     * Retrieve a load balancer application profile
     *
     * Retrieve a load balancer application profile. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readLoadBalancerApplicationProfileTest() throws ApiException {
        String applicationProfileId = null;
        LbAppProfile response = api.readLoadBalancerApplicationProfile(applicationProfileId);

        // TODO: test validations
    }
    /**
     * Retrieve a load balancer client-ssl profile
     *
     * Retrieve a load balancer client-ssl profile. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readLoadBalancerClientSslProfileTest() throws ApiException {
        String clientSslProfileId = null;
        LbClientSslProfile response = api.readLoadBalancerClientSslProfile(clientSslProfileId);

        // TODO: test validations
    }
    /**
     * Retrieve a load balancer monitor
     *
     * Retrieve a load balancer monitor. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readLoadBalancerMonitorTest() throws ApiException {
        String monitorId = null;
        LbMonitor response = api.readLoadBalancerMonitor(monitorId);

        // TODO: test validations
    }
    /**
     * Read load balancer usage for the given node
     *
     * API is used to retrieve the usage of load balancer entities which include current number and remaining number of credits, virtual Servers, pools, pool Members and different size of LB services from the given node. Currently only Edge node is supported. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readLoadBalancerNodeUsageTest() throws ApiException {
        String nodeId = null;
        LbNodeUsage response = api.readLoadBalancerNodeUsage(nodeId);

        // TODO: test validations
    }
    /**
     * Read load balancer node usage summary
     *
     * API is used to retrieve the load balancer node usage summary for all nodes. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readLoadBalancerNodeUsageSummaryTest() throws ApiException {
        Boolean includeUsages = null;
        LbNodeUsageSummary response = api.readLoadBalancerNodeUsageSummary(includeUsages);

        // TODO: test validations
    }
    /**
     * Retrieve a load balancer persistence profile
     *
     * Retrieve a load balancer persistence profile. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readLoadBalancerPersistenceProfileTest() throws ApiException {
        String persistenceProfileId = null;
        LbPersistenceProfile response = api.readLoadBalancerPersistenceProfile(persistenceProfileId);

        // TODO: test validations
    }
    /**
     * Retrieve a load balancer pool
     *
     * Retrieve a load balancer pool. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readLoadBalancerPoolTest() throws ApiException {
        String poolId = null;
        LbPool response = api.readLoadBalancerPool(poolId);

        // TODO: test validations
    }
    /**
     * Retrieve a load balancer rule
     *
     * Retrieve a load balancer rule. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readLoadBalancerRuleTest() throws ApiException {
        String ruleId = null;
        LbRule response = api.readLoadBalancerRule(ruleId);

        // TODO: test validations
    }
    /**
     * Retrieve a load balancer server-ssl profile
     *
     * Retrieve a load balancer server-ssl profile. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readLoadBalancerServerSslProfileTest() throws ApiException {
        String serverSslProfileId = null;
        LbServerSslProfile response = api.readLoadBalancerServerSslProfile(serverSslProfileId);

        // TODO: test validations
    }
    /**
     * Retrieve a load balancer service
     *
     * Retrieve a load balancer service. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readLoadBalancerServiceTest() throws ApiException {
        String serviceId = null;
        LbService response = api.readLoadBalancerService(serviceId);

        // TODO: test validations
    }
    /**
     * Read the debug information of the load balancer service
     *
     * API to download below information which will be used for debugging and troubleshooting. 1) Load balancer service 2) Load balancer associated virtual servers 3) Load balancer associated pools 4) Load balancer associated profiles such as persistence, SSL, application. 5) Load balancer associated monitors 6) Load balancer associated rules 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readLoadBalancerServiceDebugInfoTest() throws ApiException {
        String serviceId = null;
        LbServiceDebugInfo response = api.readLoadBalancerServiceDebugInfo(serviceId);

        // TODO: test validations
    }
    /**
     * Read the usage information of the given load balancer service
     *
     * API to fetch the capacity and current usage of the given load balancer service. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readLoadBalancerServiceUsageTest() throws ApiException {
        String serviceId = null;
        LbServiceUsage response = api.readLoadBalancerServiceUsage(serviceId);

        // TODO: test validations
    }
    /**
     * Retrieve a load balancer TCP profile
     *
     * Retrieve a load balancer TCP profile. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readLoadBalancerTcpProfileTest() throws ApiException {
        String tcpProfileId = null;
        LbTcpProfile response = api.readLoadBalancerTcpProfile(tcpProfileId);

        // TODO: test validations
    }
    /**
     * Retrieve a load balancer virtual server
     *
     * Retrieve a load balancer virtual server. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readLoadBalancerVirtualServerTest() throws ApiException {
        String virtualServerId = null;
        LbVirtualServer response = api.readLoadBalancerVirtualServer(virtualServerId);

        // TODO: test validations
    }
    /**
     * Update a load balancer application profile
     *
     * Update a load balancer application profile. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateLoadBalancerApplicationProfileTest() throws ApiException {
        LbAppProfile body = null;
        String applicationProfileId = null;
        LbAppProfile response = api.updateLoadBalancerApplicationProfile(body, applicationProfileId);

        // TODO: test validations
    }
    /**
     * Update a load balancer client-ssl profile
     *
     * Update a load balancer client-ssl profile. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateLoadBalancerClientSslProfileTest() throws ApiException {
        LbClientSslProfile body = null;
        String clientSslProfileId = null;
        LbClientSslProfile response = api.updateLoadBalancerClientSslProfile(body, clientSslProfileId);

        // TODO: test validations
    }
    /**
     * Update a load balancer monitor
     *
     * Update a load balancer monitor. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateLoadBalancerMonitorTest() throws ApiException {
        LbMonitor body = null;
        String monitorId = null;
        LbMonitor response = api.updateLoadBalancerMonitor(body, monitorId);

        // TODO: test validations
    }
    /**
     * Update a load balancer persistence profile
     *
     * Update a load balancer persistence profile. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateLoadBalancerPersistenceProfileTest() throws ApiException {
        LbPersistenceProfile body = null;
        String persistenceProfileId = null;
        LbPersistenceProfile response = api.updateLoadBalancerPersistenceProfile(body, persistenceProfileId);

        // TODO: test validations
    }
    /**
     * Update a load balancer pool
     *
     * Update a load balancer pool. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateLoadBalancerPoolTest() throws ApiException {
        LbPool body = null;
        String poolId = null;
        LbPool response = api.updateLoadBalancerPool(body, poolId);

        // TODO: test validations
    }
    /**
     * Update a load balancer rule
     *
     * Update a load balancer rule. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateLoadBalancerRuleTest() throws ApiException {
        LbRule body = null;
        String ruleId = null;
        LbRule response = api.updateLoadBalancerRule(body, ruleId);

        // TODO: test validations
    }
    /**
     * Update a load balancer server-ssl profile
     *
     * Update a load balancer server-ssl profile. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateLoadBalancerServerSslProfileTest() throws ApiException {
        LbServerSslProfile body = null;
        String serverSslProfileId = null;
        LbServerSslProfile response = api.updateLoadBalancerServerSslProfile(body, serverSslProfileId);

        // TODO: test validations
    }
    /**
     * Update a load balancer service
     *
     * Update a load balancer service. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateLoadBalancerServiceTest() throws ApiException {
        LbService body = null;
        String serviceId = null;
        LbService response = api.updateLoadBalancerService(body, serviceId);

        // TODO: test validations
    }
    /**
     * Update a load balancer TCP profile
     *
     * Update a load balancer TCP profile. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateLoadBalancerTcpProfileTest() throws ApiException {
        LbTcpProfile body = null;
        String tcpProfileId = null;
        LbTcpProfile response = api.updateLoadBalancerTcpProfile(body, tcpProfileId);

        // TODO: test validations
    }
    /**
     * Update a load balancer virtual server
     *
     * Update a load balancer virtual server. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateLoadBalancerVirtualServerTest() throws ApiException {
        LbVirtualServer body = null;
        String virtualServerId = null;
        LbVirtualServer response = api.updateLoadBalancerVirtualServer(body, virtualServerId);

        // TODO: test validations
    }
    /**
     * Update a load balancer virtual server with rules
     *
     * It is used to update virtual servers, the associated rules and update the binding of virtual server and rules. To add new rules, make sure the rules which have no identifier specified, the new rules are automatically generated and associated to the virtual server. To delete old rules, the rules should not be configured in new action, the UUID of deleted rules should be also removed from rule_ids. To update rules, the rules should be specified with new change and configured with identifier. If there are some rules which are not modified, those rule should not be specified in the rules list, the UUID list of rules should be specified in rule_ids of LbVirtualServer. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateLoadBalancerVirtualServerWithRulesUpdateWithRulesTest() throws ApiException {
        LbVirtualServerWithRule body = null;
        String virtualServerId = null;
        LbVirtualServerWithRule response = api.updateLoadBalancerVirtualServerWithRulesUpdateWithRules(body, virtualServerId);

        // TODO: test validations
    }
}
