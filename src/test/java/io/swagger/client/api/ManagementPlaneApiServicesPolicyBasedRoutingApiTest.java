/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.ApiError;
import io.swagger.client.model.PBRRule;
import io.swagger.client.model.PBRRuleList;
import io.swagger.client.model.PBRRuleListResult;
import io.swagger.client.model.PBRSection;
import io.swagger.client.model.PBRSectionListResult;
import io.swagger.client.model.PBRSectionRuleList;
import io.swagger.client.model.PBRStats;
import io.swagger.client.model.PBRStatsList;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ManagementPlaneApiServicesPolicyBasedRoutingApi
 */
@Ignore
public class ManagementPlaneApiServicesPolicyBasedRoutingApiTest {

    private final ManagementPlaneApiServicesPolicyBasedRoutingApi api = new ManagementPlaneApiServicesPolicyBasedRoutingApi();

    /**
     * Add a Single Rule in a Section
     *
     * Adds a new PBR rule in existing PBR section. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addPBRRuleInSectionTest() throws ApiException {
        PBRRule body = null;
        String sectionId = null;
        String id = null;
        String operation = null;
        PBRRule response = api.addPBRRuleInSection(body, sectionId, id, operation);

        // TODO: test validations
    }
    /**
     * Add Multiple Rules in a Section
     *
     * Create multiple PBR rules in existing PBR section bounded by limit of 1000 PBR rules per section. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addPBRRulesInSectionCreateMultipleTest() throws ApiException {
        PBRRuleList body = null;
        String sectionId = null;
        String id = null;
        String operation = null;
        PBRRuleList response = api.addPBRRulesInSectionCreateMultiple(body, sectionId, id, operation);

        // TODO: test validations
    }
    /**
     * Create a New Empty Section
     *
     * Creates new empty PBR section in the system. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addPBRSectionTest() throws ApiException {
        PBRSection body = null;
        String id = null;
        String operation = null;
        PBRSection response = api.addPBRSection(body, id, operation);

        // TODO: test validations
    }
    /**
     * Create a Section with Rules
     *
     * Creates a new PBR section with rules. The limit on the number of rules is defined by maxItems in collection types for PBRRule (PBRRuleXXXList types). When invoked on a section with a large number of rules, this API is supported only at low rates of invocation (not more than 4-5 times per minute). The typical latency of this API with about 1024 rules is about 4-5 seconds. This API should not be invoked with large payloads at automation speeds. More than 50 rules with a large number of rule references is not supported.  Instead, to create sections, use: POST /api/v1/pbr/sections  To create rules, use: POST /api/v1/pbr/sections/&amp;lt;section-id&amp;gt;/rules 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addPBRSectionWithRulesCreateWithRulesTest() throws ApiException {
        PBRSectionRuleList body = null;
        String id = null;
        String operation = null;
        PBRSectionRuleList response = api.addPBRSectionWithRulesCreateWithRules(body, id, operation);

        // TODO: test validations
    }
    /**
     * Delete an Existing Rule
     *
     * Delete existing PBR rule in a PBR section. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePBRRuleTest() throws ApiException {
        String sectionId = null;
        String ruleId = null;
        api.deletePBRRule(sectionId, ruleId);

        // TODO: test validations
    }
    /**
     * Delete an Existing Section and Its Associated Rules
     *
     * Removes PBR section from the system. PBR section with rules can only be deleted by passing \&quot;cascade&#x3D;true\&quot; parameter. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePBRSectionTest() throws ApiException {
        String sectionId = null;
        Boolean cascade = null;
        api.deletePBRSection(sectionId, cascade);

        // TODO: test validations
    }
    /**
     * Read an Existing Rule
     *
     * Return existing PBR rule information in a PBR section. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPBRRuleTest() throws ApiException {
        String sectionId = null;
        String ruleId = null;
        PBRRule response = api.getPBRRule(sectionId, ruleId);

        // TODO: test validations
    }
    /**
     * Get PBR rule level statistics.
     *
     * Get aggregated statistics for a rule for given PBR rule. Stats include total number of packets and total number of bytes for the PBR rule. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPBRRuleStatsTest() throws ApiException {
        String sectionId = null;
        String ruleId = null;
        PBRStats response = api.getPBRRuleStats(sectionId, ruleId);

        // TODO: test validations
    }
    /**
     * Get All the Rules for a Section
     *
     * Return all PBR rule(s) information for a given PBR section. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPBRRulesTest() throws ApiException {
        String sectionId = null;
        String appliedTos = null;
        String cursor = null;
        String destinations = null;
        String filterType = null;
        String includedFields = null;
        Long pageSize = null;
        String services = null;
        Boolean sortAscending = null;
        String sortBy = null;
        String sources = null;
        PBRRuleListResult response = api.getPBRRules(sectionId, appliedTos, cursor, destinations, filterType, includedFields, pageSize, services, sortAscending, sortBy, sources);

        // TODO: test validations
    }
    /**
     * Get an Existing Section
     *
     * Returns information about PBR section for the identifier. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPBRSectionTest() throws ApiException {
        String sectionId = null;
        PBRSection response = api.getPBRSection(sectionId);

        // TODO: test validations
    }
    /**
     * Get PBR section level statistics.
     *
     * Get aggregated statistics for all rules for a given pbr section. Data includes total number of packets, and total number of bytes for all PBR rules in the given section. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPBRSectionStatsTest() throws ApiException {
        String sectionId = null;
        PBRStatsList response = api.getPBRSectionStats(sectionId);

        // TODO: test validations
    }
    /**
     * Get an Existing Section, Including Rules
     *
     * Returns PBR section information with rules for a section identifier. When invoked on a section with a large number of rules, this API is supported only at low rates of invocation (not more than 4-5 times per minute). The typical latency of this API with about 1024 rules is about 4-5 seconds. This API should not be invoked with large payloads at automation speeds. More than 50 rules with a large number rule references is not supported.  Instead, to read PBR rules, use: GET /api/v1/pbr/sections/&amp;lt;section-id&amp;gt;/rules with the appropriate page_size. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPBRSectionWithRulesListWithRulesTest() throws ApiException {
        String sectionId = null;
        PBRSectionRuleList response = api.getPBRSectionWithRulesListWithRules(sectionId);

        // TODO: test validations
    }
    /**
     * List All PBR Sections
     *
     * List all PBR section in paginated form. A default page size is limited to 1000 PBR sections. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listPBRSectionsTest() throws ApiException {
        String appliedTos = null;
        String cursor = null;
        String destinations = null;
        String excludeAppliedToType = null;
        String filterType = null;
        String includeAppliedToType = null;
        String includedFields = null;
        Long pageSize = null;
        String services = null;
        Boolean sortAscending = null;
        String sortBy = null;
        String sources = null;
        PBRSectionListResult response = api.listPBRSections(appliedTos, cursor, destinations, excludeAppliedToType, filterType, includeAppliedToType, includedFields, pageSize, services, sortAscending, sortBy, sources);

        // TODO: test validations
    }
    /**
     * Update an Existing Rule and Reorder the Rule
     *
     * Modifies existing PBR rule along with relative position among other PBR rules inside a PBR section. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void revisePBRRuleReviseTest() throws ApiException {
        PBRRule body = null;
        String sectionId = null;
        String ruleId = null;
        String id = null;
        String operation = null;
        PBRRule response = api.revisePBRRuleRevise(body, sectionId, ruleId, id, operation);

        // TODO: test validations
    }
    /**
     * Update an Existing Section, including Its Position
     *
     * Modifies an existing PBR section along with its relative position among other PBR sections in the system. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void revisePBRSectionReviseTest() throws ApiException {
        PBRSection body = null;
        String sectionId = null;
        String id = null;
        String operation = null;
        PBRSection response = api.revisePBRSectionRevise(body, sectionId, id, operation);

        // TODO: test validations
    }
    /**
     * Update an Existing Section with Rules
     *
     * Modifies an existing PBR section along with its relative position among other PBR sections with rules. When invoked on a large number of rules, this API is supported only at low rates of invocation (not more than 2 times per minute). The typical latency of this API with about 1024 rules is about 15 seconds in a cluster setup. This API should not be invoked with large payloads at automation speeds.  Instead, to move a section above or below another section, use: POST /api/v1/pbr/sections/&amp;lt;section-id&amp;gt;?action&#x3D;revise  To modify rules, use: PUT /api/v1/pbr/sections/&amp;lt;section-id&amp;gt;/rules/&amp;lt;rule-id&amp;gt; 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void revisePBRSectionWithRulesReviseWithRulesTest() throws ApiException {
        PBRSectionRuleList body = null;
        String sectionId = null;
        String id = null;
        String operation = null;
        PBRSectionRuleList response = api.revisePBRSectionWithRulesReviseWithRules(body, sectionId, id, operation);

        // TODO: test validations
    }
    /**
     * Update an Existing Rule
     *
     * Modifies existing rule in a PBR section. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updatePBRRuleTest() throws ApiException {
        PBRRule body = null;
        String sectionId = null;
        String ruleId = null;
        PBRRule response = api.updatePBRRule(body, sectionId, ruleId);

        // TODO: test validations
    }
    /**
     * Update an Existing Section
     *
     * Modifies the specified section, but does not modify the section&#x27;s associated rules. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updatePBRSectionTest() throws ApiException {
        PBRSection body = null;
        String sectionId = null;
        PBRSection response = api.updatePBRSection(body, sectionId);

        // TODO: test validations
    }
    /**
     * Update an Existing Section, Including Its Rules
     *
     * Modifies existing PBR section along with its association with rules. When invoked on a large number of rules, this API is supported only at low rates of invocation (not more than 2 times per minute). The typical latency of this API with about 1024 rules is about 15 seconds in a cluster setup. This API should not be invoked with large payloads at automation speeds.  Instead, to update rule content, use: PUT /api/v1/pbr/sections/&amp;lt;section-id&amp;gt;/rules/&amp;lt;rule-id&amp;gt; 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updatePBRSectionWithRulesUpdateWithRulesTest() throws ApiException {
        PBRSectionRuleList body = null;
        String sectionId = null;
        PBRSectionRuleList response = api.updatePBRSectionWithRulesUpdateWithRules(body, sectionId);

        // TODO: test validations
    }
}
