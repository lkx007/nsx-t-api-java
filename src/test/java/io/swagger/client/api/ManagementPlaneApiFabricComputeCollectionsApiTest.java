/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.ApiError;
import io.swagger.client.model.ComputeCollection;
import io.swagger.client.model.ComputeCollectionFabricTemplate;
import io.swagger.client.model.ComputeCollectionFabricTemplateListResult;
import io.swagger.client.model.ComputeCollectionListResult;
import io.swagger.client.model.ComputeCollectionNetworkInterfacesListResult;
import io.swagger.client.model.HostNodeStatusListResult;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ManagementPlaneApiFabricComputeCollectionsApi
 */
@Ignore
public class ManagementPlaneApiFabricComputeCollectionsApiTest {

    private final ManagementPlaneApiFabricComputeCollectionsApi api = new ManagementPlaneApiFabricComputeCollectionsApi();

    /**
     * Create a compute collection fabric template
     *
     * Fabric templates are fabric configurations applied at the compute collection level. This configurations is used to decide what automated operations should be a run when a host membership changes.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createComputeCollectionFabricTemplateTest() throws ApiException {
        ComputeCollectionFabricTemplate body = null;
        ComputeCollectionFabricTemplate response = api.createComputeCollectionFabricTemplate(body);

        // TODO: test validations
    }
    /**
     * Deletes compute collection fabric template
     *
     * Deletes compute collection fabric template for the given id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteComputeCollectionFabricTemplateTest() throws ApiException {
        String fabricTemplateId = null;
        api.deleteComputeCollectionFabricTemplate(fabricTemplateId);

        // TODO: test validations
    }
    /**
     * Get compute collection fabric template by id
     *
     * Get compute collection fabric template for the given id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getComputeCollectionFabricTemplateTest() throws ApiException {
        String fabricTemplateId = null;
        ComputeCollectionFabricTemplate response = api.getComputeCollectionFabricTemplate(fabricTemplateId);

        // TODO: test validations
    }
    /**
     * Get status of member host nodes of the compute-collection. Only nsx prepared host nodes in the specified compute-collection are included in the response. cc-ext-id should be of type VC_Cluster.
     *
     * Get status of member host nodes of the compute-collection. Only nsx prepared host nodes in the specified compute-collection are included in the response. cc-ext-id should be of type VC_Cluster.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getHostNodeStatusOnComputeCollectionTest() throws ApiException {
        String ccExtId = null;
        HostNodeStatusListResult response = api.getHostNodeStatusOnComputeCollection(ccExtId);

        // TODO: test validations
    }
    /**
     * Get compute collection fabric templates
     *
     * Returns compute collection fabric templates
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listComputeCollectionFabricTemplatesTest() throws ApiException {
        String computeCollectionId = null;
        ComputeCollectionFabricTemplateListResult response = api.listComputeCollectionFabricTemplates(computeCollectionId);

        // TODO: test validations
    }
    /**
     * List the Physical Network Interface for all discovered nodes
     *
     * Returns list of physical network interfaces for all discovered nodes in compute collection. Interface information includes PNIC name, hostswitch name it&#x27;s attached to(if any) and MAC address. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listComputeCollectionPhysicalNetworkInterfacesTest() throws ApiException {
        String ccExtId = null;
        ComputeCollectionNetworkInterfacesListResult response = api.listComputeCollectionPhysicalNetworkInterfaces(ccExtId);

        // TODO: test validations
    }
    /**
     * Return the List of Compute Collections
     *
     * Returns information about all compute collections.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listComputeCollectionsTest() throws ApiException {
        String cmLocalId = null;
        String cursor = null;
        String discoveredNodeId = null;
        String displayName = null;
        String externalId = null;
        String includedFields = null;
        String nodeId = null;
        String originId = null;
        String originType = null;
        String ownerId = null;
        Long pageSize = null;
        Boolean sortAscending = null;
        String sortBy = null;
        ComputeCollectionListResult response = api.listComputeCollections(cmLocalId, cursor, discoveredNodeId, displayName, externalId, includedFields, nodeId, originId, originType, ownerId, pageSize, sortAscending, sortBy);

        // TODO: test validations
    }
    /**
     * Perform action specific to NSX on the compute-collection. cc-ext-id should be of type VC_Cluster.
     *
     * Perform action specific to NSX on the compute-collection. cc-ext-id should be of type VC_Cluster.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void performActionOnComputeCollectionTest() throws ApiException {
        String ccExtId = null;
        String action = null;
        api.performActionOnComputeCollection(ccExtId, action);

        // TODO: test validations
    }
    /**
     * Return Compute Collection Information
     *
     * Returns information about a specific compute collection.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readComputeCollectionTest() throws ApiException {
        String ccExtId = null;
        ComputeCollection response = api.readComputeCollection(ccExtId);

        // TODO: test validations
    }
    /**
     * Updates compute collection fabric template
     *
     * Updates compute collection fabric template for the given id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateComputeCollectionFabricTemplateTest() throws ApiException {
        ComputeCollectionFabricTemplate body = null;
        String fabricTemplateId = null;
        ComputeCollectionFabricTemplate response = api.updateComputeCollectionFabricTemplate(body, fabricTemplateId);

        // TODO: test validations
    }
}
