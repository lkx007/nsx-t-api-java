/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.ApiError;
import io.swagger.client.model.MACAddressElement;
import io.swagger.client.model.MACAddressElementListResult;
import io.swagger.client.model.MACSet;
import io.swagger.client.model.MACSetListResult;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ManagementPlaneApiGroupingObjectsMacSetsApi
 */
@Ignore
public class ManagementPlaneApiGroupingObjectsMacSetsApiTest {

    private final ManagementPlaneApiGroupingObjectsMacSetsApi api = new ManagementPlaneApiGroupingObjectsMacSetsApi();

    /**
     * Add a MAC address to a MACSet
     *
     * Add an individual MAC address to a MACSet 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addMACAddressTest() throws ApiException {
        MACAddressElement body = null;
        String macSetId = null;
        MACAddressElement response = api.addMACAddress(body, macSetId);

        // TODO: test validations
    }
    /**
     * Create MACSet
     *
     * Creates a new MACSet that can group individual MAC addresses. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createMACSetTest() throws ApiException {
        MACSet body = null;
        MACSet response = api.createMACSet(body);

        // TODO: test validations
    }
    /**
     * Delete MACSet
     *
     * Deletes the specified MACSet. By default, if the MACSet is added to an NSGroup, it won&#x27;t be deleted. In such situations, pass \&quot;force&#x3D;true\&quot; as query param to force delete the MACSet. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteMACSetTest() throws ApiException {
        String macSetId = null;
        Boolean force = null;
        api.deleteMACSet(macSetId, force);

        // TODO: test validations
    }
    /**
     * Get all MACAddresses in a MACSet
     *
     * List all MAC addresses in a MACSet 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMACAddressesTest() throws ApiException {
        String macSetId = null;
        MACAddressElementListResult response = api.getMACAddresses(macSetId);

        // TODO: test validations
    }
    /**
     * List MACSets
     *
     * Returns paginated list of MACSets 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listMACSetsTest() throws ApiException {
        String cursor = null;
        String includedFields = null;
        Long pageSize = null;
        Boolean sortAscending = null;
        String sortBy = null;
        MACSetListResult response = api.listMACSets(cursor, includedFields, pageSize, sortAscending, sortBy);

        // TODO: test validations
    }
    /**
     * Read MACSet
     *
     * Returns information about the specified MACSet 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readMACSetTest() throws ApiException {
        String macSetId = null;
        MACSet response = api.readMACSet(macSetId);

        // TODO: test validations
    }
    /**
     * Remove a MAC address from given MACSet
     *
     * Remove an individual MAC address from a MACSet 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removeMACAddressTest() throws ApiException {
        String macSetId = null;
        String macAddress = null;
        api.removeMACAddress(macSetId, macAddress);

        // TODO: test validations
    }
    /**
     * Update MACSet
     *
     * Updates the specified MACSet. Modifiable parameters include the description, display_name and mac_addresses. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateMACSetTest() throws ApiException {
        MACSet body = null;
        String macSetId = null;
        MACSet response = api.updateMACSet(body, macSetId);

        // TODO: test validations
    }
}
