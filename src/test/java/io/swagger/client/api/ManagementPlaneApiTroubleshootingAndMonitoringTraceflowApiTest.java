/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.ApiError;
import io.swagger.client.model.Traceflow;
import io.swagger.client.model.TraceflowListResult;
import io.swagger.client.model.TraceflowObservationListResult;
import io.swagger.client.model.TraceflowRequest;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ManagementPlaneApiTroubleshootingAndMonitoringTraceflowApi
 */
@Ignore
public class ManagementPlaneApiTroubleshootingAndMonitoringTraceflowApiTest {

    private final ManagementPlaneApiTroubleshootingAndMonitoringTraceflowApi api = new ManagementPlaneApiTroubleshootingAndMonitoringTraceflowApi();

    /**
     * Initiate a Traceflow Operation on the Specified Port
     *
     * Initiate a Traceflow Operation on the Specified Port
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createTraceflowTest() throws ApiException {
        TraceflowRequest body = null;
        Traceflow response = api.createTraceflow(body);

        // TODO: test validations
    }
    /**
     * Delete the Traceflow round
     *
     * Delete the Traceflow round
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteTraceflowTest() throws ApiException {
        String traceflowId = null;
        api.deleteTraceflow(traceflowId);

        // TODO: test validations
    }
    /**
     * Get the Traceflow round status and result summary
     *
     * Get the Traceflow round status and result summary
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTraceflowTest() throws ApiException {
        String traceflowId = null;
        Traceflow response = api.getTraceflow(traceflowId);

        // TODO: test validations
    }
    /**
     * Get observations for the Traceflow round
     *
     * Get observations for the Traceflow round
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTraceflowObservationsTest() throws ApiException {
        String traceflowId = null;
        String componentName = null;
        String componentType = null;
        String cursor = null;
        String includedFields = null;
        Long pageSize = null;
        String resourceType = null;
        Boolean sortAscending = null;
        String sortBy = null;
        String transportNodeName = null;
        TraceflowObservationListResult response = api.getTraceflowObservations(traceflowId, componentName, componentType, cursor, includedFields, pageSize, resourceType, sortAscending, sortBy, transportNodeName);

        // TODO: test validations
    }
    /**
     * List all Traceflow rounds
     *
     * List all Traceflow rounds; if a logical port id is given as a query parameter, only those originated from the logical port are returned. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listTraceflowsTest() throws ApiException {
        String cursor = null;
        String includedFields = null;
        String lportId = null;
        Long pageSize = null;
        Boolean sortAscending = null;
        String sortBy = null;
        TraceflowListResult response = api.listTraceflows(cursor, includedFields, lportId, pageSize, sortAscending, sortBy);

        // TODO: test validations
    }
}
