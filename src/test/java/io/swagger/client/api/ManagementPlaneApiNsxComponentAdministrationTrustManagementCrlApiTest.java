/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.ApiError;
import io.swagger.client.model.Crl;
import io.swagger.client.model.CrlDistributionPoint;
import io.swagger.client.model.CrlDistributionPointList;
import io.swagger.client.model.CrlDistributionPointStatus;
import io.swagger.client.model.CrlList;
import io.swagger.client.model.CrlObjectData;
import io.swagger.client.model.CrlPemRequestType;
import io.swagger.client.model.TrustManagementData;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ManagementPlaneApiNsxComponentAdministrationTrustManagementCrlApi
 */
@Ignore
public class ManagementPlaneApiNsxComponentAdministrationTrustManagementCrlApiTest {

    private final ManagementPlaneApiNsxComponentAdministrationTrustManagementCrlApi api = new ManagementPlaneApiNsxComponentAdministrationTrustManagementCrlApi();

    /**
     * Add a New Certificate Revocation List
     *
     * Adds a new certificate revocation list (CRL). The CRL is used to verify the client certificate status against the revocation lists published by the CA. For this reason, the administrator needs to add the CRL in certificate repository as well. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addCrlImportTest() throws ApiException {
        CrlObjectData body = null;
        CrlList response = api.addCrlImport(body);

        // TODO: test validations
    }
    /**
     * Create a Crl Distribution Point
     *
     * Create an entity that will represent a Crl Distribution Point 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createCrlDistributionPointTest() throws ApiException {
        CrlDistributionPoint body = null;
        CrlDistributionPoint response = api.createCrlDistributionPoint(body);

        // TODO: test validations
    }
    /**
     * Delete a CRL
     *
     * Deletes an existing CRL.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCrlTest() throws ApiException {
        String crlId = null;
        api.deleteCrl(crlId);

        // TODO: test validations
    }
    /**
     * Delete a CrlDistributionPoint
     *
     * Delete a CrlDistributionPoint. It does not delete the actual CRL. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCrlDistributionPointTest() throws ApiException {
        String crlDistributionPointId = null;
        api.deleteCrlDistributionPoint(crlDistributionPointId);

        // TODO: test validations
    }
    /**
     * Show CRL Data for the Given CRL ID
     *
     * Returns information about the specified CRL. For additional information, include the ?details&#x3D;true modifier at the end of the request URI. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCrlTest() throws ApiException {
        String crlId = null;
        Boolean details = null;
        Crl response = api.getCrl(crlId, details);

        // TODO: test validations
    }
    /**
     * Return the CrlDistributionPoint with &lt;crl-distribution-point-id&gt;
     *
     * Return the CrlDistributionPoint with &lt;crl-distribution-point-id&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCrlDistributionPointTest() throws ApiException {
        String crlDistributionPointId = null;
        CrlDistributionPoint response = api.getCrlDistributionPoint(crlDistributionPointId);

        // TODO: test validations
    }
    /**
     * Return stored CRL in PEM format
     *
     * Return stored CRL in PEM format
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCrlDistributionPointPemTest() throws ApiException {
        CrlPemRequestType body = null;
        String response = api.getCrlDistributionPointPem(body);

        // TODO: test validations
    }
    /**
     * Return the status of the CrlDistributionPoint
     *
     * Return the status of the CrlDistributionPoint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCrlDistributionPointStatusTest() throws ApiException {
        String crlDistributionPointId = null;
        CrlDistributionPointStatus response = api.getCrlDistributionPointStatus(crlDistributionPointId);

        // TODO: test validations
    }
    /**
     * Return All Added CRLs
     *
     * Returns information about all CRLs. For additional information, include the ?details&#x3D;true modifier at the end of the request URI. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCrlsTest() throws ApiException {
        String cursor = null;
        Boolean details = null;
        String includedFields = null;
        Long pageSize = null;
        Boolean sortAscending = null;
        String sortBy = null;
        String type = null;
        CrlList response = api.getCrls(cursor, details, includedFields, pageSize, sortAscending, sortBy, type);

        // TODO: test validations
    }
    /**
     * Return the Properties of a Trust Manager
     *
     * Returns information about the supported algorithms and key sizes.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTrustObjectsTest() throws ApiException {
        TrustManagementData response = api.getTrustObjects();

        // TODO: test validations
    }
    /**
     * Return the list of CrlDistributionPoints
     *
     * Return the list of CrlDistributionPoints
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listCrlDistributionPointsTest() throws ApiException {
        String cursor = null;
        String includedFields = null;
        Long pageSize = null;
        Boolean sortAscending = null;
        String sortBy = null;
        CrlDistributionPointList response = api.listCrlDistributionPoints(cursor, includedFields, pageSize, sortAscending, sortBy);

        // TODO: test validations
    }
    /**
     * Update CRL for the Given CRL ID
     *
     * Updates an existing CRL.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateCrlTest() throws ApiException {
        Crl body = null;
        String crlId = null;
        Crl response = api.updateCrl(body, crlId);

        // TODO: test validations
    }
    /**
     * Update CrlDistributionPoint with &lt;crl-distribution-point-id&gt; This allows updating the ManagedResource fields. 
     *
     * Update CrlDistributionPoint with &lt;crl-distribution-point-id&gt; This allows updating the ManagedResource fields. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateCrlDistributionPointTest() throws ApiException {
        CrlDistributionPoint body = null;
        String crlDistributionPointId = null;
        CrlDistributionPoint response = api.updateCrlDistributionPoint(body, crlDistributionPointId);

        // TODO: test validations
    }
}
