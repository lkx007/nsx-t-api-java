/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.ApiError;
import io.swagger.client.model.BridgeEndpoint;
import io.swagger.client.model.BridgeEndpointListResult;
import io.swagger.client.model.BridgeEndpointStatistics;
import io.swagger.client.model.BridgeEndpointStatus;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ManagementPlaneApiNetworkTransportBridgeEndpointsApi
 */
@Ignore
public class ManagementPlaneApiNetworkTransportBridgeEndpointsApiTest {

    private final ManagementPlaneApiNetworkTransportBridgeEndpointsApi api = new ManagementPlaneApiNetworkTransportBridgeEndpointsApi();

    /**
     * Create a Bridge Endpoint
     *
     * Creates a Bridge Endpoint. It describes the physical attributes of the bridge like vlan. A logical port can be attached to a vif providing bridging functionality from the logical overlay network to the physical vlan network 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createBridgeEndpointTest() throws ApiException {
        BridgeEndpoint body = null;
        BridgeEndpoint response = api.createBridgeEndpoint(body);

        // TODO: test validations
    }
    /**
     * Delete a Bridge Endpoint
     *
     * Deletes the specified Bridge Endpoint.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteBridgeEndpointTest() throws ApiException {
        String bridgeendpointId = null;
        api.deleteBridgeEndpoint(bridgeendpointId);

        // TODO: test validations
    }
    /**
     * Get Information about a bridge endpoint
     *
     * Returns information about a specified bridge endpoint.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBridgeEndpointTest() throws ApiException {
        String bridgeendpointId = null;
        BridgeEndpoint response = api.getBridgeEndpoint(bridgeendpointId);

        // TODO: test validations
    }
    /**
     * Returns statistics of a specified Bridge Endpoint
     *
     * Get the statistics for the Bridge Endpoint of the given Endpoint id (endpoint-id)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBridgeEndpointStatisticsTest() throws ApiException {
        String endpointId = null;
        String source = null;
        BridgeEndpointStatistics response = api.getBridgeEndpointStatistics(endpointId, source);

        // TODO: test validations
    }
    /**
     * Returns status of a specified Bridge Endpoint
     *
     * Get the status for the Bridge Endpoint of the given Endpoint id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBridgeEndpointStatusTest() throws ApiException {
        String endpointId = null;
        String source = null;
        BridgeEndpointStatus response = api.getBridgeEndpointStatus(endpointId, source);

        // TODO: test validations
    }
    /**
     * List All Bridge Endpoints
     *
     * Returns information about all configured bridge endoints 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listBridgeEndpointsTest() throws ApiException {
        String bridgeClusterId = null;
        String bridgeEndpointProfileId = null;
        String cursor = null;
        String includedFields = null;
        String logicalSwitchId = null;
        Long pageSize = null;
        Boolean sortAscending = null;
        String sortBy = null;
        String vlanTransportZoneId = null;
        BridgeEndpointListResult response = api.listBridgeEndpoints(bridgeClusterId, bridgeEndpointProfileId, cursor, includedFields, logicalSwitchId, pageSize, sortAscending, sortBy, vlanTransportZoneId);

        // TODO: test validations
    }
    /**
     * Update a Bridge Endpoint
     *
     * Modifies a existing bridge endpoint. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateBridgeEndpointTest() throws ApiException {
        BridgeEndpoint body = null;
        String bridgeendpointId = null;
        BridgeEndpoint response = api.updateBridgeEndpoint(body, bridgeendpointId);

        // TODO: test validations
    }
}
