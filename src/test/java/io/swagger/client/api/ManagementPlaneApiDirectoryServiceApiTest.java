/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.ApiError;
import io.swagger.client.model.DirectoryDomain;
import io.swagger.client.model.DirectoryDomainListResults;
import io.swagger.client.model.DirectoryDomainSyncStats;
import io.swagger.client.model.DirectoryGroupListResults;
import io.swagger.client.model.DirectoryGroupMemberListResults;
import io.swagger.client.model.DirectoryLdapServer;
import io.swagger.client.model.DirectoryLdapServerListResults;
import io.swagger.client.model.DirectoryLdapServerStatus;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ManagementPlaneApiDirectoryServiceApi
 */
@Ignore
public class ManagementPlaneApiDirectoryServiceApiTest {

    private final ManagementPlaneApiDirectoryServiceApi api = new ManagementPlaneApiDirectoryServiceApi();

    /**
     * Create a directory domain
     *
     * Create a directory domain
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createDirectoryDomainTest() throws ApiException {
        DirectoryDomain body = null;
        DirectoryDomain response = api.createDirectoryDomain(body);

        // TODO: test validations
    }
    /**
     * Create a LDAP server for directory domain
     *
     * More than one LDAP server can be created and only one LDAP server is used to synchronize directory objects. If more than one LDAP server is configured, NSX will try all the servers until it is able to successfully connect to one.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createDirectoryLdapServerTest() throws ApiException {
        DirectoryLdapServer body = null;
        String domainId = null;
        DirectoryLdapServer response = api.createDirectoryLdapServer(body, domainId);

        // TODO: test validations
    }
    /**
     * Delete a specific domain with given identifier
     *
     * Delete a specific domain with given identifier
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteDirectoryDomainTest() throws ApiException {
        String domainId = null;
        Boolean force = null;
        api.deleteDirectoryDomain(domainId, force);

        // TODO: test validations
    }
    /**
     * Delete a LDAP server for directory domain
     *
     * Delete a LDAP server for directory domain
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteDirectoryLdapServerTest() throws ApiException {
        String domainId = null;
        String serverId = null;
        api.deleteDirectoryLdapServer(domainId, serverId);

        // TODO: test validations
    }
    /**
     * Get a specific domain with given identifier
     *
     * Get a specific domain with given identifier
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDirectoryDomainTest() throws ApiException {
        String domainId = null;
        DirectoryDomain response = api.getDirectoryDomain(domainId);

        // TODO: test validations
    }
    /**
     * Get domain sync statistics for the given identifier
     *
     * Get domain sync statistics for the given identifier
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDirectoryDomainSyncStatsTest() throws ApiException {
        String domainId = null;
        DirectoryDomainSyncStats response = api.getDirectoryDomainSyncStats(domainId);

        // TODO: test validations
    }
    /**
     * Get a specific LDAP server for a given directory domain
     *
     * Get a specific LDAP server for a given directory domain
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDirectoryLdapServerTest() throws ApiException {
        String domainId = null;
        String serverId = null;
        DirectoryLdapServer response = api.getDirectoryLdapServer(domainId, serverId);

        // TODO: test validations
    }
    /**
     * List all configured domains
     *
     * List all configured domains
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listDirectoryDomainsTest() throws ApiException {
        String cursor = null;
        String includedFields = null;
        Long pageSize = null;
        Boolean sortAscending = null;
        String sortBy = null;
        DirectoryDomainListResults response = api.listDirectoryDomains(cursor, includedFields, pageSize, sortAscending, sortBy);

        // TODO: test validations
    }
    /**
     * List members of a directory group
     *
     * A member group could be either direct member of the group specified by group_id or nested member of it. Both direct member groups and nested member groups are returned.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listDirectoryGroupMemberGroupsTest() throws ApiException {
        String domainId = null;
        String groupId = null;
        String cursor = null;
        String includedFields = null;
        Long pageSize = null;
        Boolean sortAscending = null;
        String sortBy = null;
        DirectoryGroupMemberListResults response = api.listDirectoryGroupMemberGroups(domainId, groupId, cursor, includedFields, pageSize, sortAscending, sortBy);

        // TODO: test validations
    }
    /**
     * List all configured domain LDAP servers
     *
     * List all configured domain LDAP servers
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listDirectoryLdapServersTest() throws ApiException {
        String domainId = null;
        String cursor = null;
        String includedFields = null;
        Long pageSize = null;
        Boolean sortAscending = null;
        String sortBy = null;
        DirectoryLdapServerListResults response = api.listDirectoryLdapServers(domainId, cursor, includedFields, pageSize, sortAscending, sortBy);

        // TODO: test validations
    }
    /**
     * Invoke full sync or delta sync for a specific domain, with additional delay in seconds if needed.  Stop sync will try to stop any pending sync if any to return to idle state.
     *
     * Invoke full sync or delta sync for a specific domain, with additional delay in seconds if needed.  Stop sync will try to stop any pending sync if any to return to idle state.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void requestDirectoryDomainSyncTest() throws ApiException {
        String domainId = null;
        String action = null;
        Long delay = null;
        api.requestDirectoryDomainSync(domainId, action, delay);

        // TODO: test validations
    }
    /**
     * Search for directory groups within a domain based on the substring of a distinguished name. (e.g. CN&#x3D;User,DC&#x3D;acme,DC&#x3D;com) The search filter pattern can optionally support multiple (up to 100 maximum) search pattern separated by &#x27;|&#x27; (url encoded %7C). In this case, the search results will be returned as the union of all matching criteria. (e.g. CN&#x3D;Ann,CN&#x3D;Users,DC&#x3D;acme,DC&#x3D;com|CN&#x3D;Bob,CN&#x3D;Users,DC&#x3D;acme,DC&#x3D;com)
     *
     * Search for directory groups within a domain based on the substring of a distinguished name. (e.g. CN&#x3D;User,DC&#x3D;acme,DC&#x3D;com) The search filter pattern can optionally support multiple (up to 100 maximum) search pattern separated by &#x27;|&#x27; (url encoded %7C). In this case, the search results will be returned as the union of all matching criteria. (e.g. CN&#x3D;Ann,CN&#x3D;Users,DC&#x3D;acme,DC&#x3D;com|CN&#x3D;Bob,CN&#x3D;Users,DC&#x3D;acme,DC&#x3D;com)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void searchDirectoryGroupsTest() throws ApiException {
        String domainId = null;
        String filterValue = null;
        String cursor = null;
        String includedFields = null;
        Long pageSize = null;
        Boolean sortAscending = null;
        String sortBy = null;
        DirectoryGroupListResults response = api.searchDirectoryGroups(domainId, filterValue, cursor, includedFields, pageSize, sortAscending, sortBy);

        // TODO: test validations
    }
    /**
     * Test a LDAP server connection for directory domain
     *
     * The API tests a LDAP server connection for an already configured domain. If the connection is successful, the response will be HTTP status 200. Otherwise the response will be HTTP status 500 and corresponding error message will be returned.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void testDirectoryLdapServerTest() throws ApiException {
        String domainId = null;
        String serverId = null;
        String action = null;
        api.testDirectoryLdapServer(domainId, serverId, action);

        // TODO: test validations
    }
    /**
     * Update a directory domain
     *
     * Update to any field in the directory domain will trigger a full sync
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateDirectoryDomainTest() throws ApiException {
        DirectoryDomain body = null;
        String domainId = null;
        DirectoryDomain response = api.updateDirectoryDomain(body, domainId);

        // TODO: test validations
    }
    /**
     * Update a LDAP server for directory domain
     *
     * Update a LDAP server for directory domain
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateDirectoryLdapServerTest() throws ApiException {
        DirectoryLdapServer body = null;
        String domainId = null;
        String serverId = null;
        DirectoryLdapServer response = api.updateDirectoryLdapServer(body, domainId, serverId);

        // TODO: test validations
    }
    /**
     * Test a directory domain LDAP server connectivity
     *
     * This API tests a LDAP server connectivity before the actual domain or LDAP server is configured. If the connectivity is good, the response will be HTTP status 200. Otherwise the response will be HTTP status 500 and corresponding error message will be returned.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void verifyDirectoryLdapServerTest() throws ApiException {
        DirectoryLdapServer body = null;
        String action = null;
        DirectoryLdapServerStatus response = api.verifyDirectoryLdapServer(body, action);

        // TODO: test validations
    }
}
