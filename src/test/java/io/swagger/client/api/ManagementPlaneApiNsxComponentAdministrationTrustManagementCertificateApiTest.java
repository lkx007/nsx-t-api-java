/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.ApiError;
import io.swagger.client.model.Certificate;
import io.swagger.client.model.CertificateList;
import io.swagger.client.model.TrustObjectData;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ManagementPlaneApiNsxComponentAdministrationTrustManagementCertificateApi
 */
@Ignore
public class ManagementPlaneApiNsxComponentAdministrationTrustManagementCertificateApiTest {

    private final ManagementPlaneApiNsxComponentAdministrationTrustManagementCertificateApi api = new ManagementPlaneApiNsxComponentAdministrationTrustManagementCertificateApi();

    /**
     * Add a New Certificate
     *
     * Adds a new private-public certificate or a chain of certificates (CAs) and, optionally, a private key that can be applied to one of the user-facing components (appliance management or edge). The certificate and the key should be stored in PEM format. If no private key is provided, the certificate is used as a client certificate in the trust store. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addCertificateImportTest() throws ApiException {
        TrustObjectData body = null;
        CertificateList response = api.addCertificateImport(body);

        // TODO: test validations
    }
    /**
     * Delete Certificate for the Given Certificate ID
     *
     * Removes the specified certificate. The private key associated with the certificate is also deleted. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCertificateTest() throws ApiException {
        String certId = null;
        api.deleteCertificate(certId);

        // TODO: test validations
    }
    /**
     * Show Certificate Data for the Given Certificate ID
     *
     * Returns information for the specified certificate ID, including the certificate&#x27;s UUID; resource_type (for example, certificate_self_signed, certificate_ca, or certificate_signed); pem_encoded data; and history of the certificate (who created or modified it and when). For additional information, include the ?details&#x3D;true modifier at the end of the request URI. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCertificateTest() throws ApiException {
        String certId = null;
        Boolean details = null;
        Certificate response = api.getCertificate(certId, details);

        // TODO: test validations
    }
    /**
     * Return All the User-Facing Components&#x27; Certificates
     *
     * Returns all certificate information viewable by the user, including each certificate&#x27;s UUID; resource_type (for example, certificate_self_signed, certificate_ca, or certificate_signed); pem_encoded data; and history of the certificate (who created or modified it and when). For additional information, include the ?details&#x3D;true modifier at the end of the request URI. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCertificatesTest() throws ApiException {
        String cursor = null;
        Boolean details = null;
        String includedFields = null;
        Long pageSize = null;
        Boolean sortAscending = null;
        String sortBy = null;
        String type = null;
        CertificateList response = api.getCertificates(cursor, details, includedFields, pageSize, sortAscending, sortBy, type);

        // TODO: test validations
    }
}
