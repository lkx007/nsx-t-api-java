/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.ApiError;
import io.swagger.client.model.ReorderRequest;
import io.swagger.client.model.UpgradeUnitGroup;
import io.swagger.client.model.UpgradeUnitGroupAggregateInfoListResult;
import io.swagger.client.model.UpgradeUnitGroupListResult;
import io.swagger.client.model.UpgradeUnitGroupStatusListResult;
import io.swagger.client.model.UpgradeUnitList;
import io.swagger.client.model.UpgradeUnitStatusListResult;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ManagementPlaneApiUpgradeGroupApi
 */
@Ignore
public class ManagementPlaneApiUpgradeGroupApiTest {

    private final ManagementPlaneApiUpgradeGroupApi api = new ManagementPlaneApiUpgradeGroupApi();

    /**
     * Add upgrade units to specified upgrade unit group
     *
     * Add upgrade units to specified upgrade unit group. The upgrade units will be added at the end of the upgrade unit list. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addUpgradeUnitsToGroupAddUpgradeUnitsTest() throws ApiException {
        UpgradeUnitList body = null;
        String groupId = null;
        UpgradeUnitList response = api.addUpgradeUnitsToGroupAddUpgradeUnits(body, groupId);

        // TODO: test validations
    }
    /**
     * Create a group
     *
     * Create a group of upgrade units. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createUpgradeUnitGroupTest() throws ApiException {
        UpgradeUnitGroup body = null;
        UpgradeUnitGroup response = api.createUpgradeUnitGroup(body);

        // TODO: test validations
    }
    /**
     * Delete the upgrade unit group
     *
     * Delete the specified group. NOTE - A group can be deleted only if it is empty. If user tries to delete a group containing one or more upgrade units, the operation will fail and an error will be returned. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteUpgradeUnitGroupTest() throws ApiException {
        String groupId = null;
        api.deleteUpgradeUnitGroup(groupId);

        // TODO: test validations
    }
    /**
     * Return upgrade unit group information
     *
     * Returns information about a specific upgrade unit group in the upgrade plan.  If request parameter summary is set to true, then only count of upgrade units will be returned, upgrade units list will be empty. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUpgradeUnitGroupTest() throws ApiException {
        String groupId = null;
        Boolean summary = null;
        UpgradeUnitGroup response = api.getUpgradeUnitGroup(groupId, summary);

        // TODO: test validations
    }
    /**
     * Return aggregate information of all upgrade unit groups
     *
     * Return information of all upgrade unit groups in the upgrade plan.  If request parameter summary is set to true, then only count of upgrade units will be returned, upgrade units list will be empty. If request parameter component type is specified, then all upgrade unit groups for that component will be returned. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUpgradeUnitGroupAggregateInfoTest() throws ApiException {
        String componentType = null;
        String cursor = null;
        String includedFields = null;
        Long pageSize = null;
        Boolean sortAscending = null;
        String sortBy = null;
        Boolean summary = null;
        Boolean sync = null;
        UpgradeUnitGroupAggregateInfoListResult response = api.getUpgradeUnitGroupAggregateInfo(componentType, cursor, includedFields, pageSize, sortAscending, sortBy, summary, sync);

        // TODO: test validations
    }
    /**
     * Get upgrade status for group
     *
     * Get upgrade status for upgrade units in the specified group. User can specify whether to show only the upgrade units with errors. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUpgradeUnitGroupStatusTest() throws ApiException {
        String groupId = null;
        String cursor = null;
        Boolean hasErrors = null;
        String includedFields = null;
        Long pageSize = null;
        Boolean sortAscending = null;
        String sortBy = null;
        UpgradeUnitStatusListResult response = api.getUpgradeUnitGroupStatus(groupId, cursor, hasErrors, includedFields, pageSize, sortAscending, sortBy);

        // TODO: test validations
    }
    /**
     * Return information of all upgrade unit groups
     *
     * Return information of all upgrade unit groups in the upgrade plan.  If request parameter summary is set to true, then only count of upgrade units will be returned, upgrade units list will be empty. If request parameter component type is specified, then all upgrade unit groups for that component will be returned. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUpgradeUnitGroupsTest() throws ApiException {
        String componentType = null;
        String cursor = null;
        String includedFields = null;
        Long pageSize = null;
        Boolean sortAscending = null;
        String sortBy = null;
        Boolean summary = null;
        Boolean sync = null;
        UpgradeUnitGroupListResult response = api.getUpgradeUnitGroups(componentType, cursor, includedFields, pageSize, sortAscending, sortBy, summary, sync);

        // TODO: test validations
    }
    /**
     * Get upgrade status for upgrade unit groups
     *
     * Get upgrade status for upgrade unit groups
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUpgradeUnitGroupsStatusTest() throws ApiException {
        String componentType = null;
        String cursor = null;
        String includedFields = null;
        Long pageSize = null;
        Boolean sortAscending = null;
        String sortBy = null;
        UpgradeUnitGroupStatusListResult response = api.getUpgradeUnitGroupsStatus(componentType, cursor, includedFields, pageSize, sortAscending, sortBy);

        // TODO: test validations
    }
    /**
     * Reorder upgrade unit group
     *
     * Reorder an upgrade unit group by placing it before/after the specified upgrade unit group. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void reorderUpgradeUnitGroupReorderTest() throws ApiException {
        ReorderRequest body = null;
        String groupId = null;
        api.reorderUpgradeUnitGroupReorder(body, groupId);

        // TODO: test validations
    }
    /**
     * Reorder an upgrade unit within the upgrade unit group
     *
     * Reorder an upgrade unit within the upgrade unit group by placing it before/after the specified upgrade unit 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void reorderUpgradeUnitReorderTest() throws ApiException {
        ReorderRequest body = null;
        String groupId = null;
        String upgradeUnitId = null;
        api.reorderUpgradeUnitReorder(body, groupId, upgradeUnitId);

        // TODO: test validations
    }
    /**
     * Update the upgrade unit group
     *
     * Update the specified upgrade unit group. Removal of upgrade units from the group using this is not allowed. An error will be returned in that case. Following extended_configuration is supported:  Key: upgrade_mode Supported values: maintenance_mode,in_place Default: maintenance_mode  Key: maintenance_mode_config_vsan_mode Supported values: evacuate_all_data, ensure_object_accessibility, no_action Default: ensure_object_accessibility  Key: maintenance_mode_config_evacuate_powered_off_vms Supported values: true, false Default: false  Key: rebootless_upgrade Supported values: true, false Default: true 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateUpgradeUnitGroupTest() throws ApiException {
        UpgradeUnitGroup body = null;
        String groupId = null;
        UpgradeUnitGroup response = api.updateUpgradeUnitGroup(body, groupId);

        // TODO: test validations
    }
}
