/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.ApiError;
import io.swagger.client.model.Certificate;
import io.swagger.client.model.CertificateList;
import io.swagger.client.model.Csr;
import io.swagger.client.model.CsrList;
import io.swagger.client.model.TrustObjectData;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ManagementPlaneApiNsxComponentAdministrationTrustManagementCsrApi
 */
@Ignore
public class ManagementPlaneApiNsxComponentAdministrationTrustManagementCsrApiTest {

    private final ManagementPlaneApiNsxComponentAdministrationTrustManagementCsrApi api = new ManagementPlaneApiNsxComponentAdministrationTrustManagementCsrApi();

    /**
     * Delete a CSR
     *
     * Removes a specified CSR. If a CSR is not used for verification, you can delete it. Note that the CSR import and upload POST actions automatically delete the associated CSR. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCsrTest() throws ApiException {
        String csrId = null;
        api.deleteCsr(csrId);

        // TODO: test validations
    }
    /**
     * Generate a New Certificate Signing Request
     *
     * Creates a new certificate signing request (CSR). A CSR is encrypted text that contains information about your organization (organization name, country, and so on) and your Web server&#x27;s public key, which is a public certificate the is generated on the server that can be used to forward this request to a certificate authority (CA). A private key is also usually created at the same time as the CSR. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void generateCsrTest() throws ApiException {
        Csr body = null;
        Csr response = api.generateCsr(body);

        // TODO: test validations
    }
    /**
     * Show CSR Data for the Given CSR ID
     *
     * Returns information about the specified CSR.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCsrTest() throws ApiException {
        String csrId = null;
        Csr response = api.getCsr(csrId);

        // TODO: test validations
    }
    /**
     * Get CSR PEM File for the Given CSR ID
     *
     * Downloads the CSR PEM file for a specified CSR. Clients must include an Accept: text/plain request header.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCsrPemTest() throws ApiException {
        String csrId = null;
        String response = api.getCsrPem(csrId);

        // TODO: test validations
    }
    /**
     * Return All the Generated CSRs
     *
     * Returns information about all of the CSRs that have been created.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCsrsTest() throws ApiException {
        String cursor = null;
        String includedFields = null;
        Long pageSize = null;
        Boolean sortAscending = null;
        String sortBy = null;
        CsrList response = api.getCsrs(cursor, includedFields, pageSize, sortAscending, sortBy);

        // TODO: test validations
    }
    /**
     * Import a Certificate Associated with an Approved CSR
     *
     * Imports a certificate authority (CA)-signed certificate for a CSR. This action links the certificate to the private key created by the CSR. The pem_encoded string in the request body is the signed certificate provided by your CA in response to the CSR that you provide to them. The import POST action automatically deletes the associated CSR. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importCertificateImportTest() throws ApiException {
        TrustObjectData body = null;
        String csrId = null;
        CertificateList response = api.importCertificateImport(body, csrId);

        // TODO: test validations
    }
    /**
     * Self-Sign the CSR
     *
     * Self-signs the previously generated CSR. This action is similar to the import certificate action, but instead of using a public certificate signed by a CA, the self_sign POST action uses a certificate that is signed with NSX&#x27;s own private key. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void selfSignCertificateSelfSignTest() throws ApiException {
        String csrId = null;
        Long daysValid = null;
        Certificate response = api.selfSignCertificateSelfSign(csrId, daysValid);

        // TODO: test validations
    }
}
