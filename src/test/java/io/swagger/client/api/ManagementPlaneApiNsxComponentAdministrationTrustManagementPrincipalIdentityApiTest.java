/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.ApiError;
import io.swagger.client.model.PrincipalIdentity;
import io.swagger.client.model.PrincipalIdentityList;
import io.swagger.client.model.PrincipalIdentityWithCertificate;
import io.swagger.client.model.UpdatePrincipalIdentityCertificateRequest;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ManagementPlaneApiNsxComponentAdministrationTrustManagementPrincipalIdentityApi
 */
@Ignore
public class ManagementPlaneApiNsxComponentAdministrationTrustManagementPrincipalIdentityApiTest {

    private final ManagementPlaneApiNsxComponentAdministrationTrustManagementPrincipalIdentityApi api = new ManagementPlaneApiNsxComponentAdministrationTrustManagementPrincipalIdentityApi();

    /**
     * Delete a principal identity
     *
     * Delete a principal identity. It does not delete the certificate. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePrincipalIdentityTest() throws ApiException {
        String principalIdentityId = null;
        api.deletePrincipalIdentity(principalIdentityId);

        // TODO: test validations
    }
    /**
     * Return the list of principal identities
     *
     * Returns the list of principals registered with a certificate.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPrincipalIdentitiesTest() throws ApiException {
        PrincipalIdentityList response = api.getPrincipalIdentities();

        // TODO: test validations
    }
    /**
     * Get a Principal Identity
     *
     * Get a stored principal identity 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPrincipalIdentityTest() throws ApiException {
        String principalIdentityId = null;
        PrincipalIdentity response = api.getPrincipalIdentity(principalIdentityId);

        // TODO: test validations
    }
    /**
     * Register a name-certificate combination.
     *
     * Associates a principal&#x27;s name with a certificate that is used to authenticate. Deprecated, use POST /trust-management/principal-identities/with-certificate instead. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void registerPrincipalIdentityTest() throws ApiException {
        PrincipalIdentity body = null;
        PrincipalIdentity response = api.registerPrincipalIdentity(body);

        // TODO: test validations
    }
    /**
     * Register a name-certificate combination.
     *
     * Create a Principal Identity with a new, unused, certificate. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void registerPrincipalIdentityWithCertificateTest() throws ApiException {
        PrincipalIdentityWithCertificate body = null;
        PrincipalIdentity response = api.registerPrincipalIdentityWithCertificate(body);

        // TODO: test validations
    }
    /**
     * Update a Principal Identity&#x27;s certificate
     *
     * Update a principal identity&#x27;s certificate 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updatePrincipalIdentityCertificateUpdateCertificateTest() throws ApiException {
        UpdatePrincipalIdentityCertificateRequest body = null;
        PrincipalIdentity response = api.updatePrincipalIdentityCertificateUpdateCertificate(body);

        // TODO: test validations
    }
}
