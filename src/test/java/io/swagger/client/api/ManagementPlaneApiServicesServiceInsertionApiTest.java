/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.ApiError;
import io.swagger.client.model.BaseServiceInstance;
import io.swagger.client.model.BaseServiceProfile;
import io.swagger.client.model.ConfigurationState;
import io.swagger.client.model.InstanceEndpoint;
import io.swagger.client.model.InstanceEndpointListResult;
import io.swagger.client.model.InstanceRuntimeListResult;
import io.swagger.client.model.ResourceReference;
import io.swagger.client.model.RuntimeInterfaceOperationalStatus;
import io.swagger.client.model.RuntimeInterfaceStatistics;
import io.swagger.client.model.SIExcludeList;
import io.swagger.client.model.SIServiceProfileListResult;
import io.swagger.client.model.ServiceAttachment;
import io.swagger.client.model.ServiceAttachmentListResult;
import io.swagger.client.model.ServiceChain;
import io.swagger.client.model.ServiceChainListResult;
import io.swagger.client.model.ServiceChainMappingListResult;
import io.swagger.client.model.ServiceDefinition;
import io.swagger.client.model.ServiceDeployment;
import io.swagger.client.model.ServiceDeploymentListResult;
import io.swagger.client.model.ServiceDeploymentStatus;
import io.swagger.client.model.ServiceInsertionRule;
import io.swagger.client.model.ServiceInsertionRuleList;
import io.swagger.client.model.ServiceInsertionRuleListResult;
import io.swagger.client.model.ServiceInsertionSection;
import io.swagger.client.model.ServiceInsertionSectionListResult;
import io.swagger.client.model.ServiceInsertionSectionRuleList;
import io.swagger.client.model.ServiceInsertionServiceListResult;
import io.swagger.client.model.ServiceInsertionStatus;
import io.swagger.client.model.ServiceInsertionStatusListResult;
import io.swagger.client.model.ServiceInstanceListResult;
import io.swagger.client.model.ServiceInstanceNSGroups;
import io.swagger.client.model.ServiceInstanceStatus;
import io.swagger.client.model.ServiceManager;
import io.swagger.client.model.ServiceManagerListResult;
import io.swagger.client.model.ServicePathListResult;
import io.swagger.client.model.ServiceProfileNSGroups;
import io.swagger.client.model.SolutionConfig;
import io.swagger.client.model.SolutionConfigListResult;
import io.swagger.client.model.SourceEntityResult;
import io.swagger.client.model.VendorTemplate;
import io.swagger.client.model.VendorTemplateListResult;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ManagementPlaneApiServicesServiceInsertionApi
 */
@Ignore
public class ManagementPlaneApiServicesServiceInsertionApiTest {

    private final ManagementPlaneApiServicesServiceInsertionApi api = new ManagementPlaneApiServicesServiceInsertionApi();

    /**
     * Add an InstanceEndpoint for a Service Instance
     *
     * Adds a new instance endpoint. It belongs to one service instance and is attached to one service attachment. It represents a redirection target for a Rule. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addInstanceEndpointTest() throws ApiException {
        InstanceEndpoint body = null;
        String serviceId = null;
        String serviceInstanceId = null;
        InstanceEndpoint response = api.addInstanceEndpoint(body, serviceId, serviceInstanceId);

        // TODO: test validations
    }
    /**
     * Add ServiceProfile for a given Service.
     *
     * Adds a new service profile. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addSIServiceProfileTest() throws ApiException {
        BaseServiceProfile body = null;
        String serviceId = null;
        BaseServiceProfile response = api.addSIServiceProfile(body, serviceId);

        // TODO: test validations
    }
    /**
     * Add a Service Attachment.
     *
     * Adds a new Service attachment. A service attachment represents a point on NSX entity (Example: Logical Router) to which service instance can be connected through an InstanceEndpoint. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addServiceAttachmentTest() throws ApiException {
        ServiceAttachment body = null;
        ServiceAttachment response = api.addServiceAttachment(body);

        // TODO: test validations
    }
    /**
     * Add Service Chain
     *
     * Adds a new service chain. Service Chains is can contain profile belonging to same or different Service(s). It represents a redirection target for a Rule. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addServiceChainTest() throws ApiException {
        ServiceChain body = null;
        ServiceChain response = api.addServiceChain(body);

        // TODO: test validations
    }
    /**
     * Add a new member in the exclude list
     *
     * Add a new member in the exclude list
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addServiceInsertionExcludeListMemberAddMemberTest() throws ApiException {
        ResourceReference body = null;
        ResourceReference response = api.addServiceInsertionExcludeListMemberAddMember(body);

        // TODO: test validations
    }
    /**
     * Add a Single Rule in a Section
     *
     * Adds a new serviceinsertion rule in existing serviceinsertion section. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addServiceInsertionRuleInSectionTest() throws ApiException {
        ServiceInsertionRule body = null;
        String sectionId = null;
        String id = null;
        String operation = null;
        ServiceInsertionRule response = api.addServiceInsertionRuleInSection(body, sectionId, id, operation);

        // TODO: test validations
    }
    /**
     * Add Multiple Rules in a Section
     *
     * Create multiple serviceinsertion rules in existing serviceinsertion section bounded by limit of 1000 serviceinsertion rules per section. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addServiceInsertionRulesInSectionCreateMultipleTest() throws ApiException {
        ServiceInsertionRuleList body = null;
        String sectionId = null;
        String id = null;
        String operation = null;
        ServiceInsertionRuleList response = api.addServiceInsertionRulesInSectionCreateMultiple(body, sectionId, id, operation);

        // TODO: test validations
    }
    /**
     * Create a New Empty Section
     *
     * Creates new empty Service Insertion section in the system. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addServiceInsertionSectionTest() throws ApiException {
        ServiceInsertionSection body = null;
        String id = null;
        String operation = null;
        ServiceInsertionSection response = api.addServiceInsertionSection(body, id, operation);

        // TODO: test validations
    }
    /**
     * Create a Section with Rules
     *
     * Creates a new serviceinsertion section with rules. The limit on the number of rules is defined by maxItems in collection types for ServiceInsertionRule (ServiceInsertionRuleXXXList types). When invoked on a section with a large number of rules, this API is supported only at low rates of invocation (not more than 4-5 times per minute). The typical latency of this API with about 1024 rules is about 4-5 seconds. This API should not be invoked with large payloads at automation speeds. More than 50 rules are not supported.  Instead, to create sections, use: POST /api/v1/serviceinsertion/sections  To create rules, use: POST /api/v1/serviceinsertion/sections/&amp;lt;section-id&amp;gt;/rules 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addServiceInsertionSectionWithRulesCreateWithRulesTest() throws ApiException {
        ServiceInsertionSectionRuleList body = null;
        String id = null;
        String operation = null;
        ServiceInsertionSectionRuleList response = api.addServiceInsertionSectionWithRulesCreateWithRules(body, id, operation);

        // TODO: test validations
    }
    /**
     * Create a Service-Insertion Service
     *
     * Creates new Service-Insertion Service in the system. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addServiceInsertionServiceTest() throws ApiException {
        ServiceDefinition body = null;
        ServiceDefinition response = api.addServiceInsertionService(body);

        // TODO: test validations
    }
    /**
     * Add a Service Instance for a specified Service.
     *
     * Adds a new Service-Instance under the specified Service. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addServiceInstanceTest() throws ApiException {
        BaseServiceInstance body = null;
        String serviceId = null;
        BaseServiceInstance response = api.addServiceInstance(body, serviceId);

        // TODO: test validations
    }
    /**
     * Add Vendor Template for a given Service
     *
     * Adds a new vendor template. Vendor templates are service level objects, registered to be used in Service Profiles. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addVendorTemplateTest() throws ApiException {
        VendorTemplate body = null;
        String serviceId = null;
        VendorTemplate response = api.addVendorTemplate(body, serviceId);

        // TODO: test validations
    }
    /**
     * Add Solution Config for a given Service
     *
     * Adds a solution config. Solution Config are service level objects, required for configuring the NXGI partner Service after deployment. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSolutionConfigTest() throws ApiException {
        SolutionConfig body = null;
        String serviceId = null;
        SolutionConfig response = api.createSolutionConfig(body, serviceId);

        // TODO: test validations
    }
    /**
     * Delete a particular InstanceEndpoint.
     *
     * Delete instance endpoint information for a given instace endpoint. Please make sure to delete all the Service Insertion Rules, which refer to this Endpoint as &#x27;redirect_tos&#x27; target. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteInstanceEndpointTest() throws ApiException {
        String serviceId = null;
        String serviceInstanceId = null;
        String instanceEndpointId = null;
        api.deleteInstanceEndpoint(serviceId, serviceInstanceId, instanceEndpointId);

        // TODO: test validations
    }
    /**
     * Delete a particular ServiceProfile.
     *
     * Delete service profile for a given service. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSIServiceProfileTest() throws ApiException {
        String serviceId = null;
        String serviceProfileId = null;
        api.deleteSIServiceProfile(serviceId, serviceProfileId);

        // TODO: test validations
    }
    /**
     * Delete an existing service attachment
     *
     * Delete existing service attachment from system. Before deletion, please make sure that, no instance endpoints are connected to this attachment. In turn no appliance should be connected to this attachment. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteServiceAttachmentTest() throws ApiException {
        String serviceAttachmentId = null;
        api.deleteServiceAttachment(serviceAttachmentId);

        // TODO: test validations
    }
    /**
     * Delete a Service Chain.
     *
     * Delete a particular service chain. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteServiceChainTest() throws ApiException {
        String serviceChainId = null;
        api.deleteServiceChain(serviceChainId);

        // TODO: test validations
    }
    /**
     * Remove service deployment
     *
     * Remove the service deployment. Will remove all the Service VMs that were created as part of this deployment. User can send optional force delete option which will force remove the deployment, but should be used only when the regular delete is not working. Regular delete will ensure proper cleanup of Service VMs and related objects. Directly calling this API without trying regular undeploy will result in unexpected results, and orphan objects. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteServiceDeploymentTest() throws ApiException {
        String serviceId = null;
        String serviceDeploymentId = null;
        Boolean force = null;
        api.deleteServiceDeployment(serviceId, serviceDeploymentId, force);

        // TODO: test validations
    }
    /**
     * Delete an Existing Rule
     *
     * Delete existing serviceinsertion rule in a serviceinsertion section. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteServiceInsertionRuleTest() throws ApiException {
        String sectionId = null;
        String ruleId = null;
        api.deleteServiceInsertionRule(sectionId, ruleId);

        // TODO: test validations
    }
    /**
     * Delete an Existing Section and Its Associated Rules
     *
     * Removes serviceinsertion section from the system. ServiceInsertion section with rules can only be deleted by passing \&quot;cascade&#x3D;true\&quot; parameter. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteServiceInsertionSectionTest() throws ApiException {
        String sectionId = null;
        Boolean cascade = null;
        api.deleteServiceInsertionSection(sectionId, cascade);

        // TODO: test validations
    }
    /**
     * Delete an existing Service and the Service-Instance associated with it.
     *
     * Removes Service-Insertion Service from the system. A Service with Service-Instances can only be deleted by passing \&quot;cascade&#x3D;true\&quot; parameter. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteServiceInsertionServiceTest() throws ApiException {
        String serviceId = null;
        Boolean cascade = null;
        api.deleteServiceInsertionService(serviceId, cascade);

        // TODO: test validations
    }
    /**
     * Delete an existing Service-Instance
     *
     * Delete existing Service-Instance for a given Service-Insertion Service. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteServiceInstanceTest() throws ApiException {
        String serviceId = null;
        String serviceInstanceId = null;
        api.deleteServiceInstance(serviceId, serviceInstanceId);

        // TODO: test validations
    }
    /**
     * Delete service manager
     *
     * Delete service-manager which is registered with NSX with basic details like name, username, password.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteServiceManagerTest() throws ApiException {
        String serviceManagerId = null;
        api.deleteServiceManager(serviceManagerId);

        // TODO: test validations
    }
    /**
     * Remove service VMs either as standalone or HA
     *
     * Undeploy one service VM as standalone or two service VMs as HA. Associated deployment information and instance runtime will also be deleted once service VMs have been un-deployed successfully. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteServiceVMsDeleteTest() throws ApiException {
        String serviceId = null;
        String serviceInstanceId = null;
        api.deleteServiceVMsDelete(serviceId, serviceInstanceId);

        // TODO: test validations
    }
    /**
     * Deletes solution config information.
     *
     * Deletes solution config information for a given service. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSolutionConfigTest() throws ApiException {
        String serviceId = null;
        String solutionConfigId = null;
        api.deleteSolutionConfig(serviceId, solutionConfigId);

        // TODO: test validations
    }
    /**
     * Delete a particular vendor tempalte.
     *
     * Delete vendor template information for a given service. Please make sure to delete all the Service Profile(s), which refer to this vendor tempalte before deleting the template itself. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteVendorTemplateTest() throws ApiException {
        String serviceId = null;
        String vendorTemplateId = null;
        api.deleteVendorTemplate(serviceId, vendorTemplateId);

        // TODO: test validations
    }
    /**
     * Deploys a particular service
     *
     * This will deploy a particular service on a given cluster / host. Internally multiple service instance can be created during the deployment. If there are no issues in the parameters, the call returns immediately, and the service VMs will be deployed asynchronously. To get the overall status of the deployment or to get the status of individual service vm, please use the deployment status APIs. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deployServiceTest() throws ApiException {
        ServiceDeployment body = null;
        String serviceId = null;
        ServiceDeployment response = api.deployService(body, serviceId);

        // TODO: test validations
    }
    /**
     * Deploy and set up service VMs either as standalone or HA
     *
     * Deploys one service VM as standalone, or two service VMs as HA where one VM is active and another one is standby.  During the deployment of service VMs, service will be set up based on deployment events using callbacks. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deployServiceVMsDeployTest() throws ApiException {
        String serviceId = null;
        String serviceInstanceId = null;
        api.deployServiceVMsDeploy(serviceId, serviceInstanceId);

        // TODO: test validations
    }
    /**
     * Get a particular instance endpoint for a service instance.
     *
     * Returns detailed Endpoint information for a given InstanceEndpoint. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getInstanceEndpointTest() throws ApiException {
        String serviceId = null;
        String serviceInstanceId = null;
        String instanceEndpointId = null;
        InstanceEndpoint response = api.getInstanceEndpoint(serviceId, serviceInstanceId, instanceEndpointId);

        // TODO: test validations
    }
    /**
     * Get operational status for an interface
     *
     * Returns operational status of a specified interface
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRuntimeInterfaceOperationalStatusTest() throws ApiException {
        String serviceId = null;
        String serviceInstanceId = null;
        String instanceRuntimeId = null;
        String interfaceIndex = null;
        String source = null;
        RuntimeInterfaceOperationalStatus response = api.getRuntimeInterfaceOperationalStatus(serviceId, serviceInstanceId, instanceRuntimeId, interfaceIndex, source);

        // TODO: test validations
    }
    /**
     * Get statistics for a given interface identified by the interface index
     *
     * Returns statistics of a specified interface via associated logical port. If the logical port is attached to a logical router port, query parameter \&quot;source&#x3D;realtime\&quot; is not supported. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRuntimeInterfaceStatisticsTest() throws ApiException {
        String serviceId = null;
        String serviceInstanceId = null;
        String instanceRuntimeId = null;
        String interfaceIndex = null;
        String source = null;
        RuntimeInterfaceStatistics response = api.getRuntimeInterfaceStatistics(serviceId, serviceInstanceId, instanceRuntimeId, interfaceIndex, source);

        // TODO: test validations
    }
    /**
     * Get a particular ServiceProfile for a Service.
     *
     * Returns detailed service profile information for a given Service. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSIServiceProfileTest() throws ApiException {
        String serviceId = null;
        String serviceProfileId = null;
        BaseServiceProfile response = api.getSIServiceProfile(serviceId, serviceProfileId);

        // TODO: test validations
    }
    /**
     * Get a particular service attachment.
     *
     * Returns detailed Attachment information for a given service attachment. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getServiceAttachmentTest() throws ApiException {
        String serviceAttachmentId = null;
        ServiceAttachment response = api.getServiceAttachment(serviceAttachmentId);

        // TODO: test validations
    }
    /**
     * Get a particular service chain.
     *
     * Returns detailed service chain information. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getServiceChainTest() throws ApiException {
        String serviceChainId = null;
        ServiceChain response = api.getServiceChain(serviceChainId);

        // TODO: test validations
    }
    /**
     * Get a particular service deployment.
     *
     * Returns detail of service deployment. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getServiceDeploymentTest() throws ApiException {
        String serviceId = null;
        String serviceDeploymentId = null;
        ServiceDeployment response = api.getServiceDeployment(serviceId, serviceDeploymentId);

        // TODO: test validations
    }
    /**
     * Get Service-Deployment state for Service.
     *
     * Returns configuration state of deployed partner service using service insertion framework. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getServiceDeploymentStateTest() throws ApiException {
        String serviceId = null;
        String serviceDeploymentId = null;
        ConfigurationState response = api.getServiceDeploymentState(serviceId, serviceDeploymentId);

        // TODO: test validations
    }
    /**
     * Get a particular service deployment status.
     *
     * Returns current status of the deployment of partner service. Available only for EPP Services. By default this API would return cached status. Caching happens every 3 minutes. For realtime status, query parameter \&quot;source&#x3D;realtime\&quot; needs to be passed. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getServiceDeploymentStatusTest() throws ApiException {
        String serviceId = null;
        String serviceDeploymentId = null;
        String source = null;
        ServiceDeploymentStatus response = api.getServiceDeploymentStatus(serviceId, serviceDeploymentId, source);

        // TODO: test validations
    }
    /**
     * Get all service deployments for the given service id
     *
     * Returns the list of deployments for the given service 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getServiceDeploymentsTest() throws ApiException {
        String serviceId = null;
        ServiceDeploymentListResult response = api.getServiceDeployments(serviceId);

        // TODO: test validations
    }
    /**
     * Get list of members in exclude list
     *
     * Get list of members in exclude list
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getServiceInsertionExcludeListTest() throws ApiException {
        SIExcludeList response = api.getServiceInsertionExcludeList();

        // TODO: test validations
    }
    /**
     * Read an Existing Rule
     *
     * Return existing serviceinsertion rule information in a serviceinsertion section. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getServiceInsertionRuleTest() throws ApiException {
        String sectionId = null;
        String ruleId = null;
        ServiceInsertionRule response = api.getServiceInsertionRule(sectionId, ruleId);

        // TODO: test validations
    }
    /**
     * Get All the Rules for a Section
     *
     * Return all serviceinsertion rule(s) information for a given serviceinsertion section. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getServiceInsertionRulesTest() throws ApiException {
        String sectionId = null;
        String appliedTos = null;
        String cursor = null;
        String destinations = null;
        String filterType = null;
        String includedFields = null;
        Long pageSize = null;
        String services = null;
        Boolean sortAscending = null;
        String sortBy = null;
        String sources = null;
        ServiceInsertionRuleListResult response = api.getServiceInsertionRules(sectionId, appliedTos, cursor, destinations, filterType, includedFields, pageSize, services, sortAscending, sortBy, sources);

        // TODO: test validations
    }
    /**
     * Get an Existing Section
     *
     * Returns information about serviceinsertion section for the identifier. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getServiceInsertionSectionTest() throws ApiException {
        String sectionId = null;
        ServiceInsertionSection response = api.getServiceInsertionSection(sectionId);

        // TODO: test validations
    }
    /**
     * Get an Existing Section, Including Rules
     *
     * Returns serviceinsertion section information with rules for a section identifier. When invoked on a section with a large number of rules, this API is supported only at low rates of invocation (not more than 4-5 times per minute). The typical latency of this API with about 1024 rules is about 4-5 seconds. This API should not be invoked with large payloads at automation speeds. More than 50 rules are not supported.  Instead, to read serviceinsertion rules, use: GET /api/v1/serviceinsertion/sections/&amp;lt;section-id&amp;gt;/rules with the appropriate page_size. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getServiceInsertionSectionWithRulesListWithRulesTest() throws ApiException {
        String sectionId = null;
        ServiceInsertionSectionRuleList response = api.getServiceInsertionSectionWithRulesListWithRules(sectionId);

        // TODO: test validations
    }
    /**
     * Get an existing Service
     *
     * Returns information about Service-Insertion Service with the given identifier. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getServiceInsertionServiceTest() throws ApiException {
        String serviceId = null;
        ServiceDefinition response = api.getServiceInsertionService(serviceId);

        // TODO: test validations
    }
    /**
     * Get ServiceInsertion global status for a context
     *
     * Get ServiceInsertion global status for a context
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getServiceInsertionStatusTest() throws ApiException {
        String contextType = null;
        ServiceInsertionStatus response = api.getServiceInsertionStatus(contextType);

        // TODO: test validations
    }
    /**
     * Get Service-Instance for Service.
     *
     * Returns Service-Instance information for a given Service-Insertion Service. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getServiceInstanceTest() throws ApiException {
        String serviceId = null;
        String serviceInstanceId = null;
        BaseServiceInstance response = api.getServiceInstance(serviceId, serviceInstanceId);

        // TODO: test validations
    }
    /**
     * Get NSgroups for a given ServiceInstance.
     *
     * Returns list of NSGroups used in Service Insertion North-South rules for a given Service Instance. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getServiceInstanceNSGroupsTest() throws ApiException {
        String serviceId = null;
        String serviceInstanceId = null;
        ServiceInstanceNSGroups response = api.getServiceInstanceNSGroups(serviceId, serviceInstanceId);

        // TODO: test validations
    }
    /**
     * Get Service-Instance state for Service.
     *
     * Returns configuration state of one instance of a deployed partner service using service insertion framework. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getServiceInstanceStateTest() throws ApiException {
        String serviceId = null;
        String serviceInstanceId = null;
        ConfigurationState response = api.getServiceInstanceState(serviceId, serviceInstanceId);

        // TODO: test validations
    }
    /**
     * Get Service-Instance status for Service.
     *
     * Returns status of one instance of a deployed partner service using service insertion framework. By default this API would return cached status. Caching happens every 3 minutes. For realtime status, query parameter \&quot;source&#x3D;realtime\&quot; needs to be passed. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getServiceInstanceStatusTest() throws ApiException {
        String serviceId = null;
        String serviceInstanceId = null;
        String source = null;
        ServiceInstanceStatus response = api.getServiceInstanceStatus(serviceId, serviceInstanceId, source);

        // TODO: test validations
    }
    /**
     * Get service manager
     *
     * Retrieve service-manager details like name, username, password, vendor ID, thumbprint for a given ID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getServiceManagerTest() throws ApiException {
        String serviceManagerId = null;
        ServiceManager response = api.getServiceManager(serviceManagerId);

        // TODO: test validations
    }
    /**
     * Get NSgroups for a given ServiceProfile.
     *
     * Returns list of NSGroups used in Service Insertion rules for a given Service Profile. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getServiceProfileNSGroupsTest() throws ApiException {
        String serviceId = null;
        String serviceProfileId = null;
        ServiceProfileNSGroups response = api.getServiceProfileNSGroups(serviceId, serviceProfileId);

        // TODO: test validations
    }
    /**
     * Get Solution Config Information for a given solution config id.
     *
     * Returns Solution Config information for a given solution config id. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSolutionConfigTest() throws ApiException {
        String serviceId = null;
        String solutionConfigId = null;
        SolutionConfig response = api.getSolutionConfig(serviceId, solutionConfigId);

        // TODO: test validations
    }
    /**
     * Get a particular vendor template for a given service.
     *
     * Returns detailed vendor template information for a given service. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getVendorTemplateTest() throws ApiException {
        String serviceId = null;
        String vendorTemplateId = null;
        VendorTemplate response = api.getVendorTemplate(serviceId, vendorTemplateId);

        // TODO: test validations
    }
    /**
     * List all InstanceEndpoints of a Service Instance.
     *
     * List all InstanceEndpoints of a service instance. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listInstanceEndpointsTest() throws ApiException {
        String serviceId = null;
        String serviceInstanceId = null;
        InstanceEndpointListResult response = api.listInstanceEndpoints(serviceId, serviceInstanceId);

        // TODO: test validations
    }
    /**
     * Returns list of instance runtimes of service VM being deployed
     *
     * Returns list of instance runtimes of service VMs being deployed for a given service instance id 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listInstanceRuntimesTest() throws ApiException {
        String serviceId = null;
        String serviceInstanceId = null;
        InstanceRuntimeListResult response = api.listInstanceRuntimes(serviceId, serviceInstanceId);

        // TODO: test validations
    }
    /**
     * List all Service Profiles of a Service.
     *
     * List all service profiles of a service. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listSIServiceProfilesTest() throws ApiException {
        String serviceId = null;
        SIServiceProfileListResult response = api.listSIServiceProfiles(serviceId);

        // TODO: test validations
    }
    /**
     * Get all service attachments.
     *
     * Returns all Service-Attachement(s) present in the system. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listServiceAttachmentsTest() throws ApiException {
        ServiceAttachmentListResult response = api.listServiceAttachments();

        // TODO: test validations
    }
    /**
     * List all ServiceChainMappings.
     *
     * List all service chain mappings in the system for the given service profile. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listServiceChainMappingsTest() throws ApiException {
        String serviceId = null;
        String serviceProfileId = null;
        ServiceChainMappingListResult response = api.listServiceChainMappings(serviceId, serviceProfileId);

        // TODO: test validations
    }
    /**
     * List all ServiceChains.
     *
     * List all service chains in the system. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listServiceChainsTest() throws ApiException {
        ServiceChainListResult response = api.listServiceChains();

        // TODO: test validations
    }
    /**
     * List All Service Insertion Sections
     *
     * List all Service Insertion section in paginated form. A default page size is limited to 1000 sections. By default, the list of section is filtered by L3REDIRECT type. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listServiceInsertionSectionsTest() throws ApiException {
        String appliedTos = null;
        String cursor = null;
        String destinations = null;
        String excludeAppliedToType = null;
        String filterType = null;
        String includeAppliedToType = null;
        String includedFields = null;
        Long pageSize = null;
        String services = null;
        Boolean sortAscending = null;
        String sortBy = null;
        String sources = null;
        String type = null;
        ServiceInsertionSectionListResult response = api.listServiceInsertionSections(appliedTos, cursor, destinations, excludeAppliedToType, filterType, includeAppliedToType, includedFields, pageSize, services, sortAscending, sortBy, sources, type);

        // TODO: test validations
    }
    /**
     * List all Service-Insertion Services.
     *
     * List all Service-Insertion Service Definitions. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listServiceInsertionServicesTest() throws ApiException {
        ServiceInsertionServiceListResult response = api.listServiceInsertionServices();

        // TODO: test validations
    }
    /**
     * List all service insertion status for supported contexts
     *
     * List all service insertion status for supported contexts
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listServiceInsertionStatusTest() throws ApiException {
        ServiceInsertionStatusListResult response = api.listServiceInsertionStatus();

        // TODO: test validations
    }
    /**
     * Get all Service-Instances present in system
     *
     * Returns all Service-Instance(s) of all Services present in system. When request parameter (deployed_to or service_deployment_id) is provided as a part of request, it will filter out Service-Instances accordingly. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listServiceInstancesTest() throws ApiException {
        String deployedTo = null;
        String serviceDeploymentId = null;
        ServiceInstanceListResult response = api.listServiceInstances(deployedTo, serviceDeploymentId);

        // TODO: test validations
    }
    /**
     * Get all Service-Instances for Service.
     *
     * Returns all Service-Instance(s) for a given Service-Insertion Service. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listServiceInstancesForServiceTest() throws ApiException {
        String serviceId = null;
        ServiceInstanceListResult response = api.listServiceInstancesForService(serviceId);

        // TODO: test validations
    }
    /**
     * List service managers
     *
     * List all service managers. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listServiceManagersTest() throws ApiException {
        ServiceManagerListResult response = api.listServiceManagers();

        // TODO: test validations
    }
    /**
     * List all service paths
     *
     * List all service paths for the given service chain for the given service chain id 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listServicePathsTest() throws ApiException {
        String serviceChainId = null;
        String cursor = null;
        String includedFields = null;
        Long pageSize = null;
        Boolean sortAscending = null;
        String sortBy = null;
        ServicePathListResult response = api.listServicePaths(serviceChainId, cursor, includedFields, pageSize, sortAscending, sortBy);

        // TODO: test validations
    }
    /**
     * Get Solution Config Information associated with a given service.
     *
     * Returns Solution Config information for a given service. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listSolutionConfigsTest() throws ApiException {
        String serviceId = null;
        SolutionConfigListResult response = api.listSolutionConfigs(serviceId);

        // TODO: test validations
    }
    /**
     * List all VendorTemplates of a Service.
     *
     * List all vendor templates of a service. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listVendorTemplatesTest() throws ApiException {
        String serviceId = null;
        String vendorTemplateName = null;
        VendorTemplateListResult response = api.listVendorTemplates(serviceId, vendorTemplateName);

        // TODO: test validations
    }
    /**
     * Register service manager
     *
     * Register service-manager with NSX with basic details like name, username, password.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void registerServiceManagerTest() throws ApiException {
        ServiceManager body = null;
        ServiceManager response = api.registerServiceManager(body);

        // TODO: test validations
    }
    /**
     * Remove an existing object from the exclude list
     *
     * Remove an existing object from the exclude list
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removeServiceInsertionExcludeListMemberRemoveMemberTest() throws ApiException {
        String objectId = null;
        ResourceReference response = api.removeServiceInsertionExcludeListMemberRemoveMember(objectId);

        // TODO: test validations
    }
    /**
     * Resolve &#x27;source node id&#x27; value to source entities.
     *
     * Service insertion data path inserts unique &#x27;source node id&#x27; value into each packet. This API can be used to identify the source of the packet using this value. It can be resolved to multiple source entities. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void resolveSourceEntitiesTest() throws ApiException {
        String sourceNodeValue = null;
        SourceEntityResult response = api.resolveSourceEntities(sourceNodeValue);

        // TODO: test validations
    }
    /**
     * Update an Existing Rule and Reorder the Rule
     *
     * Modifies existing serviceinsertion rule along with relative position among other serviceinsertion rules inside a serviceinsertion section. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void reviseServiceInsertionRuleReviseTest() throws ApiException {
        ServiceInsertionRule body = null;
        String sectionId = null;
        String ruleId = null;
        String id = null;
        String operation = null;
        ServiceInsertionRule response = api.reviseServiceInsertionRuleRevise(body, sectionId, ruleId, id, operation);

        // TODO: test validations
    }
    /**
     * Update an Existing Section, Including Its Position
     *
     * Modifies an existing serviceinsertion section along with its relative position among other serviceinsertion sections in the system. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void reviseServiceInsertionSectionReviseTest() throws ApiException {
        ServiceInsertionSection body = null;
        String sectionId = null;
        String id = null;
        String operation = null;
        ServiceInsertionSection response = api.reviseServiceInsertionSectionRevise(body, sectionId, id, operation);

        // TODO: test validations
    }
    /**
     * Update an Existing Section with Rules
     *
     * Modifies an existing serviceinsertion section along with its relative position among other serviceinsertion sections with rules. When invoked on a large number of rules, this API is supported only at low rates of invocation (not more than 2 times per minute). The typical latency of this API with about 1024 rules is about 15 seconds in a cluster setup. This API should not be invoked with large payloads at automation speeds.  Instead, to move a section above or below another section, use: POST /api/v1/serviceinsertion/sections/&amp;lt;section-id&amp;gt;?action&#x3D;revise  To modify rules, use: PUT /api/v1/serviceinsertion/sections/&amp;lt;section-id&amp;gt;/rules/&amp;lt;rule-id&amp;gt; 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void reviseServiceInsertionSectionWithRulesReviseWithRulesTest() throws ApiException {
        ServiceInsertionSectionRuleList body = null;
        String sectionId = null;
        String id = null;
        String operation = null;
        ServiceInsertionSectionRuleList response = api.reviseServiceInsertionSectionWithRulesReviseWithRules(body, sectionId, id, operation);

        // TODO: test validations
    }
    /**
     * Update an existing Service Deployment.
     *
     * Modifies an existing Service Deployment. This will not update the already deployed service instances, deployed via this deployment. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateServiceDeploymentTest() throws ApiException {
        ServiceDeployment body = null;
        String serviceId = null;
        String serviceDeploymentId = null;
        ServiceDeployment response = api.updateServiceDeployment(body, serviceId, serviceDeploymentId);

        // TODO: test validations
    }
    /**
     * Modify exclude list
     *
     * Modify exclude list. This includes adding/removing members in the list. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateServiceInsertionExcludeListTest() throws ApiException {
        SIExcludeList body = null;
        SIExcludeList response = api.updateServiceInsertionExcludeList(body);

        // TODO: test validations
    }
    /**
     * Update an Existing Rule
     *
     * Modifies existing serviceinsertion rule in a serviceinsertion section. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateServiceInsertionRuleTest() throws ApiException {
        ServiceInsertionRule body = null;
        String sectionId = null;
        String ruleId = null;
        ServiceInsertionRule response = api.updateServiceInsertionRule(body, sectionId, ruleId);

        // TODO: test validations
    }
    /**
     * Update an Existing Section
     *
     * Modifies the specified section, but does not modify the section&#x27;s associated rules. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateServiceInsertionSectionTest() throws ApiException {
        ServiceInsertionSection body = null;
        String sectionId = null;
        ServiceInsertionSection response = api.updateServiceInsertionSection(body, sectionId);

        // TODO: test validations
    }
    /**
     * Update an Existing Section, Including Its Rules
     *
     * Modifies existing serviceinsertion section along with its association with rules. When invoked on a large number of rules, this API is supported only at low rates of invocation (not more than 2 times per minute). The typical latency of this API with about 1024 rules is about 15 seconds in a cluster setup. This API should not be invoked with large payloads at automation speeds.  Instead, to update rule content, use: PUT /api/v1/serviceinsertion/sections/&amp;lt;section-id&amp;gt;/rules/&amp;lt;rule-id&amp;gt; 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateServiceInsertionSectionWithRulesUpdateWithRulesTest() throws ApiException {
        ServiceInsertionSectionRuleList body = null;
        String sectionId = null;
        ServiceInsertionSectionRuleList response = api.updateServiceInsertionSectionWithRulesUpdateWithRules(body, sectionId);

        // TODO: test validations
    }
    /**
     * Update an existing Service
     *
     * Modifies the specified Service. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateServiceInsertionServiceTest() throws ApiException {
        ServiceDefinition body = null;
        String serviceId = null;
        ServiceDefinition response = api.updateServiceInsertionService(body, serviceId);

        // TODO: test validations
    }
    /**
     * Update global ServiceInsertion status for a context
     *
     * Update global ServiceInsertion status for a context
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateServiceInsertionStatusTest() throws ApiException {
        ServiceInsertionStatus body = null;
        String contextType = null;
        ServiceInsertionStatus response = api.updateServiceInsertionStatus(body, contextType);

        // TODO: test validations
    }
    /**
     * Update an existing Service-Instance.
     *
     * Modifies an existing Service-Instance for a given Service-Insertion Service. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateServiceInstanceTest() throws ApiException {
        BaseServiceInstance body = null;
        String serviceId = null;
        String serviceInstanceId = null;
        BaseServiceInstance response = api.updateServiceInstance(body, serviceId, serviceInstanceId);

        // TODO: test validations
    }
    /**
     * Update service manager
     *
     * Update service-manager which is registered with NSX with basic details like name, username, password.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateServiceManagerTest() throws ApiException {
        ServiceManager body = null;
        String serviceManagerId = null;
        ServiceManager response = api.updateServiceManager(body, serviceManagerId);

        // TODO: test validations
    }
    /**
     * Update maintenance mode or runtime state of a service VM
     *
     * Set service VM either in or out of maintenance mode for maintenance mode, or in service or out of service for runtime state. Only one value can be set at one time. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateServiceVmStateTest() throws ApiException {
        String serviceId = null;
        String serviceInstanceId = null;
        String instanceRuntimeId = null;
        String action = null;
        String unhealthyReason = null;
        api.updateServiceVmState(serviceId, serviceInstanceId, instanceRuntimeId, action, unhealthyReason);

        // TODO: test validations
    }
    /**
     * Updates Solution Config for a given Service
     *
     * Updates a solution config. Solution Config are service level objects, required for configuring the NXGI partner Service after deployment. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSolutionConfigTest() throws ApiException {
        SolutionConfig body = null;
        String serviceId = null;
        String solutionConfigId = null;
        SolutionConfig response = api.updateSolutionConfig(body, serviceId, solutionConfigId);

        // TODO: test validations
    }
    /**
     * Upgrade all VMs part of this service deployment using newer version of OVF. It is currently being disabled.
     *
     * Upgrade API is currently disabled. Please refer to vendor documentation on how to upgrade individual appliances. Upgrade all VMs part of this service deployment using newer version of OVF. New OVF version isn&#x27;t expected in this call because it is published by the partner by updating the service definition. This API simply upgrades to the latest version published by the partner. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void upgradeServiceDeploymentUpgradeTest() throws ApiException {
        String serviceId = null;
        String serviceDeploymentId = null;
        api.upgradeServiceDeploymentUpgrade(serviceId, serviceDeploymentId);

        // TODO: test validations
    }
    /**
     * Upgrade service VMs using newer version of OVF
     *
     * Upgrade service VMs using newer version of OVF.  In case of HA, the stand-by service VM will be upgrade first. Once it has been upgraded, it switches to be the Active one and then the other VM will be upgrade. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void upgradeServiceVMsUpgradeTest() throws ApiException {
        String serviceId = null;
        String serviceInstanceId = null;
        api.upgradeServiceVMsUpgrade(serviceId, serviceInstanceId);

        // TODO: test validations
    }
}
