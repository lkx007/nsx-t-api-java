/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.AllocationIpAddress;
import io.swagger.client.model.ApiError;
import io.swagger.client.model.IpBlock;
import io.swagger.client.model.IpBlockListResult;
import io.swagger.client.model.IpBlockSubnet;
import io.swagger.client.model.IpBlockSubnetListResult;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ManagementPlaneApiPoolManagementIpBlocksApi
 */
@Ignore
public class ManagementPlaneApiPoolManagementIpBlocksApiTest {

    private final ManagementPlaneApiPoolManagementIpBlocksApi api = new ManagementPlaneApiPoolManagementIpBlocksApi();

    /**
     * Allocate or Release an IP Address from a Ip Subnet
     *
     * Allocates or releases an IP address from the specified IP subnet. To allocate an address, include ?action&#x3D;ALLOCATE in the request and a \&quot;{}\&quot; in the request body. When the request is successful, the response is \&quot;allocation_id\&quot;: \&quot;&lt;ip-address&gt;\&quot;, where &lt;ip-address&gt; is an IP address from the specified pool. To release an IP address (return it back to the pool), include ?action&#x3D;RELEASE in the request and \&quot;allocation_id\&quot;:&lt;ip-address&gt; in the request body, where &lt;ip-address&gt; is the address to be released. When the request is successful, the response is NULL. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void allocateOrReleaseFromIpBlockSubnetTest() throws ApiException {
        AllocationIpAddress body = null;
        String action = null;
        String subnetId = null;
        AllocationIpAddress response = api.allocateOrReleaseFromIpBlockSubnet(body, action, subnetId);

        // TODO: test validations
    }
    /**
     * Create a new IP address block.
     *
     * Creates a new IPv4 address block using the specified cidr. cidr is a required parameter. display_name &amp; description are optional parameters 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createIpBlockTest() throws ApiException {
        IpBlock body = null;
        IpBlock response = api.createIpBlock(body);

        // TODO: test validations
    }
    /**
     * Create subnet of specified size within an IP block
     *
     * Carves out a subnet of requested size from the specified IP block. The \&quot;size\&quot; parameter  and the \&quot;block_id \&quot; are the requireds field while invoking this API. If the IP block has sufficient resources/space to allocate a subnet of specified size, the response will contain all the details of the newly created subnet including the display_name, description, cidr &amp; allocation_ranges. Returns a conflict error if the IP block does not have enough resources/space to allocate a subnet of the requested size. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createIpBlockSubnetTest() throws ApiException {
        IpBlockSubnet body = null;
        IpBlockSubnet response = api.createIpBlockSubnet(body);

        // TODO: test validations
    }
    /**
     * Delete an IP Address Block
     *
     * Deletes the IP address block with specified id if it exists. IP block cannot be deleted if there are allocated subnets from the block. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteIpBlockTest() throws ApiException {
        String blockId = null;
        api.deleteIpBlock(blockId);

        // TODO: test validations
    }
    /**
     * Delete subnet within an IP block
     *
     * Deletes a subnet with specified id within a given IP address block. Deletion is allowed only when there are no allocated IP addresses from that subnet. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteIpBlockSubnetTest() throws ApiException {
        String subnetId = null;
        api.deleteIpBlockSubnet(subnetId);

        // TODO: test validations
    }
    /**
     * List subnets within an IP block
     *
     * Returns information about all subnets present within an IP address block. Information includes subnet&#x27;s id, display_name, description, cidr and allocation ranges. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listIpBlockSubnetsTest() throws ApiException {
        String blockId = null;
        String cursor = null;
        String includedFields = null;
        Long pageSize = null;
        Boolean sortAscending = null;
        String sortBy = null;
        IpBlockSubnetListResult response = api.listIpBlockSubnets(blockId, cursor, includedFields, pageSize, sortAscending, sortBy);

        // TODO: test validations
    }
    /**
     * Returns list of configured IP address blocks.
     *
     * Returns information about configured IP address blocks. Information includes the id, display name, description &amp; CIDR of IP address blocks 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listIpBlocksTest() throws ApiException {
        String cursor = null;
        String includedFields = null;
        Long pageSize = null;
        Boolean sortAscending = null;
        String sortBy = null;
        IpBlockListResult response = api.listIpBlocks(cursor, includedFields, pageSize, sortAscending, sortBy);

        // TODO: test validations
    }
    /**
     * Get IP address block information.
     *
     * Returns information about the IP address block with specified id. Information includes id, display_name, description &amp; cidr. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readIpBlockTest() throws ApiException {
        String blockId = null;
        IpBlock response = api.readIpBlock(blockId);

        // TODO: test validations
    }
    /**
     * Get the subnet within an IP block
     *
     * Returns information about the subnet with specified id within a given IP address block. Information includes display_name, description, cidr and allocation_ranges. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readIpBlockSubnetTest() throws ApiException {
        String subnetId = null;
        IpBlockSubnet response = api.readIpBlockSubnet(subnetId);

        // TODO: test validations
    }
    /**
     * Update an IP Address Block
     *
     * Modifies the IP address block with specifed id. display_name, description and cidr are parameters that can be modified. If a new cidr is specified, it should contain all existing subnets in the IP block. Returns a conflict error if the IP address block cidr can not be modified due to the presence of subnets that it contains. Eg: If the IP block contains a subnet 192.168.0.1/24 and we try to change the IP block cidr to 10.1.0.1/16, it results in a conflict. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateIpBlockTest() throws ApiException {
        IpBlock body = null;
        String blockId = null;
        IpBlock response = api.updateIpBlock(body, blockId);

        // TODO: test validations
    }
}
