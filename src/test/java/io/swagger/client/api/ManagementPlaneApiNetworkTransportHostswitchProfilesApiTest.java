/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.ApiError;
import io.swagger.client.model.BaseHostSwitchProfile;
import io.swagger.client.model.HostSwitchProfilesListResult;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ManagementPlaneApiNetworkTransportHostswitchProfilesApi
 */
@Ignore
public class ManagementPlaneApiNetworkTransportHostswitchProfilesApiTest {

    private final ManagementPlaneApiNetworkTransportHostswitchProfilesApi api = new ManagementPlaneApiNetworkTransportHostswitchProfilesApi();

    /**
     * Create a Hostswitch Profile
     *
     * Creates a hostswitch profile. The resource_type is required. For uplink profiles, the teaming and policy parameters are required. By default, the mtu is 1600 and the transport_vlan is 0. The supported MTU range is 1280 through (uplink_mtu_threshold). (uplink_mtu_threshold) is 9000 by default. Range can be extended by modifying (uplink_mtu_threshold) in SwitchingGlobalConfig to the required upper threshold. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createHostSwitchProfileTest() throws ApiException {
        BaseHostSwitchProfile body = null;
        BaseHostSwitchProfile response = api.createHostSwitchProfile(body);

        // TODO: test validations
    }
    /**
     * Delete a Hostswitch Profile
     *
     * Deletes a specified hostswitch profile.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteHostSwitchProfileTest() throws ApiException {
        String hostSwitchProfileId = null;
        api.deleteHostSwitchProfile(hostSwitchProfileId);

        // TODO: test validations
    }
    /**
     * Get a Hostswitch Profile by ID
     *
     * Returns information about a specified hostswitch profile.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getHostSwitchProfileTest() throws ApiException {
        String hostSwitchProfileId = null;
        BaseHostSwitchProfile response = api.getHostSwitchProfile(hostSwitchProfileId);

        // TODO: test validations
    }
    /**
     * List Hostswitch Profiles
     *
     * Returns information about the configured hostswitch profiles. Hostswitch profiles define networking policies for hostswitches (sometimes referred to as bridges in OVS). Currently, only uplink teaming is supported. Uplink teaming allows NSX to load balance traffic across different physical NICs (PNICs) on the hypervisor hosts. Multiple teaming policies are supported, including LACP active, LACP passive, load balancing based on source ID, and failover order. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listHostSwitchProfilesTest() throws ApiException {
        String cursor = null;
        String hostswitchProfileType = null;
        Boolean includeSystemOwned = null;
        String includedFields = null;
        Long pageSize = null;
        Boolean sortAscending = null;
        String sortBy = null;
        String uplinkTeamingPolicyName = null;
        HostSwitchProfilesListResult response = api.listHostSwitchProfiles(cursor, hostswitchProfileType, includeSystemOwned, includedFields, pageSize, sortAscending, sortBy, uplinkTeamingPolicyName);

        // TODO: test validations
    }
    /**
     * Update a Hostswitch Profile
     *
     * Modifies a specified hostswitch profile. The body of the PUT request must include the resource_type. For uplink profiles, the put request must also include teaming parameters. Modifiable attributes include display_name, mtu, and transport_vlan. For uplink teaming policies, uplink_name and policy are also modifiable. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateHostSwitchProfileTest() throws ApiException {
        BaseHostSwitchProfile body = null;
        String hostSwitchProfileId = null;
        BaseHostSwitchProfile response = api.updateHostSwitchProfile(body, hostSwitchProfileId);

        // TODO: test validations
    }
}
