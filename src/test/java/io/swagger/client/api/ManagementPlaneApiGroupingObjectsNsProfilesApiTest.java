/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.ApiError;
import io.swagger.client.model.NSProfile;
import io.swagger.client.model.NSProfileListResult;
import io.swagger.client.model.NSSupportedAttributeTypesResult;
import io.swagger.client.model.NSSupportedAttributesListResult;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ManagementPlaneApiGroupingObjectsNsProfilesApi
 */
@Ignore
public class ManagementPlaneApiGroupingObjectsNsProfilesApiTest {

    private final ManagementPlaneApiGroupingObjectsNsProfilesApi api = new ManagementPlaneApiGroupingObjectsNsProfilesApi();

    /**
     * Create NSProfile
     *
     * Creates a new NSProfile which allows users to encapsulate attribute and sub-attributes of network services. Rules for using attributes and sub-attributes in single NSProfile 1. One type of attribute can&#x27;t have multiple occurrences. ( Example -  Attribute type APP_ID can be used only once per NSProfile.) 2. Values for an attribute are mentioned as array of strings.  ( Example - For type APP_ID , values can be mentioned as [\&quot;SSL\&quot;,\&quot;FTP\&quot;].) 3. If sub-attribtes are mentioned for an attribute, then only single  value is allowed for that attribute. 4. To get a list of supported  attributes and sub-attributes fire the following REST API  GET https://&amp;lt;nsx-mgr&amp;gt;/api/v1/ns-profiles/attributes 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNSProfileTest() throws ApiException {
        NSProfile body = null;
        NSProfile response = api.createNSProfile(body);

        // TODO: test validations
    }
    /**
     * Delete NSProfile
     *
     * Deletes the specified NSProfile. By default, if the NSProfile is consumed in a Firewall rule, it won&#x27;t get deleted. In such situations, pass \&quot;force&#x3D;true\&quot; as query param to force delete the NSProfile. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNSProfileTest() throws ApiException {
        String nsProfileId = null;
        Boolean force = null;
        api.deleteNSProfile(nsProfileId, force);

        // TODO: test validations
    }
    /**
     * List NSProfiles
     *
     * List the NSProfiles created in a paginated format.The page size is restricted to 50 NSProfiles, so that the size of the response remains small even when there are high number of NSProfiles with multiple attributes and multiple attribute values for each attribute. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listNSProfilesTest() throws ApiException {
        String attributeType = null;
        String cursor = null;
        String includedFields = null;
        Long pageSize = null;
        Boolean sortAscending = null;
        String sortBy = null;
        NSProfileListResult response = api.listNSProfiles(attributeType, cursor, includedFields, pageSize, sortAscending, sortBy);

        // TODO: test validations
    }
    /**
     * List NSProfile supported attribute and sub-attributes
     *
     * Returns supported attribute and sub-attributes for specified attribute type with their supported values, if provided in query/request parameter, else will fetch all supported attribute and sub-attributes for all supported attribute types. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listNSSupportedAttributesTest() throws ApiException {
        String attributeType = null;
        String cursor = null;
        String includedFields = null;
        Long pageSize = null;
        Boolean sortAscending = null;
        String sortBy = null;
        NSSupportedAttributesListResult response = api.listNSSupportedAttributes(attributeType, cursor, includedFields, pageSize, sortAscending, sortBy);

        // TODO: test validations
    }
    /**
     * List NSProfile supported attribute types
     *
     * Returns supported attribute type strings for NSProfile. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listNSSupportedAttributesTypesTest() throws ApiException {
        NSSupportedAttributeTypesResult response = api.listNSSupportedAttributesTypes();

        // TODO: test validations
    }
    /**
     * Read NSProfile
     *
     * Returns information about the specified NSProfile. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNSProfileTest() throws ApiException {
        String nsProfileId = null;
        NSProfile response = api.readNSProfile(nsProfileId);

        // TODO: test validations
    }
    /**
     * Update NSProfile
     *
     * Updates the specified NSProfile. Rules for using attributes and sub-attributes in single NSProfile 1. One type of attribute can&#x27;t have multiple occurrences. ( Example -  Attribute type APP_ID can be used only once per NSProfile.) 2. Values for an attribute are mentioned as array of strings.  ( Example - For type APP_ID , values can be mentioned as [\&quot;SSL\&quot;,\&quot;FTP\&quot;].) 3. If sub-attribtes are mentioned for an attribute, then only single  value is allowed for that attribute. 4. To get a list of supported  attributes and sub-attributes fire the following REST API  GET https://&amp;lt;nsx-mgr&amp;gt;/api/v1/ns-profiles/attributes 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateNSProfileTest() throws ApiException {
        NSProfile body = null;
        String nsProfileId = null;
        NSProfile response = api.updateNSProfile(body, nsProfileId);

        // TODO: test validations
    }
}
