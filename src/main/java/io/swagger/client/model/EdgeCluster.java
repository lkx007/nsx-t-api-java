/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.AllocationRule;
import io.swagger.client.model.ClusterProfileTypeIdEntry;
import io.swagger.client.model.EdgeClusterMember;
import io.swagger.client.model.ManagedResource;
import io.swagger.client.model.Tag;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * EdgeCluster
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class EdgeCluster extends ManagedResource {
  /**
   * Edge cluster is homogenous collection of transport nodes. Hence all transport nodes of the cluster must be of same type. This readonly field shows the type of transport nodes. 
   */
  @JsonAdapter(MemberNodeTypeEnum.Adapter.class)
  public enum MemberNodeTypeEnum {
    EDGE_NODE("EDGE_NODE"),
    PUBLIC_CLOUD_GATEWAY_NODE("PUBLIC_CLOUD_GATEWAY_NODE"),
    UNKNOWN("UNKNOWN");

    private String value;

    MemberNodeTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static MemberNodeTypeEnum fromValue(String text) {
      for (MemberNodeTypeEnum b : MemberNodeTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<MemberNodeTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MemberNodeTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MemberNodeTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return MemberNodeTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("member_node_type")
  private MemberNodeTypeEnum memberNodeType = null;

  @SerializedName("cluster_profile_bindings")
  private List<ClusterProfileTypeIdEntry> clusterProfileBindings = null;

  @SerializedName("allocation_rules")
  private List<AllocationRule> allocationRules = null;

  @SerializedName("members")
  private List<EdgeClusterMember> members = null;

  /**
   * This field is a readonly field which shows the deployment_type of members. It returns UNKNOWN if there are no members, and returns VIRTUAL_MACHINE| PHYSICAL_MACHINE if all edge members are VIRTUAL_MACHINE|PHYSICAL_MACHINE. It returns HYBRID if the cluster contains edge members of both types VIRTUAL_MACHINE and PHYSICAL_MACHINE. 
   */
  @JsonAdapter(DeploymentTypeEnum.Adapter.class)
  public enum DeploymentTypeEnum {
    VIRTUAL_MACHINE("VIRTUAL_MACHINE"),
    PHYSICAL_MACHINE("PHYSICAL_MACHINE"),
    UNKNOWN("UNKNOWN");

    private String value;

    DeploymentTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static DeploymentTypeEnum fromValue(String text) {
      for (DeploymentTypeEnum b : DeploymentTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<DeploymentTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DeploymentTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DeploymentTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return DeploymentTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("deployment_type")
  private DeploymentTypeEnum deploymentType = null;

   /**
   * Edge cluster is homogenous collection of transport nodes. Hence all transport nodes of the cluster must be of same type. This readonly field shows the type of transport nodes. 
   * @return memberNodeType
  **/
  @Schema(description = "Edge cluster is homogenous collection of transport nodes. Hence all transport nodes of the cluster must be of same type. This readonly field shows the type of transport nodes. ")
  public MemberNodeTypeEnum getMemberNodeType() {
    return memberNodeType;
  }

  public EdgeCluster clusterProfileBindings(List<ClusterProfileTypeIdEntry> clusterProfileBindings) {
    this.clusterProfileBindings = clusterProfileBindings;
    return this;
  }

  public EdgeCluster addClusterProfileBindingsItem(ClusterProfileTypeIdEntry clusterProfileBindingsItem) {
    if (this.clusterProfileBindings == null) {
      this.clusterProfileBindings = new ArrayList<ClusterProfileTypeIdEntry>();
    }
    this.clusterProfileBindings.add(clusterProfileBindingsItem);
    return this;
  }

   /**
   * Edge cluster profile bindings
   * @return clusterProfileBindings
  **/
  @Schema(description = "Edge cluster profile bindings")
  public List<ClusterProfileTypeIdEntry> getClusterProfileBindings() {
    return clusterProfileBindings;
  }

  public void setClusterProfileBindings(List<ClusterProfileTypeIdEntry> clusterProfileBindings) {
    this.clusterProfileBindings = clusterProfileBindings;
  }

  public EdgeCluster allocationRules(List<AllocationRule> allocationRules) {
    this.allocationRules = allocationRules;
    return this;
  }

  public EdgeCluster addAllocationRulesItem(AllocationRule allocationRulesItem) {
    if (this.allocationRules == null) {
      this.allocationRules = new ArrayList<AllocationRule>();
    }
    this.allocationRules.add(allocationRulesItem);
    return this;
  }

   /**
   * Set of allocation rules and respected action for auto placement of logical router, DHCP and MDProxy on edge cluster members. 
   * @return allocationRules
  **/
  @Schema(description = "Set of allocation rules and respected action for auto placement of logical router, DHCP and MDProxy on edge cluster members. ")
  public List<AllocationRule> getAllocationRules() {
    return allocationRules;
  }

  public void setAllocationRules(List<AllocationRule> allocationRules) {
    this.allocationRules = allocationRules;
  }

  public EdgeCluster members(List<EdgeClusterMember> members) {
    this.members = members;
    return this;
  }

  public EdgeCluster addMembersItem(EdgeClusterMember membersItem) {
    if (this.members == null) {
      this.members = new ArrayList<EdgeClusterMember>();
    }
    this.members.add(membersItem);
    return this;
  }

   /**
   * EdgeCluster only supports homogeneous members. These member should be backed by either EdgeNode or PublicCloudGatewayNode. TransportNode type of these nodes should be the same. DeploymentType (VIRTUAL_MACHINE|PHYSICAL_MACHINE) of these EdgeNodes is recommended to be the same. EdgeCluster supports members of different deployment types. 
   * @return members
  **/
  @Schema(description = "EdgeCluster only supports homogeneous members. These member should be backed by either EdgeNode or PublicCloudGatewayNode. TransportNode type of these nodes should be the same. DeploymentType (VIRTUAL_MACHINE|PHYSICAL_MACHINE) of these EdgeNodes is recommended to be the same. EdgeCluster supports members of different deployment types. ")
  public List<EdgeClusterMember> getMembers() {
    return members;
  }

  public void setMembers(List<EdgeClusterMember> members) {
    this.members = members;
  }

   /**
   * This field is a readonly field which shows the deployment_type of members. It returns UNKNOWN if there are no members, and returns VIRTUAL_MACHINE| PHYSICAL_MACHINE if all edge members are VIRTUAL_MACHINE|PHYSICAL_MACHINE. It returns HYBRID if the cluster contains edge members of both types VIRTUAL_MACHINE and PHYSICAL_MACHINE. 
   * @return deploymentType
  **/
  @Schema(description = "This field is a readonly field which shows the deployment_type of members. It returns UNKNOWN if there are no members, and returns VIRTUAL_MACHINE| PHYSICAL_MACHINE if all edge members are VIRTUAL_MACHINE|PHYSICAL_MACHINE. It returns HYBRID if the cluster contains edge members of both types VIRTUAL_MACHINE and PHYSICAL_MACHINE. ")
  public DeploymentTypeEnum getDeploymentType() {
    return deploymentType;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EdgeCluster edgeCluster = (EdgeCluster) o;
    return Objects.equals(this.memberNodeType, edgeCluster.memberNodeType) &&
        Objects.equals(this.clusterProfileBindings, edgeCluster.clusterProfileBindings) &&
        Objects.equals(this.allocationRules, edgeCluster.allocationRules) &&
        Objects.equals(this.members, edgeCluster.members) &&
        Objects.equals(this.deploymentType, edgeCluster.deploymentType) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(memberNodeType, clusterProfileBindings, allocationRules, members, deploymentType, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EdgeCluster {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    memberNodeType: ").append(toIndentedString(memberNodeType)).append("\n");
    sb.append("    clusterProfileBindings: ").append(toIndentedString(clusterProfileBindings)).append("\n");
    sb.append("    allocationRules: ").append(toIndentedString(allocationRules)).append("\n");
    sb.append("    members: ").append(toIndentedString(members)).append("\n");
    sb.append("    deploymentType: ").append(toIndentedString(deploymentType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
