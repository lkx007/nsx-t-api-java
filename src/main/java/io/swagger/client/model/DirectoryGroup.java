/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.ManagedResource;
import io.swagger.client.model.Tag;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.List;
/**
 * DirectoryGroup
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")

public class DirectoryGroup extends ManagedResource {
  @SerializedName("domain_sync_node_id")
  private String domainSyncNodeId = null;

  @SerializedName("distinguished_name")
  private String distinguishedName = null;

  @SerializedName("domain_id")
  private String domainId = null;

  @SerializedName("resource_type")
  private String resourceType = null;

  @SerializedName("domain_name")
  private String domainName = null;

  public DirectoryGroup() {
    this.resource_type = this.getClass().getSimpleName();
  }
  public DirectoryGroup domainSyncNodeId(String domainSyncNodeId) {
    this.domainSyncNodeId = domainSyncNodeId;
    return this;
  }

   /**
   * Domain sync node under which this directory group is located. We currently sync only from Root node and hence this attribute doesn&#x27;t have a specific value set.
   * @return domainSyncNodeId
  **/
  @Schema(description = "Domain sync node under which this directory group is located. We currently sync only from Root node and hence this attribute doesn't have a specific value set.")
  public String getDomainSyncNodeId() {
    return domainSyncNodeId;
  }

  public void setDomainSyncNodeId(String domainSyncNodeId) {
    this.domainSyncNodeId = domainSyncNodeId;
  }

  public DirectoryGroup distinguishedName(String distinguishedName) {
    this.distinguishedName = distinguishedName;
    return this;
  }

   /**
   * Directory group distinguished name
   * @return distinguishedName
  **/
  @Schema(required = true, description = "Directory group distinguished name")
  public String getDistinguishedName() {
    return distinguishedName;
  }

  public void setDistinguishedName(String distinguishedName) {
    this.distinguishedName = distinguishedName;
  }

  public DirectoryGroup domainId(String domainId) {
    this.domainId = domainId;
    return this;
  }

   /**
   * Domain ID this directory group belongs to.
   * @return domainId
  **/
  @Schema(required = true, description = "Domain ID this directory group belongs to.")
  public String getDomainId() {
    return domainId;
  }

  public void setDomainId(String domainId) {
    this.domainId = domainId;
  }

  public DirectoryGroup resourceType(String resourceType) {
    this.resourceType = resourceType;
    return this;
  }

   /**
   * Directory group resource type comes from multiple sub-classes extending this base class. For example, DirectoryAdGroup is one accepted resource_type. If there are more sub-classes defined, they will also be accepted resource_type.
   * @return resourceType
  **/
  @Schema(required = true, description = "Directory group resource type comes from multiple sub-classes extending this base class. For example, DirectoryAdGroup is one accepted resource_type. If there are more sub-classes defined, they will also be accepted resource_type.")
  public String getResourceType() {
    return resourceType;
  }

  public void setResourceType(String resourceType) {
    this.resourceType = resourceType;
  }

  public DirectoryGroup domainName(String domainName) {
    this.domainName = domainName;
    return this;
  }

   /**
   * Each active directory domain has a domain naming context (NC), which contains domain-specific data. The root of this naming context is represented by a domain&#x27;s distinguished name (DN) and is typically referred to as the NC head.
   * @return domainName
  **/
  @Schema(required = true, description = "Each active directory domain has a domain naming context (NC), which contains domain-specific data. The root of this naming context is represented by a domain's distinguished name (DN) and is typically referred to as the NC head.")
  public String getDomainName() {
    return domainName;
  }

  public void setDomainName(String domainName) {
    this.domainName = domainName;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DirectoryGroup directoryGroup = (DirectoryGroup) o;
    return Objects.equals(this.domainSyncNodeId, directoryGroup.domainSyncNodeId) &&
        Objects.equals(this.distinguishedName, directoryGroup.distinguishedName) &&
        Objects.equals(this.domainId, directoryGroup.domainId) &&
        Objects.equals(this.resourceType, directoryGroup.resourceType) &&
        Objects.equals(this.domainName, directoryGroup.domainName) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(domainSyncNodeId, distinguishedName, domainId, resourceType, domainName, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DirectoryGroup {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    domainSyncNodeId: ").append(toIndentedString(domainSyncNodeId)).append("\n");
    sb.append("    distinguishedName: ").append(toIndentedString(distinguishedName)).append("\n");
    sb.append("    domainId: ").append(toIndentedString(domainId)).append("\n");
    sb.append("    resourceType: ").append(toIndentedString(resourceType)).append("\n");
    sb.append("    domainName: ").append(toIndentedString(domainName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
