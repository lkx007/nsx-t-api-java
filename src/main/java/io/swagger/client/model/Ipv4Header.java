/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * Ipv4Header
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class Ipv4Header {
  @SerializedName("src_ip")
  private String srcIp = null;

  @SerializedName("flags")
  private Long flags = 0l;

  @SerializedName("dst_ip")
  private String dstIp = null;

  @SerializedName("src_subnet_prefix_len")
  private Long srcSubnetPrefixLen = null;

  @SerializedName("ttl")
  private Long ttl = 64l;

  @SerializedName("protocol")
  private Long protocol = 1l;

  public Ipv4Header srcIp(String srcIp) {
    this.srcIp = srcIp;
    return this;
  }

   /**
   * The source ip address.
   * @return srcIp
  **/
  @Schema(description = "The source ip address.")
  public String getSrcIp() {
    return srcIp;
  }

  public void setSrcIp(String srcIp) {
    this.srcIp = srcIp;
  }

  public Ipv4Header flags(Long flags) {
    this.flags = flags;
    return this;
  }

   /**
   * IP flags
   * minimum: 0
   * maximum: 8
   * @return flags
  **/
  @Schema(description = "IP flags")
  public Long getFlags() {
    return flags;
  }

  public void setFlags(Long flags) {
    this.flags = flags;
  }

  public Ipv4Header dstIp(String dstIp) {
    this.dstIp = dstIp;
    return this;
  }

   /**
   * The destination ip address.
   * @return dstIp
  **/
  @Schema(description = "The destination ip address.")
  public String getDstIp() {
    return dstIp;
  }

  public void setDstIp(String dstIp) {
    this.dstIp = dstIp;
  }

  public Ipv4Header srcSubnetPrefixLen(Long srcSubnetPrefixLen) {
    this.srcSubnetPrefixLen = srcSubnetPrefixLen;
    return this;
  }

   /**
   * This is used together with src_ip to calculate dst_ip for broadcast when dst_ip is not given; not used in all other cases.
   * minimum: 1
   * maximum: 32
   * @return srcSubnetPrefixLen
  **/
  @Schema(description = "This is used together with src_ip to calculate dst_ip for broadcast when dst_ip is not given; not used in all other cases.")
  public Long getSrcSubnetPrefixLen() {
    return srcSubnetPrefixLen;
  }

  public void setSrcSubnetPrefixLen(Long srcSubnetPrefixLen) {
    this.srcSubnetPrefixLen = srcSubnetPrefixLen;
  }

  public Ipv4Header ttl(Long ttl) {
    this.ttl = ttl;
    return this;
  }

   /**
   * Time to live (ttl)
   * minimum: 0
   * maximum: 255
   * @return ttl
  **/
  @Schema(description = "Time to live (ttl)")
  public Long getTtl() {
    return ttl;
  }

  public void setTtl(Long ttl) {
    this.ttl = ttl;
  }

  public Ipv4Header protocol(Long protocol) {
    this.protocol = protocol;
    return this;
  }

   /**
   * IP protocol - defaults to ICMP
   * minimum: 0
   * maximum: 255
   * @return protocol
  **/
  @Schema(description = "IP protocol - defaults to ICMP")
  public Long getProtocol() {
    return protocol;
  }

  public void setProtocol(Long protocol) {
    this.protocol = protocol;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Ipv4Header ipv4Header = (Ipv4Header) o;
    return Objects.equals(this.srcIp, ipv4Header.srcIp) &&
        Objects.equals(this.flags, ipv4Header.flags) &&
        Objects.equals(this.dstIp, ipv4Header.dstIp) &&
        Objects.equals(this.srcSubnetPrefixLen, ipv4Header.srcSubnetPrefixLen) &&
        Objects.equals(this.ttl, ipv4Header.ttl) &&
        Objects.equals(this.protocol, ipv4Header.protocol);
  }

  @Override
  public int hashCode() {
    return Objects.hash(srcIp, flags, dstIp, srcSubnetPrefixLen, ttl, protocol);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Ipv4Header {\n");
    
    sb.append("    srcIp: ").append(toIndentedString(srcIp)).append("\n");
    sb.append("    flags: ").append(toIndentedString(flags)).append("\n");
    sb.append("    dstIp: ").append(toIndentedString(dstIp)).append("\n");
    sb.append("    srcSubnetPrefixLen: ").append(toIndentedString(srcSubnetPrefixLen)).append("\n");
    sb.append("    ttl: ").append(toIndentedString(ttl)).append("\n");
    sb.append("    protocol: ").append(toIndentedString(protocol)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
