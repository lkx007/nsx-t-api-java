/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * Contains up-to-date information relating to an auto-deployed VM, including its status and (potentially) an error message. 
 */
@Schema(description = "Contains up-to-date information relating to an auto-deployed VM, including its status and (potentially) an error message. ")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class ClusterNodeVMDeploymentStatusReport {
  /**
   * Status of the addition or deletion of an auto-deployed cluster node VM. 
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    UNKNOWN_STATE("UNKNOWN_STATE"),
    VM_DEPLOYMENT_QUEUED("VM_DEPLOYMENT_QUEUED"),
    VM_DEPLOYMENT_IN_PROGRESS("VM_DEPLOYMENT_IN_PROGRESS"),
    VM_DEPLOYMENT_FAILED("VM_DEPLOYMENT_FAILED"),
    VM_POWER_ON_IN_PROGRESS("VM_POWER_ON_IN_PROGRESS"),
    VM_POWER_ON_FAILED("VM_POWER_ON_FAILED"),
    WAITING_TO_REGISTER_VM("WAITING_TO_REGISTER_VM"),
    VM_REGISTRATION_FAILED("VM_REGISTRATION_FAILED"),
    VM_WAITING_TO_CLUSTER("VM_WAITING_TO_CLUSTER"),
    VM_WAITING_TO_COME_ONLINE("VM_WAITING_TO_COME_ONLINE"),
    VM_ONLINE_FAILED("VM_ONLINE_FAILED"),
    VM_CLUSTERING_IN_PROGRESS("VM_CLUSTERING_IN_PROGRESS"),
    VM_CLUSTERING_FAILED("VM_CLUSTERING_FAILED"),
    VM_CLUSTERING_SUCCESSFUL("VM_CLUSTERING_SUCCESSFUL"),
    WAITING_TO_UNDEPLOY_VM("WAITING_TO_UNDEPLOY_VM"),
    VM_DECLUSTER_IN_PROGRESS("VM_DECLUSTER_IN_PROGRESS"),
    VM_DECLUSTER_FAILED("VM_DECLUSTER_FAILED"),
    VM_DECLUSTER_SUCCESSFUL("VM_DECLUSTER_SUCCESSFUL"),
    VM_POWER_OFF_IN_PROGRESS("VM_POWER_OFF_IN_PROGRESS"),
    VM_POWER_OFF_FAILED("VM_POWER_OFF_FAILED"),
    VM_UNDEPLOY_IN_PROGRESS("VM_UNDEPLOY_IN_PROGRESS"),
    VM_UNDEPLOY_FAILED("VM_UNDEPLOY_FAILED"),
    VM_UNDEPLOY_SUCCESSFUL("VM_UNDEPLOY_SUCCESSFUL");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static StatusEnum fromValue(String text) {
      for (StatusEnum b : StatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StatusEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("status")
  private StatusEnum status = null;

  @SerializedName("failure_message")
  private String failureMessage = null;

  @SerializedName("failure_code")
  private Long failureCode = null;

  public ClusterNodeVMDeploymentStatusReport status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * Status of the addition or deletion of an auto-deployed cluster node VM. 
   * @return status
  **/
  @Schema(required = true, description = "Status of the addition or deletion of an auto-deployed cluster node VM. ")
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }

  public ClusterNodeVMDeploymentStatusReport failureMessage(String failureMessage) {
    this.failureMessage = failureMessage;
    return this;
  }

   /**
   * In case of auto-deployment-related failure, an error message will be stored here. 
   * @return failureMessage
  **/
  @Schema(description = "In case of auto-deployment-related failure, an error message will be stored here. ")
  public String getFailureMessage() {
    return failureMessage;
  }

  public void setFailureMessage(String failureMessage) {
    this.failureMessage = failureMessage;
  }

  public ClusterNodeVMDeploymentStatusReport failureCode(Long failureCode) {
    this.failureCode = failureCode;
    return this;
  }

   /**
   * In case of auto-deployment-related failure, the code for the error will be stored here. 
   * @return failureCode
  **/
  @Schema(description = "In case of auto-deployment-related failure, the code for the error will be stored here. ")
  public Long getFailureCode() {
    return failureCode;
  }

  public void setFailureCode(Long failureCode) {
    this.failureCode = failureCode;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ClusterNodeVMDeploymentStatusReport clusterNodeVMDeploymentStatusReport = (ClusterNodeVMDeploymentStatusReport) o;
    return Objects.equals(this.status, clusterNodeVMDeploymentStatusReport.status) &&
        Objects.equals(this.failureMessage, clusterNodeVMDeploymentStatusReport.failureMessage) &&
        Objects.equals(this.failureCode, clusterNodeVMDeploymentStatusReport.failureCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(status, failureMessage, failureCode);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ClusterNodeVMDeploymentStatusReport {\n");
    
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    failureMessage: ").append(toIndentedString(failureMessage)).append("\n");
    sb.append("    failureCode: ").append(toIndentedString(failureCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
