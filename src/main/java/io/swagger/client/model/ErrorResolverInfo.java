/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.ErrorResolverUserMetadata;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * Metadata related to a given error_id
 */
@Schema(description = "Metadata related to a given error_id")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class ErrorResolverInfo {
  @SerializedName("error_id")
  private Long errorId = null;

  @SerializedName("resolver_present")
  private Boolean resolverPresent = null;

  @SerializedName("user_metadata")
  private ErrorResolverUserMetadata userMetadata = null;

  public ErrorResolverInfo errorId(Long errorId) {
    this.errorId = errorId;
    return this;
  }

   /**
   * The error id for which metadata information is needed
   * @return errorId
  **/
  @Schema(required = true, description = "The error id for which metadata information is needed")
  public Long getErrorId() {
    return errorId;
  }

  public void setErrorId(Long errorId) {
    this.errorId = errorId;
  }

  public ErrorResolverInfo resolverPresent(Boolean resolverPresent) {
    this.resolverPresent = resolverPresent;
    return this;
  }

   /**
   * Indicates whether there is a resolver associated with the error or not
   * @return resolverPresent
  **/
  @Schema(required = true, description = "Indicates whether there is a resolver associated with the error or not")
  public Boolean isResolverPresent() {
    return resolverPresent;
  }

  public void setResolverPresent(Boolean resolverPresent) {
    this.resolverPresent = resolverPresent;
  }

  public ErrorResolverInfo userMetadata(ErrorResolverUserMetadata userMetadata) {
    this.userMetadata = userMetadata;
    return this;
  }

   /**
   * Get userMetadata
   * @return userMetadata
  **/
  @Schema(description = "")
  public ErrorResolverUserMetadata getUserMetadata() {
    return userMetadata;
  }

  public void setUserMetadata(ErrorResolverUserMetadata userMetadata) {
    this.userMetadata = userMetadata;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ErrorResolverInfo errorResolverInfo = (ErrorResolverInfo) o;
    return Objects.equals(this.errorId, errorResolverInfo.errorId) &&
        Objects.equals(this.resolverPresent, errorResolverInfo.resolverPresent) &&
        Objects.equals(this.userMetadata, errorResolverInfo.userMetadata);
  }

  @Override
  public int hashCode() {
    return Objects.hash(errorId, resolverPresent, userMetadata);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ErrorResolverInfo {\n");
    
    sb.append("    errorId: ").append(toIndentedString(errorId)).append("\n");
    sb.append("    resolverPresent: ").append(toIndentedString(resolverPresent)).append("\n");
    sb.append("    userMetadata: ").append(toIndentedString(userMetadata)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
