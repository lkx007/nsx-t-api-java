/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * Structured data entry in RFC5424 log format
 */
@Schema(description = "Structured data entry in RFC5424 log format")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class StructuredData {
  @SerializedName("audit")
  private String audit = null;

  @SerializedName("username")
  private String username = null;

  @SerializedName("ereq_id")
  private String ereqId = null;

  @SerializedName("level")
  private String level = null;

  @SerializedName("comp")
  private String comp = null;

  @SerializedName("error_code")
  private String errorCode = null;

  @SerializedName("s2comp")
  private String s2comp = null;

  @SerializedName("req_id")
  private String reqId = null;

  @SerializedName("ent_id")
  private String entId = null;

  @SerializedName("security")
  private String security = null;

  @SerializedName("subcomp")
  private String subcomp = null;

  public StructuredData audit(String audit) {
    this.audit = audit;
    return this;
  }

   /**
   * Audit flag of the log
   * @return audit
  **/
  @Schema(required = true, description = "Audit flag of the log")
  public String getAudit() {
    return audit;
  }

  public void setAudit(String audit) {
    this.audit = audit;
  }

  public StructuredData username(String username) {
    this.username = username;
    return this;
  }

   /**
   * Username value of the log
   * @return username
  **/
  @Schema(description = "Username value of the log")
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }

  public StructuredData ereqId(String ereqId) {
    this.ereqId = ereqId;
    return this;
  }

   /**
   * External request Id value of the log
   * @return ereqId
  **/
  @Schema(description = "External request Id value of the log")
  public String getEreqId() {
    return ereqId;
  }

  public void setEreqId(String ereqId) {
    this.ereqId = ereqId;
  }

  public StructuredData level(String level) {
    this.level = level;
    return this;
  }

   /**
   * Level value of the log
   * @return level
  **/
  @Schema(description = "Level value of the log")
  public String getLevel() {
    return level;
  }

  public void setLevel(String level) {
    this.level = level;
  }

  public StructuredData comp(String comp) {
    this.comp = comp;
    return this;
  }

   /**
   * Component value of the log
   * @return comp
  **/
  @Schema(required = true, description = "Component value of the log")
  public String getComp() {
    return comp;
  }

  public void setComp(String comp) {
    this.comp = comp;
  }

  public StructuredData errorCode(String errorCode) {
    this.errorCode = errorCode;
    return this;
  }

   /**
   * Error Code value of the log
   * @return errorCode
  **/
  @Schema(description = "Error Code value of the log")
  public String getErrorCode() {
    return errorCode;
  }

  public void setErrorCode(String errorCode) {
    this.errorCode = errorCode;
  }

  public StructuredData s2comp(String s2comp) {
    this.s2comp = s2comp;
    return this;
  }

   /**
   * Sub-subcomponent value of the log
   * @return s2comp
  **/
  @Schema(description = "Sub-subcomponent value of the log")
  public String getS2comp() {
    return s2comp;
  }

  public void setS2comp(String s2comp) {
    this.s2comp = s2comp;
  }

  public StructuredData reqId(String reqId) {
    this.reqId = reqId;
    return this;
  }

   /**
   * Request Id value of the log
   * @return reqId
  **/
  @Schema(description = "Request Id value of the log")
  public String getReqId() {
    return reqId;
  }

  public void setReqId(String reqId) {
    this.reqId = reqId;
  }

  public StructuredData entId(String entId) {
    this.entId = entId;
    return this;
  }

   /**
   * Entity Id value of the log
   * @return entId
  **/
  @Schema(description = "Entity Id value of the log")
  public String getEntId() {
    return entId;
  }

  public void setEntId(String entId) {
    this.entId = entId;
  }

  public StructuredData security(String security) {
    this.security = security;
    return this;
  }

   /**
   * Security flag of the log
   * @return security
  **/
  @Schema(description = "Security flag of the log")
  public String getSecurity() {
    return security;
  }

  public void setSecurity(String security) {
    this.security = security;
  }

  public StructuredData subcomp(String subcomp) {
    this.subcomp = subcomp;
    return this;
  }

   /**
   * Subcomponent value of the log
   * @return subcomp
  **/
  @Schema(required = true, description = "Subcomponent value of the log")
  public String getSubcomp() {
    return subcomp;
  }

  public void setSubcomp(String subcomp) {
    this.subcomp = subcomp;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StructuredData structuredData = (StructuredData) o;
    return Objects.equals(this.audit, structuredData.audit) &&
        Objects.equals(this.username, structuredData.username) &&
        Objects.equals(this.ereqId, structuredData.ereqId) &&
        Objects.equals(this.level, structuredData.level) &&
        Objects.equals(this.comp, structuredData.comp) &&
        Objects.equals(this.errorCode, structuredData.errorCode) &&
        Objects.equals(this.s2comp, structuredData.s2comp) &&
        Objects.equals(this.reqId, structuredData.reqId) &&
        Objects.equals(this.entId, structuredData.entId) &&
        Objects.equals(this.security, structuredData.security) &&
        Objects.equals(this.subcomp, structuredData.subcomp);
  }

  @Override
  public int hashCode() {
    return Objects.hash(audit, username, ereqId, level, comp, errorCode, s2comp, reqId, entId, security, subcomp);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StructuredData {\n");
    
    sb.append("    audit: ").append(toIndentedString(audit)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    ereqId: ").append(toIndentedString(ereqId)).append("\n");
    sb.append("    level: ").append(toIndentedString(level)).append("\n");
    sb.append("    comp: ").append(toIndentedString(comp)).append("\n");
    sb.append("    errorCode: ").append(toIndentedString(errorCode)).append("\n");
    sb.append("    s2comp: ").append(toIndentedString(s2comp)).append("\n");
    sb.append("    reqId: ").append(toIndentedString(reqId)).append("\n");
    sb.append("    entId: ").append(toIndentedString(entId)).append("\n");
    sb.append("    security: ").append(toIndentedString(security)).append("\n");
    sb.append("    subcomp: ").append(toIndentedString(subcomp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
