/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.Uplink;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * Uplink Teaming Policy
 */
@Schema(description = "Uplink Teaming Policy")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class TeamingPolicy {
  /**
   * Teaming policy
   */
  @JsonAdapter(PolicyEnum.Adapter.class)
  public enum PolicyEnum {
    FAILOVER_ORDER("FAILOVER_ORDER"),
    LOADBALANCE_SRCID("LOADBALANCE_SRCID"),
    LOADBALANCE_SRC_MAC("LOADBALANCE_SRC_MAC");

    private String value;

    PolicyEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static PolicyEnum fromValue(String text) {
      for (PolicyEnum b : PolicyEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<PolicyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PolicyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PolicyEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return PolicyEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("policy")
  private PolicyEnum policy = null;

  @SerializedName("standby_list")
  private List<Uplink> standbyList = null;

  @SerializedName("active_list")
  private List<Uplink> activeList = new ArrayList<Uplink>();

  public TeamingPolicy policy(PolicyEnum policy) {
    this.policy = policy;
    return this;
  }

   /**
   * Teaming policy
   * @return policy
  **/
  @Schema(required = true, description = "Teaming policy")
  public PolicyEnum getPolicy() {
    return policy;
  }

  public void setPolicy(PolicyEnum policy) {
    this.policy = policy;
  }

  public TeamingPolicy standbyList(List<Uplink> standbyList) {
    this.standbyList = standbyList;
    return this;
  }

  public TeamingPolicy addStandbyListItem(Uplink standbyListItem) {
    if (this.standbyList == null) {
      this.standbyList = new ArrayList<Uplink>();
    }
    this.standbyList.add(standbyListItem);
    return this;
  }

   /**
   * List of Uplinks used in standby list
   * @return standbyList
  **/
  @Schema(description = "List of Uplinks used in standby list")
  public List<Uplink> getStandbyList() {
    return standbyList;
  }

  public void setStandbyList(List<Uplink> standbyList) {
    this.standbyList = standbyList;
  }

  public TeamingPolicy activeList(List<Uplink> activeList) {
    this.activeList = activeList;
    return this;
  }

  public TeamingPolicy addActiveListItem(Uplink activeListItem) {
    this.activeList.add(activeListItem);
    return this;
  }

   /**
   * List of Uplinks used in active list
   * @return activeList
  **/
  @Schema(required = true, description = "List of Uplinks used in active list")
  public List<Uplink> getActiveList() {
    return activeList;
  }

  public void setActiveList(List<Uplink> activeList) {
    this.activeList = activeList;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TeamingPolicy teamingPolicy = (TeamingPolicy) o;
    return Objects.equals(this.policy, teamingPolicy.policy) &&
        Objects.equals(this.standbyList, teamingPolicy.standbyList) &&
        Objects.equals(this.activeList, teamingPolicy.activeList);
  }

  @Override
  public int hashCode() {
    return Objects.hash(policy, standbyList, activeList);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TeamingPolicy {\n");
    
    sb.append("    policy: ").append(toIndentedString(policy)).append("\n");
    sb.append("    standbyList: ").append(toIndentedString(standbyList)).append("\n");
    sb.append("    activeList: ").append(toIndentedString(activeList)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
