/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.AppliedTos;
import io.swagger.client.model.IpfixUpmProfile;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.math.BigDecimal;
/**
 * The configuration for Internet protocol flow information export (IPFIX) and would be enabled on the switching module to collect flow information. 
 */
@Schema(description = "The configuration for Internet protocol flow information export (IPFIX) and would be enabled on the switching module to collect flow information. ")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class IpfixSwitchUpmProfile extends IpfixUpmProfile {
  @SerializedName("priority")
  private Integer priority = null;

  @SerializedName("collector_profile")
  private String collectorProfile = null;

  @SerializedName("idle_timeout")
  private Integer idleTimeout = 300;

  @SerializedName("max_flows")
  private Long maxFlows = 16384l;

  @SerializedName("observation_domain_id")
  private Long observationDomainId = null;

  @SerializedName("active_timeout")
  private Integer activeTimeout = 300;

  @SerializedName("export_overlay_flow")
  private Boolean exportOverlayFlow = true;

  @SerializedName("applied_tos")
  private AppliedTos appliedTos = null;

  @SerializedName("packet_sample_probability")
  private BigDecimal packetSampleProbability = null;

  public IpfixSwitchUpmProfile priority(Integer priority) {
    this.priority = priority;
    return this;
  }

   /**
   * This priority field is used to resolve conflicts in logical ports/switch  which inherit multiple switch IPFIX profiles from NSGroups.  Override rule is : for multiple profiles inherited from NSGroups, the one with highest priority (lowest number) overrides others; the profile directly applied to logical switch overrides profiles inherited from NSGroup; the profile directly applied to logical port overides profiles inherited from logical switch and/or nsgroup;  The IPFIX exporter will send records to collectors of final effective profile only. 
   * minimum: 0
   * maximum: 65536
   * @return priority
  **/
  @Schema(required = true, description = "This priority field is used to resolve conflicts in logical ports/switch  which inherit multiple switch IPFIX profiles from NSGroups.  Override rule is : for multiple profiles inherited from NSGroups, the one with highest priority (lowest number) overrides others; the profile directly applied to logical switch overrides profiles inherited from NSGroup; the profile directly applied to logical port overides profiles inherited from logical switch and/or nsgroup;  The IPFIX exporter will send records to collectors of final effective profile only. ")
  public Integer getPriority() {
    return priority;
  }

  public void setPriority(Integer priority) {
    this.priority = priority;
  }

  public IpfixSwitchUpmProfile collectorProfile(String collectorProfile) {
    this.collectorProfile = collectorProfile;
    return this;
  }

   /**
   * Each IPFIX switching profile can have its own collector profile. 
   * @return collectorProfile
  **/
  @Schema(required = true, description = "Each IPFIX switching profile can have its own collector profile. ")
  public String getCollectorProfile() {
    return collectorProfile;
  }

  public void setCollectorProfile(String collectorProfile) {
    this.collectorProfile = collectorProfile;
  }

  public IpfixSwitchUpmProfile idleTimeout(Integer idleTimeout) {
    this.idleTimeout = idleTimeout;
    return this;
  }

   /**
   * The time in seconds after a flow is expired if no more packets matching this flow are received by the cache. 
   * minimum: 60
   * maximum: 3600
   * @return idleTimeout
  **/
  @Schema(description = "The time in seconds after a flow is expired if no more packets matching this flow are received by the cache. ")
  public Integer getIdleTimeout() {
    return idleTimeout;
  }

  public void setIdleTimeout(Integer idleTimeout) {
    this.idleTimeout = idleTimeout;
  }

  public IpfixSwitchUpmProfile maxFlows(Long maxFlows) {
    this.maxFlows = maxFlows;
    return this;
  }

   /**
   * The maximum number of flow entries in each exporter flow cache. 
   * minimum: 0
   * maximum: 4294967295
   * @return maxFlows
  **/
  @Schema(description = "The maximum number of flow entries in each exporter flow cache. ")
  public Long getMaxFlows() {
    return maxFlows;
  }

  public void setMaxFlows(Long maxFlows) {
    this.maxFlows = maxFlows;
  }

  public IpfixSwitchUpmProfile observationDomainId(Long observationDomainId) {
    this.observationDomainId = observationDomainId;
    return this;
  }

   /**
   * An identifier that is unique to the exporting process and used to meter the Flows. 
   * minimum: 0
   * maximum: 4294967295
   * @return observationDomainId
  **/
  @Schema(required = true, description = "An identifier that is unique to the exporting process and used to meter the Flows. ")
  public Long getObservationDomainId() {
    return observationDomainId;
  }

  public void setObservationDomainId(Long observationDomainId) {
    this.observationDomainId = observationDomainId;
  }

  public IpfixSwitchUpmProfile activeTimeout(Integer activeTimeout) {
    this.activeTimeout = activeTimeout;
    return this;
  }

   /**
   * The time in seconds after a flow is expired even if more packets matching this Flow are received by the cache. 
   * minimum: 60
   * maximum: 3600
   * @return activeTimeout
  **/
  @Schema(description = "The time in seconds after a flow is expired even if more packets matching this Flow are received by the cache. ")
  public Integer getActiveTimeout() {
    return activeTimeout;
  }

  public void setActiveTimeout(Integer activeTimeout) {
    this.activeTimeout = activeTimeout;
  }

  public IpfixSwitchUpmProfile exportOverlayFlow(Boolean exportOverlayFlow) {
    this.exportOverlayFlow = exportOverlayFlow;
    return this;
  }

   /**
   * It controls whether sample result includes overlay flow info. 
   * @return exportOverlayFlow
  **/
  @Schema(description = "It controls whether sample result includes overlay flow info. ")
  public Boolean isExportOverlayFlow() {
    return exportOverlayFlow;
  }

  public void setExportOverlayFlow(Boolean exportOverlayFlow) {
    this.exportOverlayFlow = exportOverlayFlow;
  }

  public IpfixSwitchUpmProfile appliedTos(AppliedTos appliedTos) {
    this.appliedTos = appliedTos;
    return this;
  }

   /**
   * Get appliedTos
   * @return appliedTos
  **/
  @Schema(description = "")
  public AppliedTos getAppliedTos() {
    return appliedTos;
  }

  public void setAppliedTos(AppliedTos appliedTos) {
    this.appliedTos = appliedTos;
  }

  public IpfixSwitchUpmProfile packetSampleProbability(BigDecimal packetSampleProbability) {
    this.packetSampleProbability = packetSampleProbability;
    return this;
  }

   /**
   * The probability in percentage that a packet is sampled. The value should be  in range (0,100] and can only have three decimal places at most. The probability  is equal for every packet. 
   * minimum: 0
   * maximum: 100
   * @return packetSampleProbability
  **/
  @Schema(description = "The probability in percentage that a packet is sampled. The value should be  in range (0,100] and can only have three decimal places at most. The probability  is equal for every packet. ")
  public BigDecimal getPacketSampleProbability() {
    return packetSampleProbability;
  }

  public void setPacketSampleProbability(BigDecimal packetSampleProbability) {
    this.packetSampleProbability = packetSampleProbability;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IpfixSwitchUpmProfile ipfixSwitchUpmProfile = (IpfixSwitchUpmProfile) o;
    return Objects.equals(this.priority, ipfixSwitchUpmProfile.priority) &&
        Objects.equals(this.collectorProfile, ipfixSwitchUpmProfile.collectorProfile) &&
        Objects.equals(this.idleTimeout, ipfixSwitchUpmProfile.idleTimeout) &&
        Objects.equals(this.maxFlows, ipfixSwitchUpmProfile.maxFlows) &&
        Objects.equals(this.observationDomainId, ipfixSwitchUpmProfile.observationDomainId) &&
        Objects.equals(this.activeTimeout, ipfixSwitchUpmProfile.activeTimeout) &&
        Objects.equals(this.exportOverlayFlow, ipfixSwitchUpmProfile.exportOverlayFlow) &&
        Objects.equals(this.appliedTos, ipfixSwitchUpmProfile.appliedTos) &&
        Objects.equals(this.packetSampleProbability, ipfixSwitchUpmProfile.packetSampleProbability) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(priority, collectorProfile, idleTimeout, maxFlows, observationDomainId, activeTimeout, exportOverlayFlow, appliedTos, packetSampleProbability, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IpfixSwitchUpmProfile {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    priority: ").append(toIndentedString(priority)).append("\n");
    sb.append("    collectorProfile: ").append(toIndentedString(collectorProfile)).append("\n");
    sb.append("    idleTimeout: ").append(toIndentedString(idleTimeout)).append("\n");
    sb.append("    maxFlows: ").append(toIndentedString(maxFlows)).append("\n");
    sb.append("    observationDomainId: ").append(toIndentedString(observationDomainId)).append("\n");
    sb.append("    activeTimeout: ").append(toIndentedString(activeTimeout)).append("\n");
    sb.append("    exportOverlayFlow: ").append(toIndentedString(exportOverlayFlow)).append("\n");
    sb.append("    appliedTos: ").append(toIndentedString(appliedTos)).append("\n");
    sb.append("    packetSampleProbability: ").append(toIndentedString(packetSampleProbability)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
