/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.ManagedResource;
import io.swagger.client.model.Tag;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * AppInfo details
 */
@Schema(description = "AppInfo details")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class AppInfo extends ManagedResource {
  /**
   * OS type of VM the App belongs to
   */
  @JsonAdapter(OsTypeEnum.Adapter.class)
  public enum OsTypeEnum {
    INVALID("INVALID"),
    WINDOWS("WINDOWS"),
    LINUX("LINUX");

    private String value;

    OsTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static OsTypeEnum fromValue(String text) {
      for (OsTypeEnum b : OsTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<OsTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OsTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OsTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return OsTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("os_type")
  private OsTypeEnum osType = null;

  @SerializedName("version")
  private String version = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("vm_ids")
  private List<String> vmIds = null;

  @SerializedName("manufacturer")
  private String manufacturer = null;

  public AppInfo osType(OsTypeEnum osType) {
    this.osType = osType;
    return this;
  }

   /**
   * OS type of VM the App belongs to
   * @return osType
  **/
  @Schema(description = "OS type of VM the App belongs to")
  public OsTypeEnum getOsType() {
    return osType;
  }

  public void setOsType(OsTypeEnum osType) {
    this.osType = osType;
  }

  public AppInfo version(String version) {
    this.version = version;
    return this;
  }

   /**
   * Version of the app
   * @return version
  **/
  @Schema(description = "Version of the app")
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }

  public AppInfo name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Name of the app
   * @return name
  **/
  @Schema(description = "Name of the app")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public AppInfo vmIds(List<String> vmIds) {
    this.vmIds = vmIds;
    return this;
  }

  public AppInfo addVmIdsItem(String vmIdsItem) {
    if (this.vmIds == null) {
      this.vmIds = new ArrayList<String>();
    }
    this.vmIds.add(vmIdsItem);
    return this;
  }

   /**
   * Ids of the VMs in which this app is installed
   * @return vmIds
  **/
  @Schema(description = "Ids of the VMs in which this app is installed")
  public List<String> getVmIds() {
    return vmIds;
  }

  public void setVmIds(List<String> vmIds) {
    this.vmIds = vmIds;
  }

  public AppInfo manufacturer(String manufacturer) {
    this.manufacturer = manufacturer;
    return this;
  }

   /**
   * Manufacturer of the app
   * @return manufacturer
  **/
  @Schema(description = "Manufacturer of the app")
  public String getManufacturer() {
    return manufacturer;
  }

  public void setManufacturer(String manufacturer) {
    this.manufacturer = manufacturer;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AppInfo appInfo = (AppInfo) o;
    return Objects.equals(this.osType, appInfo.osType) &&
        Objects.equals(this.version, appInfo.version) &&
        Objects.equals(this.name, appInfo.name) &&
        Objects.equals(this.vmIds, appInfo.vmIds) &&
        Objects.equals(this.manufacturer, appInfo.manufacturer) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(osType, version, name, vmIds, manufacturer, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AppInfo {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    osType: ").append(toIndentedString(osType)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    vmIds: ").append(toIndentedString(vmIds)).append("\n");
    sb.append("    manufacturer: ").append(toIndentedString(manufacturer)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
