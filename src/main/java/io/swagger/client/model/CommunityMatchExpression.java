/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.CommunityMatchOperation;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * Community match expression
 */
@Schema(description = "Community match expression")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class CommunityMatchExpression {
  /**
   * Operator for evaluating community match expressions. AND logical AND operator 
   */
  @JsonAdapter(OperatorEnum.Adapter.class)
  public enum OperatorEnum {
    AND("AND");

    private String value;

    OperatorEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static OperatorEnum fromValue(String text) {
      for (OperatorEnum b : OperatorEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<OperatorEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OperatorEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OperatorEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return OperatorEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("operator")
  private OperatorEnum operator = null;

  @SerializedName("expression")
  private List<CommunityMatchOperation> expression = new ArrayList<CommunityMatchOperation>();

   /**
   * Operator for evaluating community match expressions. AND logical AND operator 
   * @return operator
  **/
  @Schema(description = "Operator for evaluating community match expressions. AND logical AND operator ")
  public OperatorEnum getOperator() {
    return operator;
  }

  public CommunityMatchExpression expression(List<CommunityMatchOperation> expression) {
    this.expression = expression;
    return this;
  }

  public CommunityMatchExpression addExpressionItem(CommunityMatchOperation expressionItem) {
    this.expression.add(expressionItem);
    return this;
  }

   /**
   * Array of community match operations
   * @return expression
  **/
  @Schema(required = true, description = "Array of community match operations")
  public List<CommunityMatchOperation> getExpression() {
    return expression;
  }

  public void setExpression(List<CommunityMatchOperation> expression) {
    this.expression = expression;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CommunityMatchExpression communityMatchExpression = (CommunityMatchExpression) o;
    return Objects.equals(this.operator, communityMatchExpression.operator) &&
        Objects.equals(this.expression, communityMatchExpression.expression);
  }

  @Override
  public int hashCode() {
    return Objects.hash(operator, expression);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CommunityMatchExpression {\n");
    
    sb.append("    operator: ").append(toIndentedString(operator)).append("\n");
    sb.append("    expression: ").append(toIndentedString(expression)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
