/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.HostNodeLoginCredential;
import io.swagger.client.model.Node;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.List;
/**
 * Host node
 */
@Schema(description = "Host node")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class HostNode extends Node {
  @SerializedName("discovered_node_id")
  private String discoveredNodeId = null;

  @SerializedName("managed_by_server")
  private String managedByServer = null;

  @SerializedName("host_credential")
  private HostNodeLoginCredential hostCredential = null;

  @SerializedName("os_version")
  private String osVersion = null;

  /**
   * Hypervisor type, for example ESXi or RHEL KVM
   */
  @JsonAdapter(OsTypeEnum.Adapter.class)
  public enum OsTypeEnum {
    ESXI("ESXI"),
    RHELKVM("RHELKVM"),
    RHELSERVER("RHELSERVER"),
    RHELCONTAINER("RHELCONTAINER"),
    UBUNTUKVM("UBUNTUKVM"),
    UBUNTUSERVER("UBUNTUSERVER"),
    HYPERV("HYPERV"),
    CENTOSKVM("CENTOSKVM"),
    CENTOSSERVER("CENTOSSERVER"),
    CENTOSCONTAINER("CENTOSCONTAINER"),
    SLESKVM("SLESKVM"),
    SLESSERVER("SLESSERVER");

    private String value;

    OsTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static OsTypeEnum fromValue(String text) {
      for (OsTypeEnum b : OsTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<OsTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OsTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OsTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return OsTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("os_type")
  private OsTypeEnum osType = null;

  /**
   * Indicates host node&#x27;s maintenance mode state. The state is ENTERING when a task to put the host in maintenance-mode is in progress. 
   */
  @JsonAdapter(MaintenanceModeStateEnum.Adapter.class)
  public enum MaintenanceModeStateEnum {
    OFF("OFF"),
    ENTERING("ENTERING"),
    ON("ON");

    private String value;

    MaintenanceModeStateEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static MaintenanceModeStateEnum fromValue(String text) {
      for (MaintenanceModeStateEnum b : MaintenanceModeStateEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<MaintenanceModeStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MaintenanceModeStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MaintenanceModeStateEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return MaintenanceModeStateEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("maintenance_mode_state")
  private MaintenanceModeStateEnum maintenanceModeState = null;

   /**
   * Id of discovered node which was converted to create this node
   * @return discoveredNodeId
  **/
  @Schema(description = "Id of discovered node which was converted to create this node")
  public String getDiscoveredNodeId() {
    return discoveredNodeId;
  }

   /**
   * The id of the vCenter server managing the ESXi type HostNode
   * @return managedByServer
  **/
  @Schema(description = "The id of the vCenter server managing the ESXi type HostNode")
  public String getManagedByServer() {
    return managedByServer;
  }

  public HostNode hostCredential(HostNodeLoginCredential hostCredential) {
    this.hostCredential = hostCredential;
    return this;
  }

   /**
   * Get hostCredential
   * @return hostCredential
  **/
  @Schema(description = "")
  public HostNodeLoginCredential getHostCredential() {
    return hostCredential;
  }

  public void setHostCredential(HostNodeLoginCredential hostCredential) {
    this.hostCredential = hostCredential;
  }

  public HostNode osVersion(String osVersion) {
    this.osVersion = osVersion;
    return this;
  }

   /**
   * Version of the hypervisor operating system
   * @return osVersion
  **/
  @Schema(description = "Version of the hypervisor operating system")
  public String getOsVersion() {
    return osVersion;
  }

  public void setOsVersion(String osVersion) {
    this.osVersion = osVersion;
  }

  public HostNode osType(OsTypeEnum osType) {
    this.osType = osType;
    return this;
  }

   /**
   * Hypervisor type, for example ESXi or RHEL KVM
   * @return osType
  **/
  @Schema(required = true, description = "Hypervisor type, for example ESXi or RHEL KVM")
  public OsTypeEnum getOsType() {
    return osType;
  }

  public void setOsType(OsTypeEnum osType) {
    this.osType = osType;
  }

   /**
   * Indicates host node&#x27;s maintenance mode state. The state is ENTERING when a task to put the host in maintenance-mode is in progress. 
   * @return maintenanceModeState
  **/
  @Schema(description = "Indicates host node's maintenance mode state. The state is ENTERING when a task to put the host in maintenance-mode is in progress. ")
  public MaintenanceModeStateEnum getMaintenanceModeState() {
    return maintenanceModeState;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HostNode hostNode = (HostNode) o;
    return Objects.equals(this.discoveredNodeId, hostNode.discoveredNodeId) &&
        Objects.equals(this.managedByServer, hostNode.managedByServer) &&
        Objects.equals(this.hostCredential, hostNode.hostCredential) &&
        Objects.equals(this.osVersion, hostNode.osVersion) &&
        Objects.equals(this.osType, hostNode.osType) &&
        Objects.equals(this.maintenanceModeState, hostNode.maintenanceModeState) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(discoveredNodeId, managedByServer, hostCredential, osVersion, osType, maintenanceModeState, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HostNode {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    discoveredNodeId: ").append(toIndentedString(discoveredNodeId)).append("\n");
    sb.append("    managedByServer: ").append(toIndentedString(managedByServer)).append("\n");
    sb.append("    hostCredential: ").append(toIndentedString(hostCredential)).append("\n");
    sb.append("    osVersion: ").append(toIndentedString(osVersion)).append("\n");
    sb.append("    osType: ").append(toIndentedString(osType)).append("\n");
    sb.append("    maintenanceModeState: ").append(toIndentedString(maintenanceModeState)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
