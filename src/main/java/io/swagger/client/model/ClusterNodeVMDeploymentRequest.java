/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.ClusterNodeVMDeploymentConfig;
import io.swagger.client.model.NodeUserSettings;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * Contains the deployment information for a cluster node VM soon to be deployed or already deployed by the Manager 
 */
@Schema(description = "Contains the deployment information for a cluster node VM soon to be deployed or already deployed by the Manager ")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class ClusterNodeVMDeploymentRequest {
  @SerializedName("deployment_config")
  private ClusterNodeVMDeploymentConfig deploymentConfig = null;

  @SerializedName("vm_id")
  private String vmId = null;

  @SerializedName("user_settings")
  private NodeUserSettings userSettings = null;

  /**
   * Enumerates the roles that can be specified in VM auto-deployment. 
   */
  @JsonAdapter(RolesEnum.Adapter.class)
  public enum RolesEnum {
    CONTROLLER("CONTROLLER"),
    MANAGER("MANAGER");

    private String value;

    RolesEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static RolesEnum fromValue(String text) {
      for (RolesEnum b : RolesEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<RolesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RolesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RolesEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return RolesEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("roles")
  private List<RolesEnum> roles = new ArrayList<RolesEnum>();

  /**
   * Specifies the desired \&quot;size\&quot; of the VM 
   */
  @JsonAdapter(FormFactorEnum.Adapter.class)
  public enum FormFactorEnum {
    SMALL("SMALL"),
    MEDIUM("MEDIUM"),
    LARGE("LARGE");

    private String value;

    FormFactorEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static FormFactorEnum fromValue(String text) {
      for (FormFactorEnum b : FormFactorEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<FormFactorEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FormFactorEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FormFactorEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return FormFactorEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("form_factor")
  private FormFactorEnum formFactor = FormFactorEnum.MEDIUM;

  public ClusterNodeVMDeploymentRequest deploymentConfig(ClusterNodeVMDeploymentConfig deploymentConfig) {
    this.deploymentConfig = deploymentConfig;
    return this;
  }

   /**
   * Get deploymentConfig
   * @return deploymentConfig
  **/
  @Schema(required = true, description = "")
  public ClusterNodeVMDeploymentConfig getDeploymentConfig() {
    return deploymentConfig;
  }

  public void setDeploymentConfig(ClusterNodeVMDeploymentConfig deploymentConfig) {
    this.deploymentConfig = deploymentConfig;
  }

   /**
   * ID of the VM maintained internally and used to recognize it. Note: This is automatically generated and cannot be modified. 
   * @return vmId
  **/
  @Schema(description = "ID of the VM maintained internally and used to recognize it. Note: This is automatically generated and cannot be modified. ")
  public String getVmId() {
    return vmId;
  }

  public ClusterNodeVMDeploymentRequest userSettings(NodeUserSettings userSettings) {
    this.userSettings = userSettings;
    return this;
  }

   /**
   * Get userSettings
   * @return userSettings
  **/
  @Schema(description = "")
  public NodeUserSettings getUserSettings() {
    return userSettings;
  }

  public void setUserSettings(NodeUserSettings userSettings) {
    this.userSettings = userSettings;
  }

  public ClusterNodeVMDeploymentRequest roles(List<RolesEnum> roles) {
    this.roles = roles;
    return this;
  }

  public ClusterNodeVMDeploymentRequest addRolesItem(RolesEnum rolesItem) {
    this.roles.add(rolesItem);
    return this;
  }

   /**
   * List of cluster node role (or roles) which the VM should take on. They specify what type (or types) of cluster node which the new VM should act as. Currently both CONTROLLER and MANAGER must be provided, since this permutation is the only one supported now. 
   * @return roles
  **/
  @Schema(required = true, description = "List of cluster node role (or roles) which the VM should take on. They specify what type (or types) of cluster node which the new VM should act as. Currently both CONTROLLER and MANAGER must be provided, since this permutation is the only one supported now. ")
  public List<RolesEnum> getRoles() {
    return roles;
  }

  public void setRoles(List<RolesEnum> roles) {
    this.roles = roles;
  }

  public ClusterNodeVMDeploymentRequest formFactor(FormFactorEnum formFactor) {
    this.formFactor = formFactor;
    return this;
  }

   /**
   * Specifies the desired \&quot;size\&quot; of the VM 
   * @return formFactor
  **/
  @Schema(description = "Specifies the desired \"size\" of the VM ")
  public FormFactorEnum getFormFactor() {
    return formFactor;
  }

  public void setFormFactor(FormFactorEnum formFactor) {
    this.formFactor = formFactor;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ClusterNodeVMDeploymentRequest clusterNodeVMDeploymentRequest = (ClusterNodeVMDeploymentRequest) o;
    return Objects.equals(this.deploymentConfig, clusterNodeVMDeploymentRequest.deploymentConfig) &&
        Objects.equals(this.vmId, clusterNodeVMDeploymentRequest.vmId) &&
        Objects.equals(this.userSettings, clusterNodeVMDeploymentRequest.userSettings) &&
        Objects.equals(this.roles, clusterNodeVMDeploymentRequest.roles) &&
        Objects.equals(this.formFactor, clusterNodeVMDeploymentRequest.formFactor);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deploymentConfig, vmId, userSettings, roles, formFactor);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ClusterNodeVMDeploymentRequest {\n");
    
    sb.append("    deploymentConfig: ").append(toIndentedString(deploymentConfig)).append("\n");
    sb.append("    vmId: ").append(toIndentedString(vmId)).append("\n");
    sb.append("    userSettings: ").append(toIndentedString(userSettings)).append("\n");
    sb.append("    roles: ").append(toIndentedString(roles)).append("\n");
    sb.append("    formFactor: ").append(toIndentedString(formFactor)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
