/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.IpPoolRange;
import io.swagger.client.model.ManagedResource;
import io.swagger.client.model.Tag;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * A set of IPv4 addresses defined by a start address and a mask/prefix which will typically be associated with a layer-2 broadcast domain.
 */
@Schema(description = "A set of IPv4 addresses defined by a start address and a mask/prefix which will typically be associated with a layer-2 broadcast domain.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class IpBlockSubnet extends ManagedResource {
  @SerializedName("cidr")
  private String cidr = null;

  @SerializedName("allocation_ranges")
  private List<IpPoolRange> allocationRanges = null;

  @SerializedName("block_id")
  private String blockId = null;

  @SerializedName("size")
  private Long size = null;

   /**
   * Represents network address and the prefix length which will be associated with a layer-2 broadcast domain
   * @return cidr
  **/
  @Schema(description = "Represents network address and the prefix length which will be associated with a layer-2 broadcast domain")
  public String getCidr() {
    return cidr;
  }

   /**
   * A collection of IPv4 IP ranges used for IP allocation.
   * @return allocationRanges
  **/
  @Schema(description = "A collection of IPv4 IP ranges used for IP allocation.")
  public List<IpPoolRange> getAllocationRanges() {
    return allocationRanges;
  }

  public IpBlockSubnet blockId(String blockId) {
    this.blockId = blockId;
    return this;
  }

   /**
   * Block id for which the subnet is created.
   * @return blockId
  **/
  @Schema(required = true, description = "Block id for which the subnet is created.")
  public String getBlockId() {
    return blockId;
  }

  public void setBlockId(String blockId) {
    this.blockId = blockId;
  }

  public IpBlockSubnet size(Long size) {
    this.size = size;
    return this;
  }

   /**
   * Represents the size or number of ip addresses in the subnet
   * @return size
  **/
  @Schema(required = true, description = "Represents the size or number of ip addresses in the subnet")
  public Long getSize() {
    return size;
  }

  public void setSize(Long size) {
    this.size = size;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IpBlockSubnet ipBlockSubnet = (IpBlockSubnet) o;
    return Objects.equals(this.cidr, ipBlockSubnet.cidr) &&
        Objects.equals(this.allocationRanges, ipBlockSubnet.allocationRanges) &&
        Objects.equals(this.blockId, ipBlockSubnet.blockId) &&
        Objects.equals(this.size, ipBlockSubnet.size) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cidr, allocationRanges, blockId, size, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IpBlockSubnet {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    cidr: ").append(toIndentedString(cidr)).append("\n");
    sb.append("    allocationRanges: ").append(toIndentedString(allocationRanges)).append("\n");
    sb.append("    blockId: ").append(toIndentedString(blockId)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
