/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.Resource;
import io.swagger.client.model.ResourceLink;
import io.swagger.client.model.SelfResourceLink;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.List;
/**
 * Node network route properties
 */
@Schema(description = "Node network route properties")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class NodeRouteProperties extends Resource {
  @SerializedName("src")
  private String src = null;

  @SerializedName("from_address")
  private String fromAddress = null;

  /**
   * Routing protocol identifier of route
   */
  @JsonAdapter(ProtoEnum.Adapter.class)
  public enum ProtoEnum {
    UNSPEC("unspec"),
    REDIRECT("redirect"),
    KERNEL("kernel"),
    BOOT("boot"),
    STATIC("static"),
    GATED("gated"),
    RA("ra"),
    MRT("mrt"),
    ZEBRA("zebra"),
    BIRD("bird"),
    DNROUTED("dnrouted"),
    XORP("xorp"),
    NTK("ntk"),
    DHCP("dhcp");

    private String value;

    ProtoEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ProtoEnum fromValue(String text) {
      for (ProtoEnum b : ProtoEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ProtoEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProtoEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProtoEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ProtoEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("proto")
  private ProtoEnum proto = ProtoEnum.BOOT;

  /**
   * Route type
   */
  @JsonAdapter(RouteTypeEnum.Adapter.class)
  public enum RouteTypeEnum {
    DEFAULT("default"),
    STATIC("static"),
    BLACKHOLE("blackhole"),
    PROHIBIT("prohibit"),
    THROW("throw"),
    UNREACHABLE("unreachable");

    private String value;

    RouteTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static RouteTypeEnum fromValue(String text) {
      for (RouteTypeEnum b : RouteTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<RouteTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RouteTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RouteTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return RouteTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("route_type")
  private RouteTypeEnum routeType = null;

  @SerializedName("metric")
  private String metric = null;

  @SerializedName("destination")
  private String destination = null;

  @SerializedName("interface_id")
  private String interfaceId = null;

  @SerializedName("route_id")
  private String routeId = null;

  @SerializedName("netmask")
  private String netmask = null;

  @SerializedName("scope")
  private String scope = null;

  @SerializedName("gateway")
  private String gateway = null;

  public NodeRouteProperties src(String src) {
    this.src = src;
    return this;
  }

   /**
   * Source address to prefer when sending to destinations of route
   * @return src
  **/
  @Schema(description = "Source address to prefer when sending to destinations of route")
  public String getSrc() {
    return src;
  }

  public void setSrc(String src) {
    this.src = src;
  }

  public NodeRouteProperties fromAddress(String fromAddress) {
    this.fromAddress = fromAddress;
    return this;
  }

   /**
   * From address
   * @return fromAddress
  **/
  @Schema(description = "From address")
  public String getFromAddress() {
    return fromAddress;
  }

  public void setFromAddress(String fromAddress) {
    this.fromAddress = fromAddress;
  }

  public NodeRouteProperties proto(ProtoEnum proto) {
    this.proto = proto;
    return this;
  }

   /**
   * Routing protocol identifier of route
   * @return proto
  **/
  @Schema(description = "Routing protocol identifier of route")
  public ProtoEnum getProto() {
    return proto;
  }

  public void setProto(ProtoEnum proto) {
    this.proto = proto;
  }

  public NodeRouteProperties routeType(RouteTypeEnum routeType) {
    this.routeType = routeType;
    return this;
  }

   /**
   * Route type
   * @return routeType
  **/
  @Schema(required = true, description = "Route type")
  public RouteTypeEnum getRouteType() {
    return routeType;
  }

  public void setRouteType(RouteTypeEnum routeType) {
    this.routeType = routeType;
  }

  public NodeRouteProperties metric(String metric) {
    this.metric = metric;
    return this;
  }

   /**
   * Metric value of route
   * @return metric
  **/
  @Schema(description = "Metric value of route")
  public String getMetric() {
    return metric;
  }

  public void setMetric(String metric) {
    this.metric = metric;
  }

  public NodeRouteProperties destination(String destination) {
    this.destination = destination;
    return this;
  }

   /**
   * Destination covered by route
   * @return destination
  **/
  @Schema(description = "Destination covered by route")
  public String getDestination() {
    return destination;
  }

  public void setDestination(String destination) {
    this.destination = destination;
  }

  public NodeRouteProperties interfaceId(String interfaceId) {
    this.interfaceId = interfaceId;
    return this;
  }

   /**
   * Network interface id of route
   * @return interfaceId
  **/
  @Schema(description = "Network interface id of route")
  public String getInterfaceId() {
    return interfaceId;
  }

  public void setInterfaceId(String interfaceId) {
    this.interfaceId = interfaceId;
  }

   /**
   * Unique identifier for the route
   * @return routeId
  **/
  @Schema(description = "Unique identifier for the route")
  public String getRouteId() {
    return routeId;
  }

  public NodeRouteProperties netmask(String netmask) {
    this.netmask = netmask;
    return this;
  }

   /**
   * Netmask of destination covered by route
   * @return netmask
  **/
  @Schema(description = "Netmask of destination covered by route")
  public String getNetmask() {
    return netmask;
  }

  public void setNetmask(String netmask) {
    this.netmask = netmask;
  }

  public NodeRouteProperties scope(String scope) {
    this.scope = scope;
    return this;
  }

   /**
   * Scope of destinations covered by route
   * @return scope
  **/
  @Schema(description = "Scope of destinations covered by route")
  public String getScope() {
    return scope;
  }

  public void setScope(String scope) {
    this.scope = scope;
  }

  public NodeRouteProperties gateway(String gateway) {
    this.gateway = gateway;
    return this;
  }

   /**
   * Address of next hop
   * @return gateway
  **/
  @Schema(description = "Address of next hop")
  public String getGateway() {
    return gateway;
  }

  public void setGateway(String gateway) {
    this.gateway = gateway;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NodeRouteProperties nodeRouteProperties = (NodeRouteProperties) o;
    return Objects.equals(this.src, nodeRouteProperties.src) &&
        Objects.equals(this.fromAddress, nodeRouteProperties.fromAddress) &&
        Objects.equals(this.proto, nodeRouteProperties.proto) &&
        Objects.equals(this.routeType, nodeRouteProperties.routeType) &&
        Objects.equals(this.metric, nodeRouteProperties.metric) &&
        Objects.equals(this.destination, nodeRouteProperties.destination) &&
        Objects.equals(this.interfaceId, nodeRouteProperties.interfaceId) &&
        Objects.equals(this.routeId, nodeRouteProperties.routeId) &&
        Objects.equals(this.netmask, nodeRouteProperties.netmask) &&
        Objects.equals(this.scope, nodeRouteProperties.scope) &&
        Objects.equals(this.gateway, nodeRouteProperties.gateway) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(src, fromAddress, proto, routeType, metric, destination, interfaceId, routeId, netmask, scope, gateway, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NodeRouteProperties {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    src: ").append(toIndentedString(src)).append("\n");
    sb.append("    fromAddress: ").append(toIndentedString(fromAddress)).append("\n");
    sb.append("    proto: ").append(toIndentedString(proto)).append("\n");
    sb.append("    routeType: ").append(toIndentedString(routeType)).append("\n");
    sb.append("    metric: ").append(toIndentedString(metric)).append("\n");
    sb.append("    destination: ").append(toIndentedString(destination)).append("\n");
    sb.append("    interfaceId: ").append(toIndentedString(interfaceId)).append("\n");
    sb.append("    routeId: ").append(toIndentedString(routeId)).append("\n");
    sb.append("    netmask: ").append(toIndentedString(netmask)).append("\n");
    sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
    sb.append("    gateway: ").append(toIndentedString(gateway)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
