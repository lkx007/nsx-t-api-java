/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.BaseHostSwitchProfile;
import io.swagger.client.model.Lag;
import io.swagger.client.model.NamedTeamingPolicy;
import io.swagger.client.model.TeamingPolicy;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * Profile for uplink policies
 */
@Schema(description = "Profile for uplink policies")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class UplinkHostSwitchProfile extends BaseHostSwitchProfile {
  @SerializedName("lags")
  private List<Lag> lags = null;

  @SerializedName("transport_vlan")
  private Long transportVlan = 0l;

  @SerializedName("teaming")
  private TeamingPolicy teaming = null;

  /**
   * The protocol used to encapsulate overlay traffic
   */
  @JsonAdapter(OverlayEncapEnum.Adapter.class)
  public enum OverlayEncapEnum {
    VXLAN("VXLAN"),
    GENEVE("GENEVE");

    private String value;

    OverlayEncapEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static OverlayEncapEnum fromValue(String text) {
      for (OverlayEncapEnum b : OverlayEncapEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<OverlayEncapEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OverlayEncapEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OverlayEncapEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return OverlayEncapEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("overlay_encap")
  private OverlayEncapEnum overlayEncap = OverlayEncapEnum.GENEVE;

  @SerializedName("named_teamings")
  private List<NamedTeamingPolicy> namedTeamings = null;

  @SerializedName("mtu")
  private Integer mtu = null;

  public UplinkHostSwitchProfile lags(List<Lag> lags) {
    this.lags = lags;
    return this;
  }

  public UplinkHostSwitchProfile addLagsItem(Lag lagsItem) {
    if (this.lags == null) {
      this.lags = new ArrayList<Lag>();
    }
    this.lags.add(lagsItem);
    return this;
  }

   /**
   * list of LACP group
   * @return lags
  **/
  @Schema(description = "list of LACP group")
  public List<Lag> getLags() {
    return lags;
  }

  public void setLags(List<Lag> lags) {
    this.lags = lags;
  }

  public UplinkHostSwitchProfile transportVlan(Long transportVlan) {
    this.transportVlan = transportVlan;
    return this;
  }

   /**
   * VLAN used for tagging Overlay traffic of associated HostSwitch
   * @return transportVlan
  **/
  @Schema(description = "VLAN used for tagging Overlay traffic of associated HostSwitch")
  public Long getTransportVlan() {
    return transportVlan;
  }

  public void setTransportVlan(Long transportVlan) {
    this.transportVlan = transportVlan;
  }

  public UplinkHostSwitchProfile teaming(TeamingPolicy teaming) {
    this.teaming = teaming;
    return this;
  }

   /**
   * Get teaming
   * @return teaming
  **/
  @Schema(required = true, description = "")
  public TeamingPolicy getTeaming() {
    return teaming;
  }

  public void setTeaming(TeamingPolicy teaming) {
    this.teaming = teaming;
  }

  public UplinkHostSwitchProfile overlayEncap(OverlayEncapEnum overlayEncap) {
    this.overlayEncap = overlayEncap;
    return this;
  }

   /**
   * The protocol used to encapsulate overlay traffic
   * @return overlayEncap
  **/
  @Schema(description = "The protocol used to encapsulate overlay traffic")
  public OverlayEncapEnum getOverlayEncap() {
    return overlayEncap;
  }

  public void setOverlayEncap(OverlayEncapEnum overlayEncap) {
    this.overlayEncap = overlayEncap;
  }

  public UplinkHostSwitchProfile namedTeamings(List<NamedTeamingPolicy> namedTeamings) {
    this.namedTeamings = namedTeamings;
    return this;
  }

  public UplinkHostSwitchProfile addNamedTeamingsItem(NamedTeamingPolicy namedTeamingsItem) {
    if (this.namedTeamings == null) {
      this.namedTeamings = new ArrayList<NamedTeamingPolicy>();
    }
    this.namedTeamings.add(namedTeamingsItem);
    return this;
  }

   /**
   * List of named uplink teaming policies that can be used by logical switches
   * @return namedTeamings
  **/
  @Schema(description = "List of named uplink teaming policies that can be used by logical switches")
  public List<NamedTeamingPolicy> getNamedTeamings() {
    return namedTeamings;
  }

  public void setNamedTeamings(List<NamedTeamingPolicy> namedTeamings) {
    this.namedTeamings = namedTeamings;
  }

  public UplinkHostSwitchProfile mtu(Integer mtu) {
    this.mtu = mtu;
    return this;
  }

   /**
   * Maximum Transmission Unit used for uplinks
   * minimum: 1280
   * @return mtu
  **/
  @Schema(description = "Maximum Transmission Unit used for uplinks")
  public Integer getMtu() {
    return mtu;
  }

  public void setMtu(Integer mtu) {
    this.mtu = mtu;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UplinkHostSwitchProfile uplinkHostSwitchProfile = (UplinkHostSwitchProfile) o;
    return Objects.equals(this.lags, uplinkHostSwitchProfile.lags) &&
        Objects.equals(this.transportVlan, uplinkHostSwitchProfile.transportVlan) &&
        Objects.equals(this.teaming, uplinkHostSwitchProfile.teaming) &&
        Objects.equals(this.overlayEncap, uplinkHostSwitchProfile.overlayEncap) &&
        Objects.equals(this.namedTeamings, uplinkHostSwitchProfile.namedTeamings) &&
        Objects.equals(this.mtu, uplinkHostSwitchProfile.mtu) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(lags, transportVlan, teaming, overlayEncap, namedTeamings, mtu, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UplinkHostSwitchProfile {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    lags: ").append(toIndentedString(lags)).append("\n");
    sb.append("    transportVlan: ").append(toIndentedString(transportVlan)).append("\n");
    sb.append("    teaming: ").append(toIndentedString(teaming)).append("\n");
    sb.append("    overlayEncap: ").append(toIndentedString(overlayEncap)).append("\n");
    sb.append("    namedTeamings: ").append(toIndentedString(namedTeamings)).append("\n");
    sb.append("    mtu: ").append(toIndentedString(mtu)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
