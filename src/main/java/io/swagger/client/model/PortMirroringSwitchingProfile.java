/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.BaseSwitchingProfile;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * PortMirroringSwitchingProfile
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class PortMirroringSwitchingProfile extends BaseSwitchingProfile {
  @SerializedName("snap_length")
  private Long snapLength = null;

  /**
   * port mirroring direction
   */
  @JsonAdapter(DirectionEnum.Adapter.class)
  public enum DirectionEnum {
    INGRESS("INGRESS"),
    EGRESS("EGRESS"),
    BIDIRECTIONAL("BIDIRECTIONAL");

    private String value;

    DirectionEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static DirectionEnum fromValue(String text) {
      for (DirectionEnum b : DirectionEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<DirectionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DirectionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DirectionEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return DirectionEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("direction")
  private DirectionEnum direction = null;

  @SerializedName("key")
  private Long key = null;

  @SerializedName("destinations")
  private List<String> destinations = null;

  public PortMirroringSwitchingProfile snapLength(Long snapLength) {
    this.snapLength = snapLength;
    return this;
  }

   /**
   * If this property not set, original package will not be truncated.
   * minimum: 60
   * maximum: 65535
   * @return snapLength
  **/
  @Schema(description = "If this property not set, original package will not be truncated.")
  public Long getSnapLength() {
    return snapLength;
  }

  public void setSnapLength(Long snapLength) {
    this.snapLength = snapLength;
  }

  public PortMirroringSwitchingProfile direction(DirectionEnum direction) {
    this.direction = direction;
    return this;
  }

   /**
   * port mirroring direction
   * @return direction
  **/
  @Schema(description = "port mirroring direction")
  public DirectionEnum getDirection() {
    return direction;
  }

  public void setDirection(DirectionEnum direction) {
    this.direction = direction;
  }

  public PortMirroringSwitchingProfile key(Long key) {
    this.key = key;
    return this;
  }

   /**
   * User-configurable 32-bit key
   * @return key
  **/
  @Schema(description = "User-configurable 32-bit key")
  public Long getKey() {
    return key;
  }

  public void setKey(Long key) {
    this.key = key;
  }

  public PortMirroringSwitchingProfile destinations(List<String> destinations) {
    this.destinations = destinations;
    return this;
  }

  public PortMirroringSwitchingProfile addDestinationsItem(String destinationsItem) {
    if (this.destinations == null) {
      this.destinations = new ArrayList<String>();
    }
    this.destinations.add(destinationsItem);
    return this;
  }

   /**
   * List of destination addresses
   * @return destinations
  **/
  @Schema(description = "List of destination addresses")
  public List<String> getDestinations() {
    return destinations;
  }

  public void setDestinations(List<String> destinations) {
    this.destinations = destinations;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PortMirroringSwitchingProfile portMirroringSwitchingProfile = (PortMirroringSwitchingProfile) o;
    return Objects.equals(this.snapLength, portMirroringSwitchingProfile.snapLength) &&
        Objects.equals(this.direction, portMirroringSwitchingProfile.direction) &&
        Objects.equals(this.key, portMirroringSwitchingProfile.key) &&
        Objects.equals(this.destinations, portMirroringSwitchingProfile.destinations) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(snapLength, direction, key, destinations, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PortMirroringSwitchingProfile {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    snapLength: ").append(toIndentedString(snapLength)).append("\n");
    sb.append("    direction: ").append(toIndentedString(direction)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    destinations: ").append(toIndentedString(destinations)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
