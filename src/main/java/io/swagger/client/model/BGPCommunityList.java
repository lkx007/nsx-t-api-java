/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.ManagedResource;
import io.swagger.client.model.Tag;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * BGPCommunityList
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class BGPCommunityList extends ManagedResource {
  @SerializedName("communities")
  private List<String> communities = new ArrayList<String>();

  @SerializedName("logical_router_id")
  private String logicalRouterId = null;

  /**
   * BGP community type. It has two types as NormalBGPCommunity BGP normal community which includes well-known community name as well as community value in range from [1-4294967295] or value in aa:nn format(aa/nn range from 1-65535). LargeBGPCommunity BGP large community which includes community value in aa:bb:nn format where aa, bb, nn are unsigned integers in the range [1-4294967295]. 
   */
  @JsonAdapter(CommunityTypeEnum.Adapter.class)
  public enum CommunityTypeEnum {
    NORMALBGPCOMMUNITY("NormalBGPCommunity"),
    LARGEBGPCOMMUNITY("LargeBGPCommunity");

    private String value;

    CommunityTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static CommunityTypeEnum fromValue(String text) {
      for (CommunityTypeEnum b : CommunityTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<CommunityTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CommunityTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CommunityTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return CommunityTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("community_type")
  private CommunityTypeEnum communityType = CommunityTypeEnum.NORMALBGPCOMMUNITY;

  public BGPCommunityList communities(List<String> communities) {
    this.communities = communities;
    return this;
  }

  public BGPCommunityList addCommunitiesItem(String communitiesItem) {
    this.communities.add(communitiesItem);
    return this;
  }

   /**
   * Array of BGP communities
   * @return communities
  **/
  @Schema(required = true, description = "Array of BGP communities")
  public List<String> getCommunities() {
    return communities;
  }

  public void setCommunities(List<String> communities) {
    this.communities = communities;
  }

   /**
   * Logical router id
   * @return logicalRouterId
  **/
  @Schema(description = "Logical router id")
  public String getLogicalRouterId() {
    return logicalRouterId;
  }

  public BGPCommunityList communityType(CommunityTypeEnum communityType) {
    this.communityType = communityType;
    return this;
  }

   /**
   * BGP community type. It has two types as NormalBGPCommunity BGP normal community which includes well-known community name as well as community value in range from [1-4294967295] or value in aa:nn format(aa/nn range from 1-65535). LargeBGPCommunity BGP large community which includes community value in aa:bb:nn format where aa, bb, nn are unsigned integers in the range [1-4294967295]. 
   * @return communityType
  **/
  @Schema(description = "BGP community type. It has two types as NormalBGPCommunity BGP normal community which includes well-known community name as well as community value in range from [1-4294967295] or value in aa:nn format(aa/nn range from 1-65535). LargeBGPCommunity BGP large community which includes community value in aa:bb:nn format where aa, bb, nn are unsigned integers in the range [1-4294967295]. ")
  public CommunityTypeEnum getCommunityType() {
    return communityType;
  }

  public void setCommunityType(CommunityTypeEnum communityType) {
    this.communityType = communityType;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BGPCommunityList bgPCommunityList = (BGPCommunityList) o;
    return Objects.equals(this.communities, bgPCommunityList.communities) &&
        Objects.equals(this.logicalRouterId, bgPCommunityList.logicalRouterId) &&
        Objects.equals(this.communityType, bgPCommunityList.communityType) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(communities, logicalRouterId, communityType, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BGPCommunityList {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    communities: ").append(toIndentedString(communities)).append("\n");
    sb.append("    logicalRouterId: ").append(toIndentedString(logicalRouterId)).append("\n");
    sb.append("    communityType: ").append(toIndentedString(communityType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
