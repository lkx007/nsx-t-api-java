/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.LbActiveMonitor;
import io.swagger.client.model.LbHttpRequestHeader;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * LbHttpMonitor
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class LbHttpMonitor extends LbActiveMonitor {
  @SerializedName("response_status_codes")
  private List<Integer> responseStatusCodes = null;

  /**
   * the health check method for HTTP monitor type
   */
  @JsonAdapter(RequestMethodEnum.Adapter.class)
  public enum RequestMethodEnum {
    GET("GET"),
    OPTIONS("OPTIONS"),
    POST("POST"),
    HEAD("HEAD"),
    PUT("PUT");

    private String value;

    RequestMethodEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static RequestMethodEnum fromValue(String text) {
      for (RequestMethodEnum b : RequestMethodEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<RequestMethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RequestMethodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RequestMethodEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return RequestMethodEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("request_method")
  private RequestMethodEnum requestMethod = RequestMethodEnum.GET;

  @SerializedName("request_body")
  private String requestBody = null;

  @SerializedName("response_body")
  private String responseBody = null;

  @SerializedName("request_url")
  private String requestUrl = null;

  /**
   * HTTP request version
   */
  @JsonAdapter(RequestVersionEnum.Adapter.class)
  public enum RequestVersionEnum {
    _1_0("HTTP_VERSION_1_0"),
    _1_1("HTTP_VERSION_1_1"),
    _2_0("HTTP_VERSION_2_0");

    private String value;

    RequestVersionEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static RequestVersionEnum fromValue(String text) {
      for (RequestVersionEnum b : RequestVersionEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<RequestVersionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RequestVersionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RequestVersionEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return RequestVersionEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("request_version")
  private RequestVersionEnum requestVersion = RequestVersionEnum._1_1;

  @SerializedName("request_headers")
  private List<LbHttpRequestHeader> requestHeaders = null;

  public LbHttpMonitor responseStatusCodes(List<Integer> responseStatusCodes) {
    this.responseStatusCodes = responseStatusCodes;
    return this;
  }

  public LbHttpMonitor addResponseStatusCodesItem(Integer responseStatusCodesItem) {
    if (this.responseStatusCodes == null) {
      this.responseStatusCodes = new ArrayList<Integer>();
    }
    this.responseStatusCodes.add(responseStatusCodesItem);
    return this;
  }

   /**
   * The HTTP response status code should be a valid HTTP status code. 
   * @return responseStatusCodes
  **/
  @Schema(description = "The HTTP response status code should be a valid HTTP status code. ")
  public List<Integer> getResponseStatusCodes() {
    return responseStatusCodes;
  }

  public void setResponseStatusCodes(List<Integer> responseStatusCodes) {
    this.responseStatusCodes = responseStatusCodes;
  }

  public LbHttpMonitor requestMethod(RequestMethodEnum requestMethod) {
    this.requestMethod = requestMethod;
    return this;
  }

   /**
   * the health check method for HTTP monitor type
   * @return requestMethod
  **/
  @Schema(description = "the health check method for HTTP monitor type")
  public RequestMethodEnum getRequestMethod() {
    return requestMethod;
  }

  public void setRequestMethod(RequestMethodEnum requestMethod) {
    this.requestMethod = requestMethod;
  }

  public LbHttpMonitor requestBody(String requestBody) {
    this.requestBody = requestBody;
    return this;
  }

   /**
   * String to send as part of HTTP health check request body. Valid only for certain HTTP methods like POST. 
   * @return requestBody
  **/
  @Schema(description = "String to send as part of HTTP health check request body. Valid only for certain HTTP methods like POST. ")
  public String getRequestBody() {
    return requestBody;
  }

  public void setRequestBody(String requestBody) {
    this.requestBody = requestBody;
  }

  public LbHttpMonitor responseBody(String responseBody) {
    this.responseBody = responseBody;
    return this;
  }

   /**
   * If HTTP response body match string (regular expressions not supported) is specified (using LbHttpMonitor.response_body) then the healthcheck HTTP response body is matched against the specified string and server is considered healthy only if there is a match. If the response body string is not specified, HTTP healthcheck is considered successful if the HTTP response status code is 2xx, but it can be configured to accept other status codes as successful. 
   * @return responseBody
  **/
  @Schema(description = "If HTTP response body match string (regular expressions not supported) is specified (using LbHttpMonitor.response_body) then the healthcheck HTTP response body is matched against the specified string and server is considered healthy only if there is a match. If the response body string is not specified, HTTP healthcheck is considered successful if the HTTP response status code is 2xx, but it can be configured to accept other status codes as successful. ")
  public String getResponseBody() {
    return responseBody;
  }

  public void setResponseBody(String responseBody) {
    this.responseBody = responseBody;
  }

  public LbHttpMonitor requestUrl(String requestUrl) {
    this.requestUrl = requestUrl;
    return this;
  }

   /**
   * URL used for HTTP monitor
   * @return requestUrl
  **/
  @Schema(description = "URL used for HTTP monitor")
  public String getRequestUrl() {
    return requestUrl;
  }

  public void setRequestUrl(String requestUrl) {
    this.requestUrl = requestUrl;
  }

  public LbHttpMonitor requestVersion(RequestVersionEnum requestVersion) {
    this.requestVersion = requestVersion;
    return this;
  }

   /**
   * HTTP request version
   * @return requestVersion
  **/
  @Schema(description = "HTTP request version")
  public RequestVersionEnum getRequestVersion() {
    return requestVersion;
  }

  public void setRequestVersion(RequestVersionEnum requestVersion) {
    this.requestVersion = requestVersion;
  }

  public LbHttpMonitor requestHeaders(List<LbHttpRequestHeader> requestHeaders) {
    this.requestHeaders = requestHeaders;
    return this;
  }

  public LbHttpMonitor addRequestHeadersItem(LbHttpRequestHeader requestHeadersItem) {
    if (this.requestHeaders == null) {
      this.requestHeaders = new ArrayList<LbHttpRequestHeader>();
    }
    this.requestHeaders.add(requestHeadersItem);
    return this;
  }

   /**
   * Array of HTTP request headers
   * @return requestHeaders
  **/
  @Schema(description = "Array of HTTP request headers")
  public List<LbHttpRequestHeader> getRequestHeaders() {
    return requestHeaders;
  }

  public void setRequestHeaders(List<LbHttpRequestHeader> requestHeaders) {
    this.requestHeaders = requestHeaders;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LbHttpMonitor lbHttpMonitor = (LbHttpMonitor) o;
    return Objects.equals(this.responseStatusCodes, lbHttpMonitor.responseStatusCodes) &&
        Objects.equals(this.requestMethod, lbHttpMonitor.requestMethod) &&
        Objects.equals(this.requestBody, lbHttpMonitor.requestBody) &&
        Objects.equals(this.responseBody, lbHttpMonitor.responseBody) &&
        Objects.equals(this.requestUrl, lbHttpMonitor.requestUrl) &&
        Objects.equals(this.requestVersion, lbHttpMonitor.requestVersion) &&
        Objects.equals(this.requestHeaders, lbHttpMonitor.requestHeaders) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(responseStatusCodes, requestMethod, requestBody, responseBody, requestUrl, requestVersion, requestHeaders, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LbHttpMonitor {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    responseStatusCodes: ").append(toIndentedString(responseStatusCodes)).append("\n");
    sb.append("    requestMethod: ").append(toIndentedString(requestMethod)).append("\n");
    sb.append("    requestBody: ").append(toIndentedString(requestBody)).append("\n");
    sb.append("    responseBody: ").append(toIndentedString(responseBody)).append("\n");
    sb.append("    requestUrl: ").append(toIndentedString(requestUrl)).append("\n");
    sb.append("    requestVersion: ").append(toIndentedString(requestVersion)).append("\n");
    sb.append("    requestHeaders: ").append(toIndentedString(requestHeaders)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
