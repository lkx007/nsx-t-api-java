/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.EdgeClusterMemberAllocationProfile;
import io.swagger.client.model.IPv6Profiles;
import io.swagger.client.model.LogicalRouterConfig;
import io.swagger.client.model.ManagedResource;
import io.swagger.client.model.ResourceReference;
import io.swagger.client.model.Tag;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * LogicalRouter
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class LogicalRouter extends ManagedResource {
  @SerializedName("edge_cluster_member_indices")
  private List<Long> edgeClusterMemberIndices = null;

  @SerializedName("ipv6_profiles")
  private IPv6Profiles ipv6Profiles = null;

  @SerializedName("allocation_profile")
  private EdgeClusterMemberAllocationProfile allocationProfile = null;

  @SerializedName("firewall_sections")
  private List<ResourceReference> firewallSections = null;

  /**
   * Determines the behavior when a logical router instance restarts after a failure. If set to PREEMPTIVE, the preferred node will take over, even if it causes another failure. If set to NON_PREEMPTIVE, then the instance that restarted will remain secondary. This property must not be populated unless the high_availability_mode property is set to ACTIVE_STANDBY. If high_availability_mode property is set to ACTIVE_STANDBY and this property is not specified then default will be NON_PREEMPTIVE. 
   */
  @JsonAdapter(FailoverModeEnum.Adapter.class)
  public enum FailoverModeEnum {
    PREEMPTIVE("PREEMPTIVE"),
    NON_PREEMPTIVE("NON_PREEMPTIVE");

    private String value;

    FailoverModeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static FailoverModeEnum fromValue(String text) {
      for (FailoverModeEnum b : FailoverModeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<FailoverModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FailoverModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FailoverModeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return FailoverModeEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("failover_mode")
  private FailoverModeEnum failoverMode = null;

  @SerializedName("advanced_config")
  private LogicalRouterConfig advancedConfig = null;

  /**
   * Type of Logical Router
   */
  @JsonAdapter(RouterTypeEnum.Adapter.class)
  public enum RouterTypeEnum {
    TIER0("TIER0"),
    TIER1("TIER1");

    private String value;

    RouterTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static RouterTypeEnum fromValue(String text) {
      for (RouterTypeEnum b : RouterTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<RouterTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RouterTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RouterTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return RouterTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("router_type")
  private RouterTypeEnum routerType = null;

  @SerializedName("preferred_edge_cluster_member_index")
  private Long preferredEdgeClusterMemberIndex = null;

  /**
   * High availability mode
   */
  @JsonAdapter(HighAvailabilityModeEnum.Adapter.class)
  public enum HighAvailabilityModeEnum {
    ACTIVE("ACTIVE_ACTIVE"),
    STANDBY("ACTIVE_STANDBY");

    private String value;

    HighAvailabilityModeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static HighAvailabilityModeEnum fromValue(String text) {
      for (HighAvailabilityModeEnum b : HighAvailabilityModeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<HighAvailabilityModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final HighAvailabilityModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public HighAvailabilityModeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return HighAvailabilityModeEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("high_availability_mode")
  private HighAvailabilityModeEnum highAvailabilityMode = null;

  @SerializedName("edge_cluster_id")
  private String edgeClusterId = null;

  public LogicalRouter edgeClusterMemberIndices(List<Long> edgeClusterMemberIndices) {
    this.edgeClusterMemberIndices = edgeClusterMemberIndices;
    return this;
  }

  public LogicalRouter addEdgeClusterMemberIndicesItem(Long edgeClusterMemberIndicesItem) {
    if (this.edgeClusterMemberIndices == null) {
      this.edgeClusterMemberIndices = new ArrayList<Long>();
    }
    this.edgeClusterMemberIndices.add(edgeClusterMemberIndicesItem);
    return this;
  }

   /**
   * For stateful services, the logical router should be associated with edge cluster. For TIER 1 logical router, for manual placement of service router within the cluster, edge cluster member indices needs to be provided else same will be auto-allocated. You can provide maximum two indices for HA ACTIVE_STANDBY. For TIER0 logical router this property is no use and placement is derived from logical router uplink or loopback port. 
   * @return edgeClusterMemberIndices
  **/
  @Schema(description = "For stateful services, the logical router should be associated with edge cluster. For TIER 1 logical router, for manual placement of service router within the cluster, edge cluster member indices needs to be provided else same will be auto-allocated. You can provide maximum two indices for HA ACTIVE_STANDBY. For TIER0 logical router this property is no use and placement is derived from logical router uplink or loopback port. ")
  public List<Long> getEdgeClusterMemberIndices() {
    return edgeClusterMemberIndices;
  }

  public void setEdgeClusterMemberIndices(List<Long> edgeClusterMemberIndices) {
    this.edgeClusterMemberIndices = edgeClusterMemberIndices;
  }

  public LogicalRouter ipv6Profiles(IPv6Profiles ipv6Profiles) {
    this.ipv6Profiles = ipv6Profiles;
    return this;
  }

   /**
   * Get ipv6Profiles
   * @return ipv6Profiles
  **/
  @Schema(description = "")
  public IPv6Profiles getIpv6Profiles() {
    return ipv6Profiles;
  }

  public void setIpv6Profiles(IPv6Profiles ipv6Profiles) {
    this.ipv6Profiles = ipv6Profiles;
  }

  public LogicalRouter allocationProfile(EdgeClusterMemberAllocationProfile allocationProfile) {
    this.allocationProfile = allocationProfile;
    return this;
  }

   /**
   * Get allocationProfile
   * @return allocationProfile
  **/
  @Schema(description = "")
  public EdgeClusterMemberAllocationProfile getAllocationProfile() {
    return allocationProfile;
  }

  public void setAllocationProfile(EdgeClusterMemberAllocationProfile allocationProfile) {
    this.allocationProfile = allocationProfile;
  }

   /**
   * List of Firewall sections related to Logical Router.
   * @return firewallSections
  **/
  @Schema(description = "List of Firewall sections related to Logical Router.")
  public List<ResourceReference> getFirewallSections() {
    return firewallSections;
  }

  public LogicalRouter failoverMode(FailoverModeEnum failoverMode) {
    this.failoverMode = failoverMode;
    return this;
  }

   /**
   * Determines the behavior when a logical router instance restarts after a failure. If set to PREEMPTIVE, the preferred node will take over, even if it causes another failure. If set to NON_PREEMPTIVE, then the instance that restarted will remain secondary. This property must not be populated unless the high_availability_mode property is set to ACTIVE_STANDBY. If high_availability_mode property is set to ACTIVE_STANDBY and this property is not specified then default will be NON_PREEMPTIVE. 
   * @return failoverMode
  **/
  @Schema(description = "Determines the behavior when a logical router instance restarts after a failure. If set to PREEMPTIVE, the preferred node will take over, even if it causes another failure. If set to NON_PREEMPTIVE, then the instance that restarted will remain secondary. This property must not be populated unless the high_availability_mode property is set to ACTIVE_STANDBY. If high_availability_mode property is set to ACTIVE_STANDBY and this property is not specified then default will be NON_PREEMPTIVE. ")
  public FailoverModeEnum getFailoverMode() {
    return failoverMode;
  }

  public void setFailoverMode(FailoverModeEnum failoverMode) {
    this.failoverMode = failoverMode;
  }

  public LogicalRouter advancedConfig(LogicalRouterConfig advancedConfig) {
    this.advancedConfig = advancedConfig;
    return this;
  }

   /**
   * Get advancedConfig
   * @return advancedConfig
  **/
  @Schema(description = "")
  public LogicalRouterConfig getAdvancedConfig() {
    return advancedConfig;
  }

  public void setAdvancedConfig(LogicalRouterConfig advancedConfig) {
    this.advancedConfig = advancedConfig;
  }

  public LogicalRouter routerType(RouterTypeEnum routerType) {
    this.routerType = routerType;
    return this;
  }

   /**
   * Type of Logical Router
   * @return routerType
  **/
  @Schema(required = true, description = "Type of Logical Router")
  public RouterTypeEnum getRouterType() {
    return routerType;
  }

  public void setRouterType(RouterTypeEnum routerType) {
    this.routerType = routerType;
  }

  public LogicalRouter preferredEdgeClusterMemberIndex(Long preferredEdgeClusterMemberIndex) {
    this.preferredEdgeClusterMemberIndex = preferredEdgeClusterMemberIndex;
    return this;
  }

   /**
   * Preferred edge cluster member index which is required for PREEMPTIVE failover mode. Used for Tier0 routers only. 
   * minimum: 0
   * @return preferredEdgeClusterMemberIndex
  **/
  @Schema(description = "Preferred edge cluster member index which is required for PREEMPTIVE failover mode. Used for Tier0 routers only. ")
  public Long getPreferredEdgeClusterMemberIndex() {
    return preferredEdgeClusterMemberIndex;
  }

  public void setPreferredEdgeClusterMemberIndex(Long preferredEdgeClusterMemberIndex) {
    this.preferredEdgeClusterMemberIndex = preferredEdgeClusterMemberIndex;
  }

  public LogicalRouter highAvailabilityMode(HighAvailabilityModeEnum highAvailabilityMode) {
    this.highAvailabilityMode = highAvailabilityMode;
    return this;
  }

   /**
   * High availability mode
   * @return highAvailabilityMode
  **/
  @Schema(description = "High availability mode")
  public HighAvailabilityModeEnum getHighAvailabilityMode() {
    return highAvailabilityMode;
  }

  public void setHighAvailabilityMode(HighAvailabilityModeEnum highAvailabilityMode) {
    this.highAvailabilityMode = highAvailabilityMode;
  }

  public LogicalRouter edgeClusterId(String edgeClusterId) {
    this.edgeClusterId = edgeClusterId;
    return this;
  }

   /**
   * Used for tier0 routers
   * @return edgeClusterId
  **/
  @Schema(description = "Used for tier0 routers")
  public String getEdgeClusterId() {
    return edgeClusterId;
  }

  public void setEdgeClusterId(String edgeClusterId) {
    this.edgeClusterId = edgeClusterId;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LogicalRouter logicalRouter = (LogicalRouter) o;
    return Objects.equals(this.edgeClusterMemberIndices, logicalRouter.edgeClusterMemberIndices) &&
        Objects.equals(this.ipv6Profiles, logicalRouter.ipv6Profiles) &&
        Objects.equals(this.allocationProfile, logicalRouter.allocationProfile) &&
        Objects.equals(this.firewallSections, logicalRouter.firewallSections) &&
        Objects.equals(this.failoverMode, logicalRouter.failoverMode) &&
        Objects.equals(this.advancedConfig, logicalRouter.advancedConfig) &&
        Objects.equals(this.routerType, logicalRouter.routerType) &&
        Objects.equals(this.preferredEdgeClusterMemberIndex, logicalRouter.preferredEdgeClusterMemberIndex) &&
        Objects.equals(this.highAvailabilityMode, logicalRouter.highAvailabilityMode) &&
        Objects.equals(this.edgeClusterId, logicalRouter.edgeClusterId) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(edgeClusterMemberIndices, ipv6Profiles, allocationProfile, firewallSections, failoverMode, advancedConfig, routerType, preferredEdgeClusterMemberIndex, highAvailabilityMode, edgeClusterId, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LogicalRouter {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    edgeClusterMemberIndices: ").append(toIndentedString(edgeClusterMemberIndices)).append("\n");
    sb.append("    ipv6Profiles: ").append(toIndentedString(ipv6Profiles)).append("\n");
    sb.append("    allocationProfile: ").append(toIndentedString(allocationProfile)).append("\n");
    sb.append("    firewallSections: ").append(toIndentedString(firewallSections)).append("\n");
    sb.append("    failoverMode: ").append(toIndentedString(failoverMode)).append("\n");
    sb.append("    advancedConfig: ").append(toIndentedString(advancedConfig)).append("\n");
    sb.append("    routerType: ").append(toIndentedString(routerType)).append("\n");
    sb.append("    preferredEdgeClusterMemberIndex: ").append(toIndentedString(preferredEdgeClusterMemberIndex)).append("\n");
    sb.append("    highAvailabilityMode: ").append(toIndentedString(highAvailabilityMode)).append("\n");
    sb.append("    edgeClusterId: ").append(toIndentedString(edgeClusterId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
