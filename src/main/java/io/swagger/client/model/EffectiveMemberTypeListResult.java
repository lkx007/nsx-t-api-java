/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * EffectiveMemberTypeListResult
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class EffectiveMemberTypeListResult {
  /**
   * Resource type valid for use in an NSGroupExpression
   */
  @JsonAdapter(ResultsEnum.Adapter.class)
  public enum ResultsEnum {
    NSGROUP("NSGroup"),
    IPSET("IPSet"),
    MACSET("MACSet"),
    LOGICALSWITCH("LogicalSwitch"),
    LOGICALPORT("LogicalPort"),
    VIRTUALMACHINE("VirtualMachine"),
    DIRECTORYGROUP("DirectoryGroup"),
    VIRTUALNETWORKINTERFACE("VirtualNetworkInterface"),
    TRANSPORTNODE("TransportNode");

    private String value;

    ResultsEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ResultsEnum fromValue(String text) {
      for (ResultsEnum b : ResultsEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ResultsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ResultsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ResultsEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ResultsEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("results")
  private List<ResultsEnum> results = new ArrayList<ResultsEnum>();

  @SerializedName("result_count")
  private Long resultCount = null;

  public EffectiveMemberTypeListResult results(List<ResultsEnum> results) {
    this.results = results;
    return this;
  }

  public EffectiveMemberTypeListResult addResultsItem(ResultsEnum resultsItem) {
    this.results.add(resultsItem);
    return this;
  }

   /**
   * Collection of member types for the given NSGroup
   * @return results
  **/
  @Schema(required = true, description = "Collection of member types for the given NSGroup")
  public List<ResultsEnum> getResults() {
    return results;
  }

  public void setResults(List<ResultsEnum> results) {
    this.results = results;
  }

   /**
   * Count of the member types in the results array
   * @return resultCount
  **/
  @Schema(description = "Count of the member types in the results array")
  public Long getResultCount() {
    return resultCount;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EffectiveMemberTypeListResult effectiveMemberTypeListResult = (EffectiveMemberTypeListResult) o;
    return Objects.equals(this.results, effectiveMemberTypeListResult.results) &&
        Objects.equals(this.resultCount, effectiveMemberTypeListResult.resultCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(results, resultCount);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EffectiveMemberTypeListResult {\n");
    
    sb.append("    results: ").append(toIndentedString(results)).append("\n");
    sb.append("    resultCount: ").append(toIndentedString(resultCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
