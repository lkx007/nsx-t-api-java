/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.LbCookieTime;
import io.swagger.client.model.LbPersistenceProfile;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * LbCookiePersistenceProfile
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class LbCookiePersistenceProfile extends LbPersistenceProfile {
  @SerializedName("cookie_garble")
  private Boolean cookieGarble = true;

  @SerializedName("cookie_fallback")
  private Boolean cookieFallback = true;

  /**
   * cookie persistence mode
   */
  @JsonAdapter(CookieModeEnum.Adapter.class)
  public enum CookieModeEnum {
    INSERT("INSERT"),
    PREFIX("PREFIX"),
    REWRITE("REWRITE");

    private String value;

    CookieModeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static CookieModeEnum fromValue(String text) {
      for (CookieModeEnum b : CookieModeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<CookieModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CookieModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CookieModeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return CookieModeEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("cookie_mode")
  private CookieModeEnum cookieMode = CookieModeEnum.INSERT;

  @SerializedName("cookie_domain")
  private String cookieDomain = null;

  @SerializedName("cookie_name")
  private String cookieName = null;

  @SerializedName("cookie_time")
  private LbCookieTime cookieTime = null;

  @SerializedName("cookie_path")
  private String cookiePath = null;

  public LbCookiePersistenceProfile cookieGarble(Boolean cookieGarble) {
    this.cookieGarble = cookieGarble;
    return this;
  }

   /**
   * If garble is set to true, cookie value (server IP and port) would be encrypted. If garble is set to false, cookie value would be plain text. 
   * @return cookieGarble
  **/
  @Schema(description = "If garble is set to true, cookie value (server IP and port) would be encrypted. If garble is set to false, cookie value would be plain text. ")
  public Boolean isCookieGarble() {
    return cookieGarble;
  }

  public void setCookieGarble(Boolean cookieGarble) {
    this.cookieGarble = cookieGarble;
  }

  public LbCookiePersistenceProfile cookieFallback(Boolean cookieFallback) {
    this.cookieFallback = cookieFallback;
    return this;
  }

   /**
   * If fallback is true, once the cookie points to a server that is down (i.e. admin state DISABLED or healthcheck state is DOWN), then a new server is selected by default to handle that request. If fallback is false, it will cause the request to be rejected if cookie points to a server 
   * @return cookieFallback
  **/
  @Schema(description = "If fallback is true, once the cookie points to a server that is down (i.e. admin state DISABLED or healthcheck state is DOWN), then a new server is selected by default to handle that request. If fallback is false, it will cause the request to be rejected if cookie points to a server ")
  public Boolean isCookieFallback() {
    return cookieFallback;
  }

  public void setCookieFallback(Boolean cookieFallback) {
    this.cookieFallback = cookieFallback;
  }

  public LbCookiePersistenceProfile cookieMode(CookieModeEnum cookieMode) {
    this.cookieMode = cookieMode;
    return this;
  }

   /**
   * cookie persistence mode
   * @return cookieMode
  **/
  @Schema(description = "cookie persistence mode")
  public CookieModeEnum getCookieMode() {
    return cookieMode;
  }

  public void setCookieMode(CookieModeEnum cookieMode) {
    this.cookieMode = cookieMode;
  }

  public LbCookiePersistenceProfile cookieDomain(String cookieDomain) {
    this.cookieDomain = cookieDomain;
    return this;
  }

   /**
   * HTTP cookie domain could be configured, only available for insert mode. 
   * @return cookieDomain
  **/
  @Schema(description = "HTTP cookie domain could be configured, only available for insert mode. ")
  public String getCookieDomain() {
    return cookieDomain;
  }

  public void setCookieDomain(String cookieDomain) {
    this.cookieDomain = cookieDomain;
  }

  public LbCookiePersistenceProfile cookieName(String cookieName) {
    this.cookieName = cookieName;
    return this;
  }

   /**
   * cookie name
   * @return cookieName
  **/
  @Schema(required = true, description = "cookie name")
  public String getCookieName() {
    return cookieName;
  }

  public void setCookieName(String cookieName) {
    this.cookieName = cookieName;
  }

  public LbCookiePersistenceProfile cookieTime(LbCookieTime cookieTime) {
    this.cookieTime = cookieTime;
    return this;
  }

   /**
   * Get cookieTime
   * @return cookieTime
  **/
  @Schema(description = "")
  public LbCookieTime getCookieTime() {
    return cookieTime;
  }

  public void setCookieTime(LbCookieTime cookieTime) {
    this.cookieTime = cookieTime;
  }

  public LbCookiePersistenceProfile cookiePath(String cookiePath) {
    this.cookiePath = cookiePath;
    return this;
  }

   /**
   * HTTP cookie path could be set, only available for insert mode. 
   * @return cookiePath
  **/
  @Schema(description = "HTTP cookie path could be set, only available for insert mode. ")
  public String getCookiePath() {
    return cookiePath;
  }

  public void setCookiePath(String cookiePath) {
    this.cookiePath = cookiePath;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LbCookiePersistenceProfile lbCookiePersistenceProfile = (LbCookiePersistenceProfile) o;
    return Objects.equals(this.cookieGarble, lbCookiePersistenceProfile.cookieGarble) &&
        Objects.equals(this.cookieFallback, lbCookiePersistenceProfile.cookieFallback) &&
        Objects.equals(this.cookieMode, lbCookiePersistenceProfile.cookieMode) &&
        Objects.equals(this.cookieDomain, lbCookiePersistenceProfile.cookieDomain) &&
        Objects.equals(this.cookieName, lbCookiePersistenceProfile.cookieName) &&
        Objects.equals(this.cookieTime, lbCookiePersistenceProfile.cookieTime) &&
        Objects.equals(this.cookiePath, lbCookiePersistenceProfile.cookiePath) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cookieGarble, cookieFallback, cookieMode, cookieDomain, cookieName, cookieTime, cookiePath, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LbCookiePersistenceProfile {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    cookieGarble: ").append(toIndentedString(cookieGarble)).append("\n");
    sb.append("    cookieFallback: ").append(toIndentedString(cookieFallback)).append("\n");
    sb.append("    cookieMode: ").append(toIndentedString(cookieMode)).append("\n");
    sb.append("    cookieDomain: ").append(toIndentedString(cookieDomain)).append("\n");
    sb.append("    cookieName: ").append(toIndentedString(cookieName)).append("\n");
    sb.append("    cookieTime: ").append(toIndentedString(cookieTime)).append("\n");
    sb.append("    cookiePath: ").append(toIndentedString(cookiePath)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
