/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * Service insertion data path inserts unique &#x27;source node id&#x27; value into each packet before it received by Service VM. This value can be resolved to multiple Source Entities. It represents source of the packets.
 */
@Schema(description = "Service insertion data path inserts unique 'source node id' value into each packet before it received by Service VM. This value can be resolved to multiple Source Entities. It represents source of the packets.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class SourceEntity {
  /**
   * Type of source entity. Currently source value can be resolved to VIF and Virtual Machine.
   */
  @JsonAdapter(SourceEntityTypeEnum.Adapter.class)
  public enum SourceEntityTypeEnum {
    NETWORK_INTERFACE("VIRTUAL_NETWORK_INTERFACE"),
    MACHINE("VIRTUAL_MACHINE");

    private String value;

    SourceEntityTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static SourceEntityTypeEnum fromValue(String text) {
      for (SourceEntityTypeEnum b : SourceEntityTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<SourceEntityTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SourceEntityTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SourceEntityTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return SourceEntityTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("source_entity_type")
  private SourceEntityTypeEnum sourceEntityType = null;

  @SerializedName("source_entity_id")
  private String sourceEntityId = null;

   /**
   * Type of source entity. Currently source value can be resolved to VIF and Virtual Machine.
   * @return sourceEntityType
  **/
  @Schema(description = "Type of source entity. Currently source value can be resolved to VIF and Virtual Machine.")
  public SourceEntityTypeEnum getSourceEntityType() {
    return sourceEntityType;
  }

   /**
   * UUID of Source entity
   * @return sourceEntityId
  **/
  @Schema(description = "UUID of Source entity")
  public String getSourceEntityId() {
    return sourceEntityId;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SourceEntity sourceEntity = (SourceEntity) o;
    return Objects.equals(this.sourceEntityType, sourceEntity.sourceEntityType) &&
        Objects.equals(this.sourceEntityId, sourceEntity.sourceEntityId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sourceEntityType, sourceEntityId);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SourceEntity {\n");
    
    sb.append("    sourceEntityType: ").append(toIndentedString(sourceEntityType)).append("\n");
    sb.append("    sourceEntityId: ").append(toIndentedString(sourceEntityId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
