/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.KeyValuePair;
import io.swagger.client.model.ManagedResource;
import io.swagger.client.model.Tag;
import io.swagger.client.model.UpgradeChecksExecutionStatus;
import io.swagger.client.model.UpgradeUnit;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
/**
 * UpgradeUnitGroupAggregateInfo
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class UpgradeUnitGroupAggregateInfo extends ManagedResource {
  /**
   * Upgrade status of upgrade unit group
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    SUCCESS("SUCCESS"),
    FAILED("FAILED"),
    IN_PROGRESS("IN_PROGRESS"),
    NOT_STARTED("NOT_STARTED"),
    PAUSING("PAUSING"),
    PAUSED("PAUSED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static StatusEnum fromValue(String text) {
      for (StatusEnum b : StatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StatusEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("status")
  private StatusEnum status = null;

  @SerializedName("upgrade_unit_count")
  private Integer upgradeUnitCount = null;

  @SerializedName("failed_count")
  private Integer failedCount = null;

  @SerializedName("type")
  private String type = null;

  @SerializedName("percent_complete")
  private BigDecimal percentComplete = null;

  @SerializedName("post_upgrade_status")
  private UpgradeChecksExecutionStatus postUpgradeStatus = null;

  @SerializedName("enabled")
  private Boolean enabled = true;

  @SerializedName("upgrade_units")
  private List<UpgradeUnit> upgradeUnits = null;

  @SerializedName("extended_configuration")
  private List<KeyValuePair> extendedConfiguration = null;

  @SerializedName("parallel")
  private Boolean parallel = true;

   /**
   * Upgrade status of upgrade unit group
   * @return status
  **/
  @Schema(description = "Upgrade status of upgrade unit group")
  public StatusEnum getStatus() {
    return status;
  }

   /**
   * Number of upgrade units in the group
   * @return upgradeUnitCount
  **/
  @Schema(description = "Number of upgrade units in the group")
  public Integer getUpgradeUnitCount() {
    return upgradeUnitCount;
  }

   /**
   * Number of nodes in the upgrade unit group that failed upgrade
   * @return failedCount
  **/
  @Schema(description = "Number of nodes in the upgrade unit group that failed upgrade")
  public Integer getFailedCount() {
    return failedCount;
  }

  public UpgradeUnitGroupAggregateInfo type(String type) {
    this.type = type;
    return this;
  }

   /**
   * Component type
   * @return type
  **/
  @Schema(required = true, description = "Component type")
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }

   /**
   * Indicator of upgrade progress in percentage
   * @return percentComplete
  **/
  @Schema(description = "Indicator of upgrade progress in percentage")
  public BigDecimal getPercentComplete() {
    return percentComplete;
  }

  public UpgradeUnitGroupAggregateInfo postUpgradeStatus(UpgradeChecksExecutionStatus postUpgradeStatus) {
    this.postUpgradeStatus = postUpgradeStatus;
    return this;
  }

   /**
   * Get postUpgradeStatus
   * @return postUpgradeStatus
  **/
  @Schema(description = "")
  public UpgradeChecksExecutionStatus getPostUpgradeStatus() {
    return postUpgradeStatus;
  }

  public void setPostUpgradeStatus(UpgradeChecksExecutionStatus postUpgradeStatus) {
    this.postUpgradeStatus = postUpgradeStatus;
  }

  public UpgradeUnitGroupAggregateInfo enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

   /**
   * Flag to indicate whether upgrade of this group is enabled or not
   * @return enabled
  **/
  @Schema(description = "Flag to indicate whether upgrade of this group is enabled or not")
  public Boolean isEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }

  public UpgradeUnitGroupAggregateInfo upgradeUnits(List<UpgradeUnit> upgradeUnits) {
    this.upgradeUnits = upgradeUnits;
    return this;
  }

  public UpgradeUnitGroupAggregateInfo addUpgradeUnitsItem(UpgradeUnit upgradeUnitsItem) {
    if (this.upgradeUnits == null) {
      this.upgradeUnits = new ArrayList<UpgradeUnit>();
    }
    this.upgradeUnits.add(upgradeUnitsItem);
    return this;
  }

   /**
   * List of upgrade units in the group
   * @return upgradeUnits
  **/
  @Schema(description = "List of upgrade units in the group")
  public List<UpgradeUnit> getUpgradeUnits() {
    return upgradeUnits;
  }

  public void setUpgradeUnits(List<UpgradeUnit> upgradeUnits) {
    this.upgradeUnits = upgradeUnits;
  }

  public UpgradeUnitGroupAggregateInfo extendedConfiguration(List<KeyValuePair> extendedConfiguration) {
    this.extendedConfiguration = extendedConfiguration;
    return this;
  }

  public UpgradeUnitGroupAggregateInfo addExtendedConfigurationItem(KeyValuePair extendedConfigurationItem) {
    if (this.extendedConfiguration == null) {
      this.extendedConfiguration = new ArrayList<KeyValuePair>();
    }
    this.extendedConfiguration.add(extendedConfigurationItem);
    return this;
  }

   /**
   * Extended configuration for the group
   * @return extendedConfiguration
  **/
  @Schema(description = "Extended configuration for the group")
  public List<KeyValuePair> getExtendedConfiguration() {
    return extendedConfiguration;
  }

  public void setExtendedConfiguration(List<KeyValuePair> extendedConfiguration) {
    this.extendedConfiguration = extendedConfiguration;
  }

  public UpgradeUnitGroupAggregateInfo parallel(Boolean parallel) {
    this.parallel = parallel;
    return this;
  }

   /**
   * Upgrade method to specify whether the upgrade is to be performed in parallel or serially
   * @return parallel
  **/
  @Schema(description = "Upgrade method to specify whether the upgrade is to be performed in parallel or serially")
  public Boolean isParallel() {
    return parallel;
  }

  public void setParallel(Boolean parallel) {
    this.parallel = parallel;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpgradeUnitGroupAggregateInfo upgradeUnitGroupAggregateInfo = (UpgradeUnitGroupAggregateInfo) o;
    return Objects.equals(this.status, upgradeUnitGroupAggregateInfo.status) &&
        Objects.equals(this.upgradeUnitCount, upgradeUnitGroupAggregateInfo.upgradeUnitCount) &&
        Objects.equals(this.failedCount, upgradeUnitGroupAggregateInfo.failedCount) &&
        Objects.equals(this.type, upgradeUnitGroupAggregateInfo.type) &&
        Objects.equals(this.percentComplete, upgradeUnitGroupAggregateInfo.percentComplete) &&
        Objects.equals(this.postUpgradeStatus, upgradeUnitGroupAggregateInfo.postUpgradeStatus) &&
        Objects.equals(this.enabled, upgradeUnitGroupAggregateInfo.enabled) &&
        Objects.equals(this.upgradeUnits, upgradeUnitGroupAggregateInfo.upgradeUnits) &&
        Objects.equals(this.extendedConfiguration, upgradeUnitGroupAggregateInfo.extendedConfiguration) &&
        Objects.equals(this.parallel, upgradeUnitGroupAggregateInfo.parallel) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(status, upgradeUnitCount, failedCount, type, percentComplete, postUpgradeStatus, enabled, upgradeUnits, extendedConfiguration, parallel, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpgradeUnitGroupAggregateInfo {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    upgradeUnitCount: ").append(toIndentedString(upgradeUnitCount)).append("\n");
    sb.append("    failedCount: ").append(toIndentedString(failedCount)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    percentComplete: ").append(toIndentedString(percentComplete)).append("\n");
    sb.append("    postUpgradeStatus: ").append(toIndentedString(postUpgradeStatus)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    upgradeUnits: ").append(toIndentedString(upgradeUnits)).append("\n");
    sb.append("    extendedConfiguration: ").append(toIndentedString(extendedConfiguration)).append("\n");
    sb.append("    parallel: ").append(toIndentedString(parallel)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
