/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * Describes status of configuration of an entity
 */
@Schema(description = "Describes status of configuration of an entity")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class ConfigurationStateElement {
  @SerializedName("sub_system_address")
  private String subSystemAddress = null;

  /**
   * State of configuration on this sub system
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    IN_PROGRESS("in_progress"),
    SUCCESS("success"),
    FAILED("failed"),
    PARTIAL_SUCCESS("partial_success"),
    IN_SYNC("in_sync"),
    VM_DEPLOYMENT_FAILED("VM_DEPLOYMENT_FAILED"),
    VM_POWER_ON_FAILED("VM_POWER_ON_FAILED"),
    VM_POWER_OFF_FAILED("VM_POWER_OFF_FAILED"),
    VM_UNDEPLOY_FAILED("VM_UNDEPLOY_FAILED"),
    EDGE_CONFIG_ERROR("EDGE_CONFIG_ERROR"),
    REGISTRATION_FAILED("REGISTRATION_FAILED"),
    TRANSPORT_NODE_CONFIGURATION_MISSING("TRANSPORT_NODE_CONFIGURATION_MISSING"),
    EDGE_HARDWARE_NOT_SUPPORTED("EDGE_HARDWARE_NOT_SUPPORTED"),
    MULTIPLE_OVERLAY_TZS_NOT_SUPPORTED("MULTIPLE_OVERLAY_TZS_NOT_SUPPORTED"),
    TN_OVERLAY_TZ_IN_USE_BY_EDGE_CLUSTER("TN_OVERLAY_TZ_IN_USE_BY_EDGE_CLUSTER"),
    TZ_ENDPOINTS_NOT_SPECIFIED("TZ_ENDPOINTS_NOT_SPECIFIED"),
    NO_PNIC_PREPARED_IN_EDGE("NO_PNIC_PREPARED_IN_EDGE"),
    APPLIANCE_INTERNAL_ERROR("APPLIANCE_INTERNAL_ERROR"),
    VTEP_DHCP_NOT_SUPPORTED("VTEP_DHCP_NOT_SUPPORTED"),
    UNSUPPORTED_HOST_SWITCH_PROFILE("UNSUPPORTED_HOST_SWITCH_PROFILE"),
    UPLINK_HOST_SWITCH_PROFILE_NOT_SPECIFIED("UPLINK_HOST_SWITCH_PROFILE_NOT_SPECIFIED"),
    HOSTSWITCH_PROFILE_NOT_FOUND("HOSTSWITCH_PROFILE_NOT_FOUND"),
    LLDP_SEND_ENABLED_NOT_SUPPORTED("LLDP_SEND_ENABLED_NOT_SUPPORTED"),
    UNSUPPORTED_NAMED_TEAMING_POLICY("UNSUPPORTED_NAMED_TEAMING_POLICY"),
    LBSRCID_NOT_SUPPORTED_FOR_EDGE_VM("LBSRCID_NOT_SUPPORTED_FOR_EDGE_VM"),
    LACP_NOT_SUPPORTED_FOR_EDGE_VM("LACP_NOT_SUPPORTED_FOR_EDGE_VM"),
    STANDBY_UPLINKS_NOT_SUPPORTED_FOR_EDGE_VM("STANDBY_UPLINKS_NOT_SUPPORTED_FOR_EDGE_VM"),
    MULTIPLE_ACTIVE_UPLINKS_NOT_SUPPORTED_FOR_EDGE("MULTIPLE_ACTIVE_UPLINKS_NOT_SUPPORTED_FOR_EDGE"),
    UNSUPPORTED_LACP_LB_ALGO_FOR_NODE("UNSUPPORTED_LACP_LB_ALGO_FOR_NODE"),
    EDGE_NODE_VERSION_NOT_SUPPORTED("EDGE_NODE_VERSION_NOT_SUPPORTED"),
    NO_PNIC_SPECIFIED_IN_TN("NO_PNIC_SPECIFIED_IN_TN"),
    INVALID_PNIC_DEVICE_NAME("INVALID_PNIC_DEVICE_NAME"),
    UNSUPPORTED_DEFAULT_TEAMING_POLICY("UNSUPPORTED_DEFAULT_TEAMING_POLICY"),
    MPA_DISCONNECTED("MPA_DISCONNECTED"),
    VM_NETWORK_EDIT_PENDING("VM_NETWORK_EDIT_PENDING"),
    VM_RENAME_PENDING("VM_RENAME_PENDING"),
    VM_CONFIG_EDIT_PENDING("VM_CONFIG_EDIT_PENDING"),
    VM_NETWORK_EDIT_FAILED("VM_NETWORK_EDIT_FAILED"),
    VM_RENAME_FAILED("VM_RENAME_FAILED"),
    VM_CONFIG_EDIT_FAILED("VM_CONFIG_EDIT_FAILED"),
    VM_CONFIG_DISCREPANCY("VM_CONFIG_DISCREPANCY"),
    VM_NODE_REFRESH_FAILED("VM_NODE_REFRESH_FAILED"),
    VM_PLACEMENT_REFRESH_FAILED("VM_PLACEMENT_REFRESH_FAILED"),
    NOT_AVAILABLE("NOT_AVAILABLE"),
    PENDING("pending"),
    ORPHANED("orphaned"),
    UNKNOWN("unknown"),
    ERROR("error");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static StateEnum fromValue(String text) {
      for (StateEnum b : StateEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StateEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("state")
  private StateEnum state = null;

  @SerializedName("sub_system_type")
  private String subSystemType = null;

  @SerializedName("failure_message")
  private String failureMessage = null;

  @SerializedName("failure_code")
  private Long failureCode = null;

  @SerializedName("sub_system_id")
  private String subSystemId = null;

   /**
   * URI of backing resource on sub system
   * @return subSystemAddress
  **/
  @Schema(description = "URI of backing resource on sub system")
  public String getSubSystemAddress() {
    return subSystemAddress;
  }

   /**
   * State of configuration on this sub system
   * @return state
  **/
  @Schema(description = "State of configuration on this sub system")
  public StateEnum getState() {
    return state;
  }

   /**
   * Type of backing resource on sub system
   * @return subSystemType
  **/
  @Schema(description = "Type of backing resource on sub system")
  public String getSubSystemType() {
    return subSystemType;
  }

   /**
   * Error message in case of failure
   * @return failureMessage
  **/
  @Schema(description = "Error message in case of failure")
  public String getFailureMessage() {
    return failureMessage;
  }

   /**
   * Error code
   * @return failureCode
  **/
  @Schema(description = "Error code")
  public Long getFailureCode() {
    return failureCode;
  }

   /**
   * Identifier of backing resource on sub system
   * @return subSystemId
  **/
  @Schema(description = "Identifier of backing resource on sub system")
  public String getSubSystemId() {
    return subSystemId;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConfigurationStateElement configurationStateElement = (ConfigurationStateElement) o;
    return Objects.equals(this.subSystemAddress, configurationStateElement.subSystemAddress) &&
        Objects.equals(this.state, configurationStateElement.state) &&
        Objects.equals(this.subSystemType, configurationStateElement.subSystemType) &&
        Objects.equals(this.failureMessage, configurationStateElement.failureMessage) &&
        Objects.equals(this.failureCode, configurationStateElement.failureCode) &&
        Objects.equals(this.subSystemId, configurationStateElement.subSystemId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(subSystemAddress, state, subSystemType, failureMessage, failureCode, subSystemId);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConfigurationStateElement {\n");
    
    sb.append("    subSystemAddress: ").append(toIndentedString(subSystemAddress)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    subSystemType: ").append(toIndentedString(subSystemType)).append("\n");
    sb.append("    failureMessage: ").append(toIndentedString(failureMessage)).append("\n");
    sb.append("    failureCode: ").append(toIndentedString(failureCode)).append("\n");
    sb.append("    subSystemId: ").append(toIndentedString(subSystemId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
