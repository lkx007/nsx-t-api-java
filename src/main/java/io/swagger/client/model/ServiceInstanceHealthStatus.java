/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * Health Status of a third party partner VM.
 */
@Schema(description = "Health Status of a third party partner VM.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class ServiceInstanceHealthStatus {
  @SerializedName("is_sva_mux_incompatible")
  private Boolean isSvaMuxIncompatible = null;

  @SerializedName("connect_timestamp")
  private String connectTimestamp = null;

  @SerializedName("mux_incompatible_version")
  private String muxIncompatibleVersion = null;

  @SerializedName("solution_version")
  private String solutionVersion = null;

  @SerializedName("sync_time")
  private String syncTime = null;

  @SerializedName("solution_status")
  private String solutionStatus = null;

  @SerializedName("is_stale")
  private Boolean isStale = null;

  @SerializedName("mux_connected_status")
  private String muxConnectedStatus = null;

  public ServiceInstanceHealthStatus isSvaMuxIncompatible(Boolean isSvaMuxIncompatible) {
    this.isSvaMuxIncompatible = isSvaMuxIncompatible;
    return this;
  }

   /**
   * Protocol version might be different in both Mux and SVA.
   * @return isSvaMuxIncompatible
  **/
  @Schema(description = "Protocol version might be different in both Mux and SVA.")
  public Boolean isIsSvaMuxIncompatible() {
    return isSvaMuxIncompatible;
  }

  public void setIsSvaMuxIncompatible(Boolean isSvaMuxIncompatible) {
    this.isSvaMuxIncompatible = isSvaMuxIncompatible;
  }

  public ServiceInstanceHealthStatus connectTimestamp(String connectTimestamp) {
    this.connectTimestamp = connectTimestamp;
    return this;
  }

   /**
   * Latest timestamp when mux was connected to SVA.
   * @return connectTimestamp
  **/
  @Schema(description = "Latest timestamp when mux was connected to SVA.")
  public String getConnectTimestamp() {
    return connectTimestamp;
  }

  public void setConnectTimestamp(String connectTimestamp) {
    this.connectTimestamp = connectTimestamp;
  }

  public ServiceInstanceHealthStatus muxIncompatibleVersion(String muxIncompatibleVersion) {
    this.muxIncompatibleVersion = muxIncompatibleVersion;
    return this;
  }

   /**
   * Mux version when Mux and SVA are incompatible
   * @return muxIncompatibleVersion
  **/
  @Schema(description = "Mux version when Mux and SVA are incompatible")
  public String getMuxIncompatibleVersion() {
    return muxIncompatibleVersion;
  }

  public void setMuxIncompatibleVersion(String muxIncompatibleVersion) {
    this.muxIncompatibleVersion = muxIncompatibleVersion;
  }

  public ServiceInstanceHealthStatus solutionVersion(String solutionVersion) {
    this.solutionVersion = solutionVersion;
    return this;
  }

   /**
   * Version of third party partner solution application.
   * @return solutionVersion
  **/
  @Schema(description = "Version of third party partner solution application.")
  public String getSolutionVersion() {
    return solutionVersion;
  }

  public void setSolutionVersion(String solutionVersion) {
    this.solutionVersion = solutionVersion;
  }

  public ServiceInstanceHealthStatus syncTime(String syncTime) {
    this.syncTime = syncTime;
    return this;
  }

   /**
   * Latest timestamp when health status is received.
   * @return syncTime
  **/
  @Schema(description = "Latest timestamp when health status is received.")
  public String getSyncTime() {
    return syncTime;
  }

  public void setSyncTime(String syncTime) {
    this.syncTime = syncTime;
  }

  public ServiceInstanceHealthStatus solutionStatus(String solutionStatus) {
    this.solutionStatus = solutionStatus;
    return this;
  }

   /**
   * Status of third party partner solution application.
   * @return solutionStatus
  **/
  @Schema(description = "Status of third party partner solution application.")
  public String getSolutionStatus() {
    return solutionStatus;
  }

  public void setSolutionStatus(String solutionStatus) {
    this.solutionStatus = solutionStatus;
  }

   /**
   * The parameter is set if the last received health status is older than the predefined interval. 
   * @return isStale
  **/
  @Schema(description = "The parameter is set if the last received health status is older than the predefined interval. ")
  public Boolean isIsStale() {
    return isStale;
  }

  public ServiceInstanceHealthStatus muxConnectedStatus(String muxConnectedStatus) {
    this.muxConnectedStatus = muxConnectedStatus;
    return this;
  }

   /**
   * Status of multiplexer which forwards the events from guest virtual machines to the partner appliance.
   * @return muxConnectedStatus
  **/
  @Schema(description = "Status of multiplexer which forwards the events from guest virtual machines to the partner appliance.")
  public String getMuxConnectedStatus() {
    return muxConnectedStatus;
  }

  public void setMuxConnectedStatus(String muxConnectedStatus) {
    this.muxConnectedStatus = muxConnectedStatus;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServiceInstanceHealthStatus serviceInstanceHealthStatus = (ServiceInstanceHealthStatus) o;
    return Objects.equals(this.isSvaMuxIncompatible, serviceInstanceHealthStatus.isSvaMuxIncompatible) &&
        Objects.equals(this.connectTimestamp, serviceInstanceHealthStatus.connectTimestamp) &&
        Objects.equals(this.muxIncompatibleVersion, serviceInstanceHealthStatus.muxIncompatibleVersion) &&
        Objects.equals(this.solutionVersion, serviceInstanceHealthStatus.solutionVersion) &&
        Objects.equals(this.syncTime, serviceInstanceHealthStatus.syncTime) &&
        Objects.equals(this.solutionStatus, serviceInstanceHealthStatus.solutionStatus) &&
        Objects.equals(this.isStale, serviceInstanceHealthStatus.isStale) &&
        Objects.equals(this.muxConnectedStatus, serviceInstanceHealthStatus.muxConnectedStatus);
  }

  @Override
  public int hashCode() {
    return Objects.hash(isSvaMuxIncompatible, connectTimestamp, muxIncompatibleVersion, solutionVersion, syncTime, solutionStatus, isStale, muxConnectedStatus);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServiceInstanceHealthStatus {\n");
    
    sb.append("    isSvaMuxIncompatible: ").append(toIndentedString(isSvaMuxIncompatible)).append("\n");
    sb.append("    connectTimestamp: ").append(toIndentedString(connectTimestamp)).append("\n");
    sb.append("    muxIncompatibleVersion: ").append(toIndentedString(muxIncompatibleVersion)).append("\n");
    sb.append("    solutionVersion: ").append(toIndentedString(solutionVersion)).append("\n");
    sb.append("    syncTime: ").append(toIndentedString(syncTime)).append("\n");
    sb.append("    solutionStatus: ").append(toIndentedString(solutionStatus)).append("\n");
    sb.append("    isStale: ").append(toIndentedString(isStale)).append("\n");
    sb.append("    muxConnectedStatus: ").append(toIndentedString(muxConnectedStatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
