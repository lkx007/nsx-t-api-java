/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.FileTransferAuthenticationScheme;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * Protocol to transfer backup file to remote server
 */
@Schema(description = "Protocol to transfer backup file to remote server")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class FileTransferProtocol {
  /**
   * Protocol name
   */
  @JsonAdapter(ProtocolNameEnum.Adapter.class)
  public enum ProtocolNameEnum {
    SFTP("sftp");

    private String value;

    ProtocolNameEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ProtocolNameEnum fromValue(String text) {
      for (ProtocolNameEnum b : ProtocolNameEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ProtocolNameEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProtocolNameEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProtocolNameEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ProtocolNameEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("protocol_name")
  private ProtocolNameEnum protocolName = ProtocolNameEnum.SFTP;

  @SerializedName("ssh_fingerprint")
  private String sshFingerprint = null;

  @SerializedName("authentication_scheme")
  private FileTransferAuthenticationScheme authenticationScheme = null;

  public FileTransferProtocol protocolName(ProtocolNameEnum protocolName) {
    this.protocolName = protocolName;
    return this;
  }

   /**
   * Protocol name
   * @return protocolName
  **/
  @Schema(required = true, description = "Protocol name")
  public ProtocolNameEnum getProtocolName() {
    return protocolName;
  }

  public void setProtocolName(ProtocolNameEnum protocolName) {
    this.protocolName = protocolName;
  }

  public FileTransferProtocol sshFingerprint(String sshFingerprint) {
    this.sshFingerprint = sshFingerprint;
    return this;
  }

   /**
   * The expected SSH fingerprint of the server. If the server&#x27;s fingerprint does not match this fingerprint, the connection will be terminated.  Only ECDSA fingerprints hashed with SHA256 are supported. To obtain the host&#x27;s ssh fingerprint, you should connect via some method other than SSH to obtain this information. You can use one of these commands to view the key&#x27;s fingerprint: 1. ssh-keygen -l -E sha256 -f ssh_host_ecdsa_key.pub 2. awk &#x27;{print $2}&#x27; ssh_host_ecdsa_key.pub | base64 -d | sha256sum -b |    sed &#x27;s/ .*$//&#x27; | xxd -r -p | base64 | sed &#x27;s/.//44g&#x27; |    awk &#x27;{print \&quot;SHA256:\&quot;$1}&#x27; 
   * @return sshFingerprint
  **/
  @Schema(required = true, description = "The expected SSH fingerprint of the server. If the server's fingerprint does not match this fingerprint, the connection will be terminated.  Only ECDSA fingerprints hashed with SHA256 are supported. To obtain the host's ssh fingerprint, you should connect via some method other than SSH to obtain this information. You can use one of these commands to view the key's fingerprint: 1. ssh-keygen -l -E sha256 -f ssh_host_ecdsa_key.pub 2. awk '{print $2}' ssh_host_ecdsa_key.pub | base64 -d | sha256sum -b |    sed 's/ .*$//' | xxd -r -p | base64 | sed 's/.//44g' |    awk '{print \"SHA256:\"$1}' ")
  public String getSshFingerprint() {
    return sshFingerprint;
  }

  public void setSshFingerprint(String sshFingerprint) {
    this.sshFingerprint = sshFingerprint;
  }

  public FileTransferProtocol authenticationScheme(FileTransferAuthenticationScheme authenticationScheme) {
    this.authenticationScheme = authenticationScheme;
    return this;
  }

   /**
   * Get authenticationScheme
   * @return authenticationScheme
  **/
  @Schema(required = true, description = "")
  public FileTransferAuthenticationScheme getAuthenticationScheme() {
    return authenticationScheme;
  }

  public void setAuthenticationScheme(FileTransferAuthenticationScheme authenticationScheme) {
    this.authenticationScheme = authenticationScheme;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FileTransferProtocol fileTransferProtocol = (FileTransferProtocol) o;
    return Objects.equals(this.protocolName, fileTransferProtocol.protocolName) &&
        Objects.equals(this.sshFingerprint, fileTransferProtocol.sshFingerprint) &&
        Objects.equals(this.authenticationScheme, fileTransferProtocol.authenticationScheme);
  }

  @Override
  public int hashCode() {
    return Objects.hash(protocolName, sshFingerprint, authenticationScheme);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FileTransferProtocol {\n");
    
    sb.append("    protocolName: ").append(toIndentedString(protocolName)).append("\n");
    sb.append("    sshFingerprint: ").append(toIndentedString(sshFingerprint)).append("\n");
    sb.append("    authenticationScheme: ").append(toIndentedString(authenticationScheme)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
