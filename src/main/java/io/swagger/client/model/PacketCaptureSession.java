/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.ManagedResource;
import io.swagger.client.model.PacketCaptureRequest;
import io.swagger.client.model.Tag;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.List;
/**
 * Packet capture session information.
 */
@Schema(description = "Packet capture session information.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class PacketCaptureSession extends ManagedResource {
  @SerializedName("sessionid")
  private String sessionid = null;

  @SerializedName("filelocation")
  private String filelocation = null;

  @SerializedName("filesize")
  private Integer filesize = null;

  @SerializedName("sessionname")
  private String sessionname = null;

  @SerializedName("errormsg")
  private String errormsg = null;

  @SerializedName("endtime")
  private Long endtime = null;

  @SerializedName("request")
  private PacketCaptureRequest request = null;

  @SerializedName("starttime")
  private Long starttime = null;

  /**
   * Packet capture session status.
   */
  @JsonAdapter(SessionstatusEnum.Adapter.class)
  public enum SessionstatusEnum {
    CREATED("CREATED"),
    STARTED("STARTED"),
    STOPPED("STOPPED"),
    FINISHED("FINISHED"),
    ERROR("ERROR");

    private String value;

    SessionstatusEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static SessionstatusEnum fromValue(String text) {
      for (SessionstatusEnum b : SessionstatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<SessionstatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SessionstatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SessionstatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return SessionstatusEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("sessionstatus")
  private SessionstatusEnum sessionstatus = null;

  public PacketCaptureSession sessionid(String sessionid) {
    this.sessionid = sessionid;
    return this;
  }

   /**
   * Packet capture session id.
   * @return sessionid
  **/
  @Schema(required = true, description = "Packet capture session id.")
  public String getSessionid() {
    return sessionid;
  }

  public void setSessionid(String sessionid) {
    this.sessionid = sessionid;
  }

  public PacketCaptureSession filelocation(String filelocation) {
    this.filelocation = filelocation;
    return this;
  }

   /**
   * Packet capture file location.
   * @return filelocation
  **/
  @Schema(description = "Packet capture file location.")
  public String getFilelocation() {
    return filelocation;
  }

  public void setFilelocation(String filelocation) {
    this.filelocation = filelocation;
  }

  public PacketCaptureSession filesize(Integer filesize) {
    this.filesize = filesize;
    return this;
  }

   /**
   * Packet capture file Size in bytes.
   * @return filesize
  **/
  @Schema(description = "Packet capture file Size in bytes.")
  public Integer getFilesize() {
    return filesize;
  }

  public void setFilesize(Integer filesize) {
    this.filesize = filesize;
  }

  public PacketCaptureSession sessionname(String sessionname) {
    this.sessionname = sessionname;
    return this;
  }

   /**
   * Packet capture session name.
   * @return sessionname
  **/
  @Schema(description = "Packet capture session name.")
  public String getSessionname() {
    return sessionname;
  }

  public void setSessionname(String sessionname) {
    this.sessionname = sessionname;
  }

  public PacketCaptureSession errormsg(String errormsg) {
    this.errormsg = errormsg;
    return this;
  }

   /**
   * Error messasge in capture.
   * @return errormsg
  **/
  @Schema(description = "Error messasge in capture.")
  public String getErrormsg() {
    return errormsg;
  }

  public void setErrormsg(String errormsg) {
    this.errormsg = errormsg;
  }

  public PacketCaptureSession endtime(Long endtime) {
    this.endtime = endtime;
    return this;
  }

   /**
   * Timestamp when session was stopped in epoch millisecond.
   * @return endtime
  **/
  @Schema(description = "Timestamp when session was stopped in epoch millisecond.")
  public Long getEndtime() {
    return endtime;
  }

  public void setEndtime(Long endtime) {
    this.endtime = endtime;
  }

  public PacketCaptureSession request(PacketCaptureRequest request) {
    this.request = request;
    return this;
  }

   /**
   * Get request
   * @return request
  **/
  @Schema(required = true, description = "")
  public PacketCaptureRequest getRequest() {
    return request;
  }

  public void setRequest(PacketCaptureRequest request) {
    this.request = request;
  }

  public PacketCaptureSession starttime(Long starttime) {
    this.starttime = starttime;
    return this;
  }

   /**
   * Timestamp when session was created in epoch millisecond.
   * @return starttime
  **/
  @Schema(description = "Timestamp when session was created in epoch millisecond.")
  public Long getStarttime() {
    return starttime;
  }

  public void setStarttime(Long starttime) {
    this.starttime = starttime;
  }

  public PacketCaptureSession sessionstatus(SessionstatusEnum sessionstatus) {
    this.sessionstatus = sessionstatus;
    return this;
  }

   /**
   * Packet capture session status.
   * @return sessionstatus
  **/
  @Schema(required = true, description = "Packet capture session status.")
  public SessionstatusEnum getSessionstatus() {
    return sessionstatus;
  }

  public void setSessionstatus(SessionstatusEnum sessionstatus) {
    this.sessionstatus = sessionstatus;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PacketCaptureSession packetCaptureSession = (PacketCaptureSession) o;
    return Objects.equals(this.sessionid, packetCaptureSession.sessionid) &&
        Objects.equals(this.filelocation, packetCaptureSession.filelocation) &&
        Objects.equals(this.filesize, packetCaptureSession.filesize) &&
        Objects.equals(this.sessionname, packetCaptureSession.sessionname) &&
        Objects.equals(this.errormsg, packetCaptureSession.errormsg) &&
        Objects.equals(this.endtime, packetCaptureSession.endtime) &&
        Objects.equals(this.request, packetCaptureSession.request) &&
        Objects.equals(this.starttime, packetCaptureSession.starttime) &&
        Objects.equals(this.sessionstatus, packetCaptureSession.sessionstatus) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sessionid, filelocation, filesize, sessionname, errormsg, endtime, request, starttime, sessionstatus, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PacketCaptureSession {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    sessionid: ").append(toIndentedString(sessionid)).append("\n");
    sb.append("    filelocation: ").append(toIndentedString(filelocation)).append("\n");
    sb.append("    filesize: ").append(toIndentedString(filesize)).append("\n");
    sb.append("    sessionname: ").append(toIndentedString(sessionname)).append("\n");
    sb.append("    errormsg: ").append(toIndentedString(errormsg)).append("\n");
    sb.append("    endtime: ").append(toIndentedString(endtime)).append("\n");
    sb.append("    request: ").append(toIndentedString(request)).append("\n");
    sb.append("    starttime: ").append(toIndentedString(starttime)).append("\n");
    sb.append("    sessionstatus: ").append(toIndentedString(sessionstatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
