/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.Label;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * Represents a reference to a widget that is held by a container or a multi-widget or a View.
 */
@Schema(description = "Represents a reference to a widget that is held by a container or a multi-widget or a View.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class WidgetItem {
  /**
   * Aligns widget either left or right.
   */
  @JsonAdapter(AlignmentEnum.Adapter.class)
  public enum AlignmentEnum {
    LEFT("LEFT"),
    RIGHT("RIGHT");

    private String value;

    AlignmentEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static AlignmentEnum fromValue(String text) {
      for (AlignmentEnum b : AlignmentEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<AlignmentEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AlignmentEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AlignmentEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return AlignmentEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("alignment")
  private AlignmentEnum alignment = AlignmentEnum.LEFT;

  @SerializedName("separator")
  private Boolean separator = false;

  @SerializedName("widget_id")
  private String widgetId = null;

  @SerializedName("weight")
  private Integer weight = 10000;

  @SerializedName("label")
  private Label label = null;

  public WidgetItem alignment(AlignmentEnum alignment) {
    this.alignment = alignment;
    return this;
  }

   /**
   * Aligns widget either left or right.
   * @return alignment
  **/
  @Schema(description = "Aligns widget either left or right.")
  public AlignmentEnum getAlignment() {
    return alignment;
  }

  public void setAlignment(AlignmentEnum alignment) {
    this.alignment = alignment;
  }

  public WidgetItem separator(Boolean separator) {
    this.separator = separator;
    return this;
  }

   /**
   * If true, separates this widget in a container.
   * @return separator
  **/
  @Schema(description = "If true, separates this widget in a container.")
  public Boolean isSeparator() {
    return separator;
  }

  public void setSeparator(Boolean separator) {
    this.separator = separator;
  }

  public WidgetItem widgetId(String widgetId) {
    this.widgetId = widgetId;
    return this;
  }

   /**
   * Id of the widget configuration that is held by a multi-widget or a container or a view.
   * @return widgetId
  **/
  @Schema(required = true, description = "Id of the widget configuration that is held by a multi-widget or a container or a view.")
  public String getWidgetId() {
    return widgetId;
  }

  public void setWidgetId(String widgetId) {
    this.widgetId = widgetId;
  }

  public WidgetItem weight(Integer weight) {
    this.weight = weight;
    return this;
  }

   /**
   * Determines placement of widget or container relative to other widgets and containers. The lower the weight, the higher it is in the placement order.
   * @return weight
  **/
  @Schema(description = "Determines placement of widget or container relative to other widgets and containers. The lower the weight, the higher it is in the placement order.")
  public Integer getWeight() {
    return weight;
  }

  public void setWeight(Integer weight) {
    this.weight = weight;
  }

  public WidgetItem label(Label label) {
    this.label = label;
    return this;
  }

   /**
   * Get label
   * @return label
  **/
  @Schema(description = "")
  public Label getLabel() {
    return label;
  }

  public void setLabel(Label label) {
    this.label = label;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WidgetItem widgetItem = (WidgetItem) o;
    return Objects.equals(this.alignment, widgetItem.alignment) &&
        Objects.equals(this.separator, widgetItem.separator) &&
        Objects.equals(this.widgetId, widgetItem.widgetId) &&
        Objects.equals(this.weight, widgetItem.weight) &&
        Objects.equals(this.label, widgetItem.label);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alignment, separator, widgetId, weight, label);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WidgetItem {\n");
    
    sb.append("    alignment: ").append(toIndentedString(alignment)).append("\n");
    sb.append("    separator: ").append(toIndentedString(separator)).append("\n");
    sb.append("    widgetId: ").append(toIndentedString(widgetId)).append("\n");
    sb.append("    weight: ").append(toIndentedString(weight)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
