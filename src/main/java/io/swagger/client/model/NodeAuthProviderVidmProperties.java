/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * Node AAA provider vIDM properties
 */
@Schema(description = "Node AAA provider vIDM properties")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class NodeAuthProviderVidmProperties {
  @SerializedName("client_secret")
  private String clientSecret = null;

  @SerializedName("host_name")
  private String hostName = null;

  @SerializedName("client_id")
  private String clientId = null;

  @SerializedName("vidm_enable")
  private Boolean vidmEnable = null;

  @SerializedName("lb_enable")
  private Boolean lbEnable = null;

  @SerializedName("thumbprint")
  private String thumbprint = null;

  @SerializedName("node_host_name")
  private String nodeHostName = null;

  public NodeAuthProviderVidmProperties clientSecret(String clientSecret) {
    this.clientSecret = clientSecret;
    return this;
  }

   /**
   * vIDM client secret
   * @return clientSecret
  **/
  @Schema(description = "vIDM client secret")
  public String getClientSecret() {
    return clientSecret;
  }

  public void setClientSecret(String clientSecret) {
    this.clientSecret = clientSecret;
  }

  public NodeAuthProviderVidmProperties hostName(String hostName) {
    this.hostName = hostName;
    return this;
  }

   /**
   * Fully Qualified Domain Name(FQDN) of vIDM
   * @return hostName
  **/
  @Schema(required = true, description = "Fully Qualified Domain Name(FQDN) of vIDM")
  public String getHostName() {
    return hostName;
  }

  public void setHostName(String hostName) {
    this.hostName = hostName;
  }

  public NodeAuthProviderVidmProperties clientId(String clientId) {
    this.clientId = clientId;
    return this;
  }

   /**
   * vIDM client id
   * @return clientId
  **/
  @Schema(required = true, description = "vIDM client id")
  public String getClientId() {
    return clientId;
  }

  public void setClientId(String clientId) {
    this.clientId = clientId;
  }

  public NodeAuthProviderVidmProperties vidmEnable(Boolean vidmEnable) {
    this.vidmEnable = vidmEnable;
    return this;
  }

   /**
   * vIDM enable flag
   * @return vidmEnable
  **/
  @Schema(description = "vIDM enable flag")
  public Boolean isVidmEnable() {
    return vidmEnable;
  }

  public void setVidmEnable(Boolean vidmEnable) {
    this.vidmEnable = vidmEnable;
  }

  public NodeAuthProviderVidmProperties lbEnable(Boolean lbEnable) {
    this.lbEnable = lbEnable;
    return this;
  }

   /**
   * Load Balancer enable flag
   * @return lbEnable
  **/
  @Schema(description = "Load Balancer enable flag")
  public Boolean isLbEnable() {
    return lbEnable;
  }

  public void setLbEnable(Boolean lbEnable) {
    this.lbEnable = lbEnable;
  }

  public NodeAuthProviderVidmProperties thumbprint(String thumbprint) {
    this.thumbprint = thumbprint;
    return this;
  }

   /**
   * Hexadecimal SHA256 hash of the vIDM server&#x27;s X.509 certificate
   * @return thumbprint
  **/
  @Schema(required = true, description = "Hexadecimal SHA256 hash of the vIDM server's X.509 certificate")
  public String getThumbprint() {
    return thumbprint;
  }

  public void setThumbprint(String thumbprint) {
    this.thumbprint = thumbprint;
  }

  public NodeAuthProviderVidmProperties nodeHostName(String nodeHostName) {
    this.nodeHostName = nodeHostName;
    return this;
  }

   /**
   * host name to use when creating the redirect URL for clients to follow after authenticating to vIDM
   * @return nodeHostName
  **/
  @Schema(required = true, description = "host name to use when creating the redirect URL for clients to follow after authenticating to vIDM")
  public String getNodeHostName() {
    return nodeHostName;
  }

  public void setNodeHostName(String nodeHostName) {
    this.nodeHostName = nodeHostName;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NodeAuthProviderVidmProperties nodeAuthProviderVidmProperties = (NodeAuthProviderVidmProperties) o;
    return Objects.equals(this.clientSecret, nodeAuthProviderVidmProperties.clientSecret) &&
        Objects.equals(this.hostName, nodeAuthProviderVidmProperties.hostName) &&
        Objects.equals(this.clientId, nodeAuthProviderVidmProperties.clientId) &&
        Objects.equals(this.vidmEnable, nodeAuthProviderVidmProperties.vidmEnable) &&
        Objects.equals(this.lbEnable, nodeAuthProviderVidmProperties.lbEnable) &&
        Objects.equals(this.thumbprint, nodeAuthProviderVidmProperties.thumbprint) &&
        Objects.equals(this.nodeHostName, nodeAuthProviderVidmProperties.nodeHostName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clientSecret, hostName, clientId, vidmEnable, lbEnable, thumbprint, nodeHostName);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NodeAuthProviderVidmProperties {\n");
    
    sb.append("    clientSecret: ").append(toIndentedString(clientSecret)).append("\n");
    sb.append("    hostName: ").append(toIndentedString(hostName)).append("\n");
    sb.append("    clientId: ").append(toIndentedString(clientId)).append("\n");
    sb.append("    vidmEnable: ").append(toIndentedString(vidmEnable)).append("\n");
    sb.append("    lbEnable: ").append(toIndentedString(lbEnable)).append("\n");
    sb.append("    thumbprint: ").append(toIndentedString(thumbprint)).append("\n");
    sb.append("    nodeHostName: ").append(toIndentedString(nodeHostName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
