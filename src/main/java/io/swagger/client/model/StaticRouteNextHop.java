/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.ResourceReference;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * StaticRouteNextHop
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class StaticRouteNextHop {
  /**
   * Action to be taken on matching packets for NULL routes.
   */
  @JsonAdapter(BlackholeActionEnum.Adapter.class)
  public enum BlackholeActionEnum {
    DISCARD("DISCARD");

    private String value;

    BlackholeActionEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static BlackholeActionEnum fromValue(String text) {
      for (BlackholeActionEnum b : BlackholeActionEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<BlackholeActionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BlackholeActionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BlackholeActionEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return BlackholeActionEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("blackhole_action")
  private BlackholeActionEnum blackholeAction = null;

  @SerializedName("administrative_distance")
  private Long administrativeDistance = 1l;

  @SerializedName("ip_address")
  private String ipAddress = null;

  @SerializedName("bfd_enabled")
  private Boolean bfdEnabled = false;

  @SerializedName("logical_router_port_id")
  private ResourceReference logicalRouterPortId = null;

   /**
   * Action to be taken on matching packets for NULL routes.
   * @return blackholeAction
  **/
  @Schema(description = "Action to be taken on matching packets for NULL routes.")
  public BlackholeActionEnum getBlackholeAction() {
    return blackholeAction;
  }

  public StaticRouteNextHop administrativeDistance(Long administrativeDistance) {
    this.administrativeDistance = administrativeDistance;
    return this;
  }

   /**
   * Administrative Distance for the next hop IP
   * minimum: 1
   * maximum: 255
   * @return administrativeDistance
  **/
  @Schema(description = "Administrative Distance for the next hop IP")
  public Long getAdministrativeDistance() {
    return administrativeDistance;
  }

  public void setAdministrativeDistance(Long administrativeDistance) {
    this.administrativeDistance = administrativeDistance;
  }

  public StaticRouteNextHop ipAddress(String ipAddress) {
    this.ipAddress = ipAddress;
    return this;
  }

   /**
   * Next Hop IP
   * @return ipAddress
  **/
  @Schema(description = "Next Hop IP")
  public String getIpAddress() {
    return ipAddress;
  }

  public void setIpAddress(String ipAddress) {
    this.ipAddress = ipAddress;
  }

   /**
   * Status of bfd for this next hop where bfd_enabled &#x3D; true indicate bfd is enabled for this next hop and bfd_enabled &#x3D; false indicate bfd peer is disabled or not configured for this next hop.
   * @return bfdEnabled
  **/
  @Schema(description = "Status of bfd for this next hop where bfd_enabled = true indicate bfd is enabled for this next hop and bfd_enabled = false indicate bfd peer is disabled or not configured for this next hop.")
  public Boolean isBfdEnabled() {
    return bfdEnabled;
  }

  public StaticRouteNextHop logicalRouterPortId(ResourceReference logicalRouterPortId) {
    this.logicalRouterPortId = logicalRouterPortId;
    return this;
  }

   /**
   * Get logicalRouterPortId
   * @return logicalRouterPortId
  **/
  @Schema(description = "")
  public ResourceReference getLogicalRouterPortId() {
    return logicalRouterPortId;
  }

  public void setLogicalRouterPortId(ResourceReference logicalRouterPortId) {
    this.logicalRouterPortId = logicalRouterPortId;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StaticRouteNextHop staticRouteNextHop = (StaticRouteNextHop) o;
    return Objects.equals(this.blackholeAction, staticRouteNextHop.blackholeAction) &&
        Objects.equals(this.administrativeDistance, staticRouteNextHop.administrativeDistance) &&
        Objects.equals(this.ipAddress, staticRouteNextHop.ipAddress) &&
        Objects.equals(this.bfdEnabled, staticRouteNextHop.bfdEnabled) &&
        Objects.equals(this.logicalRouterPortId, staticRouteNextHop.logicalRouterPortId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(blackholeAction, administrativeDistance, ipAddress, bfdEnabled, logicalRouterPortId);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StaticRouteNextHop {\n");
    
    sb.append("    blackholeAction: ").append(toIndentedString(blackholeAction)).append("\n");
    sb.append("    administrativeDistance: ").append(toIndentedString(administrativeDistance)).append("\n");
    sb.append("    ipAddress: ").append(toIndentedString(ipAddress)).append("\n");
    sb.append("    bfdEnabled: ").append(toIndentedString(bfdEnabled)).append("\n");
    sb.append("    logicalRouterPortId: ").append(toIndentedString(logicalRouterPortId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
