/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.BatchRequestItem;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * A set of operations to be performed in a single batch
 */
@Schema(description = "A set of operations to be performed in a single batch")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class BatchRequest {
  @SerializedName("requests")
  private List<BatchRequestItem> requests = null;

  @SerializedName("continue_on_error")
  private Boolean continueOnError = true;

  public BatchRequest requests(List<BatchRequestItem> requests) {
    this.requests = requests;
    return this;
  }

  public BatchRequest addRequestsItem(BatchRequestItem requestsItem) {
    if (this.requests == null) {
      this.requests = new ArrayList<BatchRequestItem>();
    }
    this.requests.add(requestsItem);
    return this;
  }

   /**
   * Get requests
   * @return requests
  **/
  @Schema(description = "")
  public List<BatchRequestItem> getRequests() {
    return requests;
  }

  public void setRequests(List<BatchRequestItem> requests) {
    this.requests = requests;
  }

  public BatchRequest continueOnError(Boolean continueOnError) {
    this.continueOnError = continueOnError;
    return this;
  }

   /**
   * Flag to decide if we will continue processing subsequent requests in case of current error for atomic &#x3D; false.
   * @return continueOnError
  **/
  @Schema(description = "Flag to decide if we will continue processing subsequent requests in case of current error for atomic = false.")
  public Boolean isContinueOnError() {
    return continueOnError;
  }

  public void setContinueOnError(Boolean continueOnError) {
    this.continueOnError = continueOnError;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BatchRequest batchRequest = (BatchRequest) o;
    return Objects.equals(this.requests, batchRequest.requests) &&
        Objects.equals(this.continueOnError, batchRequest.continueOnError);
  }

  @Override
  public int hashCode() {
    return Objects.hash(requests, continueOnError);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BatchRequest {\n");
    
    sb.append("    requests: ").append(toIndentedString(requests)).append("\n");
    sb.append("    continueOnError: ").append(toIndentedString(continueOnError)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
