/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.CsvRecord;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * CSV record for a pre/post-upgrade check
 */
@Schema(description = "CSV record for a pre/post-upgrade check")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class UpgradeCheckCsvRecord extends CsvRecord {
  /**
   * Status of the pre/post-upgrade check
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    SUCCESS("SUCCESS"),
    FAILURE("FAILURE"),
    WARNING("WARNING");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static StatusEnum fromValue(String text) {
      for (StatusEnum b : StatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StatusEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("status")
  private StatusEnum status = null;

  @SerializedName("check_description")
  private String checkDescription = null;

  @SerializedName("failure_messages")
  private String failureMessages = null;

  @SerializedName("check_name")
  private String checkName = null;

  @SerializedName("upgrade_unit_id")
  private String upgradeUnitId = null;

  @SerializedName("upgrade_unit_metadata")
  private String upgradeUnitMetadata = null;

  @SerializedName("upgrade_unit_type")
  private String upgradeUnitType = null;

   /**
   * Status of the pre/post-upgrade check
   * @return status
  **/
  @Schema(description = "Status of the pre/post-upgrade check")
  public StatusEnum getStatus() {
    return status;
  }

  public UpgradeCheckCsvRecord checkDescription(String checkDescription) {
    this.checkDescription = checkDescription;
    return this;
  }

   /**
   * Description of the pre/post-upgrade check
   * @return checkDescription
  **/
  @Schema(description = "Description of the pre/post-upgrade check")
  public String getCheckDescription() {
    return checkDescription;
  }

  public void setCheckDescription(String checkDescription) {
    this.checkDescription = checkDescription;
  }

   /**
   * Space-separated list of failure messages
   * @return failureMessages
  **/
  @Schema(description = "Space-separated list of failure messages")
  public String getFailureMessages() {
    return failureMessages;
  }

  public UpgradeCheckCsvRecord checkName(String checkName) {
    this.checkName = checkName;
    return this;
  }

   /**
   * Display name of the pre/post-upgrade check
   * @return checkName
  **/
  @Schema(required = true, description = "Display name of the pre/post-upgrade check")
  public String getCheckName() {
    return checkName;
  }

  public void setCheckName(String checkName) {
    this.checkName = checkName;
  }

   /**
   * Identifier of the upgrade unit
   * @return upgradeUnitId
  **/
  @Schema(description = "Identifier of the upgrade unit")
  public String getUpgradeUnitId() {
    return upgradeUnitId;
  }

   /**
   * Meta-data of the upgrade-unit
   * @return upgradeUnitMetadata
  **/
  @Schema(description = "Meta-data of the upgrade-unit")
  public String getUpgradeUnitMetadata() {
    return upgradeUnitMetadata;
  }

  public UpgradeCheckCsvRecord upgradeUnitType(String upgradeUnitType) {
    this.upgradeUnitType = upgradeUnitType;
    return this;
  }

   /**
   * Component type of the upgrade unit
   * @return upgradeUnitType
  **/
  @Schema(required = true, description = "Component type of the upgrade unit")
  public String getUpgradeUnitType() {
    return upgradeUnitType;
  }

  public void setUpgradeUnitType(String upgradeUnitType) {
    this.upgradeUnitType = upgradeUnitType;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpgradeCheckCsvRecord upgradeCheckCsvRecord = (UpgradeCheckCsvRecord) o;
    return Objects.equals(this.status, upgradeCheckCsvRecord.status) &&
        Objects.equals(this.checkDescription, upgradeCheckCsvRecord.checkDescription) &&
        Objects.equals(this.failureMessages, upgradeCheckCsvRecord.failureMessages) &&
        Objects.equals(this.checkName, upgradeCheckCsvRecord.checkName) &&
        Objects.equals(this.upgradeUnitId, upgradeCheckCsvRecord.upgradeUnitId) &&
        Objects.equals(this.upgradeUnitMetadata, upgradeCheckCsvRecord.upgradeUnitMetadata) &&
        Objects.equals(this.upgradeUnitType, upgradeCheckCsvRecord.upgradeUnitType) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(status, checkDescription, failureMessages, checkName, upgradeUnitId, upgradeUnitMetadata, upgradeUnitType, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpgradeCheckCsvRecord {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    checkDescription: ").append(toIndentedString(checkDescription)).append("\n");
    sb.append("    failureMessages: ").append(toIndentedString(failureMessages)).append("\n");
    sb.append("    checkName: ").append(toIndentedString(checkName)).append("\n");
    sb.append("    upgradeUnitId: ").append(toIndentedString(upgradeUnitId)).append("\n");
    sb.append("    upgradeUnitMetadata: ").append(toIndentedString(upgradeUnitMetadata)).append("\n");
    sb.append("    upgradeUnitType: ").append(toIndentedString(upgradeUnitType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
