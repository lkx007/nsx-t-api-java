/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.PoolMemberSetting;
import io.swagger.client.model.ResourceReference;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * PoolMemberGroup
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class PoolMemberGroup {
  @SerializedName("grouping_object")
  private ResourceReference groupingObject = null;

  /**
   * Ip revision filter is used to filter IPv4 or IPv6 addresses from the grouping object. If the filter is not specified, both IPv4 and IPv6 addresses would be used as server IPs. The link local and loopback addresses would be always filtered out. 
   */
  @JsonAdapter(IpRevisionFilterEnum.Adapter.class)
  public enum IpRevisionFilterEnum {
    IPV4("IPV4"),
    IPV6("IPV6"),
    IPV4_IPV6("IPV4_IPV6");

    private String value;

    IpRevisionFilterEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static IpRevisionFilterEnum fromValue(String text) {
      for (IpRevisionFilterEnum b : IpRevisionFilterEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<IpRevisionFilterEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IpRevisionFilterEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IpRevisionFilterEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return IpRevisionFilterEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("ip_revision_filter")
  private IpRevisionFilterEnum ipRevisionFilter = IpRevisionFilterEnum.IPV4;

  @SerializedName("max_ip_list_size")
  private Long maxIpListSize = null;

  @SerializedName("port")
  private Integer port = null;

  @SerializedName("customized_members")
  private List<PoolMemberSetting> customizedMembers = null;

  public PoolMemberGroup groupingObject(ResourceReference groupingObject) {
    this.groupingObject = groupingObject;
    return this;
  }

   /**
   * Get groupingObject
   * @return groupingObject
  **/
  @Schema(required = true, description = "")
  public ResourceReference getGroupingObject() {
    return groupingObject;
  }

  public void setGroupingObject(ResourceReference groupingObject) {
    this.groupingObject = groupingObject;
  }

  public PoolMemberGroup ipRevisionFilter(IpRevisionFilterEnum ipRevisionFilter) {
    this.ipRevisionFilter = ipRevisionFilter;
    return this;
  }

   /**
   * Ip revision filter is used to filter IPv4 or IPv6 addresses from the grouping object. If the filter is not specified, both IPv4 and IPv6 addresses would be used as server IPs. The link local and loopback addresses would be always filtered out. 
   * @return ipRevisionFilter
  **/
  @Schema(description = "Ip revision filter is used to filter IPv4 or IPv6 addresses from the grouping object. If the filter is not specified, both IPv4 and IPv6 addresses would be used as server IPs. The link local and loopback addresses would be always filtered out. ")
  public IpRevisionFilterEnum getIpRevisionFilter() {
    return ipRevisionFilter;
  }

  public void setIpRevisionFilter(IpRevisionFilterEnum ipRevisionFilter) {
    this.ipRevisionFilter = ipRevisionFilter;
  }

  public PoolMemberGroup maxIpListSize(Long maxIpListSize) {
    this.maxIpListSize = maxIpListSize;
    return this;
  }

   /**
   * The size is used to define the maximum number of grouping object IP address list. These IP addresses would be used as pool members. If the grouping object includes more than certain number of IP addresses, the redundant parts would be ignored and those IP addresses would not be treated as pool members. If the size is not specified, one member is budgeted for this dynamic pool so that the pool has at least one member even if some other dynamic pools grow beyond the capacity of load balancer service. Other members are picked according to available dynamic capacity. The unused members would be set to DISABLED so that the load balancer system itself is not overloaded during runtime. 
   * minimum: 0
   * maximum: 2147483647
   * @return maxIpListSize
  **/
  @Schema(description = "The size is used to define the maximum number of grouping object IP address list. These IP addresses would be used as pool members. If the grouping object includes more than certain number of IP addresses, the redundant parts would be ignored and those IP addresses would not be treated as pool members. If the size is not specified, one member is budgeted for this dynamic pool so that the pool has at least one member even if some other dynamic pools grow beyond the capacity of load balancer service. Other members are picked according to available dynamic capacity. The unused members would be set to DISABLED so that the load balancer system itself is not overloaded during runtime. ")
  public Long getMaxIpListSize() {
    return maxIpListSize;
  }

  public void setMaxIpListSize(Long maxIpListSize) {
    this.maxIpListSize = maxIpListSize;
  }

  public PoolMemberGroup port(Integer port) {
    this.port = port;
    return this;
  }

   /**
   * If port is specified, all connections will be sent to this port. If unset, the same port the client connected to will be used, it could be overridden by default_pool_member_ports setting in virtual server. The port should not specified for multiple ports case. 
   * minimum: 1
   * maximum: 65535
   * @return port
  **/
  @Schema(description = "If port is specified, all connections will be sent to this port. If unset, the same port the client connected to will be used, it could be overridden by default_pool_member_ports setting in virtual server. The port should not specified for multiple ports case. ")
  public Integer getPort() {
    return port;
  }

  public void setPort(Integer port) {
    this.port = port;
  }

  public PoolMemberGroup customizedMembers(List<PoolMemberSetting> customizedMembers) {
    this.customizedMembers = customizedMembers;
    return this;
  }

  public PoolMemberGroup addCustomizedMembersItem(PoolMemberSetting customizedMembersItem) {
    if (this.customizedMembers == null) {
      this.customizedMembers = new ArrayList<PoolMemberSetting>();
    }
    this.customizedMembers.add(customizedMembersItem);
    return this;
  }

   /**
   * The list is used to show the customized pool member settings. User can only user pool member action API to update the admin state for a specific IP address. 
   * @return customizedMembers
  **/
  @Schema(description = "The list is used to show the customized pool member settings. User can only user pool member action API to update the admin state for a specific IP address. ")
  public List<PoolMemberSetting> getCustomizedMembers() {
    return customizedMembers;
  }

  public void setCustomizedMembers(List<PoolMemberSetting> customizedMembers) {
    this.customizedMembers = customizedMembers;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PoolMemberGroup poolMemberGroup = (PoolMemberGroup) o;
    return Objects.equals(this.groupingObject, poolMemberGroup.groupingObject) &&
        Objects.equals(this.ipRevisionFilter, poolMemberGroup.ipRevisionFilter) &&
        Objects.equals(this.maxIpListSize, poolMemberGroup.maxIpListSize) &&
        Objects.equals(this.port, poolMemberGroup.port) &&
        Objects.equals(this.customizedMembers, poolMemberGroup.customizedMembers);
  }

  @Override
  public int hashCode() {
    return Objects.hash(groupingObject, ipRevisionFilter, maxIpListSize, port, customizedMembers);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PoolMemberGroup {\n");
    
    sb.append("    groupingObject: ").append(toIndentedString(groupingObject)).append("\n");
    sb.append("    ipRevisionFilter: ").append(toIndentedString(ipRevisionFilter)).append("\n");
    sb.append("    maxIpListSize: ").append(toIndentedString(maxIpListSize)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    customizedMembers: ").append(toIndentedString(customizedMembers)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
