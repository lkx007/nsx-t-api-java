/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * Host Node Status
 */
@Schema(description = "Host Node Status")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class HostNodeStatus {
  /**
   * Gives details of state of desired configuration. This property is available only if Tranport Node exists for the host. Following are the supported values pending  - Transport Node configuration status is pending in_progress - Transport Node configuration status is in progress success - Transport Node configuration status is successful failed - Transport Node configuration status is failed partial_success - Transport Node configuration status is partial success orphaned - Transport Node configuration status is orphaned unknown - Transport Node configuration status is unknown error - Error occured during Transport Node configuration
   */
  @JsonAdapter(ConfigStatusEnum.Adapter.class)
  public enum ConfigStatusEnum {
    PENDING("pending"),
    IN_PROGRESS("in_progress"),
    SUCCESS("success"),
    FAILED("failed"),
    PARTIAL_SUCCESS("partial_success"),
    ORPHANED("orphaned"),
    UNKNOWN("unknown"),
    ERROR("error");

    private String value;

    ConfigStatusEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ConfigStatusEnum fromValue(String text) {
      for (ConfigStatusEnum b : ConfigStatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ConfigStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ConfigStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ConfigStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ConfigStatusEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("config_status")
  private ConfigStatusEnum configStatus = null;

  @SerializedName("node_id")
  private String nodeId = null;

  /**
   * This specifies the current nsx install status for host node. Following are the supported values INSTALL_IN_PROGRESS - NSX installation is in progress on the host INSTALL_FAILED - NSX installation failed on the host INSTALL_SUCCESSFUL - NSX installation successful on the host UNINSTALL_IN_PROGRESS - NSX uninstallation in progress on the host UNINSTALL_FAILED - NSX uninstallation failed on the host UNINSTALL_SUCCESSFUL - NSX uninstallation successful on the host UNINSTALL_SCHEDULED - NSX uninstallation is scheduled on the host UPGRADE_IN_PROGRESS - NSX upgrade is in progress on the host UPGRADE_FAILED - NSX upgrade failed on the host DEPLOYMENT_QUEUED - Deployment is queued on the DEPLOYMENT_IN_PROGRESS - Deployment is in progress DEPLOYMENT_FAILED - Deployment is failed DEPLOYMENT_SUCCESSFUL - Deployment is successful UNDEPLOYMENT_QUEUED - Undeployment is queued UNDEPLOYMENT_IN_PROGRESS - Undeployment is in progress UNDEPLOYMENT_FAILED - Undeployment failed UNDEPLOYMENT_SUCCESSFUL - Undeployment is successful UPGRADE_QUEUED - Upgrade is queued HOST_DISCONNECTED - Host is disconnected POWERED_OFF - Host is powered off
   */
  @JsonAdapter(DeploymentStatusEnum.Adapter.class)
  public enum DeploymentStatusEnum {
    INSTALL_IN_PROGRESS("INSTALL_IN_PROGRESS"),
    INSTALL_FAILED("INSTALL_FAILED"),
    INSTALL_SUCCESSFUL("INSTALL_SUCCESSFUL"),
    UNINSTALL_IN_PROGRESS("UNINSTALL_IN_PROGRESS"),
    UNINSTALL_FAILED("UNINSTALL_FAILED"),
    UNINSTALL_SUCCESSFUL("UNINSTALL_SUCCESSFUL"),
    UNINSTALL_SCHEDULED("UNINSTALL_SCHEDULED"),
    UPGRADE_IN_PROGRESS("UPGRADE_IN_PROGRESS"),
    UPGRADE_FAILED("UPGRADE_FAILED"),
    DEPLOYMENT_QUEUED("DEPLOYMENT_QUEUED"),
    DEPLOYMENT_IN_PROGRESS("DEPLOYMENT_IN_PROGRESS"),
    DEPLOYMENT_FAILED("DEPLOYMENT_FAILED"),
    DEPLOYMENT_SUCCESSFUL("DEPLOYMENT_SUCCESSFUL"),
    UNDEPLOYMENT_QUEUED("UNDEPLOYMENT_QUEUED"),
    UNDEPLOYMENT_IN_PROGRESS("UNDEPLOYMENT_IN_PROGRESS"),
    UNDEPLOYMENT_FAILED("UNDEPLOYMENT_FAILED"),
    UNDEPLOYMENT_SUCCESSFUL("UNDEPLOYMENT_SUCCESSFUL"),
    UPGRADE_QUEUED("UPGRADE_QUEUED"),
    HOST_DISCONNECTED("HOST_DISCONNECTED"),
    POWERED_OFF("POWERED_OFF");

    private String value;

    DeploymentStatusEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static DeploymentStatusEnum fromValue(String text) {
      for (DeploymentStatusEnum b : DeploymentStatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<DeploymentStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DeploymentStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DeploymentStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return DeploymentStatusEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("deployment_status")
  private DeploymentStatusEnum deploymentStatus = null;

   /**
   * Gives details of state of desired configuration. This property is available only if Tranport Node exists for the host. Following are the supported values pending  - Transport Node configuration status is pending in_progress - Transport Node configuration status is in progress success - Transport Node configuration status is successful failed - Transport Node configuration status is failed partial_success - Transport Node configuration status is partial success orphaned - Transport Node configuration status is orphaned unknown - Transport Node configuration status is unknown error - Error occured during Transport Node configuration
   * @return configStatus
  **/
  @Schema(description = "Gives details of state of desired configuration. This property is available only if Tranport Node exists for the host. Following are the supported values pending  - Transport Node configuration status is pending in_progress - Transport Node configuration status is in progress success - Transport Node configuration status is successful failed - Transport Node configuration status is failed partial_success - Transport Node configuration status is partial success orphaned - Transport Node configuration status is orphaned unknown - Transport Node configuration status is unknown error - Error occured during Transport Node configuration")
  public ConfigStatusEnum getConfigStatus() {
    return configStatus;
  }

   /**
   * Unique Id of the host node
   * @return nodeId
  **/
  @Schema(description = "Unique Id of the host node")
  public String getNodeId() {
    return nodeId;
  }

   /**
   * This specifies the current nsx install status for host node. Following are the supported values INSTALL_IN_PROGRESS - NSX installation is in progress on the host INSTALL_FAILED - NSX installation failed on the host INSTALL_SUCCESSFUL - NSX installation successful on the host UNINSTALL_IN_PROGRESS - NSX uninstallation in progress on the host UNINSTALL_FAILED - NSX uninstallation failed on the host UNINSTALL_SUCCESSFUL - NSX uninstallation successful on the host UNINSTALL_SCHEDULED - NSX uninstallation is scheduled on the host UPGRADE_IN_PROGRESS - NSX upgrade is in progress on the host UPGRADE_FAILED - NSX upgrade failed on the host DEPLOYMENT_QUEUED - Deployment is queued on the DEPLOYMENT_IN_PROGRESS - Deployment is in progress DEPLOYMENT_FAILED - Deployment is failed DEPLOYMENT_SUCCESSFUL - Deployment is successful UNDEPLOYMENT_QUEUED - Undeployment is queued UNDEPLOYMENT_IN_PROGRESS - Undeployment is in progress UNDEPLOYMENT_FAILED - Undeployment failed UNDEPLOYMENT_SUCCESSFUL - Undeployment is successful UPGRADE_QUEUED - Upgrade is queued HOST_DISCONNECTED - Host is disconnected POWERED_OFF - Host is powered off
   * @return deploymentStatus
  **/
  @Schema(description = "This specifies the current nsx install status for host node. Following are the supported values INSTALL_IN_PROGRESS - NSX installation is in progress on the host INSTALL_FAILED - NSX installation failed on the host INSTALL_SUCCESSFUL - NSX installation successful on the host UNINSTALL_IN_PROGRESS - NSX uninstallation in progress on the host UNINSTALL_FAILED - NSX uninstallation failed on the host UNINSTALL_SUCCESSFUL - NSX uninstallation successful on the host UNINSTALL_SCHEDULED - NSX uninstallation is scheduled on the host UPGRADE_IN_PROGRESS - NSX upgrade is in progress on the host UPGRADE_FAILED - NSX upgrade failed on the host DEPLOYMENT_QUEUED - Deployment is queued on the DEPLOYMENT_IN_PROGRESS - Deployment is in progress DEPLOYMENT_FAILED - Deployment is failed DEPLOYMENT_SUCCESSFUL - Deployment is successful UNDEPLOYMENT_QUEUED - Undeployment is queued UNDEPLOYMENT_IN_PROGRESS - Undeployment is in progress UNDEPLOYMENT_FAILED - Undeployment failed UNDEPLOYMENT_SUCCESSFUL - Undeployment is successful UPGRADE_QUEUED - Upgrade is queued HOST_DISCONNECTED - Host is disconnected POWERED_OFF - Host is powered off")
  public DeploymentStatusEnum getDeploymentStatus() {
    return deploymentStatus;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HostNodeStatus hostNodeStatus = (HostNodeStatus) o;
    return Objects.equals(this.configStatus, hostNodeStatus.configStatus) &&
        Objects.equals(this.nodeId, hostNodeStatus.nodeId) &&
        Objects.equals(this.deploymentStatus, hostNodeStatus.deploymentStatus);
  }

  @Override
  public int hashCode() {
    return Objects.hash(configStatus, nodeId, deploymentStatus);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HostNodeStatus {\n");
    
    sb.append("    configStatus: ").append(toIndentedString(configStatus)).append("\n");
    sb.append("    nodeId: ").append(toIndentedString(nodeId)).append("\n");
    sb.append("    deploymentStatus: ").append(toIndentedString(deploymentStatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
