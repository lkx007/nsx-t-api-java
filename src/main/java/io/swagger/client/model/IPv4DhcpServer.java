/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.DhcpOptions;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * DHCP server to support IPv4 DHCP service. Properties defined at DHCP server level can be overridden by ip-pool or static-binding level properties. 
 */
@Schema(description = "DHCP server to support IPv4 DHCP service. Properties defined at DHCP server level can be overridden by ip-pool or static-binding level properties. ")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class IPv4DhcpServer {
  @SerializedName("options")
  private DhcpOptions options = null;

  @SerializedName("monitor_ippool_usage")
  private Boolean monitorIppoolUsage = false;

  @SerializedName("dhcp_server_ip")
  private String dhcpServerIp = null;

  @SerializedName("dns_nameservers")
  private List<String> dnsNameservers = null;

  @SerializedName("domain_name")
  private String domainName = null;

  @SerializedName("gateway_ip")
  private String gatewayIp = null;

  public IPv4DhcpServer options(DhcpOptions options) {
    this.options = options;
    return this;
  }

   /**
   * Get options
   * @return options
  **/
  @Schema(description = "")
  public DhcpOptions getOptions() {
    return options;
  }

  public void setOptions(DhcpOptions options) {
    this.options = options;
  }

  public IPv4DhcpServer monitorIppoolUsage(Boolean monitorIppoolUsage) {
    this.monitorIppoolUsage = monitorIppoolUsage;
    return this;
  }

   /**
   * Enable or disable monitoring of DHCP ip-pools usage. When enabled, system events are generated when pool usage exceeds the configured thresholds. System events can be viewed in REST API /api/v2/hpm/alarms 
   * @return monitorIppoolUsage
  **/
  @Schema(description = "Enable or disable monitoring of DHCP ip-pools usage. When enabled, system events are generated when pool usage exceeds the configured thresholds. System events can be viewed in REST API /api/v2/hpm/alarms ")
  public Boolean isMonitorIppoolUsage() {
    return monitorIppoolUsage;
  }

  public void setMonitorIppoolUsage(Boolean monitorIppoolUsage) {
    this.monitorIppoolUsage = monitorIppoolUsage;
  }

  public IPv4DhcpServer dhcpServerIp(String dhcpServerIp) {
    this.dhcpServerIp = dhcpServerIp;
    return this;
  }

   /**
   * DHCP server ip in CIDR format.
   * @return dhcpServerIp
  **/
  @Schema(required = true, description = "DHCP server ip in CIDR format.")
  public String getDhcpServerIp() {
    return dhcpServerIp;
  }

  public void setDhcpServerIp(String dhcpServerIp) {
    this.dhcpServerIp = dhcpServerIp;
  }

  public IPv4DhcpServer dnsNameservers(List<String> dnsNameservers) {
    this.dnsNameservers = dnsNameservers;
    return this;
  }

  public IPv4DhcpServer addDnsNameserversItem(String dnsNameserversItem) {
    if (this.dnsNameservers == null) {
      this.dnsNameservers = new ArrayList<String>();
    }
    this.dnsNameservers.add(dnsNameserversItem);
    return this;
  }

   /**
   * Primary and secondary DNS server address to assign host. They can be overridden by ip-pool or static-binding level property. 
   * @return dnsNameservers
  **/
  @Schema(description = "Primary and secondary DNS server address to assign host. They can be overridden by ip-pool or static-binding level property. ")
  public List<String> getDnsNameservers() {
    return dnsNameservers;
  }

  public void setDnsNameservers(List<String> dnsNameservers) {
    this.dnsNameservers = dnsNameservers;
  }

  public IPv4DhcpServer domainName(String domainName) {
    this.domainName = domainName;
    return this;
  }

   /**
   * Host name or prefix to be assigned to host. It can be overridden by ip-pool or static-binding level property. 
   * @return domainName
  **/
  @Schema(description = "Host name or prefix to be assigned to host. It can be overridden by ip-pool or static-binding level property. ")
  public String getDomainName() {
    return domainName;
  }

  public void setDomainName(String domainName) {
    this.domainName = domainName;
  }

  public IPv4DhcpServer gatewayIp(String gatewayIp) {
    this.gatewayIp = gatewayIp;
    return this;
  }

   /**
   * Gateway ip to be assigned to host. It can be overridden by ip-pool or static-binding level property. 
   * @return gatewayIp
  **/
  @Schema(description = "Gateway ip to be assigned to host. It can be overridden by ip-pool or static-binding level property. ")
  public String getGatewayIp() {
    return gatewayIp;
  }

  public void setGatewayIp(String gatewayIp) {
    this.gatewayIp = gatewayIp;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IPv4DhcpServer ipv4DhcpServer = (IPv4DhcpServer) o;
    return Objects.equals(this.options, ipv4DhcpServer.options) &&
        Objects.equals(this.monitorIppoolUsage, ipv4DhcpServer.monitorIppoolUsage) &&
        Objects.equals(this.dhcpServerIp, ipv4DhcpServer.dhcpServerIp) &&
        Objects.equals(this.dnsNameservers, ipv4DhcpServer.dnsNameservers) &&
        Objects.equals(this.domainName, ipv4DhcpServer.domainName) &&
        Objects.equals(this.gatewayIp, ipv4DhcpServer.gatewayIp);
  }

  @Override
  public int hashCode() {
    return Objects.hash(options, monitorIppoolUsage, dhcpServerIp, dnsNameservers, domainName, gatewayIp);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IPv4DhcpServer {\n");
    
    sb.append("    options: ").append(toIndentedString(options)).append("\n");
    sb.append("    monitorIppoolUsage: ").append(toIndentedString(monitorIppoolUsage)).append("\n");
    sb.append("    dhcpServerIp: ").append(toIndentedString(dhcpServerIp)).append("\n");
    sb.append("    dnsNameservers: ").append(toIndentedString(dnsNameservers)).append("\n");
    sb.append("    domainName: ").append(toIndentedString(domainName)).append("\n");
    sb.append("    gatewayIp: ").append(toIndentedString(gatewayIp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
