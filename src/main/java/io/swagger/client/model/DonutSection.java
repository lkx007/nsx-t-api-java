/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.DonutPart;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * Represents high level logical grouping of portions or segments of a donut / stats chart.
 */
@Schema(description = "Represents high level logical grouping of portions or segments of a donut / stats chart.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class DonutSection {
  @SerializedName("row_list_field")
  private String rowListField = null;

  @SerializedName("parts")
  private List<DonutPart> parts = new ArrayList<DonutPart>();

  @SerializedName("template")
  private Boolean template = false;

  public DonutSection rowListField(String rowListField) {
    this.rowListField = rowListField;
    return this;
  }

   /**
   * Field of the root of the api result set for forming parts.
   * @return rowListField
  **/
  @Schema(description = "Field of the root of the api result set for forming parts.")
  public String getRowListField() {
    return rowListField;
  }

  public void setRowListField(String rowListField) {
    this.rowListField = rowListField;
  }

  public DonutSection parts(List<DonutPart> parts) {
    this.parts = parts;
    return this;
  }

  public DonutSection addPartsItem(DonutPart partsItem) {
    this.parts.add(partsItem);
    return this;
  }

   /**
   * Array of portions or parts of the donut or stats chart.
   * @return parts
  **/
  @Schema(required = true, description = "Array of portions or parts of the donut or stats chart.")
  public List<DonutPart> getParts() {
    return parts;
  }

  public void setParts(List<DonutPart> parts) {
    this.parts = parts;
  }

  public DonutSection template(Boolean template) {
    this.template = template;
    return this;
  }

   /**
   * If true, the section will be appled as template for forming parts. Only one part will be formed from each element of &#x27;row_list_field&#x27;.
   * @return template
  **/
  @Schema(description = "If true, the section will be appled as template for forming parts. Only one part will be formed from each element of 'row_list_field'.")
  public Boolean isTemplate() {
    return template;
  }

  public void setTemplate(Boolean template) {
    this.template = template;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DonutSection donutSection = (DonutSection) o;
    return Objects.equals(this.rowListField, donutSection.rowListField) &&
        Objects.equals(this.parts, donutSection.parts) &&
        Objects.equals(this.template, donutSection.template);
  }

  @Override
  public int hashCode() {
    return Objects.hash(rowListField, parts, template);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DonutSection {\n");
    
    sb.append("    rowListField: ").append(toIndentedString(rowListField)).append("\n");
    sb.append("    parts: ").append(toIndentedString(parts)).append("\n");
    sb.append("    template: ").append(toIndentedString(template)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
