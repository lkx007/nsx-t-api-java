/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * MAC learning configuration
 */
@Schema(description = "MAC learning configuration")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class MacLearningSpec {
  @SerializedName("limit")
  private Integer limit = 4096;

  @SerializedName("aging_time")
  private Integer agingTime = 600;

  @SerializedName("enabled")
  private Boolean enabled = null;

  /**
   * The policy after MAC Limit is exceeded
   */
  @JsonAdapter(LimitPolicyEnum.Adapter.class)
  public enum LimitPolicyEnum {
    ALLOW("ALLOW"),
    DROP("DROP");

    private String value;

    LimitPolicyEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static LimitPolicyEnum fromValue(String text) {
      for (LimitPolicyEnum b : LimitPolicyEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<LimitPolicyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LimitPolicyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LimitPolicyEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return LimitPolicyEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("limit_policy")
  private LimitPolicyEnum limitPolicy = LimitPolicyEnum.ALLOW;

  @SerializedName("unicast_flooding_allowed")
  private Boolean unicastFloodingAllowed = true;

  public MacLearningSpec limit(Integer limit) {
    this.limit = limit;
    return this;
  }

   /**
   * The maximum number of MAC addresses that can be learned on this port
   * minimum: 0
   * maximum: 4096
   * @return limit
  **/
  @Schema(description = "The maximum number of MAC addresses that can be learned on this port")
  public Integer getLimit() {
    return limit;
  }

  public void setLimit(Integer limit) {
    this.limit = limit;
  }

   /**
   * Aging time in sec for learned MAC address
   * @return agingTime
  **/
  @Schema(description = "Aging time in sec for learned MAC address")
  public Integer getAgingTime() {
    return agingTime;
  }

  public MacLearningSpec enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

   /**
   * Allowing source MAC address learning
   * @return enabled
  **/
  @Schema(required = true, description = "Allowing source MAC address learning")
  public Boolean isEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }

  public MacLearningSpec limitPolicy(LimitPolicyEnum limitPolicy) {
    this.limitPolicy = limitPolicy;
    return this;
  }

   /**
   * The policy after MAC Limit is exceeded
   * @return limitPolicy
  **/
  @Schema(description = "The policy after MAC Limit is exceeded")
  public LimitPolicyEnum getLimitPolicy() {
    return limitPolicy;
  }

  public void setLimitPolicy(LimitPolicyEnum limitPolicy) {
    this.limitPolicy = limitPolicy;
  }

  public MacLearningSpec unicastFloodingAllowed(Boolean unicastFloodingAllowed) {
    this.unicastFloodingAllowed = unicastFloodingAllowed;
    return this;
  }

   /**
   * Allowing flooding for unlearned MAC for ingress traffic
   * @return unicastFloodingAllowed
  **/
  @Schema(description = "Allowing flooding for unlearned MAC for ingress traffic")
  public Boolean isUnicastFloodingAllowed() {
    return unicastFloodingAllowed;
  }

  public void setUnicastFloodingAllowed(Boolean unicastFloodingAllowed) {
    this.unicastFloodingAllowed = unicastFloodingAllowed;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MacLearningSpec macLearningSpec = (MacLearningSpec) o;
    return Objects.equals(this.limit, macLearningSpec.limit) &&
        Objects.equals(this.agingTime, macLearningSpec.agingTime) &&
        Objects.equals(this.enabled, macLearningSpec.enabled) &&
        Objects.equals(this.limitPolicy, macLearningSpec.limitPolicy) &&
        Objects.equals(this.unicastFloodingAllowed, macLearningSpec.unicastFloodingAllowed);
  }

  @Override
  public int hashCode() {
    return Objects.hash(limit, agingTime, enabled, limitPolicy, unicastFloodingAllowed);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MacLearningSpec {\n");
    
    sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
    sb.append("    agingTime: ").append(toIndentedString(agingTime)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    limitPolicy: ").append(toIndentedString(limitPolicy)).append("\n");
    sb.append("    unicastFloodingAllowed: ").append(toIndentedString(unicastFloodingAllowed)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
