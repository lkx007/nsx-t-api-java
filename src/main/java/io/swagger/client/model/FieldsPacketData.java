/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.ArpHeader;
import io.swagger.client.model.EthernetHeader;
import io.swagger.client.model.Ipv4Header;
import io.swagger.client.model.Ipv6Header;
import io.swagger.client.model.PacketData;
import io.swagger.client.model.TransportProtocolHeader;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * FieldsPacketData
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class FieldsPacketData extends PacketData {
  @SerializedName("ipv6_header")
  private Ipv6Header ipv6Header = null;

  @SerializedName("arp_header")
  private ArpHeader arpHeader = null;

  @SerializedName("transport_header")
  private TransportProtocolHeader transportHeader = null;

  @SerializedName("ip_header")
  private Ipv4Header ipHeader = null;

  @SerializedName("eth_header")
  private EthernetHeader ethHeader = null;

  @SerializedName("payload")
  private String payload = null;

  public FieldsPacketData ipv6Header(Ipv6Header ipv6Header) {
    this.ipv6Header = ipv6Header;
    return this;
  }

   /**
   * Get ipv6Header
   * @return ipv6Header
  **/
  @Schema(description = "")
  public Ipv6Header getIpv6Header() {
    return ipv6Header;
  }

  public void setIpv6Header(Ipv6Header ipv6Header) {
    this.ipv6Header = ipv6Header;
  }

  public FieldsPacketData arpHeader(ArpHeader arpHeader) {
    this.arpHeader = arpHeader;
    return this;
  }

   /**
   * Get arpHeader
   * @return arpHeader
  **/
  @Schema(description = "")
  public ArpHeader getArpHeader() {
    return arpHeader;
  }

  public void setArpHeader(ArpHeader arpHeader) {
    this.arpHeader = arpHeader;
  }

  public FieldsPacketData transportHeader(TransportProtocolHeader transportHeader) {
    this.transportHeader = transportHeader;
    return this;
  }

   /**
   * Get transportHeader
   * @return transportHeader
  **/
  @Schema(description = "")
  public TransportProtocolHeader getTransportHeader() {
    return transportHeader;
  }

  public void setTransportHeader(TransportProtocolHeader transportHeader) {
    this.transportHeader = transportHeader;
  }

  public FieldsPacketData ipHeader(Ipv4Header ipHeader) {
    this.ipHeader = ipHeader;
    return this;
  }

   /**
   * Get ipHeader
   * @return ipHeader
  **/
  @Schema(description = "")
  public Ipv4Header getIpHeader() {
    return ipHeader;
  }

  public void setIpHeader(Ipv4Header ipHeader) {
    this.ipHeader = ipHeader;
  }

  public FieldsPacketData ethHeader(EthernetHeader ethHeader) {
    this.ethHeader = ethHeader;
    return this;
  }

   /**
   * Get ethHeader
   * @return ethHeader
  **/
  @Schema(description = "")
  public EthernetHeader getEthHeader() {
    return ethHeader;
  }

  public void setEthHeader(EthernetHeader ethHeader) {
    this.ethHeader = ethHeader;
  }

  public FieldsPacketData payload(String payload) {
    this.payload = payload;
    return this;
  }

   /**
   * Up to 1000 bytes of payload may be supplied (with a base64-encoded length of 1336 bytes.) Additional bytes of traceflow metadata will be appended to the payload. The payload contains any data the user wants to put after the transport header.
   * @return payload
  **/
  @Schema(description = "Up to 1000 bytes of payload may be supplied (with a base64-encoded length of 1336 bytes.) Additional bytes of traceflow metadata will be appended to the payload. The payload contains any data the user wants to put after the transport header.")
  public String getPayload() {
    return payload;
  }

  public void setPayload(String payload) {
    this.payload = payload;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FieldsPacketData fieldsPacketData = (FieldsPacketData) o;
    return Objects.equals(this.ipv6Header, fieldsPacketData.ipv6Header) &&
        Objects.equals(this.arpHeader, fieldsPacketData.arpHeader) &&
        Objects.equals(this.transportHeader, fieldsPacketData.transportHeader) &&
        Objects.equals(this.ipHeader, fieldsPacketData.ipHeader) &&
        Objects.equals(this.ethHeader, fieldsPacketData.ethHeader) &&
        Objects.equals(this.payload, fieldsPacketData.payload) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ipv6Header, arpHeader, transportHeader, ipHeader, ethHeader, payload, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FieldsPacketData {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    ipv6Header: ").append(toIndentedString(ipv6Header)).append("\n");
    sb.append("    arpHeader: ").append(toIndentedString(arpHeader)).append("\n");
    sb.append("    transportHeader: ").append(toIndentedString(transportHeader)).append("\n");
    sb.append("    ipHeader: ").append(toIndentedString(ipHeader)).append("\n");
    sb.append("    ethHeader: ").append(toIndentedString(ethHeader)).append("\n");
    sb.append("    payload: ").append(toIndentedString(payload)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
