/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.GlobalConfigs;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * NSX global configs for switching
 */
@Schema(description = "NSX global configs for switching")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class SwitchingGlobalConfig extends GlobalConfigs {
  @SerializedName("global_replication_mode_enabled")
  private Boolean globalReplicationModeEnabled = false;

  @SerializedName("uplink_mtu_threshold")
  private Integer uplinkMtuThreshold = 9000;

  @SerializedName("physical_uplink_mtu")
  private Integer physicalUplinkMtu = 1700;

  public SwitchingGlobalConfig globalReplicationModeEnabled(Boolean globalReplicationModeEnabled) {
    this.globalReplicationModeEnabled = globalReplicationModeEnabled;
    return this;
  }

   /**
   * When this flag is set true, certain types of BUM packets will be sent to all VTEPs in the global VTEP table, ignoring the logical switching span.
   * @return globalReplicationModeEnabled
  **/
  @Schema(description = "When this flag is set true, certain types of BUM packets will be sent to all VTEPs in the global VTEP table, ignoring the logical switching span.")
  public Boolean isGlobalReplicationModeEnabled() {
    return globalReplicationModeEnabled;
  }

  public void setGlobalReplicationModeEnabled(Boolean globalReplicationModeEnabled) {
    this.globalReplicationModeEnabled = globalReplicationModeEnabled;
  }

  public SwitchingGlobalConfig uplinkMtuThreshold(Integer uplinkMtuThreshold) {
    this.uplinkMtuThreshold = uplinkMtuThreshold;
    return this;
  }

   /**
   * This value defines the upper threshold for the MTU value that can be configured at a physical uplink level or a logical routing uplink level in a NSX domain. All Uplink profiles validate against this value so that the MTU specified in an Uplink profile does not exceed this global upper threshold. Similarly, when this value is modified, the new value must be greater than or equal to any existing Uplink profile&#x27;s MTU. This value is also validated to be greater than or equal to physical_uplink_mtu in SwitchingGlobalConfig and logical_uplink_mtu in RoutingGlobalConfig.
   * @return uplinkMtuThreshold
  **/
  @Schema(description = "This value defines the upper threshold for the MTU value that can be configured at a physical uplink level or a logical routing uplink level in a NSX domain. All Uplink profiles validate against this value so that the MTU specified in an Uplink profile does not exceed this global upper threshold. Similarly, when this value is modified, the new value must be greater than or equal to any existing Uplink profile's MTU. This value is also validated to be greater than or equal to physical_uplink_mtu in SwitchingGlobalConfig and logical_uplink_mtu in RoutingGlobalConfig.")
  public Integer getUplinkMtuThreshold() {
    return uplinkMtuThreshold;
  }

  public void setUplinkMtuThreshold(Integer uplinkMtuThreshold) {
    this.uplinkMtuThreshold = uplinkMtuThreshold;
  }

  public SwitchingGlobalConfig physicalUplinkMtu(Integer physicalUplinkMtu) {
    this.physicalUplinkMtu = physicalUplinkMtu;
    return this;
  }

   /**
   * This is the global default MTU for all the physical uplinks in a NSX domain. This is the default value for the optional uplink profile MTU field. When the MTU value is not specified in the uplink profile, this global value will be used. This value can be overridden by providing a value for the optional MTU field in the uplink profile. Whenever this value is updated, the updated value will only be propagated to the uplinks that don&#x27;t have the MTU value in their uplink profiles. If this value is not set, the default value of 1700 will be used. The Transport Node state can be monitored to confirm if the updated MTU value has been realized.
   * @return physicalUplinkMtu
  **/
  @Schema(description = "This is the global default MTU for all the physical uplinks in a NSX domain. This is the default value for the optional uplink profile MTU field. When the MTU value is not specified in the uplink profile, this global value will be used. This value can be overridden by providing a value for the optional MTU field in the uplink profile. Whenever this value is updated, the updated value will only be propagated to the uplinks that don't have the MTU value in their uplink profiles. If this value is not set, the default value of 1700 will be used. The Transport Node state can be monitored to confirm if the updated MTU value has been realized.")
  public Integer getPhysicalUplinkMtu() {
    return physicalUplinkMtu;
  }

  public void setPhysicalUplinkMtu(Integer physicalUplinkMtu) {
    this.physicalUplinkMtu = physicalUplinkMtu;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SwitchingGlobalConfig switchingGlobalConfig = (SwitchingGlobalConfig) o;
    return Objects.equals(this.globalReplicationModeEnabled, switchingGlobalConfig.globalReplicationModeEnabled) &&
        Objects.equals(this.uplinkMtuThreshold, switchingGlobalConfig.uplinkMtuThreshold) &&
        Objects.equals(this.physicalUplinkMtu, switchingGlobalConfig.physicalUplinkMtu) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(globalReplicationModeEnabled, uplinkMtuThreshold, physicalUplinkMtu, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SwitchingGlobalConfig {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    globalReplicationModeEnabled: ").append(toIndentedString(globalReplicationModeEnabled)).append("\n");
    sb.append("    uplinkMtuThreshold: ").append(toIndentedString(uplinkMtuThreshold)).append("\n");
    sb.append("    physicalUplinkMtu: ").append(toIndentedString(physicalUplinkMtu)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
