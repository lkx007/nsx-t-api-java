/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.EmbeddedResource;
import io.swagger.client.model.OwnerResourceLink;
import io.swagger.client.model.ResourceReference;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * DSRule
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class DSRule extends EmbeddedResource {
  @SerializedName("is_default")
  private Boolean isDefault = null;

  /**
   * Rule direction in case of stateless distributed service rules. This will only considered if section level parameter is set to stateless. Default to IN_OUT if not specified.
   */
  @JsonAdapter(DirectionEnum.Adapter.class)
  public enum DirectionEnum {
    IN("IN"),
    OUT("OUT"),
    IN_OUT("IN_OUT");

    private String value;

    DirectionEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static DirectionEnum fromValue(String text) {
      for (DirectionEnum b : DirectionEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<DirectionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DirectionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DirectionEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return DirectionEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("direction")
  private DirectionEnum direction = DirectionEnum.IN_OUT;

  @SerializedName("rule_tag")
  private String ruleTag = null;

  /**
   * Type of IP packet that should be matched while enforcing the rule.
   */
  @JsonAdapter(IpProtocolEnum.Adapter.class)
  public enum IpProtocolEnum {
    IPV4("IPV4"),
    IPV6("IPV6"),
    IPV4_IPV6("IPV4_IPV6");

    private String value;

    IpProtocolEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static IpProtocolEnum fromValue(String text) {
      for (IpProtocolEnum b : IpProtocolEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<IpProtocolEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IpProtocolEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IpProtocolEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return IpProtocolEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("ip_protocol")
  private IpProtocolEnum ipProtocol = IpProtocolEnum.IPV4_IPV6;

  @SerializedName("notes")
  private String notes = null;

  @SerializedName("applied_tos")
  private List<ResourceReference> appliedTos = null;

  @SerializedName("logged")
  private Boolean logged = false;

  @SerializedName("disabled")
  private Boolean disabled = false;

  @SerializedName("sources")
  private List<ResourceReference> sources = null;

  /**
   * Action enforced on the packets which matches the distributed service rule. Currently DS Layer supports below actions. ALLOW           - Forward any packet when a rule with this action gets a match (Used by Firewall). DROP            - Drop any packet when a rule with this action gets a match. Packets won&#x27;t go further(Used by Firewall). REJECT          - Terminate TCP connection by sending TCP reset for a packet when a rule with this action gets a match (Used by Firewall). REDIRECT        - Redirect any packet to a partner appliance when a rule with this action gets a match (Used by Service Insertion). DO_NOT_REDIRECT - Do not redirect any packet to a partner appliance when a rule with this action gets a match (Used by Service Insertion).
   */
  @JsonAdapter(ActionEnum.Adapter.class)
  public enum ActionEnum {
    ALLOW("ALLOW"),
    DROP("DROP"),
    REJECT("REJECT"),
    REDIRECT("REDIRECT"),
    DO_NOT_REDIRECT("DO_NOT_REDIRECT");

    private String value;

    ActionEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ActionEnum fromValue(String text) {
      for (ActionEnum b : ActionEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ActionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ActionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ActionEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ActionEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("action")
  private ActionEnum action = null;

  @SerializedName("priority")
  private Long priority = null;

  @SerializedName("sources_excluded")
  private Boolean sourcesExcluded = false;

  @SerializedName("destinations_excluded")
  private Boolean destinationsExcluded = false;

  @SerializedName("destinations")
  private List<ResourceReference> destinations = null;

   /**
   * Flag to indicate whether rule is default.
   * @return isDefault
  **/
  @Schema(description = "Flag to indicate whether rule is default.")
  public Boolean isIsDefault() {
    return isDefault;
  }

  public DSRule direction(DirectionEnum direction) {
    this.direction = direction;
    return this;
  }

   /**
   * Rule direction in case of stateless distributed service rules. This will only considered if section level parameter is set to stateless. Default to IN_OUT if not specified.
   * @return direction
  **/
  @Schema(description = "Rule direction in case of stateless distributed service rules. This will only considered if section level parameter is set to stateless. Default to IN_OUT if not specified.")
  public DirectionEnum getDirection() {
    return direction;
  }

  public void setDirection(DirectionEnum direction) {
    this.direction = direction;
  }

  public DSRule ruleTag(String ruleTag) {
    this.ruleTag = ruleTag;
    return this;
  }

   /**
   * User level field which will be printed in CLI and packet logs.
   * @return ruleTag
  **/
  @Schema(description = "User level field which will be printed in CLI and packet logs.")
  public String getRuleTag() {
    return ruleTag;
  }

  public void setRuleTag(String ruleTag) {
    this.ruleTag = ruleTag;
  }

  public DSRule ipProtocol(IpProtocolEnum ipProtocol) {
    this.ipProtocol = ipProtocol;
    return this;
  }

   /**
   * Type of IP packet that should be matched while enforcing the rule.
   * @return ipProtocol
  **/
  @Schema(description = "Type of IP packet that should be matched while enforcing the rule.")
  public IpProtocolEnum getIpProtocol() {
    return ipProtocol;
  }

  public void setIpProtocol(IpProtocolEnum ipProtocol) {
    this.ipProtocol = ipProtocol;
  }

  public DSRule notes(String notes) {
    this.notes = notes;
    return this;
  }

   /**
   * User notes specific to the rule.
   * @return notes
  **/
  @Schema(description = "User notes specific to the rule.")
  public String getNotes() {
    return notes;
  }

  public void setNotes(String notes) {
    this.notes = notes;
  }

  public DSRule appliedTos(List<ResourceReference> appliedTos) {
    this.appliedTos = appliedTos;
    return this;
  }

  public DSRule addAppliedTosItem(ResourceReference appliedTosItem) {
    if (this.appliedTos == null) {
      this.appliedTos = new ArrayList<ResourceReference>();
    }
    this.appliedTos.add(appliedTosItem);
    return this;
  }

   /**
   * List of object where rule will be enforced. The section level field overrides this one. Null will be treated as any.
   * @return appliedTos
  **/
  @Schema(description = "List of object where rule will be enforced. The section level field overrides this one. Null will be treated as any.")
  public List<ResourceReference> getAppliedTos() {
    return appliedTos;
  }

  public void setAppliedTos(List<ResourceReference> appliedTos) {
    this.appliedTos = appliedTos;
  }

  public DSRule logged(Boolean logged) {
    this.logged = logged;
    return this;
  }

   /**
   * Flag to enable packet logging. Default is disabled.
   * @return logged
  **/
  @Schema(description = "Flag to enable packet logging. Default is disabled.")
  public Boolean isLogged() {
    return logged;
  }

  public void setLogged(Boolean logged) {
    this.logged = logged;
  }

  public DSRule disabled(Boolean disabled) {
    this.disabled = disabled;
    return this;
  }

   /**
   * Flag to disable rule. Disabled will only be persisted but never provisioned/realized.
   * @return disabled
  **/
  @Schema(description = "Flag to disable rule. Disabled will only be persisted but never provisioned/realized.")
  public Boolean isDisabled() {
    return disabled;
  }

  public void setDisabled(Boolean disabled) {
    this.disabled = disabled;
  }

  public DSRule sources(List<ResourceReference> sources) {
    this.sources = sources;
    return this;
  }

  public DSRule addSourcesItem(ResourceReference sourcesItem) {
    if (this.sources == null) {
      this.sources = new ArrayList<ResourceReference>();
    }
    this.sources.add(sourcesItem);
    return this;
  }

   /**
   * List of sources. Null will be treated as any.
   * @return sources
  **/
  @Schema(description = "List of sources. Null will be treated as any.")
  public List<ResourceReference> getSources() {
    return sources;
  }

  public void setSources(List<ResourceReference> sources) {
    this.sources = sources;
  }

  public DSRule action(ActionEnum action) {
    this.action = action;
    return this;
  }

   /**
   * Action enforced on the packets which matches the distributed service rule. Currently DS Layer supports below actions. ALLOW           - Forward any packet when a rule with this action gets a match (Used by Firewall). DROP            - Drop any packet when a rule with this action gets a match. Packets won&#x27;t go further(Used by Firewall). REJECT          - Terminate TCP connection by sending TCP reset for a packet when a rule with this action gets a match (Used by Firewall). REDIRECT        - Redirect any packet to a partner appliance when a rule with this action gets a match (Used by Service Insertion). DO_NOT_REDIRECT - Do not redirect any packet to a partner appliance when a rule with this action gets a match (Used by Service Insertion).
   * @return action
  **/
  @Schema(required = true, description = "Action enforced on the packets which matches the distributed service rule. Currently DS Layer supports below actions. ALLOW           - Forward any packet when a rule with this action gets a match (Used by Firewall). DROP            - Drop any packet when a rule with this action gets a match. Packets won't go further(Used by Firewall). REJECT          - Terminate TCP connection by sending TCP reset for a packet when a rule with this action gets a match (Used by Firewall). REDIRECT        - Redirect any packet to a partner appliance when a rule with this action gets a match (Used by Service Insertion). DO_NOT_REDIRECT - Do not redirect any packet to a partner appliance when a rule with this action gets a match (Used by Service Insertion).")
  public ActionEnum getAction() {
    return action;
  }

  public void setAction(ActionEnum action) {
    this.action = action;
  }

   /**
   * Priority of the rule.
   * @return priority
  **/
  @Schema(description = "Priority of the rule.")
  public Long getPriority() {
    return priority;
  }

  public DSRule sourcesExcluded(Boolean sourcesExcluded) {
    this.sourcesExcluded = sourcesExcluded;
    return this;
  }

   /**
   * Negation of the source.
   * @return sourcesExcluded
  **/
  @Schema(description = "Negation of the source.")
  public Boolean isSourcesExcluded() {
    return sourcesExcluded;
  }

  public void setSourcesExcluded(Boolean sourcesExcluded) {
    this.sourcesExcluded = sourcesExcluded;
  }

  public DSRule destinationsExcluded(Boolean destinationsExcluded) {
    this.destinationsExcluded = destinationsExcluded;
    return this;
  }

   /**
   * Negation of the destination.
   * @return destinationsExcluded
  **/
  @Schema(description = "Negation of the destination.")
  public Boolean isDestinationsExcluded() {
    return destinationsExcluded;
  }

  public void setDestinationsExcluded(Boolean destinationsExcluded) {
    this.destinationsExcluded = destinationsExcluded;
  }

  public DSRule destinations(List<ResourceReference> destinations) {
    this.destinations = destinations;
    return this;
  }

  public DSRule addDestinationsItem(ResourceReference destinationsItem) {
    if (this.destinations == null) {
      this.destinations = new ArrayList<ResourceReference>();
    }
    this.destinations.add(destinationsItem);
    return this;
  }

   /**
   * List of the destinations. Null will be treated as any.
   * @return destinations
  **/
  @Schema(description = "List of the destinations. Null will be treated as any.")
  public List<ResourceReference> getDestinations() {
    return destinations;
  }

  public void setDestinations(List<ResourceReference> destinations) {
    this.destinations = destinations;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DSRule dsRule = (DSRule) o;
    return Objects.equals(this.isDefault, dsRule.isDefault) &&
        Objects.equals(this.direction, dsRule.direction) &&
        Objects.equals(this.ruleTag, dsRule.ruleTag) &&
        Objects.equals(this.ipProtocol, dsRule.ipProtocol) &&
        Objects.equals(this.notes, dsRule.notes) &&
        Objects.equals(this.appliedTos, dsRule.appliedTos) &&
        Objects.equals(this.logged, dsRule.logged) &&
        Objects.equals(this.disabled, dsRule.disabled) &&
        Objects.equals(this.sources, dsRule.sources) &&
        Objects.equals(this.action, dsRule.action) &&
        Objects.equals(this.priority, dsRule.priority) &&
        Objects.equals(this.sourcesExcluded, dsRule.sourcesExcluded) &&
        Objects.equals(this.destinationsExcluded, dsRule.destinationsExcluded) &&
        Objects.equals(this.destinations, dsRule.destinations) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(isDefault, direction, ruleTag, ipProtocol, notes, appliedTos, logged, disabled, sources, action, priority, sourcesExcluded, destinationsExcluded, destinations, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DSRule {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    isDefault: ").append(toIndentedString(isDefault)).append("\n");
    sb.append("    direction: ").append(toIndentedString(direction)).append("\n");
    sb.append("    ruleTag: ").append(toIndentedString(ruleTag)).append("\n");
    sb.append("    ipProtocol: ").append(toIndentedString(ipProtocol)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    appliedTos: ").append(toIndentedString(appliedTos)).append("\n");
    sb.append("    logged: ").append(toIndentedString(logged)).append("\n");
    sb.append("    disabled: ").append(toIndentedString(disabled)).append("\n");
    sb.append("    sources: ").append(toIndentedString(sources)).append("\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    priority: ").append(toIndentedString(priority)).append("\n");
    sb.append("    sourcesExcluded: ").append(toIndentedString(sourcesExcluded)).append("\n");
    sb.append("    destinationsExcluded: ").append(toIndentedString(destinationsExcluded)).append("\n");
    sb.append("    destinations: ").append(toIndentedString(destinations)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
