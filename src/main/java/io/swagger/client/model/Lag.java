/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.Uplink;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * LACP group
 */
@Schema(description = "LACP group")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class Lag {
  @SerializedName("uplinks")
  private List<Uplink> uplinks = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("number_of_uplinks")
  private Integer numberOfUplinks = null;

  /**
   * LACP timeout type
   */
  @JsonAdapter(TimeoutTypeEnum.Adapter.class)
  public enum TimeoutTypeEnum {
    SLOW("SLOW"),
    FAST("FAST");

    private String value;

    TimeoutTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static TimeoutTypeEnum fromValue(String text) {
      for (TimeoutTypeEnum b : TimeoutTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<TimeoutTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TimeoutTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TimeoutTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TimeoutTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("timeout_type")
  private TimeoutTypeEnum timeoutType = TimeoutTypeEnum.SLOW;

  /**
   * LACP load balance Algorithm
   */
  @JsonAdapter(LoadBalanceAlgorithmEnum.Adapter.class)
  public enum LoadBalanceAlgorithmEnum {
    SRCMAC("SRCMAC"),
    DESTMAC("DESTMAC"),
    SRCDESTMAC("SRCDESTMAC"),
    SRCDESTIPVLAN("SRCDESTIPVLAN"),
    SRCDESTMACIPPORT("SRCDESTMACIPPORT");

    private String value;

    LoadBalanceAlgorithmEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static LoadBalanceAlgorithmEnum fromValue(String text) {
      for (LoadBalanceAlgorithmEnum b : LoadBalanceAlgorithmEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<LoadBalanceAlgorithmEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LoadBalanceAlgorithmEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LoadBalanceAlgorithmEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return LoadBalanceAlgorithmEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("load_balance_algorithm")
  private LoadBalanceAlgorithmEnum loadBalanceAlgorithm = null;

  @SerializedName("id")
  private String id = null;

  /**
   * LACP group mode
   */
  @JsonAdapter(ModeEnum.Adapter.class)
  public enum ModeEnum {
    ACTIVE("ACTIVE"),
    PASSIVE("PASSIVE");

    private String value;

    ModeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ModeEnum fromValue(String text) {
      for (ModeEnum b : ModeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ModeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ModeEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("mode")
  private ModeEnum mode = null;

   /**
   * uplink names
   * @return uplinks
  **/
  @Schema(description = "uplink names")
  public List<Uplink> getUplinks() {
    return uplinks;
  }

  public Lag name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Lag name
   * @return name
  **/
  @Schema(required = true, description = "Lag name")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public Lag numberOfUplinks(Integer numberOfUplinks) {
    this.numberOfUplinks = numberOfUplinks;
    return this;
  }

   /**
   * number of uplinks
   * minimum: 2
   * maximum: 32
   * @return numberOfUplinks
  **/
  @Schema(required = true, description = "number of uplinks")
  public Integer getNumberOfUplinks() {
    return numberOfUplinks;
  }

  public void setNumberOfUplinks(Integer numberOfUplinks) {
    this.numberOfUplinks = numberOfUplinks;
  }

  public Lag timeoutType(TimeoutTypeEnum timeoutType) {
    this.timeoutType = timeoutType;
    return this;
  }

   /**
   * LACP timeout type
   * @return timeoutType
  **/
  @Schema(description = "LACP timeout type")
  public TimeoutTypeEnum getTimeoutType() {
    return timeoutType;
  }

  public void setTimeoutType(TimeoutTypeEnum timeoutType) {
    this.timeoutType = timeoutType;
  }

  public Lag loadBalanceAlgorithm(LoadBalanceAlgorithmEnum loadBalanceAlgorithm) {
    this.loadBalanceAlgorithm = loadBalanceAlgorithm;
    return this;
  }

   /**
   * LACP load balance Algorithm
   * @return loadBalanceAlgorithm
  **/
  @Schema(required = true, description = "LACP load balance Algorithm")
  public LoadBalanceAlgorithmEnum getLoadBalanceAlgorithm() {
    return loadBalanceAlgorithm;
  }

  public void setLoadBalanceAlgorithm(LoadBalanceAlgorithmEnum loadBalanceAlgorithm) {
    this.loadBalanceAlgorithm = loadBalanceAlgorithm;
  }

   /**
   * unique id
   * @return id
  **/
  @Schema(description = "unique id")
  public String getId() {
    return id;
  }

  public Lag mode(ModeEnum mode) {
    this.mode = mode;
    return this;
  }

   /**
   * LACP group mode
   * @return mode
  **/
  @Schema(required = true, description = "LACP group mode")
  public ModeEnum getMode() {
    return mode;
  }

  public void setMode(ModeEnum mode) {
    this.mode = mode;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Lag lag = (Lag) o;
    return Objects.equals(this.uplinks, lag.uplinks) &&
        Objects.equals(this.name, lag.name) &&
        Objects.equals(this.numberOfUplinks, lag.numberOfUplinks) &&
        Objects.equals(this.timeoutType, lag.timeoutType) &&
        Objects.equals(this.loadBalanceAlgorithm, lag.loadBalanceAlgorithm) &&
        Objects.equals(this.id, lag.id) &&
        Objects.equals(this.mode, lag.mode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(uplinks, name, numberOfUplinks, timeoutType, loadBalanceAlgorithm, id, mode);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Lag {\n");
    
    sb.append("    uplinks: ").append(toIndentedString(uplinks)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    numberOfUplinks: ").append(toIndentedString(numberOfUplinks)).append("\n");
    sb.append("    timeoutType: ").append(toIndentedString(timeoutType)).append("\n");
    sb.append("    loadBalanceAlgorithm: ").append(toIndentedString(loadBalanceAlgorithm)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    mode: ").append(toIndentedString(mode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
