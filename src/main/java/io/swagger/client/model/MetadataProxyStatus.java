/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * MetadataProxyStatus
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class MetadataProxyStatus {
  /**
   * UP means the metadata proxy is working fine on both transport-nodes(if have); DOWN means the metadata proxy is is down on both transport-nodes(if have), hence the metadata proxy will not repsonse any metadata request; Error means error happens on transport-node(s) or no status is reported from transport-node(s). The metadata proxy may be working (or not working); NO_BACK means metadata proxy is working in one of the transport node while not in the other transport-node (if have). Hence if the metadata proxy in the working transport-node goes down, the metadata proxy will go down. 
   */
  @JsonAdapter(ProxyStatusEnum.Adapter.class)
  public enum ProxyStatusEnum {
    UP("UP"),
    DOWN("DOWN"),
    ERROR("ERROR"),
    NO_BACKUP("NO_BACKUP");

    private String value;

    ProxyStatusEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ProxyStatusEnum fromValue(String text) {
      for (ProxyStatusEnum b : ProxyStatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ProxyStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProxyStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProxyStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ProxyStatusEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("proxy_status")
  private ProxyStatusEnum proxyStatus = null;

  @SerializedName("error_message")
  private String errorMessage = null;

  @SerializedName("transport_nodes")
  private List<String> transportNodes = new ArrayList<String>();

  public MetadataProxyStatus proxyStatus(ProxyStatusEnum proxyStatus) {
    this.proxyStatus = proxyStatus;
    return this;
  }

   /**
   * UP means the metadata proxy is working fine on both transport-nodes(if have); DOWN means the metadata proxy is is down on both transport-nodes(if have), hence the metadata proxy will not repsonse any metadata request; Error means error happens on transport-node(s) or no status is reported from transport-node(s). The metadata proxy may be working (or not working); NO_BACK means metadata proxy is working in one of the transport node while not in the other transport-node (if have). Hence if the metadata proxy in the working transport-node goes down, the metadata proxy will go down. 
   * @return proxyStatus
  **/
  @Schema(required = true, description = "UP means the metadata proxy is working fine on both transport-nodes(if have); DOWN means the metadata proxy is is down on both transport-nodes(if have), hence the metadata proxy will not repsonse any metadata request; Error means error happens on transport-node(s) or no status is reported from transport-node(s). The metadata proxy may be working (or not working); NO_BACK means metadata proxy is working in one of the transport node while not in the other transport-node (if have). Hence if the metadata proxy in the working transport-node goes down, the metadata proxy will go down. ")
  public ProxyStatusEnum getProxyStatus() {
    return proxyStatus;
  }

  public void setProxyStatus(ProxyStatusEnum proxyStatus) {
    this.proxyStatus = proxyStatus;
  }

  public MetadataProxyStatus errorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
    return this;
  }

   /**
   * Error message, if available
   * @return errorMessage
  **/
  @Schema(description = "Error message, if available")
  public String getErrorMessage() {
    return errorMessage;
  }

  public void setErrorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
  }

  public MetadataProxyStatus transportNodes(List<String> transportNodes) {
    this.transportNodes = transportNodes;
    return this;
  }

  public MetadataProxyStatus addTransportNodesItem(String transportNodesItem) {
    this.transportNodes.add(transportNodesItem);
    return this;
  }

   /**
   * Order of the transport nodes is insensitive because Metadata Proxy is running in Active-Active mode among target transport nodes. 
   * @return transportNodes
  **/
  @Schema(required = true, description = "Order of the transport nodes is insensitive because Metadata Proxy is running in Active-Active mode among target transport nodes. ")
  public List<String> getTransportNodes() {
    return transportNodes;
  }

  public void setTransportNodes(List<String> transportNodes) {
    this.transportNodes = transportNodes;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MetadataProxyStatus metadataProxyStatus = (MetadataProxyStatus) o;
    return Objects.equals(this.proxyStatus, metadataProxyStatus.proxyStatus) &&
        Objects.equals(this.errorMessage, metadataProxyStatus.errorMessage) &&
        Objects.equals(this.transportNodes, metadataProxyStatus.transportNodes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(proxyStatus, errorMessage, transportNodes);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MetadataProxyStatus {\n");
    
    sb.append("    proxyStatus: ").append(toIndentedString(proxyStatus)).append("\n");
    sb.append("    errorMessage: ").append(toIndentedString(errorMessage)).append("\n");
    sb.append("    transportNodes: ").append(toIndentedString(transportNodes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
