/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.Datasource;
import io.swagger.client.model.Footer;
import io.swagger.client.model.Icon;
import io.swagger.client.model.Label;
import io.swagger.client.model.Layout;
import io.swagger.client.model.Legend;
import io.swagger.client.model.WidgetConfiguration;
import io.swagger.client.model.WidgetItem;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * Represents a container to group widgets that belong to a common category or have a common purpose.
 */
@Schema(description = "Represents a container to group widgets that belong to a common category or have a common purpose.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class ContainerConfiguration extends WidgetConfiguration {
  @SerializedName("widgets")
  private List<WidgetItem> widgets = null;

  @SerializedName("navigation")
  private String navigation = null;

  @SerializedName("labels")
  private List<Label> labels = null;

  @SerializedName("span")
  private Integer span = 2;

  @SerializedName("layout")
  private Layout layout = null;

  public ContainerConfiguration widgets(List<WidgetItem> widgets) {
    this.widgets = widgets;
    return this;
  }

  public ContainerConfiguration addWidgetsItem(WidgetItem widgetsItem) {
    if (this.widgets == null) {
      this.widgets = new ArrayList<WidgetItem>();
    }
    this.widgets.add(widgetsItem);
    return this;
  }

   /**
   * If not specified, creates an empty container.
   * @return widgets
  **/
  @Schema(description = "If not specified, creates an empty container.")
  public List<WidgetItem> getWidgets() {
    return widgets;
  }

  public void setWidgets(List<WidgetItem> widgets) {
    this.widgets = widgets;
  }

  public ContainerConfiguration navigation(String navigation) {
    this.navigation = navigation;
    return this;
  }

   /**
   * Hyperlink of the specified UI page that provides details.
   * @return navigation
  **/
  @Schema(description = "Hyperlink of the specified UI page that provides details.")
  public String getNavigation() {
    return navigation;
  }

  public void setNavigation(String navigation) {
    this.navigation = navigation;
  }

  public ContainerConfiguration labels(List<Label> labels) {
    this.labels = labels;
    return this;
  }

  public ContainerConfiguration addLabelsItem(Label labelsItem) {
    if (this.labels == null) {
      this.labels = new ArrayList<Label>();
    }
    this.labels.add(labelsItem);
    return this;
  }

   /**
   * Labels for the container.
   * @return labels
  **/
  @Schema(description = "Labels for the container.")
  public List<Label> getLabels() {
    return labels;
  }

  public void setLabels(List<Label> labels) {
    this.labels = labels;
  }

  public ContainerConfiguration span(Integer span) {
    this.span = span;
    return this;
  }

   /**
   * Represents the horizontal span of the container.
   * @return span
  **/
  @Schema(description = "Represents the horizontal span of the container.")
  public Integer getSpan() {
    return span;
  }

  public void setSpan(Integer span) {
    this.span = span;
  }

  public ContainerConfiguration layout(Layout layout) {
    this.layout = layout;
    return this;
  }

   /**
   * Get layout
   * @return layout
  **/
  @Schema(description = "")
  public Layout getLayout() {
    return layout;
  }

  public void setLayout(Layout layout) {
    this.layout = layout;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContainerConfiguration containerConfiguration = (ContainerConfiguration) o;
    return Objects.equals(this.widgets, containerConfiguration.widgets) &&
        Objects.equals(this.navigation, containerConfiguration.navigation) &&
        Objects.equals(this.labels, containerConfiguration.labels) &&
        Objects.equals(this.span, containerConfiguration.span) &&
        Objects.equals(this.layout, containerConfiguration.layout) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(widgets, navigation, labels, span, layout, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContainerConfiguration {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    widgets: ").append(toIndentedString(widgets)).append("\n");
    sb.append("    navigation: ").append(toIndentedString(navigation)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    span: ").append(toIndentedString(span)).append("\n");
    sb.append("    layout: ").append(toIndentedString(layout)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
