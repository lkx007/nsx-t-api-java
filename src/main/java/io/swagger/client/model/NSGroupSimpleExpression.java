/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.NSGroupExpression;
import io.swagger.client.model.ResourceReference;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * Simple expressions to represent NSGroup membership
 */
@Schema(description = "Simple expressions to represent NSGroup membership")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class NSGroupSimpleExpression extends NSGroupExpression {
  @SerializedName("target_resource")
  private ResourceReference targetResource = null;

  @SerializedName("target_property")
  private String targetProperty = null;

  /**
   * Type of the resource on which this expression is evaluated
   */
  @JsonAdapter(TargetTypeEnum.Adapter.class)
  public enum TargetTypeEnum {
    NSGROUP("NSGroup"),
    IPSET("IPSet"),
    MACSET("MACSet"),
    LOGICALSWITCH("LogicalSwitch"),
    LOGICALPORT("LogicalPort"),
    VIRTUALMACHINE("VirtualMachine"),
    DIRECTORYGROUP("DirectoryGroup"),
    VIRTUALNETWORKINTERFACE("VirtualNetworkInterface"),
    TRANSPORTNODE("TransportNode");

    private String value;

    TargetTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static TargetTypeEnum fromValue(String text) {
      for (TargetTypeEnum b : TargetTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<TargetTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TargetTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TargetTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TargetTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("target_type")
  private TargetTypeEnum targetType = null;

  @SerializedName("value")
  private String value = null;

  /**
   * Operator of the expression
   */
  @JsonAdapter(OpEnum.Adapter.class)
  public enum OpEnum {
    EQUALS("EQUALS"),
    CONTAINS("CONTAINS"),
    STARTSWITH("STARTSWITH"),
    ENDSWITH("ENDSWITH"),
    NOTEQUALS("NOTEQUALS");

    private String value;

    OpEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static OpEnum fromValue(String text) {
      for (OpEnum b : OpEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<OpEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OpEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OpEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return OpEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("op")
  private OpEnum op = null;

  public NSGroupSimpleExpression targetResource(ResourceReference targetResource) {
    this.targetResource = targetResource;
    return this;
  }

   /**
   * Get targetResource
   * @return targetResource
  **/
  @Schema(description = "")
  public ResourceReference getTargetResource() {
    return targetResource;
  }

  public void setTargetResource(ResourceReference targetResource) {
    this.targetResource = targetResource;
  }

  public NSGroupSimpleExpression targetProperty(String targetProperty) {
    this.targetProperty = targetProperty;
    return this;
  }

   /**
   * Field of the resource on which this expression is evaluated
   * @return targetProperty
  **/
  @Schema(required = true, description = "Field of the resource on which this expression is evaluated")
  public String getTargetProperty() {
    return targetProperty;
  }

  public void setTargetProperty(String targetProperty) {
    this.targetProperty = targetProperty;
  }

  public NSGroupSimpleExpression targetType(TargetTypeEnum targetType) {
    this.targetType = targetType;
    return this;
  }

   /**
   * Type of the resource on which this expression is evaluated
   * @return targetType
  **/
  @Schema(required = true, description = "Type of the resource on which this expression is evaluated")
  public TargetTypeEnum getTargetType() {
    return targetType;
  }

  public void setTargetType(TargetTypeEnum targetType) {
    this.targetType = targetType;
  }

  public NSGroupSimpleExpression value(String value) {
    this.value = value;
    return this;
  }

   /**
   * Value that satisfies this expression
   * @return value
  **/
  @Schema(required = true, description = "Value that satisfies this expression")
  public String getValue() {
    return value;
  }

  public void setValue(String value) {
    this.value = value;
  }

  public NSGroupSimpleExpression op(OpEnum op) {
    this.op = op;
    return this;
  }

   /**
   * Operator of the expression
   * @return op
  **/
  @Schema(required = true, description = "Operator of the expression")
  public OpEnum getOp() {
    return op;
  }

  public void setOp(OpEnum op) {
    this.op = op;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NSGroupSimpleExpression nsGroupSimpleExpression = (NSGroupSimpleExpression) o;
    return Objects.equals(this.targetResource, nsGroupSimpleExpression.targetResource) &&
        Objects.equals(this.targetProperty, nsGroupSimpleExpression.targetProperty) &&
        Objects.equals(this.targetType, nsGroupSimpleExpression.targetType) &&
        Objects.equals(this.value, nsGroupSimpleExpression.value) &&
        Objects.equals(this.op, nsGroupSimpleExpression.op) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(targetResource, targetProperty, targetType, value, op, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NSGroupSimpleExpression {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    targetResource: ").append(toIndentedString(targetResource)).append("\n");
    sb.append("    targetProperty: ").append(toIndentedString(targetProperty)).append("\n");
    sb.append("    targetType: ").append(toIndentedString(targetType)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    op: ").append(toIndentedString(op)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
