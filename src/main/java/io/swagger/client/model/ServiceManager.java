/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.CallbackAuthenticationScheme;
import io.swagger.client.model.ManagedResource;
import io.swagger.client.model.ResourceReference;
import io.swagger.client.model.Tag;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * Partner console endpoint information for enabling NSX to callback with events and status.
 */
@Schema(description = "Partner console endpoint information for enabling NSX to callback with events and status.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class ServiceManager extends ManagedResource {
  @SerializedName("port")
  private Long port = null;

  @SerializedName("service_ids")
  private List<ResourceReference> serviceIds = new ArrayList<ResourceReference>();

  @SerializedName("authentication_scheme")
  private CallbackAuthenticationScheme authenticationScheme = null;

  @SerializedName("thumbprint")
  private String thumbprint = null;

  @SerializedName("vendor_id")
  private String vendorId = null;

  @SerializedName("uri")
  private String uri = null;

  @SerializedName("server")
  private String server = null;

  public ServiceManager port(Long port) {
    this.port = port;
    return this;
  }

   /**
   * Integer port value to specify a standard/non-standard HTTPS port.
   * minimum: 0
   * maximum: 65535
   * @return port
  **/
  @Schema(required = true, description = "Integer port value to specify a standard/non-standard HTTPS port.")
  public Long getPort() {
    return port;
  }

  public void setPort(Long port) {
    this.port = port;
  }

  public ServiceManager serviceIds(List<ResourceReference> serviceIds) {
    this.serviceIds = serviceIds;
    return this;
  }

  public ServiceManager addServiceIdsItem(ResourceReference serviceIdsItem) {
    this.serviceIds.add(serviceIdsItem);
    return this;
  }

   /**
   * The IDs of services, provided by partner.
   * @return serviceIds
  **/
  @Schema(required = true, description = "The IDs of services, provided by partner.")
  public List<ResourceReference> getServiceIds() {
    return serviceIds;
  }

  public void setServiceIds(List<ResourceReference> serviceIds) {
    this.serviceIds = serviceIds;
  }

  public ServiceManager authenticationScheme(CallbackAuthenticationScheme authenticationScheme) {
    this.authenticationScheme = authenticationScheme;
    return this;
  }

   /**
   * Get authenticationScheme
   * @return authenticationScheme
  **/
  @Schema(required = true, description = "")
  public CallbackAuthenticationScheme getAuthenticationScheme() {
    return authenticationScheme;
  }

  public void setAuthenticationScheme(CallbackAuthenticationScheme authenticationScheme) {
    this.authenticationScheme = authenticationScheme;
  }

  public ServiceManager thumbprint(String thumbprint) {
    this.thumbprint = thumbprint;
    return this;
  }

   /**
   * Thumbprint (SHA-256 hash represented in lower case hex) for the certificate on the partner console. This will be required to establish secure communication with the console and to avoid man-in-the-middle attacks.
   * @return thumbprint
  **/
  @Schema(description = "Thumbprint (SHA-256 hash represented in lower case hex) for the certificate on the partner console. This will be required to establish secure communication with the console and to avoid man-in-the-middle attacks.")
  public String getThumbprint() {
    return thumbprint;
  }

  public void setThumbprint(String thumbprint) {
    this.thumbprint = thumbprint;
  }

   /**
   * Id which is unique to a vendor or partner for which the service is created.
   * @return vendorId
  **/
  @Schema(description = "Id which is unique to a vendor or partner for which the service is created.")
  public String getVendorId() {
    return vendorId;
  }

  public ServiceManager uri(String uri) {
    this.uri = uri;
    return this;
  }

   /**
   * URI on which notification requests should be made on the specified server.
   * @return uri
  **/
  @Schema(required = true, description = "URI on which notification requests should be made on the specified server.")
  public String getUri() {
    return uri;
  }

  public void setUri(String uri) {
    this.uri = uri;
  }

  public ServiceManager server(String server) {
    this.server = server;
    return this;
  }

   /**
   * IP address or fully qualified domain name of the partner REST server.
   * @return server
  **/
  @Schema(required = true, description = "IP address or fully qualified domain name of the partner REST server.")
  public String getServer() {
    return server;
  }

  public void setServer(String server) {
    this.server = server;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServiceManager serviceManager = (ServiceManager) o;
    return Objects.equals(this.port, serviceManager.port) &&
        Objects.equals(this.serviceIds, serviceManager.serviceIds) &&
        Objects.equals(this.authenticationScheme, serviceManager.authenticationScheme) &&
        Objects.equals(this.thumbprint, serviceManager.thumbprint) &&
        Objects.equals(this.vendorId, serviceManager.vendorId) &&
        Objects.equals(this.uri, serviceManager.uri) &&
        Objects.equals(this.server, serviceManager.server) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(port, serviceIds, authenticationScheme, thumbprint, vendorId, uri, server, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServiceManager {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    serviceIds: ").append(toIndentedString(serviceIds)).append("\n");
    sb.append("    authenticationScheme: ").append(toIndentedString(authenticationScheme)).append("\n");
    sb.append("    thumbprint: ").append(toIndentedString(thumbprint)).append("\n");
    sb.append("    vendorId: ").append(toIndentedString(vendorId)).append("\n");
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("    server: ").append(toIndentedString(server)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
