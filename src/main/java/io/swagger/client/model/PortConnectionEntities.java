/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.PortConnectionBMEntities;
import io.swagger.client.model.PortConnectionContainersEntities;
import io.swagger.client.model.PortConnectionEdgeNodeGroup;
import io.swagger.client.model.PortConnectionError;
import io.swagger.client.model.PortConnectionHypervisor;
import io.swagger.client.model.PortConnectionLogicalSwitch;
import io.swagger.client.model.PortConnectionRouter;
import io.swagger.client.model.PortConnectionTunnel;
import io.swagger.client.model.VirtualMachine;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * Port Connection Entities (to help draw a visual picture of entities between two ports)
 */
@Schema(description = "Port Connection Entities (to help draw a visual picture of entities between two ports)")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class PortConnectionEntities {
  @SerializedName("containers")
  private PortConnectionContainersEntities containers = null;

  @SerializedName("hypervisors")
  private List<PortConnectionHypervisor> hypervisors = new ArrayList<PortConnectionHypervisor>();

  @SerializedName("errors")
  private List<PortConnectionError> errors = new ArrayList<PortConnectionError>();

  @SerializedName("logical_switches")
  private List<PortConnectionLogicalSwitch> logicalSwitches = new ArrayList<PortConnectionLogicalSwitch>();

  @SerializedName("edge_node_groups")
  private List<PortConnectionEdgeNodeGroup> edgeNodeGroups = null;

  @SerializedName("routers")
  private List<PortConnectionRouter> routers = null;

  @SerializedName("vms")
  private List<VirtualMachine> vms = new ArrayList<VirtualMachine>();

  @SerializedName("tunnels")
  private List<PortConnectionTunnel> tunnels = new ArrayList<PortConnectionTunnel>();

  @SerializedName("physical_hosts")
  private PortConnectionBMEntities physicalHosts = null;

  public PortConnectionEntities containers(PortConnectionContainersEntities containers) {
    this.containers = containers;
    return this;
  }

   /**
   * Get containers
   * @return containers
  **/
  @Schema(required = true, description = "")
  public PortConnectionContainersEntities getContainers() {
    return containers;
  }

  public void setContainers(PortConnectionContainersEntities containers) {
    this.containers = containers;
  }

  public PortConnectionEntities hypervisors(List<PortConnectionHypervisor> hypervisors) {
    this.hypervisors = hypervisors;
    return this;
  }

  public PortConnectionEntities addHypervisorsItem(PortConnectionHypervisor hypervisorsItem) {
    this.hypervisors.add(hypervisorsItem);
    return this;
  }

   /**
   * Get hypervisors
   * @return hypervisors
  **/
  @Schema(required = true, description = "")
  public List<PortConnectionHypervisor> getHypervisors() {
    return hypervisors;
  }

  public void setHypervisors(List<PortConnectionHypervisor> hypervisors) {
    this.hypervisors = hypervisors;
  }

  public PortConnectionEntities errors(List<PortConnectionError> errors) {
    this.errors = errors;
    return this;
  }

  public PortConnectionEntities addErrorsItem(PortConnectionError errorsItem) {
    this.errors.add(errorsItem);
    return this;
  }

   /**
   * Get errors
   * @return errors
  **/
  @Schema(required = true, description = "")
  public List<PortConnectionError> getErrors() {
    return errors;
  }

  public void setErrors(List<PortConnectionError> errors) {
    this.errors = errors;
  }

  public PortConnectionEntities logicalSwitches(List<PortConnectionLogicalSwitch> logicalSwitches) {
    this.logicalSwitches = logicalSwitches;
    return this;
  }

  public PortConnectionEntities addLogicalSwitchesItem(PortConnectionLogicalSwitch logicalSwitchesItem) {
    this.logicalSwitches.add(logicalSwitchesItem);
    return this;
  }

   /**
   * Get logicalSwitches
   * @return logicalSwitches
  **/
  @Schema(required = true, description = "")
  public List<PortConnectionLogicalSwitch> getLogicalSwitches() {
    return logicalSwitches;
  }

  public void setLogicalSwitches(List<PortConnectionLogicalSwitch> logicalSwitches) {
    this.logicalSwitches = logicalSwitches;
  }

  public PortConnectionEntities edgeNodeGroups(List<PortConnectionEdgeNodeGroup> edgeNodeGroups) {
    this.edgeNodeGroups = edgeNodeGroups;
    return this;
  }

  public PortConnectionEntities addEdgeNodeGroupsItem(PortConnectionEdgeNodeGroup edgeNodeGroupsItem) {
    if (this.edgeNodeGroups == null) {
      this.edgeNodeGroups = new ArrayList<PortConnectionEdgeNodeGroup>();
    }
    this.edgeNodeGroups.add(edgeNodeGroupsItem);
    return this;
  }

   /**
   * Get edgeNodeGroups
   * @return edgeNodeGroups
  **/
  @Schema(description = "")
  public List<PortConnectionEdgeNodeGroup> getEdgeNodeGroups() {
    return edgeNodeGroups;
  }

  public void setEdgeNodeGroups(List<PortConnectionEdgeNodeGroup> edgeNodeGroups) {
    this.edgeNodeGroups = edgeNodeGroups;
  }

  public PortConnectionEntities routers(List<PortConnectionRouter> routers) {
    this.routers = routers;
    return this;
  }

  public PortConnectionEntities addRoutersItem(PortConnectionRouter routersItem) {
    if (this.routers == null) {
      this.routers = new ArrayList<PortConnectionRouter>();
    }
    this.routers.add(routersItem);
    return this;
  }

   /**
   * Get routers
   * @return routers
  **/
  @Schema(description = "")
  public List<PortConnectionRouter> getRouters() {
    return routers;
  }

  public void setRouters(List<PortConnectionRouter> routers) {
    this.routers = routers;
  }

  public PortConnectionEntities vms(List<VirtualMachine> vms) {
    this.vms = vms;
    return this;
  }

  public PortConnectionEntities addVmsItem(VirtualMachine vmsItem) {
    this.vms.add(vmsItem);
    return this;
  }

   /**
   * Get vms
   * @return vms
  **/
  @Schema(required = true, description = "")
  public List<VirtualMachine> getVms() {
    return vms;
  }

  public void setVms(List<VirtualMachine> vms) {
    this.vms = vms;
  }

  public PortConnectionEntities tunnels(List<PortConnectionTunnel> tunnels) {
    this.tunnels = tunnels;
    return this;
  }

  public PortConnectionEntities addTunnelsItem(PortConnectionTunnel tunnelsItem) {
    this.tunnels.add(tunnelsItem);
    return this;
  }

   /**
   * Get tunnels
   * @return tunnels
  **/
  @Schema(required = true, description = "")
  public List<PortConnectionTunnel> getTunnels() {
    return tunnels;
  }

  public void setTunnels(List<PortConnectionTunnel> tunnels) {
    this.tunnels = tunnels;
  }

  public PortConnectionEntities physicalHosts(PortConnectionBMEntities physicalHosts) {
    this.physicalHosts = physicalHosts;
    return this;
  }

   /**
   * Get physicalHosts
   * @return physicalHosts
  **/
  @Schema(description = "")
  public PortConnectionBMEntities getPhysicalHosts() {
    return physicalHosts;
  }

  public void setPhysicalHosts(PortConnectionBMEntities physicalHosts) {
    this.physicalHosts = physicalHosts;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PortConnectionEntities portConnectionEntities = (PortConnectionEntities) o;
    return Objects.equals(this.containers, portConnectionEntities.containers) &&
        Objects.equals(this.hypervisors, portConnectionEntities.hypervisors) &&
        Objects.equals(this.errors, portConnectionEntities.errors) &&
        Objects.equals(this.logicalSwitches, portConnectionEntities.logicalSwitches) &&
        Objects.equals(this.edgeNodeGroups, portConnectionEntities.edgeNodeGroups) &&
        Objects.equals(this.routers, portConnectionEntities.routers) &&
        Objects.equals(this.vms, portConnectionEntities.vms) &&
        Objects.equals(this.tunnels, portConnectionEntities.tunnels) &&
        Objects.equals(this.physicalHosts, portConnectionEntities.physicalHosts);
  }

  @Override
  public int hashCode() {
    return Objects.hash(containers, hypervisors, errors, logicalSwitches, edgeNodeGroups, routers, vms, tunnels, physicalHosts);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PortConnectionEntities {\n");
    
    sb.append("    containers: ").append(toIndentedString(containers)).append("\n");
    sb.append("    hypervisors: ").append(toIndentedString(hypervisors)).append("\n");
    sb.append("    errors: ").append(toIndentedString(errors)).append("\n");
    sb.append("    logicalSwitches: ").append(toIndentedString(logicalSwitches)).append("\n");
    sb.append("    edgeNodeGroups: ").append(toIndentedString(edgeNodeGroups)).append("\n");
    sb.append("    routers: ").append(toIndentedString(routers)).append("\n");
    sb.append("    vms: ").append(toIndentedString(vms)).append("\n");
    sb.append("    tunnels: ").append(toIndentedString(tunnels)).append("\n");
    sb.append("    physicalHosts: ").append(toIndentedString(physicalHosts)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
