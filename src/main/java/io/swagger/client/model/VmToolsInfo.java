/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.DiscoveredResource;
import io.swagger.client.model.ResourceReference;
import io.swagger.client.model.Tag;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.List;
/**
 * VmToolsInfo
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class VmToolsInfo extends DiscoveredResource {
  @SerializedName("source")
  private ResourceReference source = null;

  /**
   * Type of VM - Edge, Service or other.
   */
  @JsonAdapter(VmTypeEnum.Adapter.class)
  public enum VmTypeEnum {
    EDGE("EDGE"),
    SERVICE("SERVICE"),
    REGULAR("REGULAR");

    private String value;

    VmTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static VmTypeEnum fromValue(String text) {
      for (VmTypeEnum b : VmTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<VmTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VmTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VmTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return VmTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("vm_type")
  private VmTypeEnum vmType = null;

  @SerializedName("network_agent_version")
  private String networkAgentVersion = null;

  @SerializedName("host_local_id")
  private String hostLocalId = null;

  @SerializedName("external_id")
  private String externalId = null;

  @SerializedName("tools_version")
  private String toolsVersion = null;

  @SerializedName("file_agent_version")
  private String fileAgentVersion = null;

  public VmToolsInfo source(ResourceReference source) {
    this.source = source;
    return this;
  }

   /**
   * Get source
   * @return source
  **/
  @Schema(description = "")
  public ResourceReference getSource() {
    return source;
  }

  public void setSource(ResourceReference source) {
    this.source = source;
  }

   /**
   * Type of VM - Edge, Service or other.
   * @return vmType
  **/
  @Schema(description = "Type of VM - Edge, Service or other.")
  public VmTypeEnum getVmType() {
    return vmType;
  }

   /**
   * Version of network agent on the VM of a third party partner solution.
   * @return networkAgentVersion
  **/
  @Schema(description = "Version of network agent on the VM of a third party partner solution.")
  public String getNetworkAgentVersion() {
    return networkAgentVersion;
  }

   /**
   * Id of the VM which is assigned locally by the host. It is the VM-moref on ESXi hosts, in other environments it is VM UUID.
   * @return hostLocalId
  **/
  @Schema(description = "Id of the VM which is assigned locally by the host. It is the VM-moref on ESXi hosts, in other environments it is VM UUID.")
  public String getHostLocalId() {
    return hostLocalId;
  }

   /**
   * Current external id of this virtual machine in the system.
   * @return externalId
  **/
  @Schema(description = "Current external id of this virtual machine in the system.")
  public String getExternalId() {
    return externalId;
  }

   /**
   * Version of VMTools installed on the VM.
   * @return toolsVersion
  **/
  @Schema(description = "Version of VMTools installed on the VM.")
  public String getToolsVersion() {
    return toolsVersion;
  }

   /**
   * Version of file agent on the VM of a third party partner solution.
   * @return fileAgentVersion
  **/
  @Schema(description = "Version of file agent on the VM of a third party partner solution.")
  public String getFileAgentVersion() {
    return fileAgentVersion;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VmToolsInfo vmToolsInfo = (VmToolsInfo) o;
    return Objects.equals(this.source, vmToolsInfo.source) &&
        Objects.equals(this.vmType, vmToolsInfo.vmType) &&
        Objects.equals(this.networkAgentVersion, vmToolsInfo.networkAgentVersion) &&
        Objects.equals(this.hostLocalId, vmToolsInfo.hostLocalId) &&
        Objects.equals(this.externalId, vmToolsInfo.externalId) &&
        Objects.equals(this.toolsVersion, vmToolsInfo.toolsVersion) &&
        Objects.equals(this.fileAgentVersion, vmToolsInfo.fileAgentVersion) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(source, vmType, networkAgentVersion, hostLocalId, externalId, toolsVersion, fileAgentVersion, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VmToolsInfo {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    vmType: ").append(toIndentedString(vmType)).append("\n");
    sb.append("    networkAgentVersion: ").append(toIndentedString(networkAgentVersion)).append("\n");
    sb.append("    hostLocalId: ").append(toIndentedString(hostLocalId)).append("\n");
    sb.append("    externalId: ").append(toIndentedString(externalId)).append("\n");
    sb.append("    toolsVersion: ").append(toIndentedString(toolsVersion)).append("\n");
    sb.append("    fileAgentVersion: ").append(toIndentedString(fileAgentVersion)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
