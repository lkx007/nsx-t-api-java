/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.ManagedResource;
import io.swagger.client.model.Tag;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.List;
/**
 * PrincipalIdentity
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class PrincipalIdentity extends ManagedResource {
  @SerializedName("is_protected")
  private Boolean isProtected = null;

  @SerializedName("role")
  private String role = null;

  @SerializedName("name")
  private String name = null;

  /**
   * Use the &#x27;role&#x27; field instead and pass in &#x27;auditor&#x27; for read_only_api_users or &#x27;enterprise_admin&#x27; for the others.
   */
  @JsonAdapter(PermissionGroupEnum.Adapter.class)
  public enum PermissionGroupEnum {
    READ_ONLY_API_USERS("read_only_api_users"),
    READ_WRITE_API_USERS("read_write_api_users"),
    SUPERUSERS("superusers"),
    UNDEFINED("undefined");

    private String value;

    PermissionGroupEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static PermissionGroupEnum fromValue(String text) {
      for (PermissionGroupEnum b : PermissionGroupEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<PermissionGroupEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PermissionGroupEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PermissionGroupEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return PermissionGroupEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("permission_group")
  private PermissionGroupEnum permissionGroup = null;

  @SerializedName("certificate_id")
  private String certificateId = null;

  @SerializedName("node_id")
  private String nodeId = null;

  public PrincipalIdentity isProtected(Boolean isProtected) {
    this.isProtected = isProtected;
    return this;
  }

   /**
   * Indicator whether the entities created by this principal should be protected
   * @return isProtected
  **/
  @Schema(description = "Indicator whether the entities created by this principal should be protected")
  public Boolean isIsProtected() {
    return isProtected;
  }

  public void setIsProtected(Boolean isProtected) {
    this.isProtected = isProtected;
  }

  public PrincipalIdentity role(String role) {
    this.role = role;
    return this;
  }

   /**
   * Role
   * @return role
  **/
  @Schema(description = "Role")
  public String getRole() {
    return role;
  }

  public void setRole(String role) {
    this.role = role;
  }

  public PrincipalIdentity name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Name of the principal
   * @return name
  **/
  @Schema(required = true, description = "Name of the principal")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public PrincipalIdentity permissionGroup(PermissionGroupEnum permissionGroup) {
    this.permissionGroup = permissionGroup;
    return this;
  }

   /**
   * Use the &#x27;role&#x27; field instead and pass in &#x27;auditor&#x27; for read_only_api_users or &#x27;enterprise_admin&#x27; for the others.
   * @return permissionGroup
  **/
  @Schema(description = "Use the 'role' field instead and pass in 'auditor' for read_only_api_users or 'enterprise_admin' for the others.")
  public PermissionGroupEnum getPermissionGroup() {
    return permissionGroup;
  }

  public void setPermissionGroup(PermissionGroupEnum permissionGroup) {
    this.permissionGroup = permissionGroup;
  }

  public PrincipalIdentity certificateId(String certificateId) {
    this.certificateId = certificateId;
    return this;
  }

   /**
   * Id of the stored certificate. When used with the deprecated POST /trust-management/principal-identities API this field is required.
   * @return certificateId
  **/
  @Schema(description = "Id of the stored certificate. When used with the deprecated POST /trust-management/principal-identities API this field is required.")
  public String getCertificateId() {
    return certificateId;
  }

  public void setCertificateId(String certificateId) {
    this.certificateId = certificateId;
  }

  public PrincipalIdentity nodeId(String nodeId) {
    this.nodeId = nodeId;
    return this;
  }

   /**
   * Unique node-id of a principal
   * @return nodeId
  **/
  @Schema(required = true, description = "Unique node-id of a principal")
  public String getNodeId() {
    return nodeId;
  }

  public void setNodeId(String nodeId) {
    this.nodeId = nodeId;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PrincipalIdentity principalIdentity = (PrincipalIdentity) o;
    return Objects.equals(this.isProtected, principalIdentity.isProtected) &&
        Objects.equals(this.role, principalIdentity.role) &&
        Objects.equals(this.name, principalIdentity.name) &&
        Objects.equals(this.permissionGroup, principalIdentity.permissionGroup) &&
        Objects.equals(this.certificateId, principalIdentity.certificateId) &&
        Objects.equals(this.nodeId, principalIdentity.nodeId) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(isProtected, role, name, permissionGroup, certificateId, nodeId, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PrincipalIdentity {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    isProtected: ").append(toIndentedString(isProtected)).append("\n");
    sb.append("    role: ").append(toIndentedString(role)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    permissionGroup: ").append(toIndentedString(permissionGroup)).append("\n");
    sb.append("    certificateId: ").append(toIndentedString(certificateId)).append("\n");
    sb.append("    nodeId: ").append(toIndentedString(nodeId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
