/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.CsvRecord;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * AppInfoHostVmCsvRecord
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class AppInfoHostVmCsvRecord extends CsvRecord {
  @SerializedName("host_vms")
  private String hostVms = null;

  @SerializedName("version")
  private String version = null;

  @SerializedName("display_name")
  private String displayName = null;

  /**
   * OS type of the VM
   */
  @JsonAdapter(OsTypeEnum.Adapter.class)
  public enum OsTypeEnum {
    INVALID("INVALID"),
    WINDOWS("WINDOWS"),
    LINUX("LINUX");

    private String value;

    OsTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static OsTypeEnum fromValue(String text) {
      for (OsTypeEnum b : OsTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<OsTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OsTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OsTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return OsTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("os_type")
  private OsTypeEnum osType = null;

  @SerializedName("id")
  private String id = null;

  @SerializedName("manufacturer")
  private String manufacturer = null;

   /**
   * vm ids that this application belongs to
   * @return hostVms
  **/
  @Schema(description = "vm ids that this application belongs to")
  public String getHostVms() {
    return hostVms;
  }

   /**
   * Version of the app
   * @return version
  **/
  @Schema(description = "Version of the app")
  public String getVersion() {
    return version;
  }

   /**
   * Name of the app
   * @return displayName
  **/
  @Schema(description = "Name of the app")
  public String getDisplayName() {
    return displayName;
  }

  public AppInfoHostVmCsvRecord osType(OsTypeEnum osType) {
    this.osType = osType;
    return this;
  }

   /**
   * OS type of the VM
   * @return osType
  **/
  @Schema(description = "OS type of the VM")
  public OsTypeEnum getOsType() {
    return osType;
  }

  public void setOsType(OsTypeEnum osType) {
    this.osType = osType;
  }

   /**
   * Id of the app
   * @return id
  **/
  @Schema(description = "Id of the app")
  public String getId() {
    return id;
  }

   /**
   * Manufacturer of the app
   * @return manufacturer
  **/
  @Schema(description = "Manufacturer of the app")
  public String getManufacturer() {
    return manufacturer;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AppInfoHostVmCsvRecord appInfoHostVmCsvRecord = (AppInfoHostVmCsvRecord) o;
    return Objects.equals(this.hostVms, appInfoHostVmCsvRecord.hostVms) &&
        Objects.equals(this.version, appInfoHostVmCsvRecord.version) &&
        Objects.equals(this.displayName, appInfoHostVmCsvRecord.displayName) &&
        Objects.equals(this.osType, appInfoHostVmCsvRecord.osType) &&
        Objects.equals(this.id, appInfoHostVmCsvRecord.id) &&
        Objects.equals(this.manufacturer, appInfoHostVmCsvRecord.manufacturer) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(hostVms, version, displayName, osType, id, manufacturer, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AppInfoHostVmCsvRecord {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    hostVms: ").append(toIndentedString(hostVms)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    osType: ").append(toIndentedString(osType)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    manufacturer: ").append(toIndentedString(manufacturer)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
