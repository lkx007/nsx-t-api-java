/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.AlarmSource;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * Alarm in NSX that needs users&#x27; attention
 */
@Schema(description = "Alarm in NSX that needs users' attention")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class Alarm {
  @SerializedName("sources")
  private AlarmSource sources = null;

  /**
   * Alarm state
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    UNKNOWN("UNKNOWN"),
    ACTIVE("ACTIVE"),
    ACKNOWLEDGED("ACKNOWLEDGED"),
    RESOLVED("RESOLVED");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static StateEnum fromValue(String text) {
      for (StateEnum b : StateEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StateEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("state")
  private StateEnum state = null;

  @SerializedName("source_comp")
  private String sourceComp = null;

  /**
   * Severity of an Alarm
   */
  @JsonAdapter(SeverityEnum.Adapter.class)
  public enum SeverityEnum {
    UNKNOWN("UNKNOWN"),
    MINOR("MINOR"),
    MAJOR("MAJOR"),
    CRITICAL("CRITICAL");

    private String value;

    SeverityEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static SeverityEnum fromValue(String text) {
      for (SeverityEnum b : SeverityEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<SeverityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SeverityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SeverityEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return SeverityEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("severity")
  private SeverityEnum severity = null;

  @SerializedName("source_comp_id")
  private String sourceCompId = null;

  @SerializedName("timestamp")
  private Long timestamp = null;

  @SerializedName("message")
  private String message = null;

  @SerializedName("id")
  private String id = null;

  @SerializedName("source_subcomp")
  private String sourceSubcomp = null;

  public Alarm sources(AlarmSource sources) {
    this.sources = sources;
    return this;
  }

   /**
   * Get sources
   * @return sources
  **/
  @Schema(description = "")
  public AlarmSource getSources() {
    return sources;
  }

  public void setSources(AlarmSource sources) {
    this.sources = sources;
  }

  public Alarm state(StateEnum state) {
    this.state = state;
    return this;
  }

   /**
   * Alarm state
   * @return state
  **/
  @Schema(required = true, description = "Alarm state")
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }

   /**
   * Alarm source component like nsx-manager, nsx-edge etc
   * @return sourceComp
  **/
  @Schema(description = "Alarm source component like nsx-manager, nsx-edge etc")
  public String getSourceComp() {
    return sourceComp;
  }

   /**
   * Severity of an Alarm
   * @return severity
  **/
  @Schema(description = "Severity of an Alarm")
  public SeverityEnum getSeverity() {
    return severity;
  }

   /**
   * Unique identifier(like UUID) for the node sending the Alarm
   * @return sourceCompId
  **/
  @Schema(description = "Unique identifier(like UUID) for the node sending the Alarm")
  public String getSourceCompId() {
    return sourceCompId;
  }

   /**
   * Date and time in UTC of the Alarm
   * @return timestamp
  **/
  @Schema(description = "Date and time in UTC of the Alarm")
  public Long getTimestamp() {
    return timestamp;
  }

  public Alarm message(String message) {
    this.message = message;
    return this;
  }

   /**
   * Description of the Alarm
   * @return message
  **/
  @Schema(required = true, description = "Description of the Alarm")
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }

   /**
   * Unique identifier for an NSX Alarm
   * @return id
  **/
  @Schema(description = "Unique identifier for an NSX Alarm")
  public String getId() {
    return id;
  }

   /**
   * Alarm source sub component like nsx-mpa etc
   * @return sourceSubcomp
  **/
  @Schema(description = "Alarm source sub component like nsx-mpa etc")
  public String getSourceSubcomp() {
    return sourceSubcomp;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Alarm alarm = (Alarm) o;
    return Objects.equals(this.sources, alarm.sources) &&
        Objects.equals(this.state, alarm.state) &&
        Objects.equals(this.sourceComp, alarm.sourceComp) &&
        Objects.equals(this.severity, alarm.severity) &&
        Objects.equals(this.sourceCompId, alarm.sourceCompId) &&
        Objects.equals(this.timestamp, alarm.timestamp) &&
        Objects.equals(this.message, alarm.message) &&
        Objects.equals(this.id, alarm.id) &&
        Objects.equals(this.sourceSubcomp, alarm.sourceSubcomp);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sources, state, sourceComp, severity, sourceCompId, timestamp, message, id, sourceSubcomp);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Alarm {\n");
    
    sb.append("    sources: ").append(toIndentedString(sources)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    sourceComp: ").append(toIndentedString(sourceComp)).append("\n");
    sb.append("    severity: ").append(toIndentedString(severity)).append("\n");
    sb.append("    sourceCompId: ").append(toIndentedString(sourceCompId)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    sourceSubcomp: ").append(toIndentedString(sourceSubcomp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
