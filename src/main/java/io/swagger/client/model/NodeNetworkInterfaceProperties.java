/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.IPv4AddressProperties;
import io.swagger.client.model.Resource;
import io.swagger.client.model.ResourceLink;
import io.swagger.client.model.SelfResourceLink;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * Node network interface properties
 */
@Schema(description = "Node network interface properties")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class NodeNetworkInterfaceProperties extends Resource {
  @SerializedName("physical_address")
  private String physicalAddress = null;

  @SerializedName("broadcast_address")
  private String broadcastAddress = null;

  /**
   * Interface administration status
   */
  @JsonAdapter(LinkStatusEnum.Adapter.class)
  public enum LinkStatusEnum {
    UP("up"),
    DOWN("down");

    private String value;

    LinkStatusEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static LinkStatusEnum fromValue(String text) {
      for (LinkStatusEnum b : LinkStatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<LinkStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LinkStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LinkStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return LinkStatusEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("link_status")
  private LinkStatusEnum linkStatus = null;

  @SerializedName("default_gateway")
  private String defaultGateway = null;

  @SerializedName("bond_primary")
  private String bondPrimary = null;

  @SerializedName("bond_slaves")
  private List<String> bondSlaves = null;

  @SerializedName("ip_addresses")
  private List<IPv4AddressProperties> ipAddresses = null;

  @SerializedName("vlan")
  private Long vlan = null;

  /**
   * Bond mode
   */
  @JsonAdapter(BondModeEnum.Adapter.class)
  public enum BondModeEnum {
    ACTIVE_BACKUP("ACTIVE_BACKUP"),
    _802_3AD("802_3AD"),
    ROUND_ROBIN("ROUND_ROBIN"),
    BROADCAST("BROADCAST"),
    XOR("XOR"),
    TLB("TLB"),
    ALB("ALB");

    private String value;

    BondModeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static BondModeEnum fromValue(String text) {
      for (BondModeEnum b : BondModeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<BondModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BondModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BondModeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return BondModeEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("bond_mode")
  private BondModeEnum bondMode = null;

  @SerializedName("interface_id")
  private String interfaceId = null;

  /**
   * Interface administration status
   */
  @JsonAdapter(AdminStatusEnum.Adapter.class)
  public enum AdminStatusEnum {
    UP("up"),
    DOWN("down");

    private String value;

    AdminStatusEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static AdminStatusEnum fromValue(String text) {
      for (AdminStatusEnum b : AdminStatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<AdminStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AdminStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AdminStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return AdminStatusEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("admin_status")
  private AdminStatusEnum adminStatus = null;

  /**
   * Interface plane
   */
  @JsonAdapter(PlaneEnum.Adapter.class)
  public enum PlaneEnum {
    MGMT("mgmt"),
    DEBUG("debug"),
    NONE("none");

    private String value;

    PlaneEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static PlaneEnum fromValue(String text) {
      for (PlaneEnum b : PlaneEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<PlaneEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PlaneEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PlaneEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return PlaneEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("plane")
  private PlaneEnum plane = null;

  @SerializedName("is_kni")
  private Boolean isKni = null;

  /**
   * Interface configuration
   */
  @JsonAdapter(IpConfigurationEnum.Adapter.class)
  public enum IpConfigurationEnum {
    DHCP("dhcp"),
    STATIC("static"),
    NOT_CONFIGURED("not configured");

    private String value;

    IpConfigurationEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static IpConfigurationEnum fromValue(String text) {
      for (IpConfigurationEnum b : IpConfigurationEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<IpConfigurationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IpConfigurationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IpConfigurationEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return IpConfigurationEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("ip_configuration")
  private IpConfigurationEnum ipConfiguration = null;

  @SerializedName("mtu")
  private Long mtu = null;

   /**
   * Interface MAC address
   * @return physicalAddress
  **/
  @Schema(description = "Interface MAC address")
  public String getPhysicalAddress() {
    return physicalAddress;
  }

  public NodeNetworkInterfaceProperties broadcastAddress(String broadcastAddress) {
    this.broadcastAddress = broadcastAddress;
    return this;
  }

   /**
   * Interface broadcast address
   * @return broadcastAddress
  **/
  @Schema(description = "Interface broadcast address")
  public String getBroadcastAddress() {
    return broadcastAddress;
  }

  public void setBroadcastAddress(String broadcastAddress) {
    this.broadcastAddress = broadcastAddress;
  }

   /**
   * Interface administration status
   * @return linkStatus
  **/
  @Schema(description = "Interface administration status")
  public LinkStatusEnum getLinkStatus() {
    return linkStatus;
  }

  public NodeNetworkInterfaceProperties defaultGateway(String defaultGateway) {
    this.defaultGateway = defaultGateway;
    return this;
  }

   /**
   * Interface&#x27;s default gateway
   * @return defaultGateway
  **/
  @Schema(description = "Interface's default gateway")
  public String getDefaultGateway() {
    return defaultGateway;
  }

  public void setDefaultGateway(String defaultGateway) {
    this.defaultGateway = defaultGateway;
  }

  public NodeNetworkInterfaceProperties bondPrimary(String bondPrimary) {
    this.bondPrimary = bondPrimary;
    return this;
  }

   /**
   * Bond&#x27;s primary device name in active-backup bond mode
   * @return bondPrimary
  **/
  @Schema(description = "Bond's primary device name in active-backup bond mode")
  public String getBondPrimary() {
    return bondPrimary;
  }

  public void setBondPrimary(String bondPrimary) {
    this.bondPrimary = bondPrimary;
  }

  public NodeNetworkInterfaceProperties bondSlaves(List<String> bondSlaves) {
    this.bondSlaves = bondSlaves;
    return this;
  }

  public NodeNetworkInterfaceProperties addBondSlavesItem(String bondSlavesItem) {
    if (this.bondSlaves == null) {
      this.bondSlaves = new ArrayList<String>();
    }
    this.bondSlaves.add(bondSlavesItem);
    return this;
  }

   /**
   * Bond&#x27;s slave devices
   * @return bondSlaves
  **/
  @Schema(description = "Bond's slave devices")
  public List<String> getBondSlaves() {
    return bondSlaves;
  }

  public void setBondSlaves(List<String> bondSlaves) {
    this.bondSlaves = bondSlaves;
  }

  public NodeNetworkInterfaceProperties ipAddresses(List<IPv4AddressProperties> ipAddresses) {
    this.ipAddresses = ipAddresses;
    return this;
  }

  public NodeNetworkInterfaceProperties addIpAddressesItem(IPv4AddressProperties ipAddressesItem) {
    if (this.ipAddresses == null) {
      this.ipAddresses = new ArrayList<IPv4AddressProperties>();
    }
    this.ipAddresses.add(ipAddressesItem);
    return this;
  }

   /**
   * Interface IP addresses
   * @return ipAddresses
  **/
  @Schema(description = "Interface IP addresses")
  public List<IPv4AddressProperties> getIpAddresses() {
    return ipAddresses;
  }

  public void setIpAddresses(List<IPv4AddressProperties> ipAddresses) {
    this.ipAddresses = ipAddresses;
  }

   /**
   * VLAN Id
   * minimum: 1
   * maximum: 4094
   * @return vlan
  **/
  @Schema(description = "VLAN Id")
  public Long getVlan() {
    return vlan;
  }

  public NodeNetworkInterfaceProperties bondMode(BondModeEnum bondMode) {
    this.bondMode = bondMode;
    return this;
  }

   /**
   * Bond mode
   * @return bondMode
  **/
  @Schema(description = "Bond mode")
  public BondModeEnum getBondMode() {
    return bondMode;
  }

  public void setBondMode(BondModeEnum bondMode) {
    this.bondMode = bondMode;
  }

   /**
   * Interface ID
   * @return interfaceId
  **/
  @Schema(description = "Interface ID")
  public String getInterfaceId() {
    return interfaceId;
  }

   /**
   * Interface administration status
   * @return adminStatus
  **/
  @Schema(description = "Interface administration status")
  public AdminStatusEnum getAdminStatus() {
    return adminStatus;
  }

  public NodeNetworkInterfaceProperties plane(PlaneEnum plane) {
    this.plane = plane;
    return this;
  }

   /**
   * Interface plane
   * @return plane
  **/
  @Schema(description = "Interface plane")
  public PlaneEnum getPlane() {
    return plane;
  }

  public void setPlane(PlaneEnum plane) {
    this.plane = plane;
  }

   /**
   * Interface is a KNI
   * @return isKni
  **/
  @Schema(description = "Interface is a KNI")
  public Boolean isIsKni() {
    return isKni;
  }

  public NodeNetworkInterfaceProperties ipConfiguration(IpConfigurationEnum ipConfiguration) {
    this.ipConfiguration = ipConfiguration;
    return this;
  }

   /**
   * Interface configuration
   * @return ipConfiguration
  **/
  @Schema(required = true, description = "Interface configuration")
  public IpConfigurationEnum getIpConfiguration() {
    return ipConfiguration;
  }

  public void setIpConfiguration(IpConfigurationEnum ipConfiguration) {
    this.ipConfiguration = ipConfiguration;
  }

  public NodeNetworkInterfaceProperties mtu(Long mtu) {
    this.mtu = mtu;
    return this;
  }

   /**
   * Interface MTU
   * @return mtu
  **/
  @Schema(description = "Interface MTU")
  public Long getMtu() {
    return mtu;
  }

  public void setMtu(Long mtu) {
    this.mtu = mtu;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NodeNetworkInterfaceProperties nodeNetworkInterfaceProperties = (NodeNetworkInterfaceProperties) o;
    return Objects.equals(this.physicalAddress, nodeNetworkInterfaceProperties.physicalAddress) &&
        Objects.equals(this.broadcastAddress, nodeNetworkInterfaceProperties.broadcastAddress) &&
        Objects.equals(this.linkStatus, nodeNetworkInterfaceProperties.linkStatus) &&
        Objects.equals(this.defaultGateway, nodeNetworkInterfaceProperties.defaultGateway) &&
        Objects.equals(this.bondPrimary, nodeNetworkInterfaceProperties.bondPrimary) &&
        Objects.equals(this.bondSlaves, nodeNetworkInterfaceProperties.bondSlaves) &&
        Objects.equals(this.ipAddresses, nodeNetworkInterfaceProperties.ipAddresses) &&
        Objects.equals(this.vlan, nodeNetworkInterfaceProperties.vlan) &&
        Objects.equals(this.bondMode, nodeNetworkInterfaceProperties.bondMode) &&
        Objects.equals(this.interfaceId, nodeNetworkInterfaceProperties.interfaceId) &&
        Objects.equals(this.adminStatus, nodeNetworkInterfaceProperties.adminStatus) &&
        Objects.equals(this.plane, nodeNetworkInterfaceProperties.plane) &&
        Objects.equals(this.isKni, nodeNetworkInterfaceProperties.isKni) &&
        Objects.equals(this.ipConfiguration, nodeNetworkInterfaceProperties.ipConfiguration) &&
        Objects.equals(this.mtu, nodeNetworkInterfaceProperties.mtu) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(physicalAddress, broadcastAddress, linkStatus, defaultGateway, bondPrimary, bondSlaves, ipAddresses, vlan, bondMode, interfaceId, adminStatus, plane, isKni, ipConfiguration, mtu, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NodeNetworkInterfaceProperties {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    physicalAddress: ").append(toIndentedString(physicalAddress)).append("\n");
    sb.append("    broadcastAddress: ").append(toIndentedString(broadcastAddress)).append("\n");
    sb.append("    linkStatus: ").append(toIndentedString(linkStatus)).append("\n");
    sb.append("    defaultGateway: ").append(toIndentedString(defaultGateway)).append("\n");
    sb.append("    bondPrimary: ").append(toIndentedString(bondPrimary)).append("\n");
    sb.append("    bondSlaves: ").append(toIndentedString(bondSlaves)).append("\n");
    sb.append("    ipAddresses: ").append(toIndentedString(ipAddresses)).append("\n");
    sb.append("    vlan: ").append(toIndentedString(vlan)).append("\n");
    sb.append("    bondMode: ").append(toIndentedString(bondMode)).append("\n");
    sb.append("    interfaceId: ").append(toIndentedString(interfaceId)).append("\n");
    sb.append("    adminStatus: ").append(toIndentedString(adminStatus)).append("\n");
    sb.append("    plane: ").append(toIndentedString(plane)).append("\n");
    sb.append("    isKni: ").append(toIndentedString(isKni)).append("\n");
    sb.append("    ipConfiguration: ").append(toIndentedString(ipConfiguration)).append("\n");
    sb.append("    mtu: ").append(toIndentedString(mtu)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
