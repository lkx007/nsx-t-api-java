/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.IPSubnet;
import io.swagger.client.model.LogicalRouterPort;
import io.swagger.client.model.ResourceReference;
import io.swagger.client.model.ServiceBinding;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * This port can be configured on both TIER0 and TIER1 logical router. Port can be connected to VLAN or overlay logical switch. Unlike downlink port it does not participate in distributed routing and hosted on all edge cluster members associated with logical router. Stateful services can be applied on this port. 
 */
@Schema(description = "This port can be configured on both TIER0 and TIER1 logical router. Port can be connected to VLAN or overlay logical switch. Unlike downlink port it does not participate in distributed routing and hosted on all edge cluster members associated with logical router. Stateful services can be applied on this port. ")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class LogicalRouterCentralizedServicePort extends LogicalRouterPort {
  @SerializedName("linked_logical_switch_port_id")
  private ResourceReference linkedLogicalSwitchPortId = null;

  @SerializedName("subnets")
  private List<IPSubnet> subnets = new ArrayList<IPSubnet>();

  @SerializedName("enable_netx")
  private Boolean enableNetx = false;

  /**
   * Unicast Reverse Path Forwarding mode
   */
  @JsonAdapter(UrpfModeEnum.Adapter.class)
  public enum UrpfModeEnum {
    NONE("NONE"),
    STRICT("STRICT");

    private String value;

    UrpfModeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static UrpfModeEnum fromValue(String text) {
      for (UrpfModeEnum b : UrpfModeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<UrpfModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final UrpfModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public UrpfModeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return UrpfModeEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("urpf_mode")
  private UrpfModeEnum urpfMode = UrpfModeEnum.STRICT;

  @SerializedName("ndra_profile_id")
  private String ndraProfileId = null;

  @SerializedName("mtu")
  private Long mtu = null;

  public LogicalRouterCentralizedServicePort linkedLogicalSwitchPortId(ResourceReference linkedLogicalSwitchPortId) {
    this.linkedLogicalSwitchPortId = linkedLogicalSwitchPortId;
    return this;
  }

   /**
   * Get linkedLogicalSwitchPortId
   * @return linkedLogicalSwitchPortId
  **/
  @Schema(description = "")
  public ResourceReference getLinkedLogicalSwitchPortId() {
    return linkedLogicalSwitchPortId;
  }

  public void setLinkedLogicalSwitchPortId(ResourceReference linkedLogicalSwitchPortId) {
    this.linkedLogicalSwitchPortId = linkedLogicalSwitchPortId;
  }

  public LogicalRouterCentralizedServicePort subnets(List<IPSubnet> subnets) {
    this.subnets = subnets;
    return this;
  }

  public LogicalRouterCentralizedServicePort addSubnetsItem(IPSubnet subnetsItem) {
    this.subnets.add(subnetsItem);
    return this;
  }

   /**
   * Logical router port subnets
   * @return subnets
  **/
  @Schema(required = true, description = "Logical router port subnets")
  public List<IPSubnet> getSubnets() {
    return subnets;
  }

  public void setSubnets(List<IPSubnet> subnets) {
    this.subnets = subnets;
  }

  public LogicalRouterCentralizedServicePort enableNetx(Boolean enableNetx) {
    this.enableNetx = enableNetx;
    return this;
  }

   /**
   * Port is exclusively used for N-S service insertion
   * @return enableNetx
  **/
  @Schema(description = "Port is exclusively used for N-S service insertion")
  public Boolean isEnableNetx() {
    return enableNetx;
  }

  public void setEnableNetx(Boolean enableNetx) {
    this.enableNetx = enableNetx;
  }

  public LogicalRouterCentralizedServicePort urpfMode(UrpfModeEnum urpfMode) {
    this.urpfMode = urpfMode;
    return this;
  }

   /**
   * Unicast Reverse Path Forwarding mode
   * @return urpfMode
  **/
  @Schema(description = "Unicast Reverse Path Forwarding mode")
  public UrpfModeEnum getUrpfMode() {
    return urpfMode;
  }

  public void setUrpfMode(UrpfModeEnum urpfMode) {
    this.urpfMode = urpfMode;
  }

  public LogicalRouterCentralizedServicePort ndraProfileId(String ndraProfileId) {
    this.ndraProfileId = ndraProfileId;
    return this;
  }

   /**
   * Identifier of Neighbor Discovery Router Advertisement profile associated with port. When NDRA profile id is associated at both the port level and logical router level, the profile id specified at port level takes the precedence. 
   * @return ndraProfileId
  **/
  @Schema(description = "Identifier of Neighbor Discovery Router Advertisement profile associated with port. When NDRA profile id is associated at both the port level and logical router level, the profile id specified at port level takes the precedence. ")
  public String getNdraProfileId() {
    return ndraProfileId;
  }

  public void setNdraProfileId(String ndraProfileId) {
    this.ndraProfileId = ndraProfileId;
  }

  public LogicalRouterCentralizedServicePort mtu(Long mtu) {
    this.mtu = mtu;
    return this;
  }

   /**
   * Maximum transmission unit specifies the size of the largest packet that a network protocol can transmit. If not specified, the global logical MTU set in the /api/v1/global-configs/RoutingGlobalConfig API will be used. 
   * minimum: 64
   * @return mtu
  **/
  @Schema(description = "Maximum transmission unit specifies the size of the largest packet that a network protocol can transmit. If not specified, the global logical MTU set in the /api/v1/global-configs/RoutingGlobalConfig API will be used. ")
  public Long getMtu() {
    return mtu;
  }

  public void setMtu(Long mtu) {
    this.mtu = mtu;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LogicalRouterCentralizedServicePort logicalRouterCentralizedServicePort = (LogicalRouterCentralizedServicePort) o;
    return Objects.equals(this.linkedLogicalSwitchPortId, logicalRouterCentralizedServicePort.linkedLogicalSwitchPortId) &&
        Objects.equals(this.subnets, logicalRouterCentralizedServicePort.subnets) &&
        Objects.equals(this.enableNetx, logicalRouterCentralizedServicePort.enableNetx) &&
        Objects.equals(this.urpfMode, logicalRouterCentralizedServicePort.urpfMode) &&
        Objects.equals(this.ndraProfileId, logicalRouterCentralizedServicePort.ndraProfileId) &&
        Objects.equals(this.mtu, logicalRouterCentralizedServicePort.mtu) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(linkedLogicalSwitchPortId, subnets, enableNetx, urpfMode, ndraProfileId, mtu, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LogicalRouterCentralizedServicePort {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    linkedLogicalSwitchPortId: ").append(toIndentedString(linkedLogicalSwitchPortId)).append("\n");
    sb.append("    subnets: ").append(toIndentedString(subnets)).append("\n");
    sb.append("    enableNetx: ").append(toIndentedString(enableNetx)).append("\n");
    sb.append("    urpfMode: ").append(toIndentedString(urpfMode)).append("\n");
    sb.append("    ndraProfileId: ").append(toIndentedString(ndraProfileId)).append("\n");
    sb.append("    mtu: ").append(toIndentedString(mtu)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
