/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.ManagedResource;
import io.swagger.client.model.Role;
import io.swagger.client.model.Tag;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * User/Group&#x27;s role binding
 */
@Schema(description = "User/Group's role binding")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class RoleBinding extends ManagedResource {
  /**
   * Property &#x27;stale&#x27; can be considered to have these values - absent  - This type of rolebinding does not support stale property TRUE    - Rolebinding is stale in vIDM meaning the user is no longer present in vIDM FALSE   - Rolebinding is available in vIDM UNKNOWN - Rolebinding&#x27;s state of staleness in unknown Once rolebindings become stale, they can be deleted using the API POST /aaa/role-bindings?action&#x3D;delete_stale_bindings
   */
  @JsonAdapter(StaleEnum.Adapter.class)
  public enum StaleEnum {
    TRUE("TRUE"),
    FALSE("FALSE"),
    UNKNOWN("UNKNOWN");

    private String value;

    StaleEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static StaleEnum fromValue(String text) {
      for (StaleEnum b : StaleEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<StaleEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StaleEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StaleEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StaleEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("stale")
  private StaleEnum stale = null;

  /**
   * Type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    REMOTE_USER("remote_user"),
    REMOTE_GROUP("remote_group"),
    LOCAL_USER("local_user"),
    PRINCIPAL_IDENTITY("principal_identity");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static TypeEnum fromValue(String text) {
      for (TypeEnum b : TypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TypeEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("type")
  private TypeEnum type = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("roles")
  private List<Role> roles = null;

   /**
   * Property &#x27;stale&#x27; can be considered to have these values - absent  - This type of rolebinding does not support stale property TRUE    - Rolebinding is stale in vIDM meaning the user is no longer present in vIDM FALSE   - Rolebinding is available in vIDM UNKNOWN - Rolebinding&#x27;s state of staleness in unknown Once rolebindings become stale, they can be deleted using the API POST /aaa/role-bindings?action&#x3D;delete_stale_bindings
   * @return stale
  **/
  @Schema(description = "Property 'stale' can be considered to have these values - absent  - This type of rolebinding does not support stale property TRUE    - Rolebinding is stale in vIDM meaning the user is no longer present in vIDM FALSE   - Rolebinding is available in vIDM UNKNOWN - Rolebinding's state of staleness in unknown Once rolebindings become stale, they can be deleted using the API POST /aaa/role-bindings?action=delete_stale_bindings")
  public StaleEnum getStale() {
    return stale;
  }

   /**
   * Type
   * @return type
  **/
  @Schema(description = "Type")
  public TypeEnum getType() {
    return type;
  }

   /**
   * User/Group&#x27;s name
   * @return name
  **/
  @Schema(description = "User/Group's name")
  public String getName() {
    return name;
  }

   /**
   * Roles
   * @return roles
  **/
  @Schema(description = "Roles")
  public List<Role> getRoles() {
    return roles;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RoleBinding roleBinding = (RoleBinding) o;
    return Objects.equals(this.stale, roleBinding.stale) &&
        Objects.equals(this.type, roleBinding.type) &&
        Objects.equals(this.name, roleBinding.name) &&
        Objects.equals(this.roles, roleBinding.roles) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(stale, type, name, roles, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RoleBinding {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    stale: ").append(toIndentedString(stale)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    roles: ").append(toIndentedString(roles)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
