/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.HaVipConfig;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * Logical router configuration parameters.
 */
@Schema(description = "Logical router configuration parameters.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class LogicalRouterConfig {
  @SerializedName("internal_transit_network")
  private String internalTransitNetwork = null;

  @SerializedName("transport_zone_id")
  private String transportZoneId = null;

  @SerializedName("ha_vip_configs")
  private List<HaVipConfig> haVipConfigs = null;

  @SerializedName("external_transit_networks")
  private List<String> externalTransitNetworks = null;

  public LogicalRouterConfig internalTransitNetwork(String internalTransitNetwork) {
    this.internalTransitNetwork = internalTransitNetwork;
    return this;
  }

   /**
   * CIDR block defining service router to distributed router links. If the value for this field is not provided, then it will be considered as default IPv4 CIDR- \&quot;169.254.0.0/28\&quot; for logical router with ACTIVE_STANDBY HA mode \&quot;169.254.0.0/24\&quot; for logical router with ACTIVE_ACTIVE HA mode 
   * @return internalTransitNetwork
  **/
  @Schema(description = "CIDR block defining service router to distributed router links. If the value for this field is not provided, then it will be considered as default IPv4 CIDR- \"169.254.0.0/28\" for logical router with ACTIVE_STANDBY HA mode \"169.254.0.0/24\" for logical router with ACTIVE_ACTIVE HA mode ")
  public String getInternalTransitNetwork() {
    return internalTransitNetwork;
  }

  public void setInternalTransitNetwork(String internalTransitNetwork) {
    this.internalTransitNetwork = internalTransitNetwork;
  }

  public LogicalRouterConfig transportZoneId(String transportZoneId) {
    this.transportZoneId = transportZoneId;
    return this;
  }

   /**
   * Transport zone of the logical router. If specified then all downlink switches should belong to this transport zone and an error will be thrown if transport zone of the downlink switch doesn&#x27;t match with this transport zone. All internal and external transit switches will be created in this transport zone.
   * @return transportZoneId
  **/
  @Schema(description = "Transport zone of the logical router. If specified then all downlink switches should belong to this transport zone and an error will be thrown if transport zone of the downlink switch doesn't match with this transport zone. All internal and external transit switches will be created in this transport zone.")
  public String getTransportZoneId() {
    return transportZoneId;
  }

  public void setTransportZoneId(String transportZoneId) {
    this.transportZoneId = transportZoneId;
  }

  public LogicalRouterConfig haVipConfigs(List<HaVipConfig> haVipConfigs) {
    this.haVipConfigs = haVipConfigs;
    return this;
  }

  public LogicalRouterConfig addHaVipConfigsItem(HaVipConfig haVipConfigsItem) {
    if (this.haVipConfigs == null) {
      this.haVipConfigs = new ArrayList<HaVipConfig>();
    }
    this.haVipConfigs.add(haVipConfigsItem);
    return this;
  }

   /**
   * This configuration can be defined only for Active-Standby LogicalRouter to provide | redundancy. For mulitple uplink ports, multiple HaVipConfigs must be defined | and each config will pair exactly two uplink ports. The VIP will move and will | always be owned by the Active node. Note - when HaVipConfig[s] are defined, | configuring dynamic-routing is disallowed.
   * @return haVipConfigs
  **/
  @Schema(description = "This configuration can be defined only for Active-Standby LogicalRouter to provide | redundancy. For mulitple uplink ports, multiple HaVipConfigs must be defined | and each config will pair exactly two uplink ports. The VIP will move and will | always be owned by the Active node. Note - when HaVipConfig[s] are defined, | configuring dynamic-routing is disallowed.")
  public List<HaVipConfig> getHaVipConfigs() {
    return haVipConfigs;
  }

  public void setHaVipConfigs(List<HaVipConfig> haVipConfigs) {
    this.haVipConfigs = haVipConfigs;
  }

  public LogicalRouterConfig externalTransitNetworks(List<String> externalTransitNetworks) {
    this.externalTransitNetworks = externalTransitNetworks;
    return this;
  }

  public LogicalRouterConfig addExternalTransitNetworksItem(String externalTransitNetworksItem) {
    if (this.externalTransitNetworks == null) {
      this.externalTransitNetworks = new ArrayList<String>();
    }
    this.externalTransitNetworks.add(externalTransitNetworksItem);
    return this;
  }

   /**
   * CIDR block defining addresses for Tier0 to Tier1 links. If the value for this field is not provided, then it will be considered as default IPv4 CIDR \&quot;100.64.0.0/16\&quot; 
   * @return externalTransitNetworks
  **/
  @Schema(description = "CIDR block defining addresses for Tier0 to Tier1 links. If the value for this field is not provided, then it will be considered as default IPv4 CIDR \"100.64.0.0/16\" ")
  public List<String> getExternalTransitNetworks() {
    return externalTransitNetworks;
  }

  public void setExternalTransitNetworks(List<String> externalTransitNetworks) {
    this.externalTransitNetworks = externalTransitNetworks;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LogicalRouterConfig logicalRouterConfig = (LogicalRouterConfig) o;
    return Objects.equals(this.internalTransitNetwork, logicalRouterConfig.internalTransitNetwork) &&
        Objects.equals(this.transportZoneId, logicalRouterConfig.transportZoneId) &&
        Objects.equals(this.haVipConfigs, logicalRouterConfig.haVipConfigs) &&
        Objects.equals(this.externalTransitNetworks, logicalRouterConfig.externalTransitNetworks);
  }

  @Override
  public int hashCode() {
    return Objects.hash(internalTransitNetwork, transportZoneId, haVipConfigs, externalTransitNetworks);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LogicalRouterConfig {\n");
    
    sb.append("    internalTransitNetwork: ").append(toIndentedString(internalTransitNetwork)).append("\n");
    sb.append("    transportZoneId: ").append(toIndentedString(transportZoneId)).append("\n");
    sb.append("    haVipConfigs: ").append(toIndentedString(haVipConfigs)).append("\n");
    sb.append("    externalTransitNetworks: ").append(toIndentedString(externalTransitNetworks)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
