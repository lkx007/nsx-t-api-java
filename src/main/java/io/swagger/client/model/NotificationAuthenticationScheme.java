/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * NotificationAuthenticationScheme describes how notification requests should authenticate to the server.
 */
@Schema(description = "NotificationAuthenticationScheme describes how notification requests should authenticate to the server.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class NotificationAuthenticationScheme {
  @SerializedName("username")
  private String username = null;

  @SerializedName("certificate_id")
  private String certificateId = null;

  /**
   * Authentication scheme to use when making notification requests to the partner/customer specified watcher. Specify one of BASIC_AUTH or CERTIFICATE.
   */
  @JsonAdapter(SchemeNameEnum.Adapter.class)
  public enum SchemeNameEnum {
    BASIC_AUTH("BASIC_AUTH"),
    CERTIFICATE("CERTIFICATE");

    private String value;

    SchemeNameEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static SchemeNameEnum fromValue(String text) {
      for (SchemeNameEnum b : SchemeNameEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<SchemeNameEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SchemeNameEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SchemeNameEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return SchemeNameEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("scheme_name")
  private SchemeNameEnum schemeName = null;

  @SerializedName("password")
  private String password = null;

  public NotificationAuthenticationScheme username(String username) {
    this.username = username;
    return this;
  }

   /**
   * Username to use if scheme_name is BASIC_AUTH.
   * @return username
  **/
  @Schema(description = "Username to use if scheme_name is BASIC_AUTH.")
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }

  public NotificationAuthenticationScheme certificateId(String certificateId) {
    this.certificateId = certificateId;
    return this;
  }

   /**
   * Certificate ID with a valid certificate and private key, procured from trust-management API.
   * @return certificateId
  **/
  @Schema(description = "Certificate ID with a valid certificate and private key, procured from trust-management API.")
  public String getCertificateId() {
    return certificateId;
  }

  public void setCertificateId(String certificateId) {
    this.certificateId = certificateId;
  }

  public NotificationAuthenticationScheme schemeName(SchemeNameEnum schemeName) {
    this.schemeName = schemeName;
    return this;
  }

   /**
   * Authentication scheme to use when making notification requests to the partner/customer specified watcher. Specify one of BASIC_AUTH or CERTIFICATE.
   * @return schemeName
  **/
  @Schema(required = true, description = "Authentication scheme to use when making notification requests to the partner/customer specified watcher. Specify one of BASIC_AUTH or CERTIFICATE.")
  public SchemeNameEnum getSchemeName() {
    return schemeName;
  }

  public void setSchemeName(SchemeNameEnum schemeName) {
    this.schemeName = schemeName;
  }

  public NotificationAuthenticationScheme password(String password) {
    this.password = password;
    return this;
  }

   /**
   * Password to use if scheme_name is BASIC_AUTH.
   * @return password
  **/
  @Schema(description = "Password to use if scheme_name is BASIC_AUTH.")
  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NotificationAuthenticationScheme notificationAuthenticationScheme = (NotificationAuthenticationScheme) o;
    return Objects.equals(this.username, notificationAuthenticationScheme.username) &&
        Objects.equals(this.certificateId, notificationAuthenticationScheme.certificateId) &&
        Objects.equals(this.schemeName, notificationAuthenticationScheme.schemeName) &&
        Objects.equals(this.password, notificationAuthenticationScheme.password);
  }

  @Override
  public int hashCode() {
    return Objects.hash(username, certificateId, schemeName, password);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NotificationAuthenticationScheme {\n");
    
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    certificateId: ").append(toIndentedString(certificateId)).append("\n");
    sb.append("    schemeName: ").append(toIndentedString(schemeName)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
