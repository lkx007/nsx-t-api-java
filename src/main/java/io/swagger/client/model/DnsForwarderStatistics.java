/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.PerForwarderStatistics;
import io.swagger.client.model.PerNodeUsedCacheStatistics;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * The current statistics counters of the DNS forwarder including cache usages and query numbers per forwarders. 
 */
@Schema(description = "The current statistics counters of the DNS forwarder including cache usages and query numbers per forwarders. ")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class DnsForwarderStatistics {
  @SerializedName("queries_forwarded")
  private Long queriesForwarded = null;

  @SerializedName("conditional_forwarder_statistics")
  private List<PerForwarderStatistics> conditionalForwarderStatistics = null;

  @SerializedName("default_forwarder_statistics")
  private PerForwarderStatistics defaultForwarderStatistics = null;

  @SerializedName("queries_answered_locally")
  private Long queriesAnsweredLocally = null;

  @SerializedName("used_cache_statistics")
  private List<PerNodeUsedCacheStatistics> usedCacheStatistics = null;

  @SerializedName("configured_cache_size")
  private Long configuredCacheSize = null;

  @SerializedName("timestamp")
  private Long timestamp = null;

  @SerializedName("error_message")
  private String errorMessage = null;

  @SerializedName("total_queries")
  private Long totalQueries = null;

   /**
   * The total number of forwarded dns queries
   * @return queriesForwarded
  **/
  @Schema(description = "The total number of forwarded dns queries")
  public Long getQueriesForwarded() {
    return queriesForwarded;
  }

   /**
   * The statistics of conditional forwarders
   * @return conditionalForwarderStatistics
  **/
  @Schema(description = "The statistics of conditional forwarders")
  public List<PerForwarderStatistics> getConditionalForwarderStatistics() {
    return conditionalForwarderStatistics;
  }

  public DnsForwarderStatistics defaultForwarderStatistics(PerForwarderStatistics defaultForwarderStatistics) {
    this.defaultForwarderStatistics = defaultForwarderStatistics;
    return this;
  }

   /**
   * Get defaultForwarderStatistics
   * @return defaultForwarderStatistics
  **/
  @Schema(description = "")
  public PerForwarderStatistics getDefaultForwarderStatistics() {
    return defaultForwarderStatistics;
  }

  public void setDefaultForwarderStatistics(PerForwarderStatistics defaultForwarderStatistics) {
    this.defaultForwarderStatistics = defaultForwarderStatistics;
  }

   /**
   * The totocal number of queries answered from local cache
   * @return queriesAnsweredLocally
  **/
  @Schema(description = "The totocal number of queries answered from local cache")
  public Long getQueriesAnsweredLocally() {
    return queriesAnsweredLocally;
  }

   /**
   * The statistics of used cache
   * @return usedCacheStatistics
  **/
  @Schema(description = "The statistics of used cache")
  public List<PerNodeUsedCacheStatistics> getUsedCacheStatistics() {
    return usedCacheStatistics;
  }

   /**
   * The configured cache size, in kb
   * @return configuredCacheSize
  **/
  @Schema(description = "The configured cache size, in kb")
  public Long getConfiguredCacheSize() {
    return configuredCacheSize;
  }

   /**
   * Time stamp of the current statistics, in ms
   * @return timestamp
  **/
  @Schema(description = "Time stamp of the current statistics, in ms")
  public Long getTimestamp() {
    return timestamp;
  }

   /**
   * Error message, if available
   * @return errorMessage
  **/
  @Schema(description = "Error message, if available")
  public String getErrorMessage() {
    return errorMessage;
  }

   /**
   * The total number of received dns queries
   * @return totalQueries
  **/
  @Schema(description = "The total number of received dns queries")
  public Long getTotalQueries() {
    return totalQueries;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DnsForwarderStatistics dnsForwarderStatistics = (DnsForwarderStatistics) o;
    return Objects.equals(this.queriesForwarded, dnsForwarderStatistics.queriesForwarded) &&
        Objects.equals(this.conditionalForwarderStatistics, dnsForwarderStatistics.conditionalForwarderStatistics) &&
        Objects.equals(this.defaultForwarderStatistics, dnsForwarderStatistics.defaultForwarderStatistics) &&
        Objects.equals(this.queriesAnsweredLocally, dnsForwarderStatistics.queriesAnsweredLocally) &&
        Objects.equals(this.usedCacheStatistics, dnsForwarderStatistics.usedCacheStatistics) &&
        Objects.equals(this.configuredCacheSize, dnsForwarderStatistics.configuredCacheSize) &&
        Objects.equals(this.timestamp, dnsForwarderStatistics.timestamp) &&
        Objects.equals(this.errorMessage, dnsForwarderStatistics.errorMessage) &&
        Objects.equals(this.totalQueries, dnsForwarderStatistics.totalQueries);
  }

  @Override
  public int hashCode() {
    return Objects.hash(queriesForwarded, conditionalForwarderStatistics, defaultForwarderStatistics, queriesAnsweredLocally, usedCacheStatistics, configuredCacheSize, timestamp, errorMessage, totalQueries);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DnsForwarderStatistics {\n");
    
    sb.append("    queriesForwarded: ").append(toIndentedString(queriesForwarded)).append("\n");
    sb.append("    conditionalForwarderStatistics: ").append(toIndentedString(conditionalForwarderStatistics)).append("\n");
    sb.append("    defaultForwarderStatistics: ").append(toIndentedString(defaultForwarderStatistics)).append("\n");
    sb.append("    queriesAnsweredLocally: ").append(toIndentedString(queriesAnsweredLocally)).append("\n");
    sb.append("    usedCacheStatistics: ").append(toIndentedString(usedCacheStatistics)).append("\n");
    sb.append("    configuredCacheSize: ").append(toIndentedString(configuredCacheSize)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    errorMessage: ").append(toIndentedString(errorMessage)).append("\n");
    sb.append("    totalQueries: ").append(toIndentedString(totalQueries)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
