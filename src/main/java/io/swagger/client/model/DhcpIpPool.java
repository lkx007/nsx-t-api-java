/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.DhcpOptions;
import io.swagger.client.model.IpAllocationBase;
import io.swagger.client.model.IpPoolRange;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * DHCP ip-pool to define dynamic ip allocation ranges.
 */
@Schema(description = "DHCP ip-pool to define dynamic ip allocation ranges.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class DhcpIpPool extends IpAllocationBase {
  @SerializedName("allocation_ranges")
  private List<IpPoolRange> allocationRanges = new ArrayList<IpPoolRange>();

  @SerializedName("warning_threshold")
  private Long warningThreshold = 80l;

  @SerializedName("error_threshold")
  private Long errorThreshold = 100l;

  public DhcpIpPool allocationRanges(List<IpPoolRange> allocationRanges) {
    this.allocationRanges = allocationRanges;
    return this;
  }

  public DhcpIpPool addAllocationRangesItem(IpPoolRange allocationRangesItem) {
    this.allocationRanges.add(allocationRangesItem);
    return this;
  }

   /**
   * Ip-ranges to define dynamic ip allocation ranges.
   * @return allocationRanges
  **/
  @Schema(required = true, description = "Ip-ranges to define dynamic ip allocation ranges.")
  public List<IpPoolRange> getAllocationRanges() {
    return allocationRanges;
  }

  public void setAllocationRanges(List<IpPoolRange> allocationRanges) {
    this.allocationRanges = allocationRanges;
  }

  public DhcpIpPool warningThreshold(Long warningThreshold) {
    this.warningThreshold = warningThreshold;
    return this;
  }

   /**
   * Warning threshold. Alert will be raised if the pool usage reaches the given threshold. 
   * minimum: 50
   * maximum: 80
   * @return warningThreshold
  **/
  @Schema(description = "Warning threshold. Alert will be raised if the pool usage reaches the given threshold. ")
  public Long getWarningThreshold() {
    return warningThreshold;
  }

  public void setWarningThreshold(Long warningThreshold) {
    this.warningThreshold = warningThreshold;
  }

  public DhcpIpPool errorThreshold(Long errorThreshold) {
    this.errorThreshold = errorThreshold;
    return this;
  }

   /**
   * Error threshold. Alert will be raised if the pool usage reaches the given threshold. 
   * minimum: 80
   * maximum: 100
   * @return errorThreshold
  **/
  @Schema(description = "Error threshold. Alert will be raised if the pool usage reaches the given threshold. ")
  public Long getErrorThreshold() {
    return errorThreshold;
  }

  public void setErrorThreshold(Long errorThreshold) {
    this.errorThreshold = errorThreshold;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DhcpIpPool dhcpIpPool = (DhcpIpPool) o;
    return Objects.equals(this.allocationRanges, dhcpIpPool.allocationRanges) &&
        Objects.equals(this.warningThreshold, dhcpIpPool.warningThreshold) &&
        Objects.equals(this.errorThreshold, dhcpIpPool.errorThreshold) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allocationRanges, warningThreshold, errorThreshold, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DhcpIpPool {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    allocationRanges: ").append(toIndentedString(allocationRanges)).append("\n");
    sb.append("    warningThreshold: ").append(toIndentedString(warningThreshold)).append("\n");
    sb.append("    errorThreshold: ").append(toIndentedString(errorThreshold)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
