/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * Represents a service VM implementing a particular service in a service chain
 */
@Schema(description = "Represents a service VM implementing a particular service in a service chain")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class ServicePathHop {
  @SerializedName("is_active_from_dp")
  private Boolean isActiveFromDp = null;

  @SerializedName("is_active_from_mp")
  private Boolean isActiveFromMp = null;

  @SerializedName("vif")
  private String vif = null;

  @SerializedName("mac_address")
  private String macAddress = null;

  /**
   * Action that will be taken by the corresponding service VM of the hop.
   */
  @JsonAdapter(ActionEnum.Adapter.class)
  public enum ActionEnum {
    SERVICE_ACTION_INVALID("SERVICE_ACTION_INVALID"),
    COPY("COPY"),
    REDIRECT("REDIRECT");

    private String value;

    ActionEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ActionEnum fromValue(String text) {
      for (ActionEnum b : ActionEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ActionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ActionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ActionEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ActionEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("action")
  private ActionEnum action = null;

  @SerializedName("is_active_from_ccp")
  private Boolean isActiveFromCcp = null;

  @SerializedName("in_maintenance_mode")
  private Boolean inMaintenanceMode = null;

  @SerializedName("nsh_liveness_support")
  private Boolean nshLivenessSupport = null;

  @SerializedName("can_decrement_si")
  private Boolean canDecrementSi = null;

   /**
   * Indicating whether the corresponding service VM is active or not per DP.
   * @return isActiveFromDp
  **/
  @Schema(description = "Indicating whether the corresponding service VM is active or not per DP.")
  public Boolean isIsActiveFromDp() {
    return isActiveFromDp;
  }

   /**
   * Indicating whether the corresponding service VM is active or not per MP.
   * @return isActiveFromMp
  **/
  @Schema(description = "Indicating whether the corresponding service VM is active or not per MP.")
  public Boolean isIsActiveFromMp() {
    return isActiveFromMp;
  }

   /**
   * ID of the virtual network interface.
   * @return vif
  **/
  @Schema(description = "ID of the virtual network interface.")
  public String getVif() {
    return vif;
  }

   /**
   * MAC address of the virtual network interface.
   * @return macAddress
  **/
  @Schema(description = "MAC address of the virtual network interface.")
  public String getMacAddress() {
    return macAddress;
  }

   /**
   * Action that will be taken by the corresponding service VM of the hop.
   * @return action
  **/
  @Schema(description = "Action that will be taken by the corresponding service VM of the hop.")
  public ActionEnum getAction() {
    return action;
  }

   /**
   * Indicating whether the corresponding service VM is active or not per CCP.
   * @return isActiveFromCcp
  **/
  @Schema(description = "Indicating whether the corresponding service VM is active or not per CCP.")
  public Boolean isIsActiveFromCcp() {
    return isActiveFromCcp;
  }

   /**
   * Indicating the maintenance mode of the corresponding service VM.
   * @return inMaintenanceMode
  **/
  @Schema(description = "Indicating the maintenance mode of the corresponding service VM.")
  public Boolean isInMaintenanceMode() {
    return inMaintenanceMode;
  }

   /**
   * Indicating whether NSH liveness is supported or not by the corresponding service VM.
   * @return nshLivenessSupport
  **/
  @Schema(description = "Indicating whether NSH liveness is supported or not by the corresponding service VM.")
  public Boolean isNshLivenessSupport() {
    return nshLivenessSupport;
  }

   /**
   * Indicating whether service is configured to decrement SI field in NSH metadata.
   * @return canDecrementSi
  **/
  @Schema(description = "Indicating whether service is configured to decrement SI field in NSH metadata.")
  public Boolean isCanDecrementSi() {
    return canDecrementSi;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServicePathHop servicePathHop = (ServicePathHop) o;
    return Objects.equals(this.isActiveFromDp, servicePathHop.isActiveFromDp) &&
        Objects.equals(this.isActiveFromMp, servicePathHop.isActiveFromMp) &&
        Objects.equals(this.vif, servicePathHop.vif) &&
        Objects.equals(this.macAddress, servicePathHop.macAddress) &&
        Objects.equals(this.action, servicePathHop.action) &&
        Objects.equals(this.isActiveFromCcp, servicePathHop.isActiveFromCcp) &&
        Objects.equals(this.inMaintenanceMode, servicePathHop.inMaintenanceMode) &&
        Objects.equals(this.nshLivenessSupport, servicePathHop.nshLivenessSupport) &&
        Objects.equals(this.canDecrementSi, servicePathHop.canDecrementSi);
  }

  @Override
  public int hashCode() {
    return Objects.hash(isActiveFromDp, isActiveFromMp, vif, macAddress, action, isActiveFromCcp, inMaintenanceMode, nshLivenessSupport, canDecrementSi);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServicePathHop {\n");
    
    sb.append("    isActiveFromDp: ").append(toIndentedString(isActiveFromDp)).append("\n");
    sb.append("    isActiveFromMp: ").append(toIndentedString(isActiveFromMp)).append("\n");
    sb.append("    vif: ").append(toIndentedString(vif)).append("\n");
    sb.append("    macAddress: ").append(toIndentedString(macAddress)).append("\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    isActiveFromCcp: ").append(toIndentedString(isActiveFromCcp)).append("\n");
    sb.append("    inMaintenanceMode: ").append(toIndentedString(inMaintenanceMode)).append("\n");
    sb.append("    nshLivenessSupport: ").append(toIndentedString(nshLivenessSupport)).append("\n");
    sb.append("    canDecrementSi: ").append(toIndentedString(canDecrementSi)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
