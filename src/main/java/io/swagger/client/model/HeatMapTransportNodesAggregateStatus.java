/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * HeatMapTransportNodesAggregateStatus
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class HeatMapTransportNodesAggregateStatus {
  @SerializedName("degraded_count")
  private Integer degradedCount = null;

  @SerializedName("down_count")
  private Integer downCount = null;

  @SerializedName("unknown_count")
  private Integer unknownCount = null;

  @SerializedName("up_count")
  private Integer upCount = null;

  public HeatMapTransportNodesAggregateStatus degradedCount(Integer degradedCount) {
    this.degradedCount = degradedCount;
    return this;
  }

   /**
   * Number of transport nodes that are degraded
   * @return degradedCount
  **/
  @Schema(description = "Number of transport nodes that are degraded")
  public Integer getDegradedCount() {
    return degradedCount;
  }

  public void setDegradedCount(Integer degradedCount) {
    this.degradedCount = degradedCount;
  }

  public HeatMapTransportNodesAggregateStatus downCount(Integer downCount) {
    this.downCount = downCount;
    return this;
  }

   /**
   * Number of transport nodes that are down
   * @return downCount
  **/
  @Schema(description = "Number of transport nodes that are down")
  public Integer getDownCount() {
    return downCount;
  }

  public void setDownCount(Integer downCount) {
    this.downCount = downCount;
  }

  public HeatMapTransportNodesAggregateStatus unknownCount(Integer unknownCount) {
    this.unknownCount = unknownCount;
    return this;
  }

   /**
   * Number of transport nodes with unknown status
   * @return unknownCount
  **/
  @Schema(description = "Number of transport nodes with unknown status")
  public Integer getUnknownCount() {
    return unknownCount;
  }

  public void setUnknownCount(Integer unknownCount) {
    this.unknownCount = unknownCount;
  }

  public HeatMapTransportNodesAggregateStatus upCount(Integer upCount) {
    this.upCount = upCount;
    return this;
  }

   /**
   * Number of transport nodes that are up
   * @return upCount
  **/
  @Schema(description = "Number of transport nodes that are up")
  public Integer getUpCount() {
    return upCount;
  }

  public void setUpCount(Integer upCount) {
    this.upCount = upCount;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HeatMapTransportNodesAggregateStatus heatMapTransportNodesAggregateStatus = (HeatMapTransportNodesAggregateStatus) o;
    return Objects.equals(this.degradedCount, heatMapTransportNodesAggregateStatus.degradedCount) &&
        Objects.equals(this.downCount, heatMapTransportNodesAggregateStatus.downCount) &&
        Objects.equals(this.unknownCount, heatMapTransportNodesAggregateStatus.unknownCount) &&
        Objects.equals(this.upCount, heatMapTransportNodesAggregateStatus.upCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(degradedCount, downCount, unknownCount, upCount);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HeatMapTransportNodesAggregateStatus {\n");
    
    sb.append("    degradedCount: ").append(toIndentedString(degradedCount)).append("\n");
    sb.append("    downCount: ").append(toIndentedString(downCount)).append("\n");
    sb.append("    unknownCount: ").append(toIndentedString(unknownCount)).append("\n");
    sb.append("    upCount: ").append(toIndentedString(upCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
