/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * Ipv6Header
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class Ipv6Header {
  @SerializedName("src_ip")
  private String srcIp = null;

  @SerializedName("dst_ip")
  private String dstIp = null;

  @SerializedName("next_header")
  private Long nextHeader = 58l;

  @SerializedName("hop_limit")
  private Long hopLimit = 64l;

  public Ipv6Header srcIp(String srcIp) {
    this.srcIp = srcIp;
    return this;
  }

   /**
   * The source ip address.
   * @return srcIp
  **/
  @Schema(description = "The source ip address.")
  public String getSrcIp() {
    return srcIp;
  }

  public void setSrcIp(String srcIp) {
    this.srcIp = srcIp;
  }

  public Ipv6Header dstIp(String dstIp) {
    this.dstIp = dstIp;
    return this;
  }

   /**
   * The destination ip address.
   * @return dstIp
  **/
  @Schema(description = "The destination ip address.")
  public String getDstIp() {
    return dstIp;
  }

  public void setDstIp(String dstIp) {
    this.dstIp = dstIp;
  }

  public Ipv6Header nextHeader(Long nextHeader) {
    this.nextHeader = nextHeader;
    return this;
  }

   /**
   * Identifies the type of header immediately following the IPv6 header.
   * minimum: 0
   * maximum: 255
   * @return nextHeader
  **/
  @Schema(description = "Identifies the type of header immediately following the IPv6 header.")
  public Long getNextHeader() {
    return nextHeader;
  }

  public void setNextHeader(Long nextHeader) {
    this.nextHeader = nextHeader;
  }

  public Ipv6Header hopLimit(Long hopLimit) {
    this.hopLimit = hopLimit;
    return this;
  }

   /**
   * Decremented by 1 by each node that forwards the packets. The packet is discarded if Hop Limit is decremented to zero.
   * minimum: 0
   * maximum: 255
   * @return hopLimit
  **/
  @Schema(description = "Decremented by 1 by each node that forwards the packets. The packet is discarded if Hop Limit is decremented to zero.")
  public Long getHopLimit() {
    return hopLimit;
  }

  public void setHopLimit(Long hopLimit) {
    this.hopLimit = hopLimit;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Ipv6Header ipv6Header = (Ipv6Header) o;
    return Objects.equals(this.srcIp, ipv6Header.srcIp) &&
        Objects.equals(this.dstIp, ipv6Header.dstIp) &&
        Objects.equals(this.nextHeader, ipv6Header.nextHeader) &&
        Objects.equals(this.hopLimit, ipv6Header.hopLimit);
  }

  @Override
  public int hashCode() {
    return Objects.hash(srcIp, dstIp, nextHeader, hopLimit);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Ipv6Header {\n");
    
    sb.append("    srcIp: ").append(toIndentedString(srcIp)).append("\n");
    sb.append("    dstIp: ").append(toIndentedString(dstIp)).append("\n");
    sb.append("    nextHeader: ").append(toIndentedString(nextHeader)).append("\n");
    sb.append("    hopLimit: ").append(toIndentedString(hopLimit)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
