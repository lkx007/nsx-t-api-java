/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.TraceflowObservation;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * TraceflowObservationReceived
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class TraceflowObservationReceived extends TraceflowObservation {
  @SerializedName("vtep_label")
  private Long vtepLabel = null;

  @SerializedName("uplink_name")
  private String uplinkName = null;

  @SerializedName("local_ip_address")
  private String localIpAddress = null;

  @SerializedName("remote_ip_address")
  private String remoteIpAddress = null;

  public TraceflowObservationReceived vtepLabel(Long vtepLabel) {
    this.vtepLabel = vtepLabel;
    return this;
  }

   /**
   * The virtual tunnel endpoint label
   * @return vtepLabel
  **/
  @Schema(description = "The virtual tunnel endpoint label")
  public Long getVtepLabel() {
    return vtepLabel;
  }

  public void setVtepLabel(Long vtepLabel) {
    this.vtepLabel = vtepLabel;
  }

  public TraceflowObservationReceived uplinkName(String uplinkName) {
    this.uplinkName = uplinkName;
    return this;
  }

   /**
   * The name of the uplink the traceflow packet is received on
   * @return uplinkName
  **/
  @Schema(description = "The name of the uplink the traceflow packet is received on")
  public String getUplinkName() {
    return uplinkName;
  }

  public void setUplinkName(String uplinkName) {
    this.uplinkName = uplinkName;
  }

  public TraceflowObservationReceived localIpAddress(String localIpAddress) {
    this.localIpAddress = localIpAddress;
    return this;
  }

   /**
   * IP address of the destination end of the tunnel
   * @return localIpAddress
  **/
  @Schema(description = "IP address of the destination end of the tunnel")
  public String getLocalIpAddress() {
    return localIpAddress;
  }

  public void setLocalIpAddress(String localIpAddress) {
    this.localIpAddress = localIpAddress;
  }

  public TraceflowObservationReceived remoteIpAddress(String remoteIpAddress) {
    this.remoteIpAddress = remoteIpAddress;
    return this;
  }

   /**
   * IP address of the source end of the tunnel
   * @return remoteIpAddress
  **/
  @Schema(description = "IP address of the source end of the tunnel")
  public String getRemoteIpAddress() {
    return remoteIpAddress;
  }

  public void setRemoteIpAddress(String remoteIpAddress) {
    this.remoteIpAddress = remoteIpAddress;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TraceflowObservationReceived traceflowObservationReceived = (TraceflowObservationReceived) o;
    return Objects.equals(this.vtepLabel, traceflowObservationReceived.vtepLabel) &&
        Objects.equals(this.uplinkName, traceflowObservationReceived.uplinkName) &&
        Objects.equals(this.localIpAddress, traceflowObservationReceived.localIpAddress) &&
        Objects.equals(this.remoteIpAddress, traceflowObservationReceived.remoteIpAddress) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(vtepLabel, uplinkName, localIpAddress, remoteIpAddress, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TraceflowObservationReceived {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    vtepLabel: ").append(toIndentedString(vtepLabel)).append("\n");
    sb.append("    uplinkName: ").append(toIndentedString(uplinkName)).append("\n");
    sb.append("    localIpAddress: ").append(toIndentedString(localIpAddress)).append("\n");
    sb.append("    remoteIpAddress: ").append(toIndentedString(remoteIpAddress)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
