/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.Resource;
import io.swagger.client.model.ResourceLink;
import io.swagger.client.model.SelfResourceLink;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.List;
/**
 * Node properties
 */
@Schema(description = "Node properties")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class NodeProperties extends Resource {
  @SerializedName("system_time")
  private Long systemTime = null;

  @SerializedName("node_uuid")
  private String nodeUuid = null;

  @SerializedName("motd")
  private Object motd = null;

  @SerializedName("cli_timeout")
  private Long cliTimeout = null;

  @SerializedName("kernel_version")
  private String kernelVersion = null;

  /**
   * Export restrictions in effect, if any
   */
  @JsonAdapter(ExportTypeEnum.Adapter.class)
  public enum ExportTypeEnum {
    RESTRICTED("RESTRICTED"),
    UNRESTRICTED("UNRESTRICTED");

    private String value;

    ExportTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ExportTypeEnum fromValue(String text) {
      for (ExportTypeEnum b : ExportTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ExportTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ExportTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ExportTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ExportTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("export_type")
  private ExportTypeEnum exportType = null;

  @SerializedName("hostname")
  private String hostname = null;

  @SerializedName("product_version")
  private String productVersion = null;

  @SerializedName("node_version")
  private String nodeVersion = null;

  @SerializedName("system_datetime")
  private String systemDatetime = null;

  @SerializedName("fully_qualified_domain_name")
  private String fullyQualifiedDomainName = null;

  @SerializedName("timezone")
  private String timezone = null;

   /**
   * Current time expressed in milliseconds since epoch
   * @return systemTime
  **/
  @Schema(description = "Current time expressed in milliseconds since epoch")
  public Long getSystemTime() {
    return systemTime;
  }

   /**
   * Node Unique Identifier
   * @return nodeUuid
  **/
  @Schema(description = "Node Unique Identifier")
  public String getNodeUuid() {
    return nodeUuid;
  }

  public NodeProperties motd(Object motd) {
    this.motd = motd;
    return this;
  }

   /**
   * Message of the day to display when users login to node using the NSX CLI
   * @return motd
  **/
  @Schema(description = "Message of the day to display when users login to node using the NSX CLI")
  public Object getMotd() {
    return motd;
  }

  public void setMotd(Object motd) {
    this.motd = motd;
  }

  public NodeProperties cliTimeout(Long cliTimeout) {
    this.cliTimeout = cliTimeout;
    return this;
  }

   /**
   * NSX CLI inactivity timeout, set to 0 to configure no timeout
   * minimum: 0
   * @return cliTimeout
  **/
  @Schema(description = "NSX CLI inactivity timeout, set to 0 to configure no timeout")
  public Long getCliTimeout() {
    return cliTimeout;
  }

  public void setCliTimeout(Long cliTimeout) {
    this.cliTimeout = cliTimeout;
  }

   /**
   * Kernel version
   * @return kernelVersion
  **/
  @Schema(description = "Kernel version")
  public String getKernelVersion() {
    return kernelVersion;
  }

   /**
   * Export restrictions in effect, if any
   * @return exportType
  **/
  @Schema(description = "Export restrictions in effect, if any")
  public ExportTypeEnum getExportType() {
    return exportType;
  }

  public NodeProperties hostname(String hostname) {
    this.hostname = hostname;
    return this;
  }

   /**
   * Host name or fully qualified domain name of node
   * @return hostname
  **/
  @Schema(description = "Host name or fully qualified domain name of node")
  public String getHostname() {
    return hostname;
  }

  public void setHostname(String hostname) {
    this.hostname = hostname;
  }

   /**
   * Product version
   * @return productVersion
  **/
  @Schema(description = "Product version")
  public String getProductVersion() {
    return productVersion;
  }

   /**
   * Node version
   * @return nodeVersion
  **/
  @Schema(description = "Node version")
  public String getNodeVersion() {
    return nodeVersion;
  }

  public NodeProperties systemDatetime(String systemDatetime) {
    this.systemDatetime = systemDatetime;
    return this;
  }

   /**
   * System date time in UTC
   * @return systemDatetime
  **/
  @Schema(description = "System date time in UTC")
  public String getSystemDatetime() {
    return systemDatetime;
  }

  public void setSystemDatetime(String systemDatetime) {
    this.systemDatetime = systemDatetime;
  }

   /**
   * Fully qualified domain name
   * @return fullyQualifiedDomainName
  **/
  @Schema(description = "Fully qualified domain name")
  public String getFullyQualifiedDomainName() {
    return fullyQualifiedDomainName;
  }

  public NodeProperties timezone(String timezone) {
    this.timezone = timezone;
    return this;
  }

   /**
   * Timezone
   * @return timezone
  **/
  @Schema(description = "Timezone")
  public String getTimezone() {
    return timezone;
  }

  public void setTimezone(String timezone) {
    this.timezone = timezone;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NodeProperties nodeProperties = (NodeProperties) o;
    return Objects.equals(this.systemTime, nodeProperties.systemTime) &&
        Objects.equals(this.nodeUuid, nodeProperties.nodeUuid) &&
        Objects.equals(this.motd, nodeProperties.motd) &&
        Objects.equals(this.cliTimeout, nodeProperties.cliTimeout) &&
        Objects.equals(this.kernelVersion, nodeProperties.kernelVersion) &&
        Objects.equals(this.exportType, nodeProperties.exportType) &&
        Objects.equals(this.hostname, nodeProperties.hostname) &&
        Objects.equals(this.productVersion, nodeProperties.productVersion) &&
        Objects.equals(this.nodeVersion, nodeProperties.nodeVersion) &&
        Objects.equals(this.systemDatetime, nodeProperties.systemDatetime) &&
        Objects.equals(this.fullyQualifiedDomainName, nodeProperties.fullyQualifiedDomainName) &&
        Objects.equals(this.timezone, nodeProperties.timezone) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(systemTime, nodeUuid, motd, cliTimeout, kernelVersion, exportType, hostname, productVersion, nodeVersion, systemDatetime, fullyQualifiedDomainName, timezone, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NodeProperties {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    systemTime: ").append(toIndentedString(systemTime)).append("\n");
    sb.append("    nodeUuid: ").append(toIndentedString(nodeUuid)).append("\n");
    sb.append("    motd: ").append(toIndentedString(motd)).append("\n");
    sb.append("    cliTimeout: ").append(toIndentedString(cliTimeout)).append("\n");
    sb.append("    kernelVersion: ").append(toIndentedString(kernelVersion)).append("\n");
    sb.append("    exportType: ").append(toIndentedString(exportType)).append("\n");
    sb.append("    hostname: ").append(toIndentedString(hostname)).append("\n");
    sb.append("    productVersion: ").append(toIndentedString(productVersion)).append("\n");
    sb.append("    nodeVersion: ").append(toIndentedString(nodeVersion)).append("\n");
    sb.append("    systemDatetime: ").append(toIndentedString(systemDatetime)).append("\n");
    sb.append("    fullyQualifiedDomainName: ").append(toIndentedString(fullyQualifiedDomainName)).append("\n");
    sb.append("    timezone: ").append(toIndentedString(timezone)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
