/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.BackupSchedule;
import io.swagger.client.model.RemoteFileServer;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * Configuration for taking manual/automated backup
 */
@Schema(description = "Configuration for taking manual/automated backup")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class BackupConfiguration {
  @SerializedName("remote_file_server")
  private RemoteFileServer remoteFileServer = null;

  @SerializedName("backup_enabled")
  private Boolean backupEnabled = false;

  @SerializedName("passphrase")
  private String passphrase = null;

  @SerializedName("backup_schedule")
  private BackupSchedule backupSchedule = null;

  @SerializedName("after_inventory_update_interval")
  private Long afterInventoryUpdateInterval = null;

  @SerializedName("inventory_summary_interval")
  private Long inventorySummaryInterval = 240l;

  public BackupConfiguration remoteFileServer(RemoteFileServer remoteFileServer) {
    this.remoteFileServer = remoteFileServer;
    return this;
  }

   /**
   * Get remoteFileServer
   * @return remoteFileServer
  **/
  @Schema(required = true, description = "")
  public RemoteFileServer getRemoteFileServer() {
    return remoteFileServer;
  }

  public void setRemoteFileServer(RemoteFileServer remoteFileServer) {
    this.remoteFileServer = remoteFileServer;
  }

  public BackupConfiguration backupEnabled(Boolean backupEnabled) {
    this.backupEnabled = backupEnabled;
    return this;
  }

   /**
   * true if automated backup is enabled
   * @return backupEnabled
  **/
  @Schema(description = "true if automated backup is enabled")
  public Boolean isBackupEnabled() {
    return backupEnabled;
  }

  public void setBackupEnabled(Boolean backupEnabled) {
    this.backupEnabled = backupEnabled;
  }

  public BackupConfiguration passphrase(String passphrase) {
    this.passphrase = passphrase;
    return this;
  }

   /**
   * Passphrase used to encrypt backup files. The passphrase specified must be at least 8 characters in length and must contain at least one lowercase, one uppercase, one numeric character and one special character (any other non-space character). 
   * @return passphrase
  **/
  @Schema(description = "Passphrase used to encrypt backup files. The passphrase specified must be at least 8 characters in length and must contain at least one lowercase, one uppercase, one numeric character and one special character (any other non-space character). ")
  public String getPassphrase() {
    return passphrase;
  }

  public void setPassphrase(String passphrase) {
    this.passphrase = passphrase;
  }

  public BackupConfiguration backupSchedule(BackupSchedule backupSchedule) {
    this.backupSchedule = backupSchedule;
    return this;
  }

   /**
   * Get backupSchedule
   * @return backupSchedule
  **/
  @Schema(description = "")
  public BackupSchedule getBackupSchedule() {
    return backupSchedule;
  }

  public void setBackupSchedule(BackupSchedule backupSchedule) {
    this.backupSchedule = backupSchedule;
  }

  public BackupConfiguration afterInventoryUpdateInterval(Long afterInventoryUpdateInterval) {
    this.afterInventoryUpdateInterval = afterInventoryUpdateInterval;
    return this;
  }

   /**
   * A number of seconds after a last backup, that needs to pass, before a topology change will trigger a generation of a new cluster/node backups. If parameter is not provided, then changes in a topology will not trigger a generation of cluster/node backups.
   * minimum: 300
   * maximum: 86400
   * @return afterInventoryUpdateInterval
  **/
  @Schema(description = "A number of seconds after a last backup, that needs to pass, before a topology change will trigger a generation of a new cluster/node backups. If parameter is not provided, then changes in a topology will not trigger a generation of cluster/node backups.")
  public Long getAfterInventoryUpdateInterval() {
    return afterInventoryUpdateInterval;
  }

  public void setAfterInventoryUpdateInterval(Long afterInventoryUpdateInterval) {
    this.afterInventoryUpdateInterval = afterInventoryUpdateInterval;
  }

  public BackupConfiguration inventorySummaryInterval(Long inventorySummaryInterval) {
    this.inventorySummaryInterval = inventorySummaryInterval;
    return this;
  }

   /**
   * The minimum number of seconds between each upload of the inventory summary to backup server.
   * minimum: 30
   * maximum: 3600
   * @return inventorySummaryInterval
  **/
  @Schema(description = "The minimum number of seconds between each upload of the inventory summary to backup server.")
  public Long getInventorySummaryInterval() {
    return inventorySummaryInterval;
  }

  public void setInventorySummaryInterval(Long inventorySummaryInterval) {
    this.inventorySummaryInterval = inventorySummaryInterval;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BackupConfiguration backupConfiguration = (BackupConfiguration) o;
    return Objects.equals(this.remoteFileServer, backupConfiguration.remoteFileServer) &&
        Objects.equals(this.backupEnabled, backupConfiguration.backupEnabled) &&
        Objects.equals(this.passphrase, backupConfiguration.passphrase) &&
        Objects.equals(this.backupSchedule, backupConfiguration.backupSchedule) &&
        Objects.equals(this.afterInventoryUpdateInterval, backupConfiguration.afterInventoryUpdateInterval) &&
        Objects.equals(this.inventorySummaryInterval, backupConfiguration.inventorySummaryInterval);
  }

  @Override
  public int hashCode() {
    return Objects.hash(remoteFileServer, backupEnabled, passphrase, backupSchedule, afterInventoryUpdateInterval, inventorySummaryInterval);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BackupConfiguration {\n");
    
    sb.append("    remoteFileServer: ").append(toIndentedString(remoteFileServer)).append("\n");
    sb.append("    backupEnabled: ").append(toIndentedString(backupEnabled)).append("\n");
    sb.append("    passphrase: ").append(toIndentedString(passphrase)).append("\n");
    sb.append("    backupSchedule: ").append(toIndentedString(backupSchedule)).append("\n");
    sb.append("    afterInventoryUpdateInterval: ").append(toIndentedString(afterInventoryUpdateInterval)).append("\n");
    sb.append("    inventorySummaryInterval: ").append(toIndentedString(inventorySummaryInterval)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
