/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.SupportBundleRemoteFileServer;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * SupportBundleRequest
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class SupportBundleRequest {
  @SerializedName("remote_file_server")
  private SupportBundleRemoteFileServer remoteFileServer = null;

  @SerializedName("nodes")
  private List<String> nodes = new ArrayList<String>();

  /**
   * Support bundle content filter allowed values
   */
  @JsonAdapter(ContentFiltersEnum.Adapter.class)
  public enum ContentFiltersEnum {
    ALL("ALL"),
    DEFAULT("DEFAULT");

    private String value;

    ContentFiltersEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ContentFiltersEnum fromValue(String text) {
      for (ContentFiltersEnum b : ContentFiltersEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ContentFiltersEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ContentFiltersEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ContentFiltersEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ContentFiltersEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("content_filters")
  private List<ContentFiltersEnum> contentFilters = null;

  @SerializedName("log_age_limit")
  private Long logAgeLimit = null;

  public SupportBundleRequest remoteFileServer(SupportBundleRemoteFileServer remoteFileServer) {
    this.remoteFileServer = remoteFileServer;
    return this;
  }

   /**
   * Get remoteFileServer
   * @return remoteFileServer
  **/
  @Schema(description = "")
  public SupportBundleRemoteFileServer getRemoteFileServer() {
    return remoteFileServer;
  }

  public void setRemoteFileServer(SupportBundleRemoteFileServer remoteFileServer) {
    this.remoteFileServer = remoteFileServer;
  }

  public SupportBundleRequest nodes(List<String> nodes) {
    this.nodes = nodes;
    return this;
  }

  public SupportBundleRequest addNodesItem(String nodesItem) {
    this.nodes.add(nodesItem);
    return this;
  }

   /**
   * List of cluster/fabric node UUIDs processed in specified order
   * @return nodes
  **/
  @Schema(required = true, description = "List of cluster/fabric node UUIDs processed in specified order")
  public List<String> getNodes() {
    return nodes;
  }

  public void setNodes(List<String> nodes) {
    this.nodes = nodes;
  }

  public SupportBundleRequest contentFilters(List<ContentFiltersEnum> contentFilters) {
    this.contentFilters = contentFilters;
    return this;
  }

  public SupportBundleRequest addContentFiltersItem(ContentFiltersEnum contentFiltersItem) {
    if (this.contentFilters == null) {
      this.contentFilters = new ArrayList<ContentFiltersEnum>();
    }
    this.contentFilters.add(contentFiltersItem);
    return this;
  }

   /**
   * Bundle should include content of specified type
   * @return contentFilters
  **/
  @Schema(description = "Bundle should include content of specified type")
  public List<ContentFiltersEnum> getContentFilters() {
    return contentFilters;
  }

  public void setContentFilters(List<ContentFiltersEnum> contentFilters) {
    this.contentFilters = contentFilters;
  }

  public SupportBundleRequest logAgeLimit(Long logAgeLimit) {
    this.logAgeLimit = logAgeLimit;
    return this;
  }

   /**
   * Include log files with modified times not past the age limit in days
   * minimum: 1
   * @return logAgeLimit
  **/
  @Schema(description = "Include log files with modified times not past the age limit in days")
  public Long getLogAgeLimit() {
    return logAgeLimit;
  }

  public void setLogAgeLimit(Long logAgeLimit) {
    this.logAgeLimit = logAgeLimit;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SupportBundleRequest supportBundleRequest = (SupportBundleRequest) o;
    return Objects.equals(this.remoteFileServer, supportBundleRequest.remoteFileServer) &&
        Objects.equals(this.nodes, supportBundleRequest.nodes) &&
        Objects.equals(this.contentFilters, supportBundleRequest.contentFilters) &&
        Objects.equals(this.logAgeLimit, supportBundleRequest.logAgeLimit);
  }

  @Override
  public int hashCode() {
    return Objects.hash(remoteFileServer, nodes, contentFilters, logAgeLimit);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SupportBundleRequest {\n");
    
    sb.append("    remoteFileServer: ").append(toIndentedString(remoteFileServer)).append("\n");
    sb.append("    nodes: ").append(toIndentedString(nodes)).append("\n");
    sb.append("    contentFilters: ").append(toIndentedString(contentFilters)).append("\n");
    sb.append("    logAgeLimit: ").append(toIndentedString(logAgeLimit)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
