/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.Resource;
import io.swagger.client.model.ResourceLink;
import io.swagger.client.model.SelfResourceLink;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * Node service status properties
 */
@Schema(description = "Node service status properties")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class NodeServiceStatusProperties extends Resource {
  @SerializedName("health")
  private String health = null;

  @SerializedName("pids")
  private List<Long> pids = null;

  /**
   * Service runtime state
   */
  @JsonAdapter(RuntimeStateEnum.Adapter.class)
  public enum RuntimeStateEnum {
    RUNNING("running"),
    STOPPED("stopped");

    private String value;

    RuntimeStateEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static RuntimeStateEnum fromValue(String text) {
      for (RuntimeStateEnum b : RuntimeStateEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<RuntimeStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RuntimeStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RuntimeStateEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return RuntimeStateEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("runtime_state")
  private RuntimeStateEnum runtimeState = null;

  /**
   * Service monitor runtime state
   */
  @JsonAdapter(MonitorRuntimeStateEnum.Adapter.class)
  public enum MonitorRuntimeStateEnum {
    RUNNING("running"),
    STOPPED("stopped");

    private String value;

    MonitorRuntimeStateEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static MonitorRuntimeStateEnum fromValue(String text) {
      for (MonitorRuntimeStateEnum b : MonitorRuntimeStateEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<MonitorRuntimeStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MonitorRuntimeStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MonitorRuntimeStateEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return MonitorRuntimeStateEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("monitor_runtime_state")
  private MonitorRuntimeStateEnum monitorRuntimeState = null;

  @SerializedName("monitor_pid")
  private Long monitorPid = null;

   /**
   * Service health in addition to runtime_state
   * @return health
  **/
  @Schema(description = "Service health in addition to runtime_state")
  public String getHealth() {
    return health;
  }

   /**
   * Service process ids
   * @return pids
  **/
  @Schema(description = "Service process ids")
  public List<Long> getPids() {
    return pids;
  }

   /**
   * Service runtime state
   * @return runtimeState
  **/
  @Schema(description = "Service runtime state")
  public RuntimeStateEnum getRuntimeState() {
    return runtimeState;
  }

   /**
   * Service monitor runtime state
   * @return monitorRuntimeState
  **/
  @Schema(description = "Service monitor runtime state")
  public MonitorRuntimeStateEnum getMonitorRuntimeState() {
    return monitorRuntimeState;
  }

   /**
   * Service monitor process id
   * @return monitorPid
  **/
  @Schema(description = "Service monitor process id")
  public Long getMonitorPid() {
    return monitorPid;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NodeServiceStatusProperties nodeServiceStatusProperties = (NodeServiceStatusProperties) o;
    return Objects.equals(this.health, nodeServiceStatusProperties.health) &&
        Objects.equals(this.pids, nodeServiceStatusProperties.pids) &&
        Objects.equals(this.runtimeState, nodeServiceStatusProperties.runtimeState) &&
        Objects.equals(this.monitorRuntimeState, nodeServiceStatusProperties.monitorRuntimeState) &&
        Objects.equals(this.monitorPid, nodeServiceStatusProperties.monitorPid) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(health, pids, runtimeState, monitorRuntimeState, monitorPid, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NodeServiceStatusProperties {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    health: ").append(toIndentedString(health)).append("\n");
    sb.append("    pids: ").append(toIndentedString(pids)).append("\n");
    sb.append("    runtimeState: ").append(toIndentedString(runtimeState)).append("\n");
    sb.append("    monitorRuntimeState: ").append(toIndentedString(monitorRuntimeState)).append("\n");
    sb.append("    monitorPid: ").append(toIndentedString(monitorPid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
