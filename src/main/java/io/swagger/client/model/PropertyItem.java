/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.Label;
import io.swagger.client.model.RenderConfiguration;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * Represents a label-value pair.
 */
@Schema(description = "Represents a label-value pair.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class PropertyItem {
  @SerializedName("field")
  private String field = null;

  @SerializedName("separator")
  private Boolean separator = false;

  @SerializedName("render_configuration")
  private List<RenderConfiguration> renderConfiguration = null;

  /**
   * Data type of the field.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    STRING("String"),
    NUMBER("Number"),
    DATE("Date"),
    URL("Url");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static TypeEnum fromValue(String text) {
      for (TypeEnum b : TypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TypeEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("type")
  private TypeEnum type = TypeEnum.STRING;

  @SerializedName("heading")
  private Boolean heading = false;

  @SerializedName("condition")
  private String condition = null;

  @SerializedName("label")
  private Label label = null;

  public PropertyItem field(String field) {
    this.field = field;
    return this;
  }

   /**
   * Represents field value of the property.
   * @return field
  **/
  @Schema(required = true, description = "Represents field value of the property.")
  public String getField() {
    return field;
  }

  public void setField(String field) {
    this.field = field;
  }

  public PropertyItem separator(Boolean separator) {
    this.separator = separator;
    return this;
  }

   /**
   * If true, separates this property in a widget.
   * @return separator
  **/
  @Schema(description = "If true, separates this property in a widget.")
  public Boolean isSeparator() {
    return separator;
  }

  public void setSeparator(Boolean separator) {
    this.separator = separator;
  }

  public PropertyItem renderConfiguration(List<RenderConfiguration> renderConfiguration) {
    this.renderConfiguration = renderConfiguration;
    return this;
  }

  public PropertyItem addRenderConfigurationItem(RenderConfiguration renderConfigurationItem) {
    if (this.renderConfiguration == null) {
      this.renderConfiguration = new ArrayList<RenderConfiguration>();
    }
    this.renderConfiguration.add(renderConfigurationItem);
    return this;
  }

   /**
   * Render configuration to be applied, if any.
   * @return renderConfiguration
  **/
  @Schema(description = "Render configuration to be applied, if any.")
  public List<RenderConfiguration> getRenderConfiguration() {
    return renderConfiguration;
  }

  public void setRenderConfiguration(List<RenderConfiguration> renderConfiguration) {
    this.renderConfiguration = renderConfiguration;
  }

  public PropertyItem type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * Data type of the field.
   * @return type
  **/
  @Schema(required = true, description = "Data type of the field.")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public PropertyItem heading(Boolean heading) {
    this.heading = heading;
    return this;
  }

   /**
   * Set to true if the field is a heading. Default is false.
   * @return heading
  **/
  @Schema(description = "Set to true if the field is a heading. Default is false.")
  public Boolean isHeading() {
    return heading;
  }

  public void setHeading(Boolean heading) {
    this.heading = heading;
  }

  public PropertyItem condition(String condition) {
    this.condition = condition;
    return this;
  }

   /**
   * If the condition is met then the property will be displayed. Examples of expression syntax are provided under &#x27;example_request&#x27; section of &#x27;CreateWidgetConfiguration&#x27; API.
   * @return condition
  **/
  @Schema(description = "If the condition is met then the property will be displayed. Examples of expression syntax are provided under 'example_request' section of 'CreateWidgetConfiguration' API.")
  public String getCondition() {
    return condition;
  }

  public void setCondition(String condition) {
    this.condition = condition;
  }

  public PropertyItem label(Label label) {
    this.label = label;
    return this;
  }

   /**
   * Get label
   * @return label
  **/
  @Schema(description = "")
  public Label getLabel() {
    return label;
  }

  public void setLabel(Label label) {
    this.label = label;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PropertyItem propertyItem = (PropertyItem) o;
    return Objects.equals(this.field, propertyItem.field) &&
        Objects.equals(this.separator, propertyItem.separator) &&
        Objects.equals(this.renderConfiguration, propertyItem.renderConfiguration) &&
        Objects.equals(this.type, propertyItem.type) &&
        Objects.equals(this.heading, propertyItem.heading) &&
        Objects.equals(this.condition, propertyItem.condition) &&
        Objects.equals(this.label, propertyItem.label);
  }

  @Override
  public int hashCode() {
    return Objects.hash(field, separator, renderConfiguration, type, heading, condition, label);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PropertyItem {\n");
    
    sb.append("    field: ").append(toIndentedString(field)).append("\n");
    sb.append("    separator: ").append(toIndentedString(separator)).append("\n");
    sb.append("    renderConfiguration: ").append(toIndentedString(renderConfiguration)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    heading: ").append(toIndentedString(heading)).append("\n");
    sb.append("    condition: ").append(toIndentedString(condition)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
