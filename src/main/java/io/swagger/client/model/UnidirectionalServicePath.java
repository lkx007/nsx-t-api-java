/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.ServicePathHop;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * Representing either forward or reverse service path for ingress or egress traffic respectively.
 */
@Schema(description = "Representing either forward or reverse service path for ingress or egress traffic respectively.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class UnidirectionalServicePath {
  @SerializedName("hops")
  private List<ServicePathHop> hops = null;

  @SerializedName("in_maintenance_mode")
  private Boolean inMaintenanceMode = null;

  @SerializedName("host_cross_count")
  private Long hostCrossCount = null;

  @SerializedName("is_active")
  private Boolean isActive = null;

  @SerializedName("unidir_service_path_id")
  private Long unidirServicePathId = null;

   /**
   * List of service path hops that constitutes the forward or reverse service path.
   * @return hops
  **/
  @Schema(description = "List of service path hops that constitutes the forward or reverse service path.")
  public List<ServicePathHop> getHops() {
    return hops;
  }

   /**
   * Is forward or revserse service path in maintenance mode or not.
   * @return inMaintenanceMode
  **/
  @Schema(description = "Is forward or revserse service path in maintenance mode or not.")
  public Boolean isInMaintenanceMode() {
    return inMaintenanceMode;
  }

   /**
   * The number of times the traffic needs to cross hosts for the given forward or reverse service path.
   * @return hostCrossCount
  **/
  @Schema(description = "The number of times the traffic needs to cross hosts for the given forward or reverse service path.")
  public Long getHostCrossCount() {
    return hostCrossCount;
  }

   /**
   * Is forward or revserse service path active or not.
   * @return isActive
  **/
  @Schema(description = "Is forward or revserse service path active or not.")
  public Boolean isIsActive() {
    return isActive;
  }

   /**
   * Unique identifier of one directional service path.
   * @return unidirServicePathId
  **/
  @Schema(description = "Unique identifier of one directional service path.")
  public Long getUnidirServicePathId() {
    return unidirServicePathId;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UnidirectionalServicePath unidirectionalServicePath = (UnidirectionalServicePath) o;
    return Objects.equals(this.hops, unidirectionalServicePath.hops) &&
        Objects.equals(this.inMaintenanceMode, unidirectionalServicePath.inMaintenanceMode) &&
        Objects.equals(this.hostCrossCount, unidirectionalServicePath.hostCrossCount) &&
        Objects.equals(this.isActive, unidirectionalServicePath.isActive) &&
        Objects.equals(this.unidirServicePathId, unidirectionalServicePath.unidirServicePathId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(hops, inMaintenanceMode, hostCrossCount, isActive, unidirServicePathId);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UnidirectionalServicePath {\n");
    
    sb.append("    hops: ").append(toIndentedString(hops)).append("\n");
    sb.append("    inMaintenanceMode: ").append(toIndentedString(inMaintenanceMode)).append("\n");
    sb.append("    hostCrossCount: ").append(toIndentedString(hostCrossCount)).append("\n");
    sb.append("    isActive: ").append(toIndentedString(isActive)).append("\n");
    sb.append("    unidirServicePathId: ").append(toIndentedString(unidirServicePathId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
