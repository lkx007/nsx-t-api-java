/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.ControlConnStatus;
import io.swagger.client.model.NodeStatusProperties;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * Runtime status information of the fabric node.
 */
@Schema(description = "Runtime status information of the fabric node.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class NodeStatus {
  /**
   * Indicates the fabric node&#x27;s MP&amp;lt;-&amp;gt;MPA channel connectivity status, UP, DOWN, UNKNOWN.
   */
  @JsonAdapter(MpaConnectivityStatusEnum.Adapter.class)
  public enum MpaConnectivityStatusEnum {
    UP("UP"),
    DOWN("DOWN"),
    UNKNOWN("UNKNOWN");

    private String value;

    MpaConnectivityStatusEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static MpaConnectivityStatusEnum fromValue(String text) {
      for (MpaConnectivityStatusEnum b : MpaConnectivityStatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<MpaConnectivityStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MpaConnectivityStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MpaConnectivityStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return MpaConnectivityStatusEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("mpa_connectivity_status")
  private MpaConnectivityStatusEnum mpaConnectivityStatus = null;

  @SerializedName("lcp_connectivity_status_details")
  private List<ControlConnStatus> lcpConnectivityStatusDetails = null;

  @SerializedName("mpa_connectivity_status_details")
  private String mpaConnectivityStatusDetails = null;

  @SerializedName("external_id")
  private String externalId = null;

  @SerializedName("software_version")
  private String softwareVersion = null;

  /**
   * Indicates the fabric node&#x27;s status of maintenance mode, OFF, ENTERING, ON, EXITING.
   */
  @JsonAdapter(MaintenanceModeEnum.Adapter.class)
  public enum MaintenanceModeEnum {
    OFF("OFF"),
    ENTERING("ENTERING"),
    ON("ON"),
    EXITING("EXITING");

    private String value;

    MaintenanceModeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static MaintenanceModeEnum fromValue(String text) {
      for (MaintenanceModeEnum b : MaintenanceModeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<MaintenanceModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MaintenanceModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MaintenanceModeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return MaintenanceModeEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("maintenance_mode")
  private MaintenanceModeEnum maintenanceMode = null;

  @SerializedName("inventory_sync_paused")
  private Boolean inventorySyncPaused = null;

  @SerializedName("system_status")
  private NodeStatusProperties systemStatus = null;

  @SerializedName("inventory_sync_reenable_time")
  private Long inventorySyncReenableTime = null;

  /**
   * Indicates the fabric node&#x27;s LCP&amp;lt;-&amp;gt;CCP channel connectivity status, UP, DOWN, DEGRADED, UNKNOWN.
   */
  @JsonAdapter(LcpConnectivityStatusEnum.Adapter.class)
  public enum LcpConnectivityStatusEnum {
    UP("UP"),
    DOWN("DOWN"),
    DEGRADED("DEGRADED"),
    UNKNOWN("UNKNOWN");

    private String value;

    LcpConnectivityStatusEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static LcpConnectivityStatusEnum fromValue(String text) {
      for (LcpConnectivityStatusEnum b : LcpConnectivityStatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<LcpConnectivityStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LcpConnectivityStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LcpConnectivityStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return LcpConnectivityStatusEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("lcp_connectivity_status")
  private LcpConnectivityStatusEnum lcpConnectivityStatus = LcpConnectivityStatusEnum.UNKNOWN;

  @SerializedName("last_heartbeat_timestamp")
  private Long lastHeartbeatTimestamp = null;

  @SerializedName("last_sync_time")
  private Long lastSyncTime = null;

  /**
   * This enum specifies the current nsx install state for host node or current deployment and ready state for edge node. The ready status &#x27;NODE_READY&#x27; indicates whether edge node is ready to become a transport node. The status &#x27;EDGE_CONFIG_ERROR&#x27; indicates that edge hardware or underlying host is not supported. After all fabric level operations are done for an edge node, this value indicates transport node related configuration issues and state as relevant. 
   */
  @JsonAdapter(HostNodeDeploymentStatusEnum.Adapter.class)
  public enum HostNodeDeploymentStatusEnum {
    NOT_PREPARED("NOT_PREPARED"),
    INSTALL_IN_PROGRESS("INSTALL_IN_PROGRESS"),
    INSTALL_FAILED("INSTALL_FAILED"),
    INSTALL_SUCCESSFUL("INSTALL_SUCCESSFUL"),
    UNINSTALL_IN_PROGRESS("UNINSTALL_IN_PROGRESS"),
    UNINSTALL_FAILED("UNINSTALL_FAILED"),
    UNINSTALL_SUCCESSFUL("UNINSTALL_SUCCESSFUL"),
    UNINSTALL_SCHEDULED("UNINSTALL_SCHEDULED"),
    UPGRADE_IN_PROGRESS("UPGRADE_IN_PROGRESS"),
    UPGRADE_FAILED("UPGRADE_FAILED"),
    PENDING_UPGRADE("PENDING_UPGRADE"),
    NOT_AVAILABLE("NOT_AVAILABLE"),
    VM_DEPLOYMENT_QUEUED("VM_DEPLOYMENT_QUEUED"),
    VM_DEPLOYMENT_IN_PROGRESS("VM_DEPLOYMENT_IN_PROGRESS"),
    VM_DEPLOYMENT_FAILED("VM_DEPLOYMENT_FAILED"),
    VM_POWER_ON_IN_PROGRESS("VM_POWER_ON_IN_PROGRESS"),
    VM_POWER_ON_FAILED("VM_POWER_ON_FAILED"),
    REGISTRATION_PENDING("REGISTRATION_PENDING"),
    NODE_NOT_READY("NODE_NOT_READY"),
    NODE_READY("NODE_READY"),
    VM_POWER_OFF_IN_PROGRESS("VM_POWER_OFF_IN_PROGRESS"),
    VM_POWER_OFF_FAILED("VM_POWER_OFF_FAILED"),
    VM_UNDEPLOY_IN_PROGRESS("VM_UNDEPLOY_IN_PROGRESS"),
    VM_UNDEPLOY_FAILED("VM_UNDEPLOY_FAILED"),
    VM_UNDEPLOY_SUCCESSFUL("VM_UNDEPLOY_SUCCESSFUL"),
    EDGE_CONFIG_ERROR("EDGE_CONFIG_ERROR"),
    VM_DEPLOYMENT_RESTARTED("VM_DEPLOYMENT_RESTARTED"),
    REGISTRATION_FAILED("REGISTRATION_FAILED"),
    HOST_DISCONNECTED("HOST_DISCONNECTED"),
    POWERED_OFF("POWERED_OFF"),
    TRANSPORT_NODE_SYNC_PENDING("TRANSPORT_NODE_SYNC_PENDING"),
    TRANSPORT_NODE_CONFIGURATION_MISSING("TRANSPORT_NODE_CONFIGURATION_MISSING"),
    EDGE_HARDWARE_NOT_SUPPORTED("EDGE_HARDWARE_NOT_SUPPORTED"),
    MULTIPLE_OVERLAY_TZS_NOT_SUPPORTED("MULTIPLE_OVERLAY_TZS_NOT_SUPPORTED"),
    TN_OVERLAY_TZ_IN_USE_BY_EDGE_CLUSTER("TN_OVERLAY_TZ_IN_USE_BY_EDGE_CLUSTER"),
    TZ_ENDPOINTS_NOT_SPECIFIED("TZ_ENDPOINTS_NOT_SPECIFIED"),
    NO_PNIC_PREPARED_IN_EDGE("NO_PNIC_PREPARED_IN_EDGE"),
    APPLIANCE_INTERNAL_ERROR("APPLIANCE_INTERNAL_ERROR"),
    VTEP_DHCP_NOT_SUPPORTED("VTEP_DHCP_NOT_SUPPORTED"),
    UNSUPPORTED_HOST_SWITCH_PROFILE("UNSUPPORTED_HOST_SWITCH_PROFILE"),
    UPLINK_HOST_SWITCH_PROFILE_NOT_SPECIFIED("UPLINK_HOST_SWITCH_PROFILE_NOT_SPECIFIED"),
    HOSTSWITCH_PROFILE_NOT_FOUND("HOSTSWITCH_PROFILE_NOT_FOUND"),
    LLDP_SEND_ENABLED_NOT_SUPPORTED("LLDP_SEND_ENABLED_NOT_SUPPORTED"),
    UNSUPPORTED_NAMED_TEAMING_POLICY("UNSUPPORTED_NAMED_TEAMING_POLICY"),
    MULTIPLE_UPLINKS_IN_NAMED_TEAMING_NOT_SUPPORTED_IF_UPLINK_IN_DEFAULT_TEAMING("MULTIPLE_UPLINKS_IN_NAMED_TEAMING_NOT_SUPPORTED_IF_UPLINK_IN_DEFAULT_TEAMING"),
    LBSRCID_NOT_SUPPORTED_FOR_EDGE_VM("LBSRCID_NOT_SUPPORTED_FOR_EDGE_VM"),
    LACP_NOT_SUPPORTED_FOR_EDGE_VM("LACP_NOT_SUPPORTED_FOR_EDGE_VM"),
    STANDBY_UPLINKS_NOT_SUPPORTED_FOR_EDGE_VM("STANDBY_UPLINKS_NOT_SUPPORTED_FOR_EDGE_VM"),
    MULTIPLE_ACTIVE_UPLINKS_NOT_SUPPORTED_FOR_EDGE("MULTIPLE_ACTIVE_UPLINKS_NOT_SUPPORTED_FOR_EDGE"),
    UNSUPPORTED_LACP_LB_ALGO_FOR_NODE("UNSUPPORTED_LACP_LB_ALGO_FOR_NODE"),
    EDGE_NODE_VERSION_NOT_SUPPORTED("EDGE_NODE_VERSION_NOT_SUPPORTED"),
    NO_PNIC_SPECIFIED_IN_TN("NO_PNIC_SPECIFIED_IN_TN"),
    INVALID_PNIC_DEVICE_NAME("INVALID_PNIC_DEVICE_NAME"),
    TRANSPORT_NODE_READY("TRANSPORT_NODE_READY"),
    UNSUPPORTED_DEFAULT_TEAMING_POLICY("UNSUPPORTED_DEFAULT_TEAMING_POLICY"),
    MPA_DISCONNECTED("MPA_DISCONNECTED"),
    VM_NETWORK_EDIT_PENDING("VM_NETWORK_EDIT_PENDING"),
    VM_RENAME_PENDING("VM_RENAME_PENDING"),
    VM_CONFIG_EDIT_PENDING("VM_CONFIG_EDIT_PENDING"),
    VM_NETWORK_EDIT_FAILED("VM_NETWORK_EDIT_FAILED"),
    VM_RENAME_FAILED("VM_RENAME_FAILED"),
    VM_CONFIG_EDIT_FAILED("VM_CONFIG_EDIT_FAILED"),
    VM_CONFIG_DISCREPANCY("VM_CONFIG_DISCREPANCY"),
    VM_NODE_REFRESH_FAILED("VM_NODE_REFRESH_FAILED"),
    VM_PLACEMENT_REFRESH_FAILED("VM_PLACEMENT_REFRESH_FAILED");

    private String value;

    HostNodeDeploymentStatusEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static HostNodeDeploymentStatusEnum fromValue(String text) {
      for (HostNodeDeploymentStatusEnum b : HostNodeDeploymentStatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<HostNodeDeploymentStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final HostNodeDeploymentStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public HostNodeDeploymentStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return HostNodeDeploymentStatusEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("host_node_deployment_status")
  private HostNodeDeploymentStatusEnum hostNodeDeploymentStatus = null;

   /**
   * Indicates the fabric node&#x27;s MP&amp;lt;-&amp;gt;MPA channel connectivity status, UP, DOWN, UNKNOWN.
   * @return mpaConnectivityStatus
  **/
  @Schema(description = "Indicates the fabric node's MP&lt;-&gt;MPA channel connectivity status, UP, DOWN, UNKNOWN.")
  public MpaConnectivityStatusEnum getMpaConnectivityStatus() {
    return mpaConnectivityStatus;
  }

   /**
   * Details, if any, about the current LCP&amp;lt;-&amp;gt;CCP channel connectivity status of the fabric node.
   * @return lcpConnectivityStatusDetails
  **/
  @Schema(description = "Details, if any, about the current LCP&lt;-&gt;CCP channel connectivity status of the fabric node.")
  public List<ControlConnStatus> getLcpConnectivityStatusDetails() {
    return lcpConnectivityStatusDetails;
  }

   /**
   * Details, if any, about the current MP&amp;lt;-&amp;gt;MPA channel connectivity status of the fabric node.
   * @return mpaConnectivityStatusDetails
  **/
  @Schema(description = "Details, if any, about the current MP&lt;-&gt;MPA channel connectivity status of the fabric node.")
  public String getMpaConnectivityStatusDetails() {
    return mpaConnectivityStatusDetails;
  }

  public NodeStatus externalId(String externalId) {
    this.externalId = externalId;
    return this;
  }

   /**
   * HostNode external id
   * @return externalId
  **/
  @Schema(description = "HostNode external id")
  public String getExternalId() {
    return externalId;
  }

  public void setExternalId(String externalId) {
    this.externalId = externalId;
  }

   /**
   * Software version of the fabric node.
   * @return softwareVersion
  **/
  @Schema(description = "Software version of the fabric node.")
  public String getSoftwareVersion() {
    return softwareVersion;
  }

   /**
   * Indicates the fabric node&#x27;s status of maintenance mode, OFF, ENTERING, ON, EXITING.
   * @return maintenanceMode
  **/
  @Schema(description = "Indicates the fabric node's status of maintenance mode, OFF, ENTERING, ON, EXITING.")
  public MaintenanceModeEnum getMaintenanceMode() {
    return maintenanceMode;
  }

   /**
   * Is true if inventory sync is paused else false
   * @return inventorySyncPaused
  **/
  @Schema(description = "Is true if inventory sync is paused else false")
  public Boolean isInventorySyncPaused() {
    return inventorySyncPaused;
  }

  public NodeStatus systemStatus(NodeStatusProperties systemStatus) {
    this.systemStatus = systemStatus;
    return this;
  }

   /**
   * Get systemStatus
   * @return systemStatus
  **/
  @Schema(description = "")
  public NodeStatusProperties getSystemStatus() {
    return systemStatus;
  }

  public void setSystemStatus(NodeStatusProperties systemStatus) {
    this.systemStatus = systemStatus;
  }

   /**
   * Inventory sync auto re-enable target time, in epoch milis
   * @return inventorySyncReenableTime
  **/
  @Schema(description = "Inventory sync auto re-enable target time, in epoch milis")
  public Long getInventorySyncReenableTime() {
    return inventorySyncReenableTime;
  }

   /**
   * Indicates the fabric node&#x27;s LCP&amp;lt;-&amp;gt;CCP channel connectivity status, UP, DOWN, DEGRADED, UNKNOWN.
   * @return lcpConnectivityStatus
  **/
  @Schema(description = "Indicates the fabric node's LCP&lt;-&gt;CCP channel connectivity status, UP, DOWN, DEGRADED, UNKNOWN.")
  public LcpConnectivityStatusEnum getLcpConnectivityStatus() {
    return lcpConnectivityStatus;
  }

   /**
   * Timestamp of the last heartbeat status change, in epoch milliseconds.
   * @return lastHeartbeatTimestamp
  **/
  @Schema(description = "Timestamp of the last heartbeat status change, in epoch milliseconds.")
  public Long getLastHeartbeatTimestamp() {
    return lastHeartbeatTimestamp;
  }

   /**
   * Timestamp of the last successful update of Inventory, in epoch milliseconds.
   * @return lastSyncTime
  **/
  @Schema(description = "Timestamp of the last successful update of Inventory, in epoch milliseconds.")
  public Long getLastSyncTime() {
    return lastSyncTime;
  }

   /**
   * This enum specifies the current nsx install state for host node or current deployment and ready state for edge node. The ready status &#x27;NODE_READY&#x27; indicates whether edge node is ready to become a transport node. The status &#x27;EDGE_CONFIG_ERROR&#x27; indicates that edge hardware or underlying host is not supported. After all fabric level operations are done for an edge node, this value indicates transport node related configuration issues and state as relevant. 
   * @return hostNodeDeploymentStatus
  **/
  @Schema(description = "This enum specifies the current nsx install state for host node or current deployment and ready state for edge node. The ready status 'NODE_READY' indicates whether edge node is ready to become a transport node. The status 'EDGE_CONFIG_ERROR' indicates that edge hardware or underlying host is not supported. After all fabric level operations are done for an edge node, this value indicates transport node related configuration issues and state as relevant. ")
  public HostNodeDeploymentStatusEnum getHostNodeDeploymentStatus() {
    return hostNodeDeploymentStatus;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NodeStatus nodeStatus = (NodeStatus) o;
    return Objects.equals(this.mpaConnectivityStatus, nodeStatus.mpaConnectivityStatus) &&
        Objects.equals(this.lcpConnectivityStatusDetails, nodeStatus.lcpConnectivityStatusDetails) &&
        Objects.equals(this.mpaConnectivityStatusDetails, nodeStatus.mpaConnectivityStatusDetails) &&
        Objects.equals(this.externalId, nodeStatus.externalId) &&
        Objects.equals(this.softwareVersion, nodeStatus.softwareVersion) &&
        Objects.equals(this.maintenanceMode, nodeStatus.maintenanceMode) &&
        Objects.equals(this.inventorySyncPaused, nodeStatus.inventorySyncPaused) &&
        Objects.equals(this.systemStatus, nodeStatus.systemStatus) &&
        Objects.equals(this.inventorySyncReenableTime, nodeStatus.inventorySyncReenableTime) &&
        Objects.equals(this.lcpConnectivityStatus, nodeStatus.lcpConnectivityStatus) &&
        Objects.equals(this.lastHeartbeatTimestamp, nodeStatus.lastHeartbeatTimestamp) &&
        Objects.equals(this.lastSyncTime, nodeStatus.lastSyncTime) &&
        Objects.equals(this.hostNodeDeploymentStatus, nodeStatus.hostNodeDeploymentStatus);
  }

  @Override
  public int hashCode() {
    return Objects.hash(mpaConnectivityStatus, lcpConnectivityStatusDetails, mpaConnectivityStatusDetails, externalId, softwareVersion, maintenanceMode, inventorySyncPaused, systemStatus, inventorySyncReenableTime, lcpConnectivityStatus, lastHeartbeatTimestamp, lastSyncTime, hostNodeDeploymentStatus);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NodeStatus {\n");
    
    sb.append("    mpaConnectivityStatus: ").append(toIndentedString(mpaConnectivityStatus)).append("\n");
    sb.append("    lcpConnectivityStatusDetails: ").append(toIndentedString(lcpConnectivityStatusDetails)).append("\n");
    sb.append("    mpaConnectivityStatusDetails: ").append(toIndentedString(mpaConnectivityStatusDetails)).append("\n");
    sb.append("    externalId: ").append(toIndentedString(externalId)).append("\n");
    sb.append("    softwareVersion: ").append(toIndentedString(softwareVersion)).append("\n");
    sb.append("    maintenanceMode: ").append(toIndentedString(maintenanceMode)).append("\n");
    sb.append("    inventorySyncPaused: ").append(toIndentedString(inventorySyncPaused)).append("\n");
    sb.append("    systemStatus: ").append(toIndentedString(systemStatus)).append("\n");
    sb.append("    inventorySyncReenableTime: ").append(toIndentedString(inventorySyncReenableTime)).append("\n");
    sb.append("    lcpConnectivityStatus: ").append(toIndentedString(lcpConnectivityStatus)).append("\n");
    sb.append("    lastHeartbeatTimestamp: ").append(toIndentedString(lastHeartbeatTimestamp)).append("\n");
    sb.append("    lastSyncTime: ").append(toIndentedString(lastSyncTime)).append("\n");
    sb.append("    hostNodeDeploymentStatus: ").append(toIndentedString(hostNodeDeploymentStatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
