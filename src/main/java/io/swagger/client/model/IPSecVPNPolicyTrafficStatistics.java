/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.IPSecVPNTrafficCounters;
import io.swagger.client.model.IPSecVPNTunnelTrafficStatistics;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * IPSec VPN policy traffic statistics
 */
@Schema(description = "IPSec VPN policy traffic statistics")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class IPSecVPNPolicyTrafficStatistics {
  @SerializedName("aggregate_traffic_counters")
  private IPSecVPNTrafficCounters aggregateTrafficCounters = null;

  @SerializedName("tunnel_statistics")
  private List<IPSecVPNTunnelTrafficStatistics> tunnelStatistics = null;

  @SerializedName("tunnel_port_id")
  private String tunnelPortId = null;

  @SerializedName("policy_id")
  private String policyId = null;

  public IPSecVPNPolicyTrafficStatistics aggregateTrafficCounters(IPSecVPNTrafficCounters aggregateTrafficCounters) {
    this.aggregateTrafficCounters = aggregateTrafficCounters;
    return this;
  }

   /**
   * Get aggregateTrafficCounters
   * @return aggregateTrafficCounters
  **/
  @Schema(description = "")
  public IPSecVPNTrafficCounters getAggregateTrafficCounters() {
    return aggregateTrafficCounters;
  }

  public void setAggregateTrafficCounters(IPSecVPNTrafficCounters aggregateTrafficCounters) {
    this.aggregateTrafficCounters = aggregateTrafficCounters;
  }

   /**
   * Tunnel statistics.
   * @return tunnelStatistics
  **/
  @Schema(description = "Tunnel statistics.")
  public List<IPSecVPNTunnelTrafficStatistics> getTunnelStatistics() {
    return tunnelStatistics;
  }

   /**
   * Tunnel port identifier.
   * @return tunnelPortId
  **/
  @Schema(description = "Tunnel port identifier.")
  public String getTunnelPortId() {
    return tunnelPortId;
  }

   /**
   * Policy Identifier.
   * @return policyId
  **/
  @Schema(description = "Policy Identifier.")
  public String getPolicyId() {
    return policyId;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IPSecVPNPolicyTrafficStatistics ipSecVPNPolicyTrafficStatistics = (IPSecVPNPolicyTrafficStatistics) o;
    return Objects.equals(this.aggregateTrafficCounters, ipSecVPNPolicyTrafficStatistics.aggregateTrafficCounters) &&
        Objects.equals(this.tunnelStatistics, ipSecVPNPolicyTrafficStatistics.tunnelStatistics) &&
        Objects.equals(this.tunnelPortId, ipSecVPNPolicyTrafficStatistics.tunnelPortId) &&
        Objects.equals(this.policyId, ipSecVPNPolicyTrafficStatistics.policyId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aggregateTrafficCounters, tunnelStatistics, tunnelPortId, policyId);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IPSecVPNPolicyTrafficStatistics {\n");
    
    sb.append("    aggregateTrafficCounters: ").append(toIndentedString(aggregateTrafficCounters)).append("\n");
    sb.append("    tunnelStatistics: ").append(toIndentedString(tunnelStatistics)).append("\n");
    sb.append("    tunnelPortId: ").append(toIndentedString(tunnelPortId)).append("\n");
    sb.append("    policyId: ").append(toIndentedString(policyId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
