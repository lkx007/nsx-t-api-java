/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.Resource;
import io.swagger.client.model.ResourceLink;
import io.swagger.client.model.SelfResourceLink;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.List;
/**
 * Node network interface statistic properties
 */
@Schema(description = "Node network interface statistic properties")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class NodeInterfaceStatisticsProperties extends Resource {
  @SerializedName("tx_dropped")
  private Long txDropped = null;

  @SerializedName("rx_packets")
  private Long rxPackets = null;

  @SerializedName("tx_carrier")
  private Long txCarrier = null;

  @SerializedName("rx_bytes")
  private Long rxBytes = null;

  @SerializedName("tx_errors")
  private Long txErrors = null;

  @SerializedName("interface_id")
  private String interfaceId = null;

  @SerializedName("tx_colls")
  private Long txColls = null;

  @SerializedName("rx_frame")
  private Long rxFrame = null;

  @SerializedName("rx_errors")
  private Long rxErrors = null;

  @SerializedName("tx_bytes")
  private Long txBytes = null;

  @SerializedName("rx_dropped")
  private Long rxDropped = null;

  @SerializedName("tx_packets")
  private Long txPackets = null;

  /**
   * Source of status data.
   */
  @JsonAdapter(SourceEnum.Adapter.class)
  public enum SourceEnum {
    REALTIME("realtime"),
    CACHED("cached");

    private String value;

    SourceEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static SourceEnum fromValue(String text) {
      for (SourceEnum b : SourceEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<SourceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SourceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SourceEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return SourceEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("source")
  private SourceEnum source = null;

  public NodeInterfaceStatisticsProperties txDropped(Long txDropped) {
    this.txDropped = txDropped;
    return this;
  }

   /**
   * Number of packets dropped
   * @return txDropped
  **/
  @Schema(description = "Number of packets dropped")
  public Long getTxDropped() {
    return txDropped;
  }

  public void setTxDropped(Long txDropped) {
    this.txDropped = txDropped;
  }

  public NodeInterfaceStatisticsProperties rxPackets(Long rxPackets) {
    this.rxPackets = rxPackets;
    return this;
  }

   /**
   * Number of packets received
   * @return rxPackets
  **/
  @Schema(description = "Number of packets received")
  public Long getRxPackets() {
    return rxPackets;
  }

  public void setRxPackets(Long rxPackets) {
    this.rxPackets = rxPackets;
  }

  public NodeInterfaceStatisticsProperties txCarrier(Long txCarrier) {
    this.txCarrier = txCarrier;
    return this;
  }

   /**
   * Number of carrier losses detected
   * @return txCarrier
  **/
  @Schema(description = "Number of carrier losses detected")
  public Long getTxCarrier() {
    return txCarrier;
  }

  public void setTxCarrier(Long txCarrier) {
    this.txCarrier = txCarrier;
  }

  public NodeInterfaceStatisticsProperties rxBytes(Long rxBytes) {
    this.rxBytes = rxBytes;
    return this;
  }

   /**
   * Number of bytes received
   * @return rxBytes
  **/
  @Schema(description = "Number of bytes received")
  public Long getRxBytes() {
    return rxBytes;
  }

  public void setRxBytes(Long rxBytes) {
    this.rxBytes = rxBytes;
  }

  public NodeInterfaceStatisticsProperties txErrors(Long txErrors) {
    this.txErrors = txErrors;
    return this;
  }

   /**
   * Number of transmit errors
   * @return txErrors
  **/
  @Schema(description = "Number of transmit errors")
  public Long getTxErrors() {
    return txErrors;
  }

  public void setTxErrors(Long txErrors) {
    this.txErrors = txErrors;
  }

  public NodeInterfaceStatisticsProperties interfaceId(String interfaceId) {
    this.interfaceId = interfaceId;
    return this;
  }

   /**
   * Interface ID
   * @return interfaceId
  **/
  @Schema(description = "Interface ID")
  public String getInterfaceId() {
    return interfaceId;
  }

  public void setInterfaceId(String interfaceId) {
    this.interfaceId = interfaceId;
  }

  public NodeInterfaceStatisticsProperties txColls(Long txColls) {
    this.txColls = txColls;
    return this;
  }

   /**
   * Number of collisions detected
   * @return txColls
  **/
  @Schema(description = "Number of collisions detected")
  public Long getTxColls() {
    return txColls;
  }

  public void setTxColls(Long txColls) {
    this.txColls = txColls;
  }

  public NodeInterfaceStatisticsProperties rxFrame(Long rxFrame) {
    this.rxFrame = rxFrame;
    return this;
  }

   /**
   * Number of framing errors
   * @return rxFrame
  **/
  @Schema(description = "Number of framing errors")
  public Long getRxFrame() {
    return rxFrame;
  }

  public void setRxFrame(Long rxFrame) {
    this.rxFrame = rxFrame;
  }

  public NodeInterfaceStatisticsProperties rxErrors(Long rxErrors) {
    this.rxErrors = rxErrors;
    return this;
  }

   /**
   * Number of receive errors
   * @return rxErrors
  **/
  @Schema(description = "Number of receive errors")
  public Long getRxErrors() {
    return rxErrors;
  }

  public void setRxErrors(Long rxErrors) {
    this.rxErrors = rxErrors;
  }

  public NodeInterfaceStatisticsProperties txBytes(Long txBytes) {
    this.txBytes = txBytes;
    return this;
  }

   /**
   * Number of bytes transmitted
   * @return txBytes
  **/
  @Schema(description = "Number of bytes transmitted")
  public Long getTxBytes() {
    return txBytes;
  }

  public void setTxBytes(Long txBytes) {
    this.txBytes = txBytes;
  }

  public NodeInterfaceStatisticsProperties rxDropped(Long rxDropped) {
    this.rxDropped = rxDropped;
    return this;
  }

   /**
   * Number of packets dropped
   * @return rxDropped
  **/
  @Schema(description = "Number of packets dropped")
  public Long getRxDropped() {
    return rxDropped;
  }

  public void setRxDropped(Long rxDropped) {
    this.rxDropped = rxDropped;
  }

  public NodeInterfaceStatisticsProperties txPackets(Long txPackets) {
    this.txPackets = txPackets;
    return this;
  }

   /**
   * Number of packets transmitted
   * @return txPackets
  **/
  @Schema(description = "Number of packets transmitted")
  public Long getTxPackets() {
    return txPackets;
  }

  public void setTxPackets(Long txPackets) {
    this.txPackets = txPackets;
  }

  public NodeInterfaceStatisticsProperties source(SourceEnum source) {
    this.source = source;
    return this;
  }

   /**
   * Source of status data.
   * @return source
  **/
  @Schema(description = "Source of status data.")
  public SourceEnum getSource() {
    return source;
  }

  public void setSource(SourceEnum source) {
    this.source = source;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NodeInterfaceStatisticsProperties nodeInterfaceStatisticsProperties = (NodeInterfaceStatisticsProperties) o;
    return Objects.equals(this.txDropped, nodeInterfaceStatisticsProperties.txDropped) &&
        Objects.equals(this.rxPackets, nodeInterfaceStatisticsProperties.rxPackets) &&
        Objects.equals(this.txCarrier, nodeInterfaceStatisticsProperties.txCarrier) &&
        Objects.equals(this.rxBytes, nodeInterfaceStatisticsProperties.rxBytes) &&
        Objects.equals(this.txErrors, nodeInterfaceStatisticsProperties.txErrors) &&
        Objects.equals(this.interfaceId, nodeInterfaceStatisticsProperties.interfaceId) &&
        Objects.equals(this.txColls, nodeInterfaceStatisticsProperties.txColls) &&
        Objects.equals(this.rxFrame, nodeInterfaceStatisticsProperties.rxFrame) &&
        Objects.equals(this.rxErrors, nodeInterfaceStatisticsProperties.rxErrors) &&
        Objects.equals(this.txBytes, nodeInterfaceStatisticsProperties.txBytes) &&
        Objects.equals(this.rxDropped, nodeInterfaceStatisticsProperties.rxDropped) &&
        Objects.equals(this.txPackets, nodeInterfaceStatisticsProperties.txPackets) &&
        Objects.equals(this.source, nodeInterfaceStatisticsProperties.source) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(txDropped, rxPackets, txCarrier, rxBytes, txErrors, interfaceId, txColls, rxFrame, rxErrors, txBytes, rxDropped, txPackets, source, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NodeInterfaceStatisticsProperties {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    txDropped: ").append(toIndentedString(txDropped)).append("\n");
    sb.append("    rxPackets: ").append(toIndentedString(rxPackets)).append("\n");
    sb.append("    txCarrier: ").append(toIndentedString(txCarrier)).append("\n");
    sb.append("    rxBytes: ").append(toIndentedString(rxBytes)).append("\n");
    sb.append("    txErrors: ").append(toIndentedString(txErrors)).append("\n");
    sb.append("    interfaceId: ").append(toIndentedString(interfaceId)).append("\n");
    sb.append("    txColls: ").append(toIndentedString(txColls)).append("\n");
    sb.append("    rxFrame: ").append(toIndentedString(rxFrame)).append("\n");
    sb.append("    rxErrors: ").append(toIndentedString(rxErrors)).append("\n");
    sb.append("    txBytes: ").append(toIndentedString(txBytes)).append("\n");
    sb.append("    rxDropped: ").append(toIndentedString(rxDropped)).append("\n");
    sb.append("    txPackets: ").append(toIndentedString(txPackets)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
