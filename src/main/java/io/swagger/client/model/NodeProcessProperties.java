/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.Resource;
import io.swagger.client.model.ResourceLink;
import io.swagger.client.model.SelfResourceLink;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.List;
/**
 * Node process properties
 */
@Schema(description = "Node process properties")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class NodeProcessProperties extends Resource {
  @SerializedName("mem_used")
  private Long memUsed = null;

  @SerializedName("cpu_time")
  private Long cpuTime = null;

  @SerializedName("ppid")
  private Long ppid = null;

  @SerializedName("start_time")
  private Long startTime = null;

  @SerializedName("process_name")
  private String processName = null;

  @SerializedName("pid")
  private Long pid = null;

  @SerializedName("uptime")
  private Long uptime = null;

  @SerializedName("mem_resident")
  private Long memResident = null;

   /**
   * Virtual memory used by process in bytes
   * @return memUsed
  **/
  @Schema(description = "Virtual memory used by process in bytes")
  public Long getMemUsed() {
    return memUsed;
  }

   /**
   * CPU time (user and system) consumed by process in milliseconds
   * @return cpuTime
  **/
  @Schema(description = "CPU time (user and system) consumed by process in milliseconds")
  public Long getCpuTime() {
    return cpuTime;
  }

   /**
   * Parent process id
   * @return ppid
  **/
  @Schema(description = "Parent process id")
  public Long getPpid() {
    return ppid;
  }

   /**
   * Process start time expressed in milliseconds since epoch
   * @return startTime
  **/
  @Schema(description = "Process start time expressed in milliseconds since epoch")
  public Long getStartTime() {
    return startTime;
  }

   /**
   * Process name
   * @return processName
  **/
  @Schema(description = "Process name")
  public String getProcessName() {
    return processName;
  }

   /**
   * Process id
   * @return pid
  **/
  @Schema(description = "Process id")
  public Long getPid() {
    return pid;
  }

   /**
   * Milliseconds since process started
   * @return uptime
  **/
  @Schema(description = "Milliseconds since process started")
  public Long getUptime() {
    return uptime;
  }

   /**
   * Resident set size of process in bytes
   * @return memResident
  **/
  @Schema(description = "Resident set size of process in bytes")
  public Long getMemResident() {
    return memResident;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NodeProcessProperties nodeProcessProperties = (NodeProcessProperties) o;
    return Objects.equals(this.memUsed, nodeProcessProperties.memUsed) &&
        Objects.equals(this.cpuTime, nodeProcessProperties.cpuTime) &&
        Objects.equals(this.ppid, nodeProcessProperties.ppid) &&
        Objects.equals(this.startTime, nodeProcessProperties.startTime) &&
        Objects.equals(this.processName, nodeProcessProperties.processName) &&
        Objects.equals(this.pid, nodeProcessProperties.pid) &&
        Objects.equals(this.uptime, nodeProcessProperties.uptime) &&
        Objects.equals(this.memResident, nodeProcessProperties.memResident) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(memUsed, cpuTime, ppid, startTime, processName, pid, uptime, memResident, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NodeProcessProperties {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    memUsed: ").append(toIndentedString(memUsed)).append("\n");
    sb.append("    cpuTime: ").append(toIndentedString(cpuTime)).append("\n");
    sb.append("    ppid: ").append(toIndentedString(ppid)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    processName: ").append(toIndentedString(processName)).append("\n");
    sb.append("    pid: ").append(toIndentedString(pid)).append("\n");
    sb.append("    uptime: ").append(toIndentedString(uptime)).append("\n");
    sb.append("    memResident: ").append(toIndentedString(memResident)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
