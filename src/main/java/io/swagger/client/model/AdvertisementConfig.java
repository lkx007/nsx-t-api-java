/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.ManagedResource;
import io.swagger.client.model.Tag;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.List;
/**
 * Advertisement config for different types of routes which need to be advertised from TIER1 logical router to the linked TIER0 logical router 
 */
@Schema(description = "Advertisement config for different types of routes which need to be advertised from TIER1 logical router to the linked TIER0 logical router ")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class AdvertisementConfig extends ManagedResource {
  @SerializedName("advertise_nsx_connected_routes")
  private Boolean advertiseNsxConnectedRoutes = false;

  @SerializedName("advertise_lb_vip")
  private Boolean advertiseLbVip = false;

  @SerializedName("advertise_static_routes")
  private Boolean advertiseStaticRoutes = false;

  @SerializedName("logical_router_id")
  private String logicalRouterId = null;

  @SerializedName("advertise_dns_forwarder")
  private Boolean advertiseDnsForwarder = false;

  @SerializedName("advertise_nat_routes")
  private Boolean advertiseNatRoutes = false;

  @SerializedName("advertise_ipsec_local_ip")
  private Boolean advertiseIpsecLocalIp = false;

  @SerializedName("enabled")
  private Boolean enabled = false;

  @SerializedName("advertise_lb_snat_ip")
  private Boolean advertiseLbSnatIp = false;

  public AdvertisementConfig advertiseNsxConnectedRoutes(Boolean advertiseNsxConnectedRoutes) {
    this.advertiseNsxConnectedRoutes = advertiseNsxConnectedRoutes;
    return this;
  }

   /**
   * Flag to advertise all connected routes
   * @return advertiseNsxConnectedRoutes
  **/
  @Schema(description = "Flag to advertise all connected routes")
  public Boolean isAdvertiseNsxConnectedRoutes() {
    return advertiseNsxConnectedRoutes;
  }

  public void setAdvertiseNsxConnectedRoutes(Boolean advertiseNsxConnectedRoutes) {
    this.advertiseNsxConnectedRoutes = advertiseNsxConnectedRoutes;
  }

  public AdvertisementConfig advertiseLbVip(Boolean advertiseLbVip) {
    this.advertiseLbVip = advertiseLbVip;
    return this;
  }

   /**
   * Flag to advertise lb vip ips
   * @return advertiseLbVip
  **/
  @Schema(description = "Flag to advertise lb vip ips")
  public Boolean isAdvertiseLbVip() {
    return advertiseLbVip;
  }

  public void setAdvertiseLbVip(Boolean advertiseLbVip) {
    this.advertiseLbVip = advertiseLbVip;
  }

  public AdvertisementConfig advertiseStaticRoutes(Boolean advertiseStaticRoutes) {
    this.advertiseStaticRoutes = advertiseStaticRoutes;
    return this;
  }

   /**
   * Flag to advertise all static routes
   * @return advertiseStaticRoutes
  **/
  @Schema(description = "Flag to advertise all static routes")
  public Boolean isAdvertiseStaticRoutes() {
    return advertiseStaticRoutes;
  }

  public void setAdvertiseStaticRoutes(Boolean advertiseStaticRoutes) {
    this.advertiseStaticRoutes = advertiseStaticRoutes;
  }

   /**
   * TIER1 logical router id on which to enable this configuration
   * @return logicalRouterId
  **/
  @Schema(description = "TIER1 logical router id on which to enable this configuration")
  public String getLogicalRouterId() {
    return logicalRouterId;
  }

  public AdvertisementConfig advertiseDnsForwarder(Boolean advertiseDnsForwarder) {
    this.advertiseDnsForwarder = advertiseDnsForwarder;
    return this;
  }

   /**
   * Flag to advertise all routes of dns forwarder listener ips and source ips
   * @return advertiseDnsForwarder
  **/
  @Schema(description = "Flag to advertise all routes of dns forwarder listener ips and source ips")
  public Boolean isAdvertiseDnsForwarder() {
    return advertiseDnsForwarder;
  }

  public void setAdvertiseDnsForwarder(Boolean advertiseDnsForwarder) {
    this.advertiseDnsForwarder = advertiseDnsForwarder;
  }

  public AdvertisementConfig advertiseNatRoutes(Boolean advertiseNatRoutes) {
    this.advertiseNatRoutes = advertiseNatRoutes;
    return this;
  }

   /**
   * Flag to advertise all routes of nat
   * @return advertiseNatRoutes
  **/
  @Schema(description = "Flag to advertise all routes of nat")
  public Boolean isAdvertiseNatRoutes() {
    return advertiseNatRoutes;
  }

  public void setAdvertiseNatRoutes(Boolean advertiseNatRoutes) {
    this.advertiseNatRoutes = advertiseNatRoutes;
  }

  public AdvertisementConfig advertiseIpsecLocalIp(Boolean advertiseIpsecLocalIp) {
    this.advertiseIpsecLocalIp = advertiseIpsecLocalIp;
    return this;
  }

   /**
   * Flag to advertise all IPSec VPN local endpoint ips to linked TIER0 logical router
   * @return advertiseIpsecLocalIp
  **/
  @Schema(description = "Flag to advertise all IPSec VPN local endpoint ips to linked TIER0 logical router")
  public Boolean isAdvertiseIpsecLocalIp() {
    return advertiseIpsecLocalIp;
  }

  public void setAdvertiseIpsecLocalIp(Boolean advertiseIpsecLocalIp) {
    this.advertiseIpsecLocalIp = advertiseIpsecLocalIp;
  }

  public AdvertisementConfig enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

   /**
   * Flag to enable this configuration
   * @return enabled
  **/
  @Schema(description = "Flag to enable this configuration")
  public Boolean isEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }

  public AdvertisementConfig advertiseLbSnatIp(Boolean advertiseLbSnatIp) {
    this.advertiseLbSnatIp = advertiseLbSnatIp;
    return this;
  }

   /**
   * Flag to advertise all lb SNAT ips
   * @return advertiseLbSnatIp
  **/
  @Schema(description = "Flag to advertise all lb SNAT ips")
  public Boolean isAdvertiseLbSnatIp() {
    return advertiseLbSnatIp;
  }

  public void setAdvertiseLbSnatIp(Boolean advertiseLbSnatIp) {
    this.advertiseLbSnatIp = advertiseLbSnatIp;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AdvertisementConfig advertisementConfig = (AdvertisementConfig) o;
    return Objects.equals(this.advertiseNsxConnectedRoutes, advertisementConfig.advertiseNsxConnectedRoutes) &&
        Objects.equals(this.advertiseLbVip, advertisementConfig.advertiseLbVip) &&
        Objects.equals(this.advertiseStaticRoutes, advertisementConfig.advertiseStaticRoutes) &&
        Objects.equals(this.logicalRouterId, advertisementConfig.logicalRouterId) &&
        Objects.equals(this.advertiseDnsForwarder, advertisementConfig.advertiseDnsForwarder) &&
        Objects.equals(this.advertiseNatRoutes, advertisementConfig.advertiseNatRoutes) &&
        Objects.equals(this.advertiseIpsecLocalIp, advertisementConfig.advertiseIpsecLocalIp) &&
        Objects.equals(this.enabled, advertisementConfig.enabled) &&
        Objects.equals(this.advertiseLbSnatIp, advertisementConfig.advertiseLbSnatIp) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(advertiseNsxConnectedRoutes, advertiseLbVip, advertiseStaticRoutes, logicalRouterId, advertiseDnsForwarder, advertiseNatRoutes, advertiseIpsecLocalIp, enabled, advertiseLbSnatIp, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AdvertisementConfig {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    advertiseNsxConnectedRoutes: ").append(toIndentedString(advertiseNsxConnectedRoutes)).append("\n");
    sb.append("    advertiseLbVip: ").append(toIndentedString(advertiseLbVip)).append("\n");
    sb.append("    advertiseStaticRoutes: ").append(toIndentedString(advertiseStaticRoutes)).append("\n");
    sb.append("    logicalRouterId: ").append(toIndentedString(logicalRouterId)).append("\n");
    sb.append("    advertiseDnsForwarder: ").append(toIndentedString(advertiseDnsForwarder)).append("\n");
    sb.append("    advertiseNatRoutes: ").append(toIndentedString(advertiseNatRoutes)).append("\n");
    sb.append("    advertiseIpsecLocalIp: ").append(toIndentedString(advertiseIpsecLocalIp)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    advertiseLbSnatIp: ").append(toIndentedString(advertiseLbSnatIp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
