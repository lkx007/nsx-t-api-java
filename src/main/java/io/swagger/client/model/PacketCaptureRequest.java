/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.PacketCaptureOptionList;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * This type is used to create packet request on give node. Need to specify related parameters according to the capture point.
 */
@Schema(description = "This type is used to create packet request on give node. Need to specify related parameters according to the capture point.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class PacketCaptureRequest {
  @SerializedName("node")
  private String node = null;

  /**
   * Define the capture direction. Support three types INPUT/OUTPUT/DUAL.
   */
  @JsonAdapter(DirectionEnum.Adapter.class)
  public enum DirectionEnum {
    INPUT("INPUT"),
    OUTPUT("OUTPUT"),
    DUAL("DUAL");

    private String value;

    DirectionEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static DirectionEnum fromValue(String text) {
      for (DirectionEnum b : DirectionEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<DirectionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DirectionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DirectionEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return DirectionEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("direction")
  private DirectionEnum direction = null;

  @SerializedName("capduration")
  private Integer capduration = null;

  @SerializedName("capamount")
  private Integer capamount = null;

  /**
   * This type is used to differenite the incoming request from CLI/UI.
   */
  @JsonAdapter(CapsourceEnum.Adapter.class)
  public enum CapsourceEnum {
    CLI("CLI"),
    UI("UI");

    private String value;

    CapsourceEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static CapsourceEnum fromValue(String text) {
      for (CapsourceEnum b : CapsourceEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<CapsourceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CapsourceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CapsourceEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return CapsourceEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("capsource")
  private CapsourceEnum capsource = null;

  @SerializedName("node_ip")
  private String nodeIp = null;

  @SerializedName("capvalue")
  private String capvalue = null;

  /**
   * Define the capture filter type. Support PRE/POST mode.
   */
  @JsonAdapter(FiltertypeEnum.Adapter.class)
  public enum FiltertypeEnum {
    PRE("PRE"),
    POST("POST");

    private String value;

    FiltertypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static FiltertypeEnum fromValue(String text) {
      for (FiltertypeEnum b : FiltertypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<FiltertypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FiltertypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FiltertypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return FiltertypeEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("filtertype")
  private FiltertypeEnum filtertype = null;

  /**
   * Define the point to capture data.
   */
  @JsonAdapter(CappointEnum.Adapter.class)
  public enum CappointEnum {
    VNIC("VNIC"),
    VMKNIC("VMKNIC"),
    VMNIC("VMNIC"),
    VDRPORT("VDRPORT"),
    DVFILTER("DVFILTER"),
    LOGICALPORT("LOGICALPORT"),
    FCPORT("FCPORT"),
    VIF("VIF"),
    PNIC("PNIC");

    private String value;

    CappointEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static CappointEnum fromValue(String text) {
      for (CappointEnum b : CappointEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<CappointEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CappointEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CappointEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return CappointEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("cappoint")
  private CappointEnum cappoint = null;

  @SerializedName("capfilesize")
  private Integer capfilesize = null;

  @SerializedName("options")
  private PacketCaptureOptionList options = null;

  @SerializedName("streamport")
  private Integer streamport = null;

  @SerializedName("caprate")
  private Integer caprate = null;

  @SerializedName("capcore")
  private Integer capcore = null;

  @SerializedName("capsnaplen")
  private Integer capsnaplen = null;

  @SerializedName("streamaddress")
  private String streamaddress = null;

  /**
   * Define the capture streaming mode. The STREAM mode will send the data to given stream address and port. And the STANDALONE mode will save the capture file in local folder.
   */
  @JsonAdapter(CapmodeEnum.Adapter.class)
  public enum CapmodeEnum {
    STANDALONE("STANDALONE"),
    STREAM("STREAM");

    private String value;

    CapmodeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static CapmodeEnum fromValue(String text) {
      for (CapmodeEnum b : CapmodeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<CapmodeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CapmodeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CapmodeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return CapmodeEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("capmode")
  private CapmodeEnum capmode = null;

  public PacketCaptureRequest node(String node) {
    this.node = node;
    return this;
  }

   /**
   * Define the transport node to capture data.
   * @return node
  **/
  @Schema(description = "Define the transport node to capture data.")
  public String getNode() {
    return node;
  }

  public void setNode(String node) {
    this.node = node;
  }

  public PacketCaptureRequest direction(DirectionEnum direction) {
    this.direction = direction;
    return this;
  }

   /**
   * Define the capture direction. Support three types INPUT/OUTPUT/DUAL.
   * @return direction
  **/
  @Schema(description = "Define the capture direction. Support three types INPUT/OUTPUT/DUAL.")
  public DirectionEnum getDirection() {
    return direction;
  }

  public void setDirection(DirectionEnum direction) {
    this.direction = direction;
  }

  public PacketCaptureRequest capduration(Integer capduration) {
    this.capduration = capduration;
    return this;
  }

   /**
   * Define the packet capture duration time. After the capture duration time, the capture process will stop working.
   * @return capduration
  **/
  @Schema(description = "Define the packet capture duration time. After the capture duration time, the capture process will stop working.")
  public Integer getCapduration() {
    return capduration;
  }

  public void setCapduration(Integer capduration) {
    this.capduration = capduration;
  }

  public PacketCaptureRequest capamount(Integer capamount) {
    this.capamount = capamount;
    return this;
  }

   /**
   * Define the packet capture amount size.
   * @return capamount
  **/
  @Schema(description = "Define the packet capture amount size.")
  public Integer getCapamount() {
    return capamount;
  }

  public void setCapamount(Integer capamount) {
    this.capamount = capamount;
  }

  public PacketCaptureRequest capsource(CapsourceEnum capsource) {
    this.capsource = capsource;
    return this;
  }

   /**
   * This type is used to differenite the incoming request from CLI/UI.
   * @return capsource
  **/
  @Schema(required = true, description = "This type is used to differenite the incoming request from CLI/UI.")
  public CapsourceEnum getCapsource() {
    return capsource;
  }

  public void setCapsource(CapsourceEnum capsource) {
    this.capsource = capsource;
  }

  public PacketCaptureRequest nodeIp(String nodeIp) {
    this.nodeIp = nodeIp;
    return this;
  }

   /**
   * Define the transport node to capture data.
   * @return nodeIp
  **/
  @Schema(description = "Define the transport node to capture data.")
  public String getNodeIp() {
    return nodeIp;
  }

  public void setNodeIp(String nodeIp) {
    this.nodeIp = nodeIp;
  }

  public PacketCaptureRequest capvalue(String capvalue) {
    this.capvalue = capvalue;
    return this;
  }

   /**
   * Define the capture value of given capture point.
   * @return capvalue
  **/
  @Schema(description = "Define the capture value of given capture point.")
  public String getCapvalue() {
    return capvalue;
  }

  public void setCapvalue(String capvalue) {
    this.capvalue = capvalue;
  }

  public PacketCaptureRequest filtertype(FiltertypeEnum filtertype) {
    this.filtertype = filtertype;
    return this;
  }

   /**
   * Define the capture filter type. Support PRE/POST mode.
   * @return filtertype
  **/
  @Schema(description = "Define the capture filter type. Support PRE/POST mode.")
  public FiltertypeEnum getFiltertype() {
    return filtertype;
  }

  public void setFiltertype(FiltertypeEnum filtertype) {
    this.filtertype = filtertype;
  }

  public PacketCaptureRequest cappoint(CappointEnum cappoint) {
    this.cappoint = cappoint;
    return this;
  }

   /**
   * Define the point to capture data.
   * @return cappoint
  **/
  @Schema(required = true, description = "Define the point to capture data.")
  public CappointEnum getCappoint() {
    return cappoint;
  }

  public void setCappoint(CappointEnum cappoint) {
    this.cappoint = cappoint;
  }

  public PacketCaptureRequest capfilesize(Integer capfilesize) {
    this.capfilesize = capfilesize;
    return this;
  }

   /**
   * Define the packet capture file size limit.
   * @return capfilesize
  **/
  @Schema(description = "Define the packet capture file size limit.")
  public Integer getCapfilesize() {
    return capfilesize;
  }

  public void setCapfilesize(Integer capfilesize) {
    this.capfilesize = capfilesize;
  }

  public PacketCaptureRequest options(PacketCaptureOptionList options) {
    this.options = options;
    return this;
  }

   /**
   * Get options
   * @return options
  **/
  @Schema(description = "")
  public PacketCaptureOptionList getOptions() {
    return options;
  }

  public void setOptions(PacketCaptureOptionList options) {
    this.options = options;
  }

  public PacketCaptureRequest streamport(Integer streamport) {
    this.streamport = streamport;
    return this;
  }

   /**
   * Set the stream port to receive the capture packet. The STREAM mode is based on GRE-in-UDP Encapsulation(RFC8086). Packets are sent to UDP port 4754.
   * @return streamport
  **/
  @Schema(description = "Set the stream port to receive the capture packet. The STREAM mode is based on GRE-in-UDP Encapsulation(RFC8086). Packets are sent to UDP port 4754.")
  public Integer getStreamport() {
    return streamport;
  }

  public void setStreamport(Integer streamport) {
    this.streamport = streamport;
  }

  public PacketCaptureRequest caprate(Integer caprate) {
    this.caprate = caprate;
    return this;
  }

   /**
   * Define the rate of packet capture process.
   * @return caprate
  **/
  @Schema(description = "Define the rate of packet capture process.")
  public Integer getCaprate() {
    return caprate;
  }

  public void setCaprate(Integer caprate) {
    this.caprate = caprate;
  }

  public PacketCaptureRequest capcore(Integer capcore) {
    this.capcore = capcore;
    return this;
  }

   /**
   * The CPU core id on Edge node.
   * @return capcore
  **/
  @Schema(description = "The CPU core id on Edge node.")
  public Integer getCapcore() {
    return capcore;
  }

  public void setCapcore(Integer capcore) {
    this.capcore = capcore;
  }

  public PacketCaptureRequest capsnaplen(Integer capsnaplen) {
    this.capsnaplen = capsnaplen;
    return this;
  }

   /**
   * Limit the number of bytes captured from each packet.
   * @return capsnaplen
  **/
  @Schema(description = "Limit the number of bytes captured from each packet.")
  public Integer getCapsnaplen() {
    return capsnaplen;
  }

  public void setCapsnaplen(Integer capsnaplen) {
    this.capsnaplen = capsnaplen;
  }

  public PacketCaptureRequest streamaddress(String streamaddress) {
    this.streamaddress = streamaddress;
    return this;
  }

   /**
   * Set the stream address to receive the capture packet.
   * @return streamaddress
  **/
  @Schema(description = "Set the stream address to receive the capture packet.")
  public String getStreamaddress() {
    return streamaddress;
  }

  public void setStreamaddress(String streamaddress) {
    this.streamaddress = streamaddress;
  }

  public PacketCaptureRequest capmode(CapmodeEnum capmode) {
    this.capmode = capmode;
    return this;
  }

   /**
   * Define the capture streaming mode. The STREAM mode will send the data to given stream address and port. And the STANDALONE mode will save the capture file in local folder.
   * @return capmode
  **/
  @Schema(description = "Define the capture streaming mode. The STREAM mode will send the data to given stream address and port. And the STANDALONE mode will save the capture file in local folder.")
  public CapmodeEnum getCapmode() {
    return capmode;
  }

  public void setCapmode(CapmodeEnum capmode) {
    this.capmode = capmode;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PacketCaptureRequest packetCaptureRequest = (PacketCaptureRequest) o;
    return Objects.equals(this.node, packetCaptureRequest.node) &&
        Objects.equals(this.direction, packetCaptureRequest.direction) &&
        Objects.equals(this.capduration, packetCaptureRequest.capduration) &&
        Objects.equals(this.capamount, packetCaptureRequest.capamount) &&
        Objects.equals(this.capsource, packetCaptureRequest.capsource) &&
        Objects.equals(this.nodeIp, packetCaptureRequest.nodeIp) &&
        Objects.equals(this.capvalue, packetCaptureRequest.capvalue) &&
        Objects.equals(this.filtertype, packetCaptureRequest.filtertype) &&
        Objects.equals(this.cappoint, packetCaptureRequest.cappoint) &&
        Objects.equals(this.capfilesize, packetCaptureRequest.capfilesize) &&
        Objects.equals(this.options, packetCaptureRequest.options) &&
        Objects.equals(this.streamport, packetCaptureRequest.streamport) &&
        Objects.equals(this.caprate, packetCaptureRequest.caprate) &&
        Objects.equals(this.capcore, packetCaptureRequest.capcore) &&
        Objects.equals(this.capsnaplen, packetCaptureRequest.capsnaplen) &&
        Objects.equals(this.streamaddress, packetCaptureRequest.streamaddress) &&
        Objects.equals(this.capmode, packetCaptureRequest.capmode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(node, direction, capduration, capamount, capsource, nodeIp, capvalue, filtertype, cappoint, capfilesize, options, streamport, caprate, capcore, capsnaplen, streamaddress, capmode);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PacketCaptureRequest {\n");
    
    sb.append("    node: ").append(toIndentedString(node)).append("\n");
    sb.append("    direction: ").append(toIndentedString(direction)).append("\n");
    sb.append("    capduration: ").append(toIndentedString(capduration)).append("\n");
    sb.append("    capamount: ").append(toIndentedString(capamount)).append("\n");
    sb.append("    capsource: ").append(toIndentedString(capsource)).append("\n");
    sb.append("    nodeIp: ").append(toIndentedString(nodeIp)).append("\n");
    sb.append("    capvalue: ").append(toIndentedString(capvalue)).append("\n");
    sb.append("    filtertype: ").append(toIndentedString(filtertype)).append("\n");
    sb.append("    cappoint: ").append(toIndentedString(cappoint)).append("\n");
    sb.append("    capfilesize: ").append(toIndentedString(capfilesize)).append("\n");
    sb.append("    options: ").append(toIndentedString(options)).append("\n");
    sb.append("    streamport: ").append(toIndentedString(streamport)).append("\n");
    sb.append("    caprate: ").append(toIndentedString(caprate)).append("\n");
    sb.append("    capcore: ").append(toIndentedString(capcore)).append("\n");
    sb.append("    capsnaplen: ").append(toIndentedString(capsnaplen)).append("\n");
    sb.append("    streamaddress: ").append(toIndentedString(streamaddress)).append("\n");
    sb.append("    capmode: ").append(toIndentedString(capmode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
