/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.NodeInterfaceAlias;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * Node network interface properties
 */
@Schema(description = "Node network interface properties")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class NodeInterfaceProperties {
  @SerializedName("host_managed")
  private Boolean hostManaged = null;

  /**
   * Interface administration status
   */
  @JsonAdapter(LinkStatusEnum.Adapter.class)
  public enum LinkStatusEnum {
    UP("UP"),
    DOWN("DOWN");

    private String value;

    LinkStatusEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static LinkStatusEnum fromValue(String text) {
      for (LinkStatusEnum b : LinkStatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<LinkStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LinkStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LinkStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return LinkStatusEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("link_status")
  private LinkStatusEnum linkStatus = null;

  @SerializedName("ens_enabled")
  private Boolean ensEnabled = null;

  /**
   * Interface Type
   */
  @JsonAdapter(InterfaceTypeEnum.Adapter.class)
  public enum InterfaceTypeEnum {
    PHYSICAL("PHYSICAL"),
    VIRTUAL("VIRTUAL");

    private String value;

    InterfaceTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static InterfaceTypeEnum fromValue(String text) {
      for (InterfaceTypeEnum b : InterfaceTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<InterfaceTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final InterfaceTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public InterfaceTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return InterfaceTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("interface_type")
  private InterfaceTypeEnum interfaceType = null;

  @SerializedName("connected_switch")
  private String connectedSwitch = null;

  @SerializedName("mtu")
  private Long mtu = null;

  /**
   * Source of status data
   */
  @JsonAdapter(SourceEnum.Adapter.class)
  public enum SourceEnum {
    REALTIME("realtime"),
    CACHED("cached");

    private String value;

    SourceEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static SourceEnum fromValue(String text) {
      for (SourceEnum b : SourceEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<SourceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SourceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SourceEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return SourceEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("source")
  private SourceEnum source = null;

  /**
   * Interface administration status
   */
  @JsonAdapter(AdminStatusEnum.Adapter.class)
  public enum AdminStatusEnum {
    UP("UP"),
    DOWN("DOWN");

    private String value;

    AdminStatusEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static AdminStatusEnum fromValue(String text) {
      for (AdminStatusEnum b : AdminStatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<AdminStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AdminStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AdminStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return AdminStatusEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("admin_status")
  private AdminStatusEnum adminStatus = null;

  @SerializedName("backing_nsx_managed")
  private Boolean backingNsxManaged = null;

  @SerializedName("lport_attachment_id")
  private String lportAttachmentId = null;

  @SerializedName("interface_id")
  private String interfaceId = null;

  @SerializedName("ens_capable")
  private Boolean ensCapable = null;

  @SerializedName("interface_alias")
  private List<NodeInterfaceAlias> interfaceAlias = null;

  public NodeInterfaceProperties hostManaged(Boolean hostManaged) {
    this.hostManaged = hostManaged;
    return this;
  }

   /**
   * Indicates whether interface is managed by the host
   * @return hostManaged
  **/
  @Schema(description = "Indicates whether interface is managed by the host")
  public Boolean isHostManaged() {
    return hostManaged;
  }

  public void setHostManaged(Boolean hostManaged) {
    this.hostManaged = hostManaged;
  }

  public NodeInterfaceProperties linkStatus(LinkStatusEnum linkStatus) {
    this.linkStatus = linkStatus;
    return this;
  }

   /**
   * Interface administration status
   * @return linkStatus
  **/
  @Schema(description = "Interface administration status")
  public LinkStatusEnum getLinkStatus() {
    return linkStatus;
  }

  public void setLinkStatus(LinkStatusEnum linkStatus) {
    this.linkStatus = linkStatus;
  }

  public NodeInterfaceProperties ensEnabled(Boolean ensEnabled) {
    this.ensEnabled = ensEnabled;
    return this;
  }

   /**
   * Indicates whether interface is enabled for Enhanced Networking Stack
   * @return ensEnabled
  **/
  @Schema(description = "Indicates whether interface is enabled for Enhanced Networking Stack")
  public Boolean isEnsEnabled() {
    return ensEnabled;
  }

  public void setEnsEnabled(Boolean ensEnabled) {
    this.ensEnabled = ensEnabled;
  }

  public NodeInterfaceProperties interfaceType(InterfaceTypeEnum interfaceType) {
    this.interfaceType = interfaceType;
    return this;
  }

   /**
   * Interface Type
   * @return interfaceType
  **/
  @Schema(description = "Interface Type")
  public InterfaceTypeEnum getInterfaceType() {
    return interfaceType;
  }

  public void setInterfaceType(InterfaceTypeEnum interfaceType) {
    this.interfaceType = interfaceType;
  }

  public NodeInterfaceProperties connectedSwitch(String connectedSwitch) {
    this.connectedSwitch = connectedSwitch;
    return this;
  }

   /**
   * Connected switch
   * @return connectedSwitch
  **/
  @Schema(description = "Connected switch")
  public String getConnectedSwitch() {
    return connectedSwitch;
  }

  public void setConnectedSwitch(String connectedSwitch) {
    this.connectedSwitch = connectedSwitch;
  }

  public NodeInterfaceProperties mtu(Long mtu) {
    this.mtu = mtu;
    return this;
  }

   /**
   * Interface MTU
   * @return mtu
  **/
  @Schema(description = "Interface MTU")
  public Long getMtu() {
    return mtu;
  }

  public void setMtu(Long mtu) {
    this.mtu = mtu;
  }

  public NodeInterfaceProperties source(SourceEnum source) {
    this.source = source;
    return this;
  }

   /**
   * Source of status data
   * @return source
  **/
  @Schema(description = "Source of status data")
  public SourceEnum getSource() {
    return source;
  }

  public void setSource(SourceEnum source) {
    this.source = source;
  }

  public NodeInterfaceProperties adminStatus(AdminStatusEnum adminStatus) {
    this.adminStatus = adminStatus;
    return this;
  }

   /**
   * Interface administration status
   * @return adminStatus
  **/
  @Schema(description = "Interface administration status")
  public AdminStatusEnum getAdminStatus() {
    return adminStatus;
  }

  public void setAdminStatus(AdminStatusEnum adminStatus) {
    this.adminStatus = adminStatus;
  }

  public NodeInterfaceProperties backingNsxManaged(Boolean backingNsxManaged) {
    this.backingNsxManaged = backingNsxManaged;
    return this;
  }

   /**
   * Indicates whether backing of VIRTUAL network interface is managed by NSX
   * @return backingNsxManaged
  **/
  @Schema(description = "Indicates whether backing of VIRTUAL network interface is managed by NSX")
  public Boolean isBackingNsxManaged() {
    return backingNsxManaged;
  }

  public void setBackingNsxManaged(Boolean backingNsxManaged) {
    this.backingNsxManaged = backingNsxManaged;
  }

  public NodeInterfaceProperties lportAttachmentId(String lportAttachmentId) {
    this.lportAttachmentId = lportAttachmentId;
    return this;
  }

   /**
   * LPort Attachment Id assigned to VIRTUAL network interface of a node
   * @return lportAttachmentId
  **/
  @Schema(description = "LPort Attachment Id assigned to VIRTUAL network interface of a node")
  public String getLportAttachmentId() {
    return lportAttachmentId;
  }

  public void setLportAttachmentId(String lportAttachmentId) {
    this.lportAttachmentId = lportAttachmentId;
  }

  public NodeInterfaceProperties interfaceId(String interfaceId) {
    this.interfaceId = interfaceId;
    return this;
  }

   /**
   * Interface ID
   * @return interfaceId
  **/
  @Schema(description = "Interface ID")
  public String getInterfaceId() {
    return interfaceId;
  }

  public void setInterfaceId(String interfaceId) {
    this.interfaceId = interfaceId;
  }

  public NodeInterfaceProperties ensCapable(Boolean ensCapable) {
    this.ensCapable = ensCapable;
    return this;
  }

   /**
   * Interface capability for Enhanced Networking Stack
   * @return ensCapable
  **/
  @Schema(description = "Interface capability for Enhanced Networking Stack")
  public Boolean isEnsCapable() {
    return ensCapable;
  }

  public void setEnsCapable(Boolean ensCapable) {
    this.ensCapable = ensCapable;
  }

  public NodeInterfaceProperties interfaceAlias(List<NodeInterfaceAlias> interfaceAlias) {
    this.interfaceAlias = interfaceAlias;
    return this;
  }

  public NodeInterfaceProperties addInterfaceAliasItem(NodeInterfaceAlias interfaceAliasItem) {
    if (this.interfaceAlias == null) {
      this.interfaceAlias = new ArrayList<NodeInterfaceAlias>();
    }
    this.interfaceAlias.add(interfaceAliasItem);
    return this;
  }

   /**
   * IP Alias
   * @return interfaceAlias
  **/
  @Schema(description = "IP Alias")
  public List<NodeInterfaceAlias> getInterfaceAlias() {
    return interfaceAlias;
  }

  public void setInterfaceAlias(List<NodeInterfaceAlias> interfaceAlias) {
    this.interfaceAlias = interfaceAlias;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NodeInterfaceProperties nodeInterfaceProperties = (NodeInterfaceProperties) o;
    return Objects.equals(this.hostManaged, nodeInterfaceProperties.hostManaged) &&
        Objects.equals(this.linkStatus, nodeInterfaceProperties.linkStatus) &&
        Objects.equals(this.ensEnabled, nodeInterfaceProperties.ensEnabled) &&
        Objects.equals(this.interfaceType, nodeInterfaceProperties.interfaceType) &&
        Objects.equals(this.connectedSwitch, nodeInterfaceProperties.connectedSwitch) &&
        Objects.equals(this.mtu, nodeInterfaceProperties.mtu) &&
        Objects.equals(this.source, nodeInterfaceProperties.source) &&
        Objects.equals(this.adminStatus, nodeInterfaceProperties.adminStatus) &&
        Objects.equals(this.backingNsxManaged, nodeInterfaceProperties.backingNsxManaged) &&
        Objects.equals(this.lportAttachmentId, nodeInterfaceProperties.lportAttachmentId) &&
        Objects.equals(this.interfaceId, nodeInterfaceProperties.interfaceId) &&
        Objects.equals(this.ensCapable, nodeInterfaceProperties.ensCapable) &&
        Objects.equals(this.interfaceAlias, nodeInterfaceProperties.interfaceAlias);
  }

  @Override
  public int hashCode() {
    return Objects.hash(hostManaged, linkStatus, ensEnabled, interfaceType, connectedSwitch, mtu, source, adminStatus, backingNsxManaged, lportAttachmentId, interfaceId, ensCapable, interfaceAlias);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NodeInterfaceProperties {\n");
    
    sb.append("    hostManaged: ").append(toIndentedString(hostManaged)).append("\n");
    sb.append("    linkStatus: ").append(toIndentedString(linkStatus)).append("\n");
    sb.append("    ensEnabled: ").append(toIndentedString(ensEnabled)).append("\n");
    sb.append("    interfaceType: ").append(toIndentedString(interfaceType)).append("\n");
    sb.append("    connectedSwitch: ").append(toIndentedString(connectedSwitch)).append("\n");
    sb.append("    mtu: ").append(toIndentedString(mtu)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    adminStatus: ").append(toIndentedString(adminStatus)).append("\n");
    sb.append("    backingNsxManaged: ").append(toIndentedString(backingNsxManaged)).append("\n");
    sb.append("    lportAttachmentId: ").append(toIndentedString(lportAttachmentId)).append("\n");
    sb.append("    interfaceId: ").append(toIndentedString(interfaceId)).append("\n");
    sb.append("    ensCapable: ").append(toIndentedString(ensCapable)).append("\n");
    sb.append("    interfaceAlias: ").append(toIndentedString(interfaceAlias)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
