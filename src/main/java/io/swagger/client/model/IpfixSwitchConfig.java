/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.IpfixConfig;
import io.swagger.client.model.ResourceReference;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.List;
/**
 * This is deprecated. Please use IpfixSwitchUpmProfile instead which can specify its own collectors and observation ID. 
 */
@Schema(description = "This is deprecated. Please use IpfixSwitchUpmProfile instead which can specify its own collectors and observation ID. ")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class IpfixSwitchConfig extends IpfixConfig {
  @SerializedName("active_timeout")
  private Integer activeTimeout = 300;

  @SerializedName("idle_timeout")
  private Integer idleTimeout = 300;

  @SerializedName("packet_sample_probability")
  private BigDecimal packetSampleProbability = null;

  @SerializedName("max_flows")
  private Long maxFlows = 16384l;

  public IpfixSwitchConfig activeTimeout(Integer activeTimeout) {
    this.activeTimeout = activeTimeout;
    return this;
  }

   /**
   * The time in seconds after a Flow is expired even if more packets matching this Flow are received by the cache. 
   * minimum: 60
   * maximum: 3600
   * @return activeTimeout
  **/
  @Schema(description = "The time in seconds after a Flow is expired even if more packets matching this Flow are received by the cache. ")
  public Integer getActiveTimeout() {
    return activeTimeout;
  }

  public void setActiveTimeout(Integer activeTimeout) {
    this.activeTimeout = activeTimeout;
  }

  public IpfixSwitchConfig idleTimeout(Integer idleTimeout) {
    this.idleTimeout = idleTimeout;
    return this;
  }

   /**
   * The time in seconds after a Flow is expired if no more packets matching this Flow are received by the cache. 
   * minimum: 60
   * maximum: 3600
   * @return idleTimeout
  **/
  @Schema(description = "The time in seconds after a Flow is expired if no more packets matching this Flow are received by the cache. ")
  public Integer getIdleTimeout() {
    return idleTimeout;
  }

  public void setIdleTimeout(Integer idleTimeout) {
    this.idleTimeout = idleTimeout;
  }

  public IpfixSwitchConfig packetSampleProbability(BigDecimal packetSampleProbability) {
    this.packetSampleProbability = packetSampleProbability;
    return this;
  }

   /**
   * The probability in percentage that a packet is sampled. The value should be  in range (0,100] and can only have three decimal places at most. The probability  is equal for every packet. 
   * minimum: 0
   * maximum: 100
   * @return packetSampleProbability
  **/
  @Schema(description = "The probability in percentage that a packet is sampled. The value should be  in range (0,100] and can only have three decimal places at most. The probability  is equal for every packet. ")
  public BigDecimal getPacketSampleProbability() {
    return packetSampleProbability;
  }

  public void setPacketSampleProbability(BigDecimal packetSampleProbability) {
    this.packetSampleProbability = packetSampleProbability;
  }

  public IpfixSwitchConfig maxFlows(Long maxFlows) {
    this.maxFlows = maxFlows;
    return this;
  }

   /**
   * The maximum number of flow entries in each exporter flow cache. 
   * minimum: 0
   * maximum: 4294967295
   * @return maxFlows
  **/
  @Schema(description = "The maximum number of flow entries in each exporter flow cache. ")
  public Long getMaxFlows() {
    return maxFlows;
  }

  public void setMaxFlows(Long maxFlows) {
    this.maxFlows = maxFlows;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IpfixSwitchConfig ipfixSwitchConfig = (IpfixSwitchConfig) o;
    return Objects.equals(this.activeTimeout, ipfixSwitchConfig.activeTimeout) &&
        Objects.equals(this.idleTimeout, ipfixSwitchConfig.idleTimeout) &&
        Objects.equals(this.packetSampleProbability, ipfixSwitchConfig.packetSampleProbability) &&
        Objects.equals(this.maxFlows, ipfixSwitchConfig.maxFlows) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activeTimeout, idleTimeout, packetSampleProbability, maxFlows, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IpfixSwitchConfig {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    activeTimeout: ").append(toIndentedString(activeTimeout)).append("\n");
    sb.append("    idleTimeout: ").append(toIndentedString(idleTimeout)).append("\n");
    sb.append("    packetSampleProbability: ").append(toIndentedString(packetSampleProbability)).append("\n");
    sb.append("    maxFlows: ").append(toIndentedString(maxFlows)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
