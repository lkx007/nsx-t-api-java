/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.LbNodeCountPerSeverity;
import io.swagger.client.model.LbNodeUsage;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
/**
 * The load balancer node usage summary for all nodes. Only EdgeNode is supported. The summary calculation is based on all edge nodes configured in edge clusters. 
 */
@Schema(description = "The load balancer node usage summary for all nodes. Only EdgeNode is supported. The summary calculation is based on all edge nodes configured in edge clusters. ")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class LbNodeUsageSummary {
  @SerializedName("usage_percentage")
  private BigDecimal usagePercentage = null;

  @SerializedName("current_credit_number")
  private Long currentCreditNumber = null;

  @SerializedName("node_usages")
  private List<LbNodeUsage> nodeUsages = null;

  /**
   * The severity calculation is based on current credit usage percentage of load balancer for all nodes. 
   */
  @JsonAdapter(SeverityEnum.Adapter.class)
  public enum SeverityEnum {
    GREEN("GREEN"),
    ORANGE("ORANGE"),
    RED("RED");

    private String value;

    SeverityEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static SeverityEnum fromValue(String text) {
      for (SeverityEnum b : SeverityEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<SeverityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SeverityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SeverityEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return SeverityEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("severity")
  private SeverityEnum severity = null;

  @SerializedName("node_counts")
  private List<LbNodeCountPerSeverity> nodeCounts = null;

  @SerializedName("remaining_credit_number")
  private Long remainingCreditNumber = null;

   /**
   * The overall usage percentage of all nodes for the load balancer services. 
   * @return usagePercentage
  **/
  @Schema(description = "The overall usage percentage of all nodes for the load balancer services. ")
  public BigDecimal getUsagePercentage() {
    return usagePercentage;
  }

   /**
   * The current credit number reflects the overall credit usage for all nodes. 
   * @return currentCreditNumber
  **/
  @Schema(description = "The current credit number reflects the overall credit usage for all nodes. ")
  public Long getCurrentCreditNumber() {
    return currentCreditNumber;
  }

   /**
   * The property contains lb node usages for each node. 
   * @return nodeUsages
  **/
  @Schema(description = "The property contains lb node usages for each node. ")
  public List<LbNodeUsage> getNodeUsages() {
    return nodeUsages;
  }

   /**
   * The severity calculation is based on current credit usage percentage of load balancer for all nodes. 
   * @return severity
  **/
  @Schema(description = "The severity calculation is based on current credit usage percentage of load balancer for all nodes. ")
  public SeverityEnum getSeverity() {
    return severity;
  }

   /**
   * The property identifies array of node count for each severity (RED, ORANGE and GREEN). 
   * @return nodeCounts
  **/
  @Schema(description = "The property identifies array of node count for each severity (RED, ORANGE and GREEN). ")
  public List<LbNodeCountPerSeverity> getNodeCounts() {
    return nodeCounts;
  }

   /**
   * The remaining credit number is the overall remaining credits that can be used for load balancer service configuration for all nodes. 
   * @return remainingCreditNumber
  **/
  @Schema(description = "The remaining credit number is the overall remaining credits that can be used for load balancer service configuration for all nodes. ")
  public Long getRemainingCreditNumber() {
    return remainingCreditNumber;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LbNodeUsageSummary lbNodeUsageSummary = (LbNodeUsageSummary) o;
    return Objects.equals(this.usagePercentage, lbNodeUsageSummary.usagePercentage) &&
        Objects.equals(this.currentCreditNumber, lbNodeUsageSummary.currentCreditNumber) &&
        Objects.equals(this.nodeUsages, lbNodeUsageSummary.nodeUsages) &&
        Objects.equals(this.severity, lbNodeUsageSummary.severity) &&
        Objects.equals(this.nodeCounts, lbNodeUsageSummary.nodeCounts) &&
        Objects.equals(this.remainingCreditNumber, lbNodeUsageSummary.remainingCreditNumber);
  }

  @Override
  public int hashCode() {
    return Objects.hash(usagePercentage, currentCreditNumber, nodeUsages, severity, nodeCounts, remainingCreditNumber);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LbNodeUsageSummary {\n");
    
    sb.append("    usagePercentage: ").append(toIndentedString(usagePercentage)).append("\n");
    sb.append("    currentCreditNumber: ").append(toIndentedString(currentCreditNumber)).append("\n");
    sb.append("    nodeUsages: ").append(toIndentedString(nodeUsages)).append("\n");
    sb.append("    severity: ").append(toIndentedString(severity)).append("\n");
    sb.append("    nodeCounts: ").append(toIndentedString(nodeCounts)).append("\n");
    sb.append("    remainingCreditNumber: ").append(toIndentedString(remainingCreditNumber)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
