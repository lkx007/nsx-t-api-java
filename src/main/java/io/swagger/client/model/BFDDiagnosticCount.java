/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * BFDDiagnosticCount
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class BFDDiagnosticCount {
  @SerializedName("concatenated_path_down_count")
  private Long concatenatedPathDownCount = null;

  @SerializedName("administratively_down_count")
  private Long administrativelyDownCount = null;

  @SerializedName("no_diagnostic_count")
  private Long noDiagnosticCount = null;

  @SerializedName("path_down_count")
  private Long pathDownCount = null;

  @SerializedName("reverse_concatenated_path_down_count")
  private Long reverseConcatenatedPathDownCount = null;

  @SerializedName("neighbor_signaled_session_down_count")
  private Long neighborSignaledSessionDownCount = null;

  @SerializedName("control_detection_time_expired_count")
  private Long controlDetectionTimeExpiredCount = null;

  @SerializedName("echo_function_failed_count")
  private Long echoFunctionFailedCount = null;

  @SerializedName("forwarding_plane_reset_count")
  private Long forwardingPlaneResetCount = null;

  public BFDDiagnosticCount concatenatedPathDownCount(Long concatenatedPathDownCount) {
    this.concatenatedPathDownCount = concatenatedPathDownCount;
    return this;
  }

   /**
   * Number of tunnels with concatenated path down diagnostic message
   * @return concatenatedPathDownCount
  **/
  @Schema(description = "Number of tunnels with concatenated path down diagnostic message")
  public Long getConcatenatedPathDownCount() {
    return concatenatedPathDownCount;
  }

  public void setConcatenatedPathDownCount(Long concatenatedPathDownCount) {
    this.concatenatedPathDownCount = concatenatedPathDownCount;
  }

  public BFDDiagnosticCount administrativelyDownCount(Long administrativelyDownCount) {
    this.administrativelyDownCount = administrativelyDownCount;
    return this;
  }

   /**
   * Number of tunnels with administratively down diagnostic message
   * @return administrativelyDownCount
  **/
  @Schema(description = "Number of tunnels with administratively down diagnostic message")
  public Long getAdministrativelyDownCount() {
    return administrativelyDownCount;
  }

  public void setAdministrativelyDownCount(Long administrativelyDownCount) {
    this.administrativelyDownCount = administrativelyDownCount;
  }

  public BFDDiagnosticCount noDiagnosticCount(Long noDiagnosticCount) {
    this.noDiagnosticCount = noDiagnosticCount;
    return this;
  }

   /**
   * Number of tunnels with no diagnostic
   * @return noDiagnosticCount
  **/
  @Schema(description = "Number of tunnels with no diagnostic")
  public Long getNoDiagnosticCount() {
    return noDiagnosticCount;
  }

  public void setNoDiagnosticCount(Long noDiagnosticCount) {
    this.noDiagnosticCount = noDiagnosticCount;
  }

  public BFDDiagnosticCount pathDownCount(Long pathDownCount) {
    this.pathDownCount = pathDownCount;
    return this;
  }

   /**
   * Number of tunnels with path down diagnostic message
   * @return pathDownCount
  **/
  @Schema(description = "Number of tunnels with path down diagnostic message")
  public Long getPathDownCount() {
    return pathDownCount;
  }

  public void setPathDownCount(Long pathDownCount) {
    this.pathDownCount = pathDownCount;
  }

  public BFDDiagnosticCount reverseConcatenatedPathDownCount(Long reverseConcatenatedPathDownCount) {
    this.reverseConcatenatedPathDownCount = reverseConcatenatedPathDownCount;
    return this;
  }

   /**
   * Number of tunnels with reverse concatenated path down diagnostic message
   * @return reverseConcatenatedPathDownCount
  **/
  @Schema(description = "Number of tunnels with reverse concatenated path down diagnostic message")
  public Long getReverseConcatenatedPathDownCount() {
    return reverseConcatenatedPathDownCount;
  }

  public void setReverseConcatenatedPathDownCount(Long reverseConcatenatedPathDownCount) {
    this.reverseConcatenatedPathDownCount = reverseConcatenatedPathDownCount;
  }

  public BFDDiagnosticCount neighborSignaledSessionDownCount(Long neighborSignaledSessionDownCount) {
    this.neighborSignaledSessionDownCount = neighborSignaledSessionDownCount;
    return this;
  }

   /**
   * Number of tunnels neighbor signaled session down
   * @return neighborSignaledSessionDownCount
  **/
  @Schema(description = "Number of tunnels neighbor signaled session down")
  public Long getNeighborSignaledSessionDownCount() {
    return neighborSignaledSessionDownCount;
  }

  public void setNeighborSignaledSessionDownCount(Long neighborSignaledSessionDownCount) {
    this.neighborSignaledSessionDownCount = neighborSignaledSessionDownCount;
  }

  public BFDDiagnosticCount controlDetectionTimeExpiredCount(Long controlDetectionTimeExpiredCount) {
    this.controlDetectionTimeExpiredCount = controlDetectionTimeExpiredCount;
    return this;
  }

   /**
   * Number of tunnels with control detection time expired diagnostic message
   * @return controlDetectionTimeExpiredCount
  **/
  @Schema(description = "Number of tunnels with control detection time expired diagnostic message")
  public Long getControlDetectionTimeExpiredCount() {
    return controlDetectionTimeExpiredCount;
  }

  public void setControlDetectionTimeExpiredCount(Long controlDetectionTimeExpiredCount) {
    this.controlDetectionTimeExpiredCount = controlDetectionTimeExpiredCount;
  }

  public BFDDiagnosticCount echoFunctionFailedCount(Long echoFunctionFailedCount) {
    this.echoFunctionFailedCount = echoFunctionFailedCount;
    return this;
  }

   /**
   * Number of tunnels with echo function failed diagnostic message
   * @return echoFunctionFailedCount
  **/
  @Schema(description = "Number of tunnels with echo function failed diagnostic message")
  public Long getEchoFunctionFailedCount() {
    return echoFunctionFailedCount;
  }

  public void setEchoFunctionFailedCount(Long echoFunctionFailedCount) {
    this.echoFunctionFailedCount = echoFunctionFailedCount;
  }

  public BFDDiagnosticCount forwardingPlaneResetCount(Long forwardingPlaneResetCount) {
    this.forwardingPlaneResetCount = forwardingPlaneResetCount;
    return this;
  }

   /**
   * Number of tunnels with forwarding plane reset diagnostic message
   * @return forwardingPlaneResetCount
  **/
  @Schema(description = "Number of tunnels with forwarding plane reset diagnostic message")
  public Long getForwardingPlaneResetCount() {
    return forwardingPlaneResetCount;
  }

  public void setForwardingPlaneResetCount(Long forwardingPlaneResetCount) {
    this.forwardingPlaneResetCount = forwardingPlaneResetCount;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BFDDiagnosticCount bfDDiagnosticCount = (BFDDiagnosticCount) o;
    return Objects.equals(this.concatenatedPathDownCount, bfDDiagnosticCount.concatenatedPathDownCount) &&
        Objects.equals(this.administrativelyDownCount, bfDDiagnosticCount.administrativelyDownCount) &&
        Objects.equals(this.noDiagnosticCount, bfDDiagnosticCount.noDiagnosticCount) &&
        Objects.equals(this.pathDownCount, bfDDiagnosticCount.pathDownCount) &&
        Objects.equals(this.reverseConcatenatedPathDownCount, bfDDiagnosticCount.reverseConcatenatedPathDownCount) &&
        Objects.equals(this.neighborSignaledSessionDownCount, bfDDiagnosticCount.neighborSignaledSessionDownCount) &&
        Objects.equals(this.controlDetectionTimeExpiredCount, bfDDiagnosticCount.controlDetectionTimeExpiredCount) &&
        Objects.equals(this.echoFunctionFailedCount, bfDDiagnosticCount.echoFunctionFailedCount) &&
        Objects.equals(this.forwardingPlaneResetCount, bfDDiagnosticCount.forwardingPlaneResetCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(concatenatedPathDownCount, administrativelyDownCount, noDiagnosticCount, pathDownCount, reverseConcatenatedPathDownCount, neighborSignaledSessionDownCount, controlDetectionTimeExpiredCount, echoFunctionFailedCount, forwardingPlaneResetCount);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BFDDiagnosticCount {\n");
    
    sb.append("    concatenatedPathDownCount: ").append(toIndentedString(concatenatedPathDownCount)).append("\n");
    sb.append("    administrativelyDownCount: ").append(toIndentedString(administrativelyDownCount)).append("\n");
    sb.append("    noDiagnosticCount: ").append(toIndentedString(noDiagnosticCount)).append("\n");
    sb.append("    pathDownCount: ").append(toIndentedString(pathDownCount)).append("\n");
    sb.append("    reverseConcatenatedPathDownCount: ").append(toIndentedString(reverseConcatenatedPathDownCount)).append("\n");
    sb.append("    neighborSignaledSessionDownCount: ").append(toIndentedString(neighborSignaledSessionDownCount)).append("\n");
    sb.append("    controlDetectionTimeExpiredCount: ").append(toIndentedString(controlDetectionTimeExpiredCount)).append("\n");
    sb.append("    echoFunctionFailedCount: ").append(toIndentedString(echoFunctionFailedCount)).append("\n");
    sb.append("    forwardingPlaneResetCount: ").append(toIndentedString(forwardingPlaneResetCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
