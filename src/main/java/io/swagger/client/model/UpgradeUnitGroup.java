/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.KeyValuePair;
import io.swagger.client.model.ManagedResource;
import io.swagger.client.model.Tag;
import io.swagger.client.model.UpgradeUnit;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * UpgradeUnitGroup
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class UpgradeUnitGroup extends ManagedResource {
  @SerializedName("enabled")
  private Boolean enabled = true;

  @SerializedName("upgrade_unit_count")
  private Integer upgradeUnitCount = null;

  @SerializedName("type")
  private String type = null;

  @SerializedName("upgrade_units")
  private List<UpgradeUnit> upgradeUnits = null;

  @SerializedName("extended_configuration")
  private List<KeyValuePair> extendedConfiguration = null;

  @SerializedName("parallel")
  private Boolean parallel = true;

  public UpgradeUnitGroup enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

   /**
   * Flag to indicate whether upgrade of this group is enabled or not
   * @return enabled
  **/
  @Schema(description = "Flag to indicate whether upgrade of this group is enabled or not")
  public Boolean isEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }

   /**
   * Number of upgrade units in the group
   * @return upgradeUnitCount
  **/
  @Schema(description = "Number of upgrade units in the group")
  public Integer getUpgradeUnitCount() {
    return upgradeUnitCount;
  }

  public UpgradeUnitGroup type(String type) {
    this.type = type;
    return this;
  }

   /**
   * Component type
   * @return type
  **/
  @Schema(required = true, description = "Component type")
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }

  public UpgradeUnitGroup upgradeUnits(List<UpgradeUnit> upgradeUnits) {
    this.upgradeUnits = upgradeUnits;
    return this;
  }

  public UpgradeUnitGroup addUpgradeUnitsItem(UpgradeUnit upgradeUnitsItem) {
    if (this.upgradeUnits == null) {
      this.upgradeUnits = new ArrayList<UpgradeUnit>();
    }
    this.upgradeUnits.add(upgradeUnitsItem);
    return this;
  }

   /**
   * List of upgrade units in the group
   * @return upgradeUnits
  **/
  @Schema(description = "List of upgrade units in the group")
  public List<UpgradeUnit> getUpgradeUnits() {
    return upgradeUnits;
  }

  public void setUpgradeUnits(List<UpgradeUnit> upgradeUnits) {
    this.upgradeUnits = upgradeUnits;
  }

  public UpgradeUnitGroup extendedConfiguration(List<KeyValuePair> extendedConfiguration) {
    this.extendedConfiguration = extendedConfiguration;
    return this;
  }

  public UpgradeUnitGroup addExtendedConfigurationItem(KeyValuePair extendedConfigurationItem) {
    if (this.extendedConfiguration == null) {
      this.extendedConfiguration = new ArrayList<KeyValuePair>();
    }
    this.extendedConfiguration.add(extendedConfigurationItem);
    return this;
  }

   /**
   * Extended configuration for the group
   * @return extendedConfiguration
  **/
  @Schema(description = "Extended configuration for the group")
  public List<KeyValuePair> getExtendedConfiguration() {
    return extendedConfiguration;
  }

  public void setExtendedConfiguration(List<KeyValuePair> extendedConfiguration) {
    this.extendedConfiguration = extendedConfiguration;
  }

  public UpgradeUnitGroup parallel(Boolean parallel) {
    this.parallel = parallel;
    return this;
  }

   /**
   * Upgrade method to specify whether the upgrade is to be performed in parallel or serially
   * @return parallel
  **/
  @Schema(description = "Upgrade method to specify whether the upgrade is to be performed in parallel or serially")
  public Boolean isParallel() {
    return parallel;
  }

  public void setParallel(Boolean parallel) {
    this.parallel = parallel;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpgradeUnitGroup upgradeUnitGroup = (UpgradeUnitGroup) o;
    return Objects.equals(this.enabled, upgradeUnitGroup.enabled) &&
        Objects.equals(this.upgradeUnitCount, upgradeUnitGroup.upgradeUnitCount) &&
        Objects.equals(this.type, upgradeUnitGroup.type) &&
        Objects.equals(this.upgradeUnits, upgradeUnitGroup.upgradeUnits) &&
        Objects.equals(this.extendedConfiguration, upgradeUnitGroup.extendedConfiguration) &&
        Objects.equals(this.parallel, upgradeUnitGroup.parallel) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(enabled, upgradeUnitCount, type, upgradeUnits, extendedConfiguration, parallel, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpgradeUnitGroup {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    upgradeUnitCount: ").append(toIndentedString(upgradeUnitCount)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    upgradeUnits: ").append(toIndentedString(upgradeUnits)).append("\n");
    sb.append("    extendedConfiguration: ").append(toIndentedString(extendedConfiguration)).append("\n");
    sb.append("    parallel: ").append(toIndentedString(parallel)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
