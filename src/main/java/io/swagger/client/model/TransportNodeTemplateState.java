/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * Note- transport node templates APIs are deprecated and user is recommended to use transport node profiles APIs instead.
 */
@Schema(description = "Note- transport node templates APIs are deprecated and user is recommended to use transport node profiles APIs instead.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class TransportNodeTemplateState {
  /**
   * Transport node template state on individual hosts of ComputeCollection which enabled automated transport code creation. &#x27;FAILED_TO_CREATE&#x27; means transport node isn&#x27;t created. &#x27;IN_PROGRESS&#x27; means transport node is in progress of creation. &#x27;FAILED_TO_REALIZE&#x27; means transport node has been created, but failed on host realization, it will repush to host by NSX later. &#x27;SUCCESS&#x27; means transport node creation is succeeded. 
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    FAILED_TO_CREATE("FAILED_TO_CREATE"),
    IN_PROGRESS("IN_PROGRESS"),
    FAILED_TO_REALIZE("FAILED_TO_REALIZE"),
    SUCCESS("SUCCESS");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static StateEnum fromValue(String text) {
      for (StateEnum b : StateEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StateEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("state")
  private StateEnum state = null;

  @SerializedName("node_id")
  private String nodeId = null;

  @SerializedName("transport_node_id")
  private String transportNodeId = null;

   /**
   * Transport node template state on individual hosts of ComputeCollection which enabled automated transport code creation. &#x27;FAILED_TO_CREATE&#x27; means transport node isn&#x27;t created. &#x27;IN_PROGRESS&#x27; means transport node is in progress of creation. &#x27;FAILED_TO_REALIZE&#x27; means transport node has been created, but failed on host realization, it will repush to host by NSX later. &#x27;SUCCESS&#x27; means transport node creation is succeeded. 
   * @return state
  **/
  @Schema(description = "Transport node template state on individual hosts of ComputeCollection which enabled automated transport code creation. 'FAILED_TO_CREATE' means transport node isn't created. 'IN_PROGRESS' means transport node is in progress of creation. 'FAILED_TO_REALIZE' means transport node has been created, but failed on host realization, it will repush to host by NSX later. 'SUCCESS' means transport node creation is succeeded. ")
  public StateEnum getState() {
    return state;
  }

  public TransportNodeTemplateState nodeId(String nodeId) {
    this.nodeId = nodeId;
    return this;
  }

   /**
   * node id
   * @return nodeId
  **/
  @Schema(required = true, description = "node id")
  public String getNodeId() {
    return nodeId;
  }

  public void setNodeId(String nodeId) {
    this.nodeId = nodeId;
  }

  public TransportNodeTemplateState transportNodeId(String transportNodeId) {
    this.transportNodeId = transportNodeId;
    return this;
  }

   /**
   * transport node id
   * @return transportNodeId
  **/
  @Schema(description = "transport node id")
  public String getTransportNodeId() {
    return transportNodeId;
  }

  public void setTransportNodeId(String transportNodeId) {
    this.transportNodeId = transportNodeId;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransportNodeTemplateState transportNodeTemplateState = (TransportNodeTemplateState) o;
    return Objects.equals(this.state, transportNodeTemplateState.state) &&
        Objects.equals(this.nodeId, transportNodeTemplateState.nodeId) &&
        Objects.equals(this.transportNodeId, transportNodeTemplateState.transportNodeId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(state, nodeId, transportNodeId);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransportNodeTemplateState {\n");
    
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    nodeId: ").append(toIndentedString(nodeId)).append("\n");
    sb.append("    transportNodeId: ").append(toIndentedString(transportNodeId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
