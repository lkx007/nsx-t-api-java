/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.AttachmentContext;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * Logical port attachment
 */
@Schema(description = "Logical port attachment")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class LogicalPortAttachment {
  /**
   * Indicates the type of logical port attachment. By default it is Virtual Machine interface (VIF)
   */
  @JsonAdapter(AttachmentTypeEnum.Adapter.class)
  public enum AttachmentTypeEnum {
    VIF("VIF"),
    LOGICALROUTER("LOGICALROUTER"),
    BRIDGEENDPOINT("BRIDGEENDPOINT"),
    DHCP_SERVICE("DHCP_SERVICE"),
    METADATA_PROXY("METADATA_PROXY"),
    L2VPN_SESSION("L2VPN_SESSION");

    private String value;

    AttachmentTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static AttachmentTypeEnum fromValue(String text) {
      for (AttachmentTypeEnum b : AttachmentTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<AttachmentTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AttachmentTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AttachmentTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return AttachmentTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("attachment_type")
  private AttachmentTypeEnum attachmentType = AttachmentTypeEnum.VIF;

  @SerializedName("context")
  private AttachmentContext context = null;

  @SerializedName("id")
  private String id = null;

  public LogicalPortAttachment attachmentType(AttachmentTypeEnum attachmentType) {
    this.attachmentType = attachmentType;
    return this;
  }

   /**
   * Indicates the type of logical port attachment. By default it is Virtual Machine interface (VIF)
   * @return attachmentType
  **/
  @Schema(description = "Indicates the type of logical port attachment. By default it is Virtual Machine interface (VIF)")
  public AttachmentTypeEnum getAttachmentType() {
    return attachmentType;
  }

  public void setAttachmentType(AttachmentTypeEnum attachmentType) {
    this.attachmentType = attachmentType;
  }

  public LogicalPortAttachment context(AttachmentContext context) {
    this.context = context;
    return this;
  }

   /**
   * Get context
   * @return context
  **/
  @Schema(description = "")
  public AttachmentContext getContext() {
    return context;
  }

  public void setContext(AttachmentContext context) {
    this.context = context;
  }

  public LogicalPortAttachment id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Identifier of the interface attached to the logical port
   * @return id
  **/
  @Schema(required = true, description = "Identifier of the interface attached to the logical port")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LogicalPortAttachment logicalPortAttachment = (LogicalPortAttachment) o;
    return Objects.equals(this.attachmentType, logicalPortAttachment.attachmentType) &&
        Objects.equals(this.context, logicalPortAttachment.context) &&
        Objects.equals(this.id, logicalPortAttachment.id);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attachmentType, context, id);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LogicalPortAttachment {\n");
    
    sb.append("    attachmentType: ").append(toIndentedString(attachmentType)).append("\n");
    sb.append("    context: ").append(toIndentedString(context)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
