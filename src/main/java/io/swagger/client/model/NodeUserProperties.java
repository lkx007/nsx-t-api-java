/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.Resource;
import io.swagger.client.model.ResourceLink;
import io.swagger.client.model.SelfResourceLink;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.List;
/**
 * Node user properties
 */
@Schema(description = "Node user properties")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class NodeUserProperties extends Resource {
  @SerializedName("username")
  private String username = null;

  /**
   * Status of the user. This value can be ACTIVE indicating authentication attempts will be successful if the correct credentials are specified. The value can also be PASSWORD_EXPIRED indicating authentication attempts will fail because the user&#x27;s password has expired and must be changed. Or, this value can be NOT_ACTIVATED indicating the user&#x27;s password has not yet been set and must be set before the user can authenticate.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    ACTIVE("ACTIVE"),
    PASSWORD_EXPIRED("PASSWORD_EXPIRED"),
    NOT_ACTIVATED("NOT_ACTIVATED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static StatusEnum fromValue(String text) {
      for (StatusEnum b : StatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StatusEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("status")
  private StatusEnum status = null;

  @SerializedName("last_password_change")
  private Long lastPasswordChange = null;

  @SerializedName("full_name")
  private String fullName = null;

  @SerializedName("password_change_frequency")
  private Long passwordChangeFrequency = null;

  @SerializedName("password")
  private String password = null;

  @SerializedName("userid")
  private Long userid = null;

  @SerializedName("old_password")
  private String oldPassword = null;

  public NodeUserProperties username(String username) {
    this.username = username;
    return this;
  }

   /**
   * User login name (must be \&quot;root\&quot; if userid is 0)
   * @return username
  **/
  @Schema(description = "User login name (must be \"root\" if userid is 0)")
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }

   /**
   * Status of the user. This value can be ACTIVE indicating authentication attempts will be successful if the correct credentials are specified. The value can also be PASSWORD_EXPIRED indicating authentication attempts will fail because the user&#x27;s password has expired and must be changed. Or, this value can be NOT_ACTIVATED indicating the user&#x27;s password has not yet been set and must be set before the user can authenticate.
   * @return status
  **/
  @Schema(description = "Status of the user. This value can be ACTIVE indicating authentication attempts will be successful if the correct credentials are specified. The value can also be PASSWORD_EXPIRED indicating authentication attempts will fail because the user's password has expired and must be changed. Or, this value can be NOT_ACTIVATED indicating the user's password has not yet been set and must be set before the user can authenticate.")
  public StatusEnum getStatus() {
    return status;
  }

   /**
   * Number of days since password was last changed
   * minimum: 0
   * maximum: 2147483647
   * @return lastPasswordChange
  **/
  @Schema(description = "Number of days since password was last changed")
  public Long getLastPasswordChange() {
    return lastPasswordChange;
  }

  public NodeUserProperties fullName(String fullName) {
    this.fullName = fullName;
    return this;
  }

   /**
   * Full name for the user
   * @return fullName
  **/
  @Schema(description = "Full name for the user")
  public String getFullName() {
    return fullName;
  }

  public void setFullName(String fullName) {
    this.fullName = fullName;
  }

  public NodeUserProperties passwordChangeFrequency(Long passwordChangeFrequency) {
    this.passwordChangeFrequency = passwordChangeFrequency;
    return this;
  }

   /**
   * Number of days password is valid before it must be changed. This can be set to 0 to indicate no password change is required or a positive integer up to 9999. By default local user passwords must be changed every 90 days.
   * minimum: 0
   * maximum: 9999
   * @return passwordChangeFrequency
  **/
  @Schema(description = "Number of days password is valid before it must be changed. This can be set to 0 to indicate no password change is required or a positive integer up to 9999. By default local user passwords must be changed every 90 days.")
  public Long getPasswordChangeFrequency() {
    return passwordChangeFrequency;
  }

  public void setPasswordChangeFrequency(Long passwordChangeFrequency) {
    this.passwordChangeFrequency = passwordChangeFrequency;
  }

  public NodeUserProperties password(String password) {
    this.password = password;
    return this;
  }

   /**
   * Password for the user (optionally specified on PUT, unspecified on GET)
   * @return password
  **/
  @Schema(description = "Password for the user (optionally specified on PUT, unspecified on GET)")
  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }

   /**
   * Numeric id for the user
   * minimum: 0
   * maximum: 2147483647
   * @return userid
  **/
  @Schema(description = "Numeric id for the user")
  public Long getUserid() {
    return userid;
  }

  public NodeUserProperties oldPassword(String oldPassword) {
    this.oldPassword = oldPassword;
    return this;
  }

   /**
   * Old password for the user (required on PUT if password specified)
   * @return oldPassword
  **/
  @Schema(description = "Old password for the user (required on PUT if password specified)")
  public String getOldPassword() {
    return oldPassword;
  }

  public void setOldPassword(String oldPassword) {
    this.oldPassword = oldPassword;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NodeUserProperties nodeUserProperties = (NodeUserProperties) o;
    return Objects.equals(this.username, nodeUserProperties.username) &&
        Objects.equals(this.status, nodeUserProperties.status) &&
        Objects.equals(this.lastPasswordChange, nodeUserProperties.lastPasswordChange) &&
        Objects.equals(this.fullName, nodeUserProperties.fullName) &&
        Objects.equals(this.passwordChangeFrequency, nodeUserProperties.passwordChangeFrequency) &&
        Objects.equals(this.password, nodeUserProperties.password) &&
        Objects.equals(this.userid, nodeUserProperties.userid) &&
        Objects.equals(this.oldPassword, nodeUserProperties.oldPassword) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(username, status, lastPasswordChange, fullName, passwordChangeFrequency, password, userid, oldPassword, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NodeUserProperties {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    lastPasswordChange: ").append(toIndentedString(lastPasswordChange)).append("\n");
    sb.append("    fullName: ").append(toIndentedString(fullName)).append("\n");
    sb.append("    passwordChangeFrequency: ").append(toIndentedString(passwordChangeFrequency)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    userid: ").append(toIndentedString(userid)).append("\n");
    sb.append("    oldPassword: ").append(toIndentedString(oldPassword)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
