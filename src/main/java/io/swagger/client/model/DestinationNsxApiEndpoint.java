/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * Details about the destination NSX manager for the migration
 */
@Schema(description = "Details about the destination NSX manager for the migration")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class DestinationNsxApiEndpoint {
  @SerializedName("destination_nsx_ip")
  private String destinationNsxIp = null;

  @SerializedName("destination_nsx_password")
  private String destinationNsxPassword = null;

  @SerializedName("destination_nsx_port")
  private Integer destinationNsxPort = 443;

  @SerializedName("destination_nsx_username")
  private String destinationNsxUsername = null;

  public DestinationNsxApiEndpoint destinationNsxIp(String destinationNsxIp) {
    this.destinationNsxIp = destinationNsxIp;
    return this;
  }

   /**
   * IP address or host name of the destination NSX manager to which the config will be migrated.
   * @return destinationNsxIp
  **/
  @Schema(required = true, description = "IP address or host name of the destination NSX manager to which the config will be migrated.")
  public String getDestinationNsxIp() {
    return destinationNsxIp;
  }

  public void setDestinationNsxIp(String destinationNsxIp) {
    this.destinationNsxIp = destinationNsxIp;
  }

  public DestinationNsxApiEndpoint destinationNsxPassword(String destinationNsxPassword) {
    this.destinationNsxPassword = destinationNsxPassword;
    return this;
  }

   /**
   * Valid password for connecting to the destination NSX manager.
   * @return destinationNsxPassword
  **/
  @Schema(description = "Valid password for connecting to the destination NSX manager.")
  public String getDestinationNsxPassword() {
    return destinationNsxPassword;
  }

  public void setDestinationNsxPassword(String destinationNsxPassword) {
    this.destinationNsxPassword = destinationNsxPassword;
  }

  public DestinationNsxApiEndpoint destinationNsxPort(Integer destinationNsxPort) {
    this.destinationNsxPort = destinationNsxPort;
    return this;
  }

   /**
   * Destination NSX manager port that will be used to apply details.
   * @return destinationNsxPort
  **/
  @Schema(description = "Destination NSX manager port that will be used to apply details.")
  public Integer getDestinationNsxPort() {
    return destinationNsxPort;
  }

  public void setDestinationNsxPort(Integer destinationNsxPort) {
    this.destinationNsxPort = destinationNsxPort;
  }

  public DestinationNsxApiEndpoint destinationNsxUsername(String destinationNsxUsername) {
    this.destinationNsxUsername = destinationNsxUsername;
    return this;
  }

   /**
   * Valid username for connecting to the destination NSX manager.
   * @return destinationNsxUsername
  **/
  @Schema(description = "Valid username for connecting to the destination NSX manager.")
  public String getDestinationNsxUsername() {
    return destinationNsxUsername;
  }

  public void setDestinationNsxUsername(String destinationNsxUsername) {
    this.destinationNsxUsername = destinationNsxUsername;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinationNsxApiEndpoint destinationNsxApiEndpoint = (DestinationNsxApiEndpoint) o;
    return Objects.equals(this.destinationNsxIp, destinationNsxApiEndpoint.destinationNsxIp) &&
        Objects.equals(this.destinationNsxPassword, destinationNsxApiEndpoint.destinationNsxPassword) &&
        Objects.equals(this.destinationNsxPort, destinationNsxApiEndpoint.destinationNsxPort) &&
        Objects.equals(this.destinationNsxUsername, destinationNsxApiEndpoint.destinationNsxUsername);
  }

  @Override
  public int hashCode() {
    return Objects.hash(destinationNsxIp, destinationNsxPassword, destinationNsxPort, destinationNsxUsername);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinationNsxApiEndpoint {\n");
    
    sb.append("    destinationNsxIp: ").append(toIndentedString(destinationNsxIp)).append("\n");
    sb.append("    destinationNsxPassword: ").append(toIndentedString(destinationNsxPassword)).append("\n");
    sb.append("    destinationNsxPort: ").append(toIndentedString(destinationNsxPort)).append("\n");
    sb.append("    destinationNsxUsername: ").append(toIndentedString(destinationNsxUsername)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
