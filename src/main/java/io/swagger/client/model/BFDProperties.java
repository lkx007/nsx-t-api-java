/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * BFD information
 */
@Schema(description = "BFD information")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class BFDProperties {
  @SerializedName("active")
  private Boolean active = null;

  /**
   * State of the BFD session
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    UNKNOWN_STATE("UNKNOWN_STATE"),
    ADMIN_DOWN("ADMIN_DOWN"),
    DOWN("DOWN"),
    INIT("INIT"),
    UP("UP");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static StateEnum fromValue(String text) {
      for (StateEnum b : StateEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StateEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("state")
  private StateEnum state = null;

  /**
   * State of the remote interface&#x27;s BFD session
   */
  @JsonAdapter(RemoteStateEnum.Adapter.class)
  public enum RemoteStateEnum {
    UNKNOWN_STATE("UNKNOWN_STATE"),
    ADMIN_DOWN("ADMIN_DOWN"),
    DOWN("DOWN"),
    INIT("INIT"),
    UP("UP");

    private String value;

    RemoteStateEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static RemoteStateEnum fromValue(String text) {
      for (RemoteStateEnum b : RemoteStateEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<RemoteStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RemoteStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RemoteStateEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return RemoteStateEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("remote_state")
  private RemoteStateEnum remoteState = null;

  @SerializedName("remote_diagnostic")
  private String remoteDiagnostic = null;

  @SerializedName("forwarding")
  private Boolean forwarding = null;

  @SerializedName("diagnostic")
  private String diagnostic = null;

   /**
   * True if tunnel is active in a gateway HA setup
   * @return active
  **/
  @Schema(description = "True if tunnel is active in a gateway HA setup")
  public Boolean isActive() {
    return active;
  }

   /**
   * State of the BFD session
   * @return state
  **/
  @Schema(description = "State of the BFD session")
  public StateEnum getState() {
    return state;
  }

   /**
   * State of the remote interface&#x27;s BFD session
   * @return remoteState
  **/
  @Schema(description = "State of the remote interface's BFD session")
  public RemoteStateEnum getRemoteState() {
    return remoteState;
  }

   /**
   * A short message indicating what the remote interface&#x27;s BFD session thinks is wrong in case of a problem
   * @return remoteDiagnostic
  **/
  @Schema(description = "A short message indicating what the remote interface's BFD session thinks is wrong in case of a problem")
  public String getRemoteDiagnostic() {
    return remoteDiagnostic;
  }

   /**
   * True if the BFD session believes this interface may be used to forward traffic
   * @return forwarding
  **/
  @Schema(description = "True if the BFD session believes this interface may be used to forward traffic")
  public Boolean isForwarding() {
    return forwarding;
  }

   /**
   * A short message indicating what the BFD session thinks is wrong in case of a problem
   * @return diagnostic
  **/
  @Schema(description = "A short message indicating what the BFD session thinks is wrong in case of a problem")
  public String getDiagnostic() {
    return diagnostic;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BFDProperties bfDProperties = (BFDProperties) o;
    return Objects.equals(this.active, bfDProperties.active) &&
        Objects.equals(this.state, bfDProperties.state) &&
        Objects.equals(this.remoteState, bfDProperties.remoteState) &&
        Objects.equals(this.remoteDiagnostic, bfDProperties.remoteDiagnostic) &&
        Objects.equals(this.forwarding, bfDProperties.forwarding) &&
        Objects.equals(this.diagnostic, bfDProperties.diagnostic);
  }

  @Override
  public int hashCode() {
    return Objects.hash(active, state, remoteState, remoteDiagnostic, forwarding, diagnostic);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BFDProperties {\n");
    
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    remoteState: ").append(toIndentedString(remoteState)).append("\n");
    sb.append("    remoteDiagnostic: ").append(toIndentedString(remoteDiagnostic)).append("\n");
    sb.append("    forwarding: ").append(toIndentedString(forwarding)).append("\n");
    sb.append("    diagnostic: ").append(toIndentedString(diagnostic)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
