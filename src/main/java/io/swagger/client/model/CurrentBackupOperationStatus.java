/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * Current backup operation status
 */
@Schema(description = "Current backup operation status")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class CurrentBackupOperationStatus {
  /**
   * Current step of operation
   */
  @JsonAdapter(CurrentStepEnum.Adapter.class)
  public enum CurrentStepEnum {
    CLUSTER_BACKUP("BACKUP_CREATING_CLUSTER_BACKUP"),
    NODE_BACKUP("BACKUP_CREATING_NODE_BACKUP");

    private String value;

    CurrentStepEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static CurrentStepEnum fromValue(String text) {
      for (CurrentStepEnum b : CurrentStepEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<CurrentStepEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CurrentStepEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CurrentStepEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return CurrentStepEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("current_step")
  private CurrentStepEnum currentStep = null;

  @SerializedName("backup_id")
  private String backupId = null;

  @SerializedName("current_step_message")
  private String currentStepMessage = null;

  @SerializedName("end_time")
  private Long endTime = null;

  /**
   * Type of operation that is in progress. Returns none if no operation is in progress, in which case none of the other fields will be set. 
   */
  @JsonAdapter(OperationTypeEnum.Adapter.class)
  public enum OperationTypeEnum {
    NONE("NONE"),
    BACKUP("BACKUP");

    private String value;

    OperationTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static OperationTypeEnum fromValue(String text) {
      for (OperationTypeEnum b : OperationTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<OperationTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OperationTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OperationTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return OperationTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("operation_type")
  private OperationTypeEnum operationType = null;

  @SerializedName("start_time")
  private Long startTime = null;

  public CurrentBackupOperationStatus currentStep(CurrentStepEnum currentStep) {
    this.currentStep = currentStep;
    return this;
  }

   /**
   * Current step of operation
   * @return currentStep
  **/
  @Schema(description = "Current step of operation")
  public CurrentStepEnum getCurrentStep() {
    return currentStep;
  }

  public void setCurrentStep(CurrentStepEnum currentStep) {
    this.currentStep = currentStep;
  }

  public CurrentBackupOperationStatus backupId(String backupId) {
    this.backupId = backupId;
    return this;
  }

   /**
   * Unique identifier of current backup
   * @return backupId
  **/
  @Schema(description = "Unique identifier of current backup")
  public String getBackupId() {
    return backupId;
  }

  public void setBackupId(String backupId) {
    this.backupId = backupId;
  }

  public CurrentBackupOperationStatus currentStepMessage(String currentStepMessage) {
    this.currentStepMessage = currentStepMessage;
    return this;
  }

   /**
   * Additional human-readable status information about current step
   * @return currentStepMessage
  **/
  @Schema(description = "Additional human-readable status information about current step")
  public String getCurrentStepMessage() {
    return currentStepMessage;
  }

  public void setCurrentStepMessage(String currentStepMessage) {
    this.currentStepMessage = currentStepMessage;
  }

  public CurrentBackupOperationStatus endTime(Long endTime) {
    this.endTime = endTime;
    return this;
  }

   /**
   * Time when operation is expected to end
   * @return endTime
  **/
  @Schema(description = "Time when operation is expected to end")
  public Long getEndTime() {
    return endTime;
  }

  public void setEndTime(Long endTime) {
    this.endTime = endTime;
  }

  public CurrentBackupOperationStatus operationType(OperationTypeEnum operationType) {
    this.operationType = operationType;
    return this;
  }

   /**
   * Type of operation that is in progress. Returns none if no operation is in progress, in which case none of the other fields will be set. 
   * @return operationType
  **/
  @Schema(required = true, description = "Type of operation that is in progress. Returns none if no operation is in progress, in which case none of the other fields will be set. ")
  public OperationTypeEnum getOperationType() {
    return operationType;
  }

  public void setOperationType(OperationTypeEnum operationType) {
    this.operationType = operationType;
  }

  public CurrentBackupOperationStatus startTime(Long startTime) {
    this.startTime = startTime;
    return this;
  }

   /**
   * Time when operation was started
   * @return startTime
  **/
  @Schema(description = "Time when operation was started")
  public Long getStartTime() {
    return startTime;
  }

  public void setStartTime(Long startTime) {
    this.startTime = startTime;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CurrentBackupOperationStatus currentBackupOperationStatus = (CurrentBackupOperationStatus) o;
    return Objects.equals(this.currentStep, currentBackupOperationStatus.currentStep) &&
        Objects.equals(this.backupId, currentBackupOperationStatus.backupId) &&
        Objects.equals(this.currentStepMessage, currentBackupOperationStatus.currentStepMessage) &&
        Objects.equals(this.endTime, currentBackupOperationStatus.endTime) &&
        Objects.equals(this.operationType, currentBackupOperationStatus.operationType) &&
        Objects.equals(this.startTime, currentBackupOperationStatus.startTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(currentStep, backupId, currentStepMessage, endTime, operationType, startTime);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CurrentBackupOperationStatus {\n");
    
    sb.append("    currentStep: ").append(toIndentedString(currentStep)).append("\n");
    sb.append("    backupId: ").append(toIndentedString(backupId)).append("\n");
    sb.append("    currentStepMessage: ").append(toIndentedString(currentStepMessage)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    operationType: ").append(toIndentedString(operationType)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
