/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.Axes;
import io.swagger.client.model.Datasource;
import io.swagger.client.model.Footer;
import io.swagger.client.model.GraphDefinition;
import io.swagger.client.model.Icon;
import io.swagger.client.model.Legend;
import io.swagger.client.model.WidgetConfiguration;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * Represents configuration of a graph widget
 */
@Schema(description = "Represents configuration of a graph widget")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class GraphConfiguration extends WidgetConfiguration {
  @SerializedName("graphs")
  private List<GraphDefinition> graphs = new ArrayList<GraphDefinition>();

  @SerializedName("axes")
  private Axes axes = null;

  @SerializedName("navigation")
  private String navigation = null;

  /**
   * Describes the the type of graph. LINE_GRAPH shows a line graph chart BAR_GRAPH shows a simple bar graph chart STACKED_BAR_GRAPH shows a stacked bar graph chart
   */
  @JsonAdapter(SubTypeEnum.Adapter.class)
  public enum SubTypeEnum {
    LINE_GRAPH("LINE_GRAPH"),
    BAR_GRAPH("BAR_GRAPH"),
    STACKED_BAR_GRAPH("STACKED_BAR_GRAPH");

    private String value;

    SubTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static SubTypeEnum fromValue(String text) {
      for (SubTypeEnum b : SubTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<SubTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SubTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SubTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return SubTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("sub_type")
  private SubTypeEnum subType = SubTypeEnum.BAR_GRAPH;

  @SerializedName("display_x_value")
  private Boolean displayXValue = false;

  public GraphConfiguration graphs(List<GraphDefinition> graphs) {
    this.graphs = graphs;
    return this;
  }

  public GraphConfiguration addGraphsItem(GraphDefinition graphsItem) {
    this.graphs.add(graphsItem);
    return this;
  }

   /**
   * Graphs
   * @return graphs
  **/
  @Schema(required = true, description = "Graphs")
  public List<GraphDefinition> getGraphs() {
    return graphs;
  }

  public void setGraphs(List<GraphDefinition> graphs) {
    this.graphs = graphs;
  }

  public GraphConfiguration axes(Axes axes) {
    this.axes = axes;
    return this;
  }

   /**
   * Get axes
   * @return axes
  **/
  @Schema(description = "")
  public Axes getAxes() {
    return axes;
  }

  public void setAxes(Axes axes) {
    this.axes = axes;
  }

  public GraphConfiguration navigation(String navigation) {
    this.navigation = navigation;
    return this;
  }

   /**
   * Hyperlink of the specified UI page that provides details.
   * @return navigation
  **/
  @Schema(description = "Hyperlink of the specified UI page that provides details.")
  public String getNavigation() {
    return navigation;
  }

  public void setNavigation(String navigation) {
    this.navigation = navigation;
  }

  public GraphConfiguration subType(SubTypeEnum subType) {
    this.subType = subType;
    return this;
  }

   /**
   * Describes the the type of graph. LINE_GRAPH shows a line graph chart BAR_GRAPH shows a simple bar graph chart STACKED_BAR_GRAPH shows a stacked bar graph chart
   * @return subType
  **/
  @Schema(description = "Describes the the type of graph. LINE_GRAPH shows a line graph chart BAR_GRAPH shows a simple bar graph chart STACKED_BAR_GRAPH shows a stacked bar graph chart")
  public SubTypeEnum getSubType() {
    return subType;
  }

  public void setSubType(SubTypeEnum subType) {
    this.subType = subType;
  }

  public GraphConfiguration displayXValue(Boolean displayXValue) {
    this.displayXValue = displayXValue;
    return this;
  }

   /**
   * If true, value of a point is shown as label on X axis. If false, value of point is not shown as label on X axis. false can be useful in situations where there are too many points and showing the X value as label can clutter the X axis.
   * @return displayXValue
  **/
  @Schema(description = "If true, value of a point is shown as label on X axis. If false, value of point is not shown as label on X axis. false can be useful in situations where there are too many points and showing the X value as label can clutter the X axis.")
  public Boolean isDisplayXValue() {
    return displayXValue;
  }

  public void setDisplayXValue(Boolean displayXValue) {
    this.displayXValue = displayXValue;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GraphConfiguration graphConfiguration = (GraphConfiguration) o;
    return Objects.equals(this.graphs, graphConfiguration.graphs) &&
        Objects.equals(this.axes, graphConfiguration.axes) &&
        Objects.equals(this.navigation, graphConfiguration.navigation) &&
        Objects.equals(this.subType, graphConfiguration.subType) &&
        Objects.equals(this.displayXValue, graphConfiguration.displayXValue) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(graphs, axes, navigation, subType, displayXValue, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GraphConfiguration {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    graphs: ").append(toIndentedString(graphs)).append("\n");
    sb.append("    axes: ").append(toIndentedString(axes)).append("\n");
    sb.append("    navigation: ").append(toIndentedString(navigation)).append("\n");
    sb.append("    subType: ").append(toIndentedString(subType)).append("\n");
    sb.append("    displayXValue: ").append(toIndentedString(displayXValue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
