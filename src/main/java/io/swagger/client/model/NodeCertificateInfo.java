/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * NodeCertificateInfo
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class NodeCertificateInfo {
  @SerializedName("certificate_sha256_thumbprint")
  private String certificateSha256Thumbprint = null;

  @SerializedName("certificate")
  private String certificate = null;

  /**
   * Entity type of this certificate
   */
  @JsonAdapter(EntityTypeEnum.Adapter.class)
  public enum EntityTypeEnum {
    HTTP("HTTP"),
    DATASTORE("DATASTORE"),
    MANAGER("MANAGER"),
    POLICY("POLICY"),
    CONTROLLER("CONTROLLER");

    private String value;

    EntityTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static EntityTypeEnum fromValue(String text) {
      for (EntityTypeEnum b : EntityTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<EntityTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EntityTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EntityTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return EntityTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("entity_type")
  private EntityTypeEnum entityType = null;

  public NodeCertificateInfo certificateSha256Thumbprint(String certificateSha256Thumbprint) {
    this.certificateSha256Thumbprint = certificateSha256Thumbprint;
    return this;
  }

   /**
   * SHA256 of certificate
   * @return certificateSha256Thumbprint
  **/
  @Schema(description = "SHA256 of certificate")
  public String getCertificateSha256Thumbprint() {
    return certificateSha256Thumbprint;
  }

  public void setCertificateSha256Thumbprint(String certificateSha256Thumbprint) {
    this.certificateSha256Thumbprint = certificateSha256Thumbprint;
  }

  public NodeCertificateInfo certificate(String certificate) {
    this.certificate = certificate;
    return this;
  }

   /**
   * Certificate content
   * @return certificate
  **/
  @Schema(description = "Certificate content")
  public String getCertificate() {
    return certificate;
  }

  public void setCertificate(String certificate) {
    this.certificate = certificate;
  }

  public NodeCertificateInfo entityType(EntityTypeEnum entityType) {
    this.entityType = entityType;
    return this;
  }

   /**
   * Entity type of this certificate
   * @return entityType
  **/
  @Schema(description = "Entity type of this certificate")
  public EntityTypeEnum getEntityType() {
    return entityType;
  }

  public void setEntityType(EntityTypeEnum entityType) {
    this.entityType = entityType;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NodeCertificateInfo nodeCertificateInfo = (NodeCertificateInfo) o;
    return Objects.equals(this.certificateSha256Thumbprint, nodeCertificateInfo.certificateSha256Thumbprint) &&
        Objects.equals(this.certificate, nodeCertificateInfo.certificate) &&
        Objects.equals(this.entityType, nodeCertificateInfo.entityType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(certificateSha256Thumbprint, certificate, entityType);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NodeCertificateInfo {\n");
    
    sb.append("    certificateSha256Thumbprint: ").append(toIndentedString(certificateSha256Thumbprint)).append("\n");
    sb.append("    certificate: ").append(toIndentedString(certificate)).append("\n");
    sb.append("    entityType: ").append(toIndentedString(entityType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
