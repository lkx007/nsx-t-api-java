/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.MsgClientInfo;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * AddManagementNodeSpec
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class AddManagementNodeSpec {
  @SerializedName("mpa_msg_client_info")
  private MsgClientInfo mpaMsgClientInfo = null;

  /**
   * must be set to AddManagementNodeSpec
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    ADDMANAGEMENTNODESPEC("AddManagementNodeSpec");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static TypeEnum fromValue(String text) {
      for (TypeEnum b : TypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TypeEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("type")
  private TypeEnum type = null;

  @SerializedName("password")
  private String password = null;

  @SerializedName("user_name")
  private String userName = null;

  @SerializedName("remote_address")
  private String remoteAddress = null;

  @SerializedName("cert_thumbprint")
  private String certThumbprint = null;

  public AddManagementNodeSpec mpaMsgClientInfo(MsgClientInfo mpaMsgClientInfo) {
    this.mpaMsgClientInfo = mpaMsgClientInfo;
    return this;
  }

   /**
   * Get mpaMsgClientInfo
   * @return mpaMsgClientInfo
  **/
  @Schema(description = "")
  public MsgClientInfo getMpaMsgClientInfo() {
    return mpaMsgClientInfo;
  }

  public void setMpaMsgClientInfo(MsgClientInfo mpaMsgClientInfo) {
    this.mpaMsgClientInfo = mpaMsgClientInfo;
  }

  public AddManagementNodeSpec type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * must be set to AddManagementNodeSpec
   * @return type
  **/
  @Schema(required = true, description = "must be set to AddManagementNodeSpec")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public AddManagementNodeSpec password(String password) {
    this.password = password;
    return this;
  }

   /**
   * The password to be used to authenticate with the remote node.
   * @return password
  **/
  @Schema(description = "The password to be used to authenticate with the remote node.")
  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }

  public AddManagementNodeSpec userName(String userName) {
    this.userName = userName;
    return this;
  }

   /**
   * The username to be used to authenticate with the remote node.
   * @return userName
  **/
  @Schema(required = true, description = "The username to be used to authenticate with the remote node.")
  public String getUserName() {
    return userName;
  }

  public void setUserName(String userName) {
    this.userName = userName;
  }

  public AddManagementNodeSpec remoteAddress(String remoteAddress) {
    this.remoteAddress = remoteAddress;
    return this;
  }

   /**
   * The host address of the remote node to which to send this join request.
   * @return remoteAddress
  **/
  @Schema(required = true, description = "The host address of the remote node to which to send this join request.")
  public String getRemoteAddress() {
    return remoteAddress;
  }

  public void setRemoteAddress(String remoteAddress) {
    this.remoteAddress = remoteAddress;
  }

  public AddManagementNodeSpec certThumbprint(String certThumbprint) {
    this.certThumbprint = certThumbprint;
    return this;
  }

   /**
   * The certificate thumbprint of the remote node.
   * @return certThumbprint
  **/
  @Schema(description = "The certificate thumbprint of the remote node.")
  public String getCertThumbprint() {
    return certThumbprint;
  }

  public void setCertThumbprint(String certThumbprint) {
    this.certThumbprint = certThumbprint;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AddManagementNodeSpec addManagementNodeSpec = (AddManagementNodeSpec) o;
    return Objects.equals(this.mpaMsgClientInfo, addManagementNodeSpec.mpaMsgClientInfo) &&
        Objects.equals(this.type, addManagementNodeSpec.type) &&
        Objects.equals(this.password, addManagementNodeSpec.password) &&
        Objects.equals(this.userName, addManagementNodeSpec.userName) &&
        Objects.equals(this.remoteAddress, addManagementNodeSpec.remoteAddress) &&
        Objects.equals(this.certThumbprint, addManagementNodeSpec.certThumbprint);
  }

  @Override
  public int hashCode() {
    return Objects.hash(mpaMsgClientInfo, type, password, userName, remoteAddress, certThumbprint);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AddManagementNodeSpec {\n");
    
    sb.append("    mpaMsgClientInfo: ").append(toIndentedString(mpaMsgClientInfo)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    userName: ").append(toIndentedString(userName)).append("\n");
    sb.append("    remoteAddress: ").append(toIndentedString(remoteAddress)).append("\n");
    sb.append("    certThumbprint: ").append(toIndentedString(certThumbprint)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
