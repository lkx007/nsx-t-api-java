/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.ManagedResource;
import io.swagger.client.model.Tag;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.List;
/**
 * LDAP server of directory domain
 */
@Schema(description = "LDAP server of directory domain")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class DirectoryLdapServer extends ManagedResource {
  @SerializedName("username")
  private String username = null;

  @SerializedName("host")
  private String host = null;

  /**
   * Directory LDAP server connection protocol which is either LDAP or LDAPS.
   */
  @JsonAdapter(ProtocolEnum.Adapter.class)
  public enum ProtocolEnum {
    LDAP("LDAP"),
    LDAPS("LDAPS");

    private String value;

    ProtocolEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ProtocolEnum fromValue(String text) {
      for (ProtocolEnum b : ProtocolEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ProtocolEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProtocolEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProtocolEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ProtocolEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("protocol")
  private ProtocolEnum protocol = ProtocolEnum.LDAP;

  @SerializedName("thumbprint")
  private String thumbprint = null;

  @SerializedName("password")
  private String password = null;

  @SerializedName("domain_name")
  private String domainName = null;

  @SerializedName("port")
  private Long port = 389l;

  public DirectoryLdapServer username(String username) {
    this.username = username;
    return this;
  }

   /**
   * Directory LDAP server connection user name.
   * @return username
  **/
  @Schema(description = "Directory LDAP server connection user name.")
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }

  public DirectoryLdapServer host(String host) {
    this.host = host;
    return this;
  }

   /**
   * Directory LDAP server DNS host name or ip address which is reachable by NSX manager to be connected and do object synchronization.
   * @return host
  **/
  @Schema(required = true, description = "Directory LDAP server DNS host name or ip address which is reachable by NSX manager to be connected and do object synchronization.")
  public String getHost() {
    return host;
  }

  public void setHost(String host) {
    this.host = host;
  }

  public DirectoryLdapServer protocol(ProtocolEnum protocol) {
    this.protocol = protocol;
    return this;
  }

   /**
   * Directory LDAP server connection protocol which is either LDAP or LDAPS.
   * @return protocol
  **/
  @Schema(description = "Directory LDAP server connection protocol which is either LDAP or LDAPS.")
  public ProtocolEnum getProtocol() {
    return protocol;
  }

  public void setProtocol(ProtocolEnum protocol) {
    this.protocol = protocol;
  }

  public DirectoryLdapServer thumbprint(String thumbprint) {
    this.thumbprint = thumbprint;
    return this;
  }

   /**
   * Directory LDAP server certificate thumbprint used in secure LDAPS connection.
   * @return thumbprint
  **/
  @Schema(description = "Directory LDAP server certificate thumbprint used in secure LDAPS connection.")
  public String getThumbprint() {
    return thumbprint;
  }

  public void setThumbprint(String thumbprint) {
    this.thumbprint = thumbprint;
  }

  public DirectoryLdapServer password(String password) {
    this.password = password;
    return this;
  }

   /**
   * Directory LDAP server connection password.
   * @return password
  **/
  @Schema(description = "Directory LDAP server connection password.")
  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }

  public DirectoryLdapServer domainName(String domainName) {
    this.domainName = domainName;
    return this;
  }

   /**
   * Directory domain name which best describes the domain. It could be unique fqdn name or it could also be descriptive. There is no unique contraint for domain name among different domains.
   * @return domainName
  **/
  @Schema(description = "Directory domain name which best describes the domain. It could be unique fqdn name or it could also be descriptive. There is no unique contraint for domain name among different domains.")
  public String getDomainName() {
    return domainName;
  }

  public void setDomainName(String domainName) {
    this.domainName = domainName;
  }

  public DirectoryLdapServer port(Long port) {
    this.port = port;
    return this;
  }

   /**
   * Directory LDAP server connection TCP/UDP port.
   * @return port
  **/
  @Schema(description = "Directory LDAP server connection TCP/UDP port.")
  public Long getPort() {
    return port;
  }

  public void setPort(Long port) {
    this.port = port;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DirectoryLdapServer directoryLdapServer = (DirectoryLdapServer) o;
    return Objects.equals(this.username, directoryLdapServer.username) &&
        Objects.equals(this.host, directoryLdapServer.host) &&
        Objects.equals(this.protocol, directoryLdapServer.protocol) &&
        Objects.equals(this.thumbprint, directoryLdapServer.thumbprint) &&
        Objects.equals(this.password, directoryLdapServer.password) &&
        Objects.equals(this.domainName, directoryLdapServer.domainName) &&
        Objects.equals(this.port, directoryLdapServer.port) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(username, host, protocol, thumbprint, password, domainName, port, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DirectoryLdapServer {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    host: ").append(toIndentedString(host)).append("\n");
    sb.append("    protocol: ").append(toIndentedString(protocol)).append("\n");
    sb.append("    thumbprint: ").append(toIndentedString(thumbprint)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    domainName: ").append(toIndentedString(domainName)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
