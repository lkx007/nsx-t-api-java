/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.AddressBindingEntry;
import io.swagger.client.model.DuplicateAddressBindingEntry;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * Contians realized state of the logical port. For example, transport node on which the port is located, discovered and realized address bindings of the logical port. 
 */
@Schema(description = "Contians realized state of the logical port. For example, transport node on which the port is located, discovered and realized address bindings of the logical port. ")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class LogicalPortState {
  @SerializedName("duplicate_bindings")
  private List<DuplicateAddressBindingEntry> duplicateBindings = null;

  @SerializedName("transport_node_ids")
  private List<String> transportNodeIds = null;

  @SerializedName("discovered_bindings")
  private List<AddressBindingEntry> discoveredBindings = null;

  @SerializedName("id")
  private String id = null;

  @SerializedName("realized_bindings")
  private List<AddressBindingEntry> realizedBindings = null;

  public LogicalPortState duplicateBindings(List<DuplicateAddressBindingEntry> duplicateBindings) {
    this.duplicateBindings = duplicateBindings;
    return this;
  }

  public LogicalPortState addDuplicateBindingsItem(DuplicateAddressBindingEntry duplicateBindingsItem) {
    if (this.duplicateBindings == null) {
      this.duplicateBindings = new ArrayList<DuplicateAddressBindingEntry>();
    }
    this.duplicateBindings.add(duplicateBindingsItem);
    return this;
  }

   /**
   * If any address binding discovered on the port is also found on other port on the same logical switch, then it is included in the duplicate bindings list along with the ID of the port with which it conflicts. 
   * @return duplicateBindings
  **/
  @Schema(description = "If any address binding discovered on the port is also found on other port on the same logical switch, then it is included in the duplicate bindings list along with the ID of the port with which it conflicts. ")
  public List<DuplicateAddressBindingEntry> getDuplicateBindings() {
    return duplicateBindings;
  }

  public void setDuplicateBindings(List<DuplicateAddressBindingEntry> duplicateBindings) {
    this.duplicateBindings = duplicateBindings;
  }

  public LogicalPortState transportNodeIds(List<String> transportNodeIds) {
    this.transportNodeIds = transportNodeIds;
    return this;
  }

  public LogicalPortState addTransportNodeIdsItem(String transportNodeIdsItem) {
    if (this.transportNodeIds == null) {
      this.transportNodeIds = new ArrayList<String>();
    }
    this.transportNodeIds.add(transportNodeIdsItem);
    return this;
  }

   /**
   * Identifiers of the transport node where the port is located
   * @return transportNodeIds
  **/
  @Schema(description = "Identifiers of the transport node where the port is located")
  public List<String> getTransportNodeIds() {
    return transportNodeIds;
  }

  public void setTransportNodeIds(List<String> transportNodeIds) {
    this.transportNodeIds = transportNodeIds;
  }

  public LogicalPortState discoveredBindings(List<AddressBindingEntry> discoveredBindings) {
    this.discoveredBindings = discoveredBindings;
    return this;
  }

  public LogicalPortState addDiscoveredBindingsItem(AddressBindingEntry discoveredBindingsItem) {
    if (this.discoveredBindings == null) {
      this.discoveredBindings = new ArrayList<AddressBindingEntry>();
    }
    this.discoveredBindings.add(discoveredBindingsItem);
    return this;
  }

   /**
   * Contains the list of address bindings for a logical port that were automatically dicovered using various snooping methods like ARP, DHCP etc. 
   * @return discoveredBindings
  **/
  @Schema(description = "Contains the list of address bindings for a logical port that were automatically dicovered using various snooping methods like ARP, DHCP etc. ")
  public List<AddressBindingEntry> getDiscoveredBindings() {
    return discoveredBindings;
  }

  public void setDiscoveredBindings(List<AddressBindingEntry> discoveredBindings) {
    this.discoveredBindings = discoveredBindings;
  }

  public LogicalPortState id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Id of the logical port
   * @return id
  **/
  @Schema(required = true, description = "Id of the logical port")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public LogicalPortState realizedBindings(List<AddressBindingEntry> realizedBindings) {
    this.realizedBindings = realizedBindings;
    return this;
  }

  public LogicalPortState addRealizedBindingsItem(AddressBindingEntry realizedBindingsItem) {
    if (this.realizedBindings == null) {
      this.realizedBindings = new ArrayList<AddressBindingEntry>();
    }
    this.realizedBindings.add(realizedBindingsItem);
    return this;
  }

   /**
   * List of logical port bindings that are realized. This list may be populated from the discovered bindings or manual user specified bindings. This binding configuration can be used by features such as firewall, spoof-guard, traceflow etc. 
   * @return realizedBindings
  **/
  @Schema(description = "List of logical port bindings that are realized. This list may be populated from the discovered bindings or manual user specified bindings. This binding configuration can be used by features such as firewall, spoof-guard, traceflow etc. ")
  public List<AddressBindingEntry> getRealizedBindings() {
    return realizedBindings;
  }

  public void setRealizedBindings(List<AddressBindingEntry> realizedBindings) {
    this.realizedBindings = realizedBindings;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LogicalPortState logicalPortState = (LogicalPortState) o;
    return Objects.equals(this.duplicateBindings, logicalPortState.duplicateBindings) &&
        Objects.equals(this.transportNodeIds, logicalPortState.transportNodeIds) &&
        Objects.equals(this.discoveredBindings, logicalPortState.discoveredBindings) &&
        Objects.equals(this.id, logicalPortState.id) &&
        Objects.equals(this.realizedBindings, logicalPortState.realizedBindings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(duplicateBindings, transportNodeIds, discoveredBindings, id, realizedBindings);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LogicalPortState {\n");
    
    sb.append("    duplicateBindings: ").append(toIndentedString(duplicateBindings)).append("\n");
    sb.append("    transportNodeIds: ").append(toIndentedString(transportNodeIds)).append("\n");
    sb.append("    discoveredBindings: ").append(toIndentedString(discoveredBindings)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    realizedBindings: ").append(toIndentedString(realizedBindings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
