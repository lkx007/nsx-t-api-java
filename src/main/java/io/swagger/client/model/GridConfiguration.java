/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.ColumnItem;
import io.swagger.client.model.Datasource;
import io.swagger.client.model.Footer;
import io.swagger.client.model.Icon;
import io.swagger.client.model.Legend;
import io.swagger.client.model.RowListField;
import io.swagger.client.model.WidgetConfiguration;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * Represents configuration of a Grid or Table widget.
 */
@Schema(description = "Represents configuration of a Grid or Table widget.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class GridConfiguration extends WidgetConfiguration {
  @SerializedName("page_size")
  private Integer pageSize = 30;

  @SerializedName("span")
  private Integer span = 2;

  @SerializedName("row_list_fields")
  private List<RowListField> rowListFields = new ArrayList<RowListField>();

  @SerializedName("columns")
  private List<ColumnItem> columns = new ArrayList<ColumnItem>();

  public GridConfiguration pageSize(Integer pageSize) {
    this.pageSize = pageSize;
    return this;
  }

   /**
   * Number of records per page. page_size will be effective only when the urls provided in the datasource support paging.
   * @return pageSize
  **/
  @Schema(description = "Number of records per page. page_size will be effective only when the urls provided in the datasource support paging.")
  public Integer getPageSize() {
    return pageSize;
  }

  public void setPageSize(Integer pageSize) {
    this.pageSize = pageSize;
  }

  public GridConfiguration span(Integer span) {
    this.span = span;
    return this;
  }

   /**
   * Represents the horizontal span of the Grid.
   * @return span
  **/
  @Schema(description = "Represents the horizontal span of the Grid.")
  public Integer getSpan() {
    return span;
  }

  public void setSpan(Integer span) {
    this.span = span;
  }

  public GridConfiguration rowListFields(List<RowListField> rowListFields) {
    this.rowListFields = rowListFields;
    return this;
  }

  public GridConfiguration addRowListFieldsItem(RowListField rowListFieldsItem) {
    this.rowListFields.add(rowListFieldsItem);
    return this;
  }

   /**
   * Rows of grid or table are formed from the list of objects returned by a row list field.
   * @return rowListFields
  **/
  @Schema(required = true, description = "Rows of grid or table are formed from the list of objects returned by a row list field.")
  public List<RowListField> getRowListFields() {
    return rowListFields;
  }

  public void setRowListFields(List<RowListField> rowListFields) {
    this.rowListFields = rowListFields;
  }

  public GridConfiguration columns(List<ColumnItem> columns) {
    this.columns = columns;
    return this;
  }

  public GridConfiguration addColumnsItem(ColumnItem columnsItem) {
    this.columns.add(columnsItem);
    return this;
  }

   /**
   * Array of columns of a Grid widget
   * @return columns
  **/
  @Schema(required = true, description = "Array of columns of a Grid widget")
  public List<ColumnItem> getColumns() {
    return columns;
  }

  public void setColumns(List<ColumnItem> columns) {
    this.columns = columns;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GridConfiguration gridConfiguration = (GridConfiguration) o;
    return Objects.equals(this.pageSize, gridConfiguration.pageSize) &&
        Objects.equals(this.span, gridConfiguration.span) &&
        Objects.equals(this.rowListFields, gridConfiguration.rowListFields) &&
        Objects.equals(this.columns, gridConfiguration.columns) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pageSize, span, rowListFields, columns, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GridConfiguration {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    pageSize: ").append(toIndentedString(pageSize)).append("\n");
    sb.append("    span: ").append(toIndentedString(span)).append("\n");
    sb.append("    rowListFields: ").append(toIndentedString(rowListFields)).append("\n");
    sb.append("    columns: ").append(toIndentedString(columns)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
