/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * Attribute specific to a partner. There attributes are passed on to the partner appliance and is opaque to the NSX Manager. The Attributes used by the partner applicance.
 */
@Schema(description = "Attribute specific to a partner. There attributes are passed on to the partner appliance and is opaque to the NSX Manager. The Attributes used by the partner applicance.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class Attribute {
  @SerializedName("read_only")
  private Boolean readOnly = false;

  /**
   * Attribute Type can be of any of the allowed enum type.
   */
  @JsonAdapter(AttributeTypeEnum.Adapter.class)
  public enum AttributeTypeEnum {
    IP_ADDRESS("IP_ADDRESS"),
    PORT("PORT"),
    PASSWORD("PASSWORD"),
    STRING("STRING"),
    LONG("LONG"),
    BOOLEAN("BOOLEAN");

    private String value;

    AttributeTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static AttributeTypeEnum fromValue(String text) {
      for (AttributeTypeEnum b : AttributeTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<AttributeTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AttributeTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AttributeTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return AttributeTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("attribute_type")
  private AttributeTypeEnum attributeType = null;

  @SerializedName("display_name")
  private String displayName = null;

  @SerializedName("value")
  private String value = null;

  @SerializedName("key")
  private String key = null;

  public Attribute readOnly(Boolean readOnly) {
    this.readOnly = readOnly;
    return this;
  }

   /**
   * Read only Attribute cannot be overdidden by service instance/deployment.
   * @return readOnly
  **/
  @Schema(description = "Read only Attribute cannot be overdidden by service instance/deployment.")
  public Boolean isReadOnly() {
    return readOnly;
  }

  public void setReadOnly(Boolean readOnly) {
    this.readOnly = readOnly;
  }

  public Attribute attributeType(AttributeTypeEnum attributeType) {
    this.attributeType = attributeType;
    return this;
  }

   /**
   * Attribute Type can be of any of the allowed enum type.
   * @return attributeType
  **/
  @Schema(description = "Attribute Type can be of any of the allowed enum type.")
  public AttributeTypeEnum getAttributeType() {
    return attributeType;
  }

  public void setAttributeType(AttributeTypeEnum attributeType) {
    this.attributeType = attributeType;
  }

  public Attribute displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

   /**
   * Attribute display name string value.
   * @return displayName
  **/
  @Schema(description = "Attribute display name string value.")
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }

  public Attribute value(String value) {
    this.value = value;
    return this;
  }

   /**
   * Attribute value string value.
   * @return value
  **/
  @Schema(description = "Attribute value string value.")
  public String getValue() {
    return value;
  }

  public void setValue(String value) {
    this.value = value;
  }

  public Attribute key(String key) {
    this.key = key;
    return this;
  }

   /**
   * Attribute key string value.
   * @return key
  **/
  @Schema(required = true, description = "Attribute key string value.")
  public String getKey() {
    return key;
  }

  public void setKey(String key) {
    this.key = key;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Attribute attribute = (Attribute) o;
    return Objects.equals(this.readOnly, attribute.readOnly) &&
        Objects.equals(this.attributeType, attribute.attributeType) &&
        Objects.equals(this.displayName, attribute.displayName) &&
        Objects.equals(this.value, attribute.value) &&
        Objects.equals(this.key, attribute.key);
  }

  @Override
  public int hashCode() {
    return Objects.hash(readOnly, attributeType, displayName, value, key);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Attribute {\n");
    
    sb.append("    readOnly: ").append(toIndentedString(readOnly)).append("\n");
    sb.append("    attributeType: ").append(toIndentedString(attributeType)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
