/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * Directory domain synchronization statistics
 */
@Schema(description = "Directory domain synchronization statistics")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class DirectoryDomainSyncStats {
  /**
   * Directory domain previous sync status. It could be one of the following two states.
   */
  @JsonAdapter(PrevSyncStatusEnum.Adapter.class)
  public enum PrevSyncStatusEnum {
    SUCCESS("SUCCESS"),
    FAILURE("FAILURE"),
    UNKNOWN("UNKNOWN");

    private String value;

    PrevSyncStatusEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static PrevSyncStatusEnum fromValue(String text) {
      for (PrevSyncStatusEnum b : PrevSyncStatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<PrevSyncStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PrevSyncStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PrevSyncStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return PrevSyncStatusEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("prev_sync_status")
  private PrevSyncStatusEnum prevSyncStatus = null;

  @SerializedName("avg_full_sync_time")
  private Long avgFullSyncTime = null;

  /**
   * Directory domain previous sync type. It could be one of the following three states. Right after the directory domain is configured, this field is set to IDLE.
   */
  @JsonAdapter(PrevSyncTypeEnum.Adapter.class)
  public enum PrevSyncTypeEnum {
    IDLE("IDLE"),
    FULL_SYNC("FULL_SYNC"),
    DELTA_SYNC("DELTA_SYNC");

    private String value;

    PrevSyncTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static PrevSyncTypeEnum fromValue(String text) {
      for (PrevSyncTypeEnum b : PrevSyncTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<PrevSyncTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PrevSyncTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PrevSyncTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return PrevSyncTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("prev_sync_type")
  private PrevSyncTypeEnum prevSyncType = null;

  @SerializedName("num_full_sync")
  private Long numFullSync = null;

  @SerializedName("current_state_begin_time")
  private Long currentStateBeginTime = null;

  @SerializedName("avg_delta_sync_time")
  private Long avgDeltaSyncTime = null;

  @SerializedName("prev_sync_error")
  private String prevSyncError = null;

  /**
   * Current running state of the directory domain in synchronization life cycle. It could be one of the following three states.
   */
  @JsonAdapter(CurrentStateEnum.Adapter.class)
  public enum CurrentStateEnum {
    IDLE("IDLE"),
    FULL_SYNC("FULL_SYNC"),
    DELTA_SYNC("DELTA_SYNC");

    private String value;

    CurrentStateEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static CurrentStateEnum fromValue(String text) {
      for (CurrentStateEnum b : CurrentStateEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<CurrentStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CurrentStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CurrentStateEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return CurrentStateEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("current_state")
  private CurrentStateEnum currentState = null;

  @SerializedName("num_delta_sync")
  private Long numDeltaSync = null;

  @SerializedName("prev_sync_end_time")
  private Long prevSyncEndTime = null;

   /**
   * Directory domain previous sync status. It could be one of the following two states.
   * @return prevSyncStatus
  **/
  @Schema(description = "Directory domain previous sync status. It could be one of the following two states.")
  public PrevSyncStatusEnum getPrevSyncStatus() {
    return prevSyncStatus;
  }

   /**
   * All the historical full sync are counted in calculating the average full sync time in milliseconds.
   * @return avgFullSyncTime
  **/
  @Schema(description = "All the historical full sync are counted in calculating the average full sync time in milliseconds.")
  public Long getAvgFullSyncTime() {
    return avgFullSyncTime;
  }

   /**
   * Directory domain previous sync type. It could be one of the following three states. Right after the directory domain is configured, this field is set to IDLE.
   * @return prevSyncType
  **/
  @Schema(description = "Directory domain previous sync type. It could be one of the following three states. Right after the directory domain is configured, this field is set to IDLE.")
  public PrevSyncTypeEnum getPrevSyncType() {
    return prevSyncType;
  }

   /**
   * number of successful historical full sync initiated either by system or by API request.
   * @return numFullSync
  **/
  @Schema(description = "number of successful historical full sync initiated either by system or by API request.")
  public Long getNumFullSync() {
    return numFullSync;
  }

   /**
   * Since what time the current state has begun. The time is expressed in millisecond epoch time.
   * @return currentStateBeginTime
  **/
  @Schema(description = "Since what time the current state has begun. The time is expressed in millisecond epoch time.")
  public Long getCurrentStateBeginTime() {
    return currentStateBeginTime;
  }

   /**
   * All the historical delta sync are counted in calculating the average delta sync time in milliseconds.
   * @return avgDeltaSyncTime
  **/
  @Schema(description = "All the historical delta sync are counted in calculating the average delta sync time in milliseconds.")
  public Long getAvgDeltaSyncTime() {
    return avgDeltaSyncTime;
  }

   /**
   * Directory domain previous sync status error if last status was failure.
   * @return prevSyncError
  **/
  @Schema(description = "Directory domain previous sync status error if last status was failure.")
  public String getPrevSyncError() {
    return prevSyncError;
  }

   /**
   * Current running state of the directory domain in synchronization life cycle. It could be one of the following three states.
   * @return currentState
  **/
  @Schema(description = "Current running state of the directory domain in synchronization life cycle. It could be one of the following three states.")
  public CurrentStateEnum getCurrentState() {
    return currentState;
  }

   /**
   * number of successful historical delta sync initiated either by system or by API request.
   * @return numDeltaSync
  **/
  @Schema(description = "number of successful historical delta sync initiated either by system or by API request.")
  public Long getNumDeltaSync() {
    return numDeltaSync;
  }

   /**
   * Directory domain previous sync ending time expressed in millisecond epoch time.
   * @return prevSyncEndTime
  **/
  @Schema(description = "Directory domain previous sync ending time expressed in millisecond epoch time.")
  public Long getPrevSyncEndTime() {
    return prevSyncEndTime;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DirectoryDomainSyncStats directoryDomainSyncStats = (DirectoryDomainSyncStats) o;
    return Objects.equals(this.prevSyncStatus, directoryDomainSyncStats.prevSyncStatus) &&
        Objects.equals(this.avgFullSyncTime, directoryDomainSyncStats.avgFullSyncTime) &&
        Objects.equals(this.prevSyncType, directoryDomainSyncStats.prevSyncType) &&
        Objects.equals(this.numFullSync, directoryDomainSyncStats.numFullSync) &&
        Objects.equals(this.currentStateBeginTime, directoryDomainSyncStats.currentStateBeginTime) &&
        Objects.equals(this.avgDeltaSyncTime, directoryDomainSyncStats.avgDeltaSyncTime) &&
        Objects.equals(this.prevSyncError, directoryDomainSyncStats.prevSyncError) &&
        Objects.equals(this.currentState, directoryDomainSyncStats.currentState) &&
        Objects.equals(this.numDeltaSync, directoryDomainSyncStats.numDeltaSync) &&
        Objects.equals(this.prevSyncEndTime, directoryDomainSyncStats.prevSyncEndTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(prevSyncStatus, avgFullSyncTime, prevSyncType, numFullSync, currentStateBeginTime, avgDeltaSyncTime, prevSyncError, currentState, numDeltaSync, prevSyncEndTime);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DirectoryDomainSyncStats {\n");
    
    sb.append("    prevSyncStatus: ").append(toIndentedString(prevSyncStatus)).append("\n");
    sb.append("    avgFullSyncTime: ").append(toIndentedString(avgFullSyncTime)).append("\n");
    sb.append("    prevSyncType: ").append(toIndentedString(prevSyncType)).append("\n");
    sb.append("    numFullSync: ").append(toIndentedString(numFullSync)).append("\n");
    sb.append("    currentStateBeginTime: ").append(toIndentedString(currentStateBeginTime)).append("\n");
    sb.append("    avgDeltaSyncTime: ").append(toIndentedString(avgDeltaSyncTime)).append("\n");
    sb.append("    prevSyncError: ").append(toIndentedString(prevSyncError)).append("\n");
    sb.append("    currentState: ").append(toIndentedString(currentState)).append("\n");
    sb.append("    numDeltaSync: ").append(toIndentedString(numDeltaSync)).append("\n");
    sb.append("    prevSyncEndTime: ").append(toIndentedString(prevSyncEndTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
