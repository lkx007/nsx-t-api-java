/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.Resource;
import io.swagger.client.model.ResourceLink;
import io.swagger.client.model.SelfResourceLink;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * Node syslog exporter properties
 */
@Schema(description = "Node syslog exporter properties")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class NodeSyslogExporterProperties extends Resource {
  @SerializedName("tls_ca_pem")
  private String tlsCaPem = null;

  /**
   * Export protocol
   */
  @JsonAdapter(ProtocolEnum.Adapter.class)
  public enum ProtocolEnum {
    TCP("TCP"),
    TLS("TLS"),
    UDP("UDP"),
    LI("LI"),
    LI_TLS("LI-TLS");

    private String value;

    ProtocolEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ProtocolEnum fromValue(String text) {
      for (ProtocolEnum b : ProtocolEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ProtocolEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProtocolEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProtocolEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ProtocolEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("protocol")
  private ProtocolEnum protocol = null;

  @SerializedName("exporter_name")
  private String exporterName = null;

  /**
   * Logging level to export
   */
  @JsonAdapter(LevelEnum.Adapter.class)
  public enum LevelEnum {
    EMERG("EMERG"),
    ALERT("ALERT"),
    CRIT("CRIT"),
    ERR("ERR"),
    WARNING("WARNING"),
    NOTICE("NOTICE"),
    INFO("INFO"),
    DEBUG("DEBUG");

    private String value;

    LevelEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static LevelEnum fromValue(String text) {
      for (LevelEnum b : LevelEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<LevelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LevelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LevelEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return LevelEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("level")
  private LevelEnum level = null;

  @SerializedName("tls_client_ca_pem")
  private String tlsClientCaPem = null;

  @SerializedName("tls_cert_pem")
  private String tlsCertPem = null;

  @SerializedName("server")
  private String server = null;

  /**
   * Syslog facility
   */
  @JsonAdapter(FacilitiesEnum.Adapter.class)
  public enum FacilitiesEnum {
    KERN("KERN"),
    USER("USER"),
    MAIL("MAIL"),
    DAEMON("DAEMON"),
    AUTH("AUTH"),
    SYSLOG("SYSLOG"),
    LPR("LPR"),
    NEWS("NEWS"),
    UUCP("UUCP"),
    AUTHPRIV("AUTHPRIV"),
    FTP("FTP"),
    LOGALERT("LOGALERT"),
    CRON("CRON"),
    LOCAL0("LOCAL0"),
    LOCAL1("LOCAL1"),
    LOCAL2("LOCAL2"),
    LOCAL3("LOCAL3"),
    LOCAL4("LOCAL4"),
    LOCAL5("LOCAL5"),
    LOCAL6("LOCAL6"),
    LOCAL7("LOCAL7");

    private String value;

    FacilitiesEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static FacilitiesEnum fromValue(String text) {
      for (FacilitiesEnum b : FacilitiesEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<FacilitiesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FacilitiesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FacilitiesEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return FacilitiesEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("facilities")
  private List<FacilitiesEnum> facilities = null;

  @SerializedName("msgids")
  private List<String> msgids = null;

  @SerializedName("structured_data")
  private List<String> structuredData = null;

  @SerializedName("port")
  private Long port = 514l;

  @SerializedName("tls_key_pem")
  private String tlsKeyPem = null;

  public NodeSyslogExporterProperties tlsCaPem(String tlsCaPem) {
    this.tlsCaPem = tlsCaPem;
    return this;
  }

   /**
   * CA certificate PEM of TLS server to export to
   * @return tlsCaPem
  **/
  @Schema(description = "CA certificate PEM of TLS server to export to")
  public String getTlsCaPem() {
    return tlsCaPem;
  }

  public void setTlsCaPem(String tlsCaPem) {
    this.tlsCaPem = tlsCaPem;
  }

  public NodeSyslogExporterProperties protocol(ProtocolEnum protocol) {
    this.protocol = protocol;
    return this;
  }

   /**
   * Export protocol
   * @return protocol
  **/
  @Schema(required = true, description = "Export protocol")
  public ProtocolEnum getProtocol() {
    return protocol;
  }

  public void setProtocol(ProtocolEnum protocol) {
    this.protocol = protocol;
  }

  public NodeSyslogExporterProperties exporterName(String exporterName) {
    this.exporterName = exporterName;
    return this;
  }

   /**
   * Syslog exporter name
   * @return exporterName
  **/
  @Schema(required = true, description = "Syslog exporter name")
  public String getExporterName() {
    return exporterName;
  }

  public void setExporterName(String exporterName) {
    this.exporterName = exporterName;
  }

  public NodeSyslogExporterProperties level(LevelEnum level) {
    this.level = level;
    return this;
  }

   /**
   * Logging level to export
   * @return level
  **/
  @Schema(required = true, description = "Logging level to export")
  public LevelEnum getLevel() {
    return level;
  }

  public void setLevel(LevelEnum level) {
    this.level = level;
  }

  public NodeSyslogExporterProperties tlsClientCaPem(String tlsClientCaPem) {
    this.tlsClientCaPem = tlsClientCaPem;
    return this;
  }

   /**
   * CA certificate PEM of the rsyslog client
   * @return tlsClientCaPem
  **/
  @Schema(description = "CA certificate PEM of the rsyslog client")
  public String getTlsClientCaPem() {
    return tlsClientCaPem;
  }

  public void setTlsClientCaPem(String tlsClientCaPem) {
    this.tlsClientCaPem = tlsClientCaPem;
  }

  public NodeSyslogExporterProperties tlsCertPem(String tlsCertPem) {
    this.tlsCertPem = tlsCertPem;
    return this;
  }

   /**
   * Certificate PEM of the rsyslog client
   * @return tlsCertPem
  **/
  @Schema(description = "Certificate PEM of the rsyslog client")
  public String getTlsCertPem() {
    return tlsCertPem;
  }

  public void setTlsCertPem(String tlsCertPem) {
    this.tlsCertPem = tlsCertPem;
  }

  public NodeSyslogExporterProperties server(String server) {
    this.server = server;
    return this;
  }

   /**
   * IP address or hostname of server to export to
   * @return server
  **/
  @Schema(required = true, description = "IP address or hostname of server to export to")
  public String getServer() {
    return server;
  }

  public void setServer(String server) {
    this.server = server;
  }

  public NodeSyslogExporterProperties facilities(List<FacilitiesEnum> facilities) {
    this.facilities = facilities;
    return this;
  }

  public NodeSyslogExporterProperties addFacilitiesItem(FacilitiesEnum facilitiesItem) {
    if (this.facilities == null) {
      this.facilities = new ArrayList<FacilitiesEnum>();
    }
    this.facilities.add(facilitiesItem);
    return this;
  }

   /**
   * Facilities to export
   * @return facilities
  **/
  @Schema(description = "Facilities to export")
  public List<FacilitiesEnum> getFacilities() {
    return facilities;
  }

  public void setFacilities(List<FacilitiesEnum> facilities) {
    this.facilities = facilities;
  }

  public NodeSyslogExporterProperties msgids(List<String> msgids) {
    this.msgids = msgids;
    return this;
  }

  public NodeSyslogExporterProperties addMsgidsItem(String msgidsItem) {
    if (this.msgids == null) {
      this.msgids = new ArrayList<String>();
    }
    this.msgids.add(msgidsItem);
    return this;
  }

   /**
   * MSGIDs to export
   * @return msgids
  **/
  @Schema(description = "MSGIDs to export")
  public List<String> getMsgids() {
    return msgids;
  }

  public void setMsgids(List<String> msgids) {
    this.msgids = msgids;
  }

  public NodeSyslogExporterProperties structuredData(List<String> structuredData) {
    this.structuredData = structuredData;
    return this;
  }

  public NodeSyslogExporterProperties addStructuredDataItem(String structuredDataItem) {
    if (this.structuredData == null) {
      this.structuredData = new ArrayList<String>();
    }
    this.structuredData.add(structuredDataItem);
    return this;
  }

   /**
   * Structured data to export
   * @return structuredData
  **/
  @Schema(description = "Structured data to export")
  public List<String> getStructuredData() {
    return structuredData;
  }

  public void setStructuredData(List<String> structuredData) {
    this.structuredData = structuredData;
  }

  public NodeSyslogExporterProperties port(Long port) {
    this.port = port;
    return this;
  }

   /**
   * Port to export to
   * minimum: 1
   * maximum: 65535
   * @return port
  **/
  @Schema(description = "Port to export to")
  public Long getPort() {
    return port;
  }

  public void setPort(Long port) {
    this.port = port;
  }

  public NodeSyslogExporterProperties tlsKeyPem(String tlsKeyPem) {
    this.tlsKeyPem = tlsKeyPem;
    return this;
  }

   /**
   * Private key PEM of the rsyslog client
   * @return tlsKeyPem
  **/
  @Schema(description = "Private key PEM of the rsyslog client")
  public String getTlsKeyPem() {
    return tlsKeyPem;
  }

  public void setTlsKeyPem(String tlsKeyPem) {
    this.tlsKeyPem = tlsKeyPem;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NodeSyslogExporterProperties nodeSyslogExporterProperties = (NodeSyslogExporterProperties) o;
    return Objects.equals(this.tlsCaPem, nodeSyslogExporterProperties.tlsCaPem) &&
        Objects.equals(this.protocol, nodeSyslogExporterProperties.protocol) &&
        Objects.equals(this.exporterName, nodeSyslogExporterProperties.exporterName) &&
        Objects.equals(this.level, nodeSyslogExporterProperties.level) &&
        Objects.equals(this.tlsClientCaPem, nodeSyslogExporterProperties.tlsClientCaPem) &&
        Objects.equals(this.tlsCertPem, nodeSyslogExporterProperties.tlsCertPem) &&
        Objects.equals(this.server, nodeSyslogExporterProperties.server) &&
        Objects.equals(this.facilities, nodeSyslogExporterProperties.facilities) &&
        Objects.equals(this.msgids, nodeSyslogExporterProperties.msgids) &&
        Objects.equals(this.structuredData, nodeSyslogExporterProperties.structuredData) &&
        Objects.equals(this.port, nodeSyslogExporterProperties.port) &&
        Objects.equals(this.tlsKeyPem, nodeSyslogExporterProperties.tlsKeyPem) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(tlsCaPem, protocol, exporterName, level, tlsClientCaPem, tlsCertPem, server, facilities, msgids, structuredData, port, tlsKeyPem, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NodeSyslogExporterProperties {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    tlsCaPem: ").append(toIndentedString(tlsCaPem)).append("\n");
    sb.append("    protocol: ").append(toIndentedString(protocol)).append("\n");
    sb.append("    exporterName: ").append(toIndentedString(exporterName)).append("\n");
    sb.append("    level: ").append(toIndentedString(level)).append("\n");
    sb.append("    tlsClientCaPem: ").append(toIndentedString(tlsClientCaPem)).append("\n");
    sb.append("    tlsCertPem: ").append(toIndentedString(tlsCertPem)).append("\n");
    sb.append("    server: ").append(toIndentedString(server)).append("\n");
    sb.append("    facilities: ").append(toIndentedString(facilities)).append("\n");
    sb.append("    msgids: ").append(toIndentedString(msgids)).append("\n");
    sb.append("    structuredData: ").append(toIndentedString(structuredData)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    tlsKeyPem: ").append(toIndentedString(tlsKeyPem)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
