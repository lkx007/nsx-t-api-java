/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * Node network interface alias
 */
@Schema(description = "Node network interface alias")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class NodeInterfaceAlias {
  /**
   * Interface configuration
   */
  @JsonAdapter(IpConfigurationEnum.Adapter.class)
  public enum IpConfigurationEnum {
    DHCP("dhcp"),
    STATIC("static"),
    NOT_CONFIGURED("not configured");

    private String value;

    IpConfigurationEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static IpConfigurationEnum fromValue(String text) {
      for (IpConfigurationEnum b : IpConfigurationEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<IpConfigurationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IpConfigurationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IpConfigurationEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return IpConfigurationEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("ip_configuration")
  private IpConfigurationEnum ipConfiguration = null;

  @SerializedName("netmask")
  private String netmask = null;

  @SerializedName("ip_address")
  private String ipAddress = null;

  @SerializedName("physical_address")
  private String physicalAddress = null;

  @SerializedName("broadcast_address")
  private String broadcastAddress = null;

  public NodeInterfaceAlias ipConfiguration(IpConfigurationEnum ipConfiguration) {
    this.ipConfiguration = ipConfiguration;
    return this;
  }

   /**
   * Interface configuration
   * @return ipConfiguration
  **/
  @Schema(description = "Interface configuration")
  public IpConfigurationEnum getIpConfiguration() {
    return ipConfiguration;
  }

  public void setIpConfiguration(IpConfigurationEnum ipConfiguration) {
    this.ipConfiguration = ipConfiguration;
  }

  public NodeInterfaceAlias netmask(String netmask) {
    this.netmask = netmask;
    return this;
  }

   /**
   * Interface netmask
   * @return netmask
  **/
  @Schema(description = "Interface netmask")
  public String getNetmask() {
    return netmask;
  }

  public void setNetmask(String netmask) {
    this.netmask = netmask;
  }

  public NodeInterfaceAlias ipAddress(String ipAddress) {
    this.ipAddress = ipAddress;
    return this;
  }

   /**
   * Interface IP address
   * @return ipAddress
  **/
  @Schema(description = "Interface IP address")
  public String getIpAddress() {
    return ipAddress;
  }

  public void setIpAddress(String ipAddress) {
    this.ipAddress = ipAddress;
  }

  public NodeInterfaceAlias physicalAddress(String physicalAddress) {
    this.physicalAddress = physicalAddress;
    return this;
  }

   /**
   * Interface MAC address
   * @return physicalAddress
  **/
  @Schema(description = "Interface MAC address")
  public String getPhysicalAddress() {
    return physicalAddress;
  }

  public void setPhysicalAddress(String physicalAddress) {
    this.physicalAddress = physicalAddress;
  }

  public NodeInterfaceAlias broadcastAddress(String broadcastAddress) {
    this.broadcastAddress = broadcastAddress;
    return this;
  }

   /**
   * Interface broadcast address
   * @return broadcastAddress
  **/
  @Schema(description = "Interface broadcast address")
  public String getBroadcastAddress() {
    return broadcastAddress;
  }

  public void setBroadcastAddress(String broadcastAddress) {
    this.broadcastAddress = broadcastAddress;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NodeInterfaceAlias nodeInterfaceAlias = (NodeInterfaceAlias) o;
    return Objects.equals(this.ipConfiguration, nodeInterfaceAlias.ipConfiguration) &&
        Objects.equals(this.netmask, nodeInterfaceAlias.netmask) &&
        Objects.equals(this.ipAddress, nodeInterfaceAlias.ipAddress) &&
        Objects.equals(this.physicalAddress, nodeInterfaceAlias.physicalAddress) &&
        Objects.equals(this.broadcastAddress, nodeInterfaceAlias.broadcastAddress);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ipConfiguration, netmask, ipAddress, physicalAddress, broadcastAddress);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NodeInterfaceAlias {\n");
    
    sb.append("    ipConfiguration: ").append(toIndentedString(ipConfiguration)).append("\n");
    sb.append("    netmask: ").append(toIndentedString(netmask)).append("\n");
    sb.append("    ipAddress: ").append(toIndentedString(ipAddress)).append("\n");
    sb.append("    physicalAddress: ").append(toIndentedString(physicalAddress)).append("\n");
    sb.append("    broadcastAddress: ").append(toIndentedString(broadcastAddress)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
