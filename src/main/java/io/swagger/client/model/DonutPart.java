/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.Label;
import io.swagger.client.model.RenderConfiguration;
import io.swagger.client.model.Tooltip;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * Represents an entity or portion to be plotted on a donut or stats chart.
 */
@Schema(description = "Represents an entity or portion to be plotted on a donut or stats chart.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class DonutPart {
  @SerializedName("field")
  private String field = null;

  @SerializedName("drilldown_id")
  private String drilldownId = null;

  @SerializedName("render_configuration")
  private List<RenderConfiguration> renderConfiguration = null;

  @SerializedName("navigation")
  private String navigation = null;

  @SerializedName("tooltip")
  private List<Tooltip> tooltip = null;

  @SerializedName("label")
  private Label label = null;

  public DonutPart field(String field) {
    this.field = field;
    return this;
  }

   /**
   * A numerical value that represents the portion or entity of the donut or stats chart.
   * @return field
  **/
  @Schema(required = true, description = "A numerical value that represents the portion or entity of the donut or stats chart.")
  public String getField() {
    return field;
  }

  public void setField(String field) {
    this.field = field;
  }

  public DonutPart drilldownId(String drilldownId) {
    this.drilldownId = drilldownId;
    return this;
  }

   /**
   * Id of drilldown widget, if any. Id should be a valid id of an existing widget. A widget is considered as drilldown widget when it is associated with any other widget and provides more detailed information about any data item from the parent widget.
   * @return drilldownId
  **/
  @Schema(description = "Id of drilldown widget, if any. Id should be a valid id of an existing widget. A widget is considered as drilldown widget when it is associated with any other widget and provides more detailed information about any data item from the parent widget.")
  public String getDrilldownId() {
    return drilldownId;
  }

  public void setDrilldownId(String drilldownId) {
    this.drilldownId = drilldownId;
  }

  public DonutPart renderConfiguration(List<RenderConfiguration> renderConfiguration) {
    this.renderConfiguration = renderConfiguration;
    return this;
  }

  public DonutPart addRenderConfigurationItem(RenderConfiguration renderConfigurationItem) {
    if (this.renderConfiguration == null) {
      this.renderConfiguration = new ArrayList<RenderConfiguration>();
    }
    this.renderConfiguration.add(renderConfigurationItem);
    return this;
  }

   /**
   * Additional rendering or conditional evaluation of the field values to be performed, if any.
   * @return renderConfiguration
  **/
  @Schema(description = "Additional rendering or conditional evaluation of the field values to be performed, if any.")
  public List<RenderConfiguration> getRenderConfiguration() {
    return renderConfiguration;
  }

  public void setRenderConfiguration(List<RenderConfiguration> renderConfiguration) {
    this.renderConfiguration = renderConfiguration;
  }

  public DonutPart navigation(String navigation) {
    this.navigation = navigation;
    return this;
  }

   /**
   * Hyperlink of the specified UI page that provides details. If drilldown_id is provided, then navigation cannot be used.
   * @return navigation
  **/
  @Schema(description = "Hyperlink of the specified UI page that provides details. If drilldown_id is provided, then navigation cannot be used.")
  public String getNavigation() {
    return navigation;
  }

  public void setNavigation(String navigation) {
    this.navigation = navigation;
  }

  public DonutPart tooltip(List<Tooltip> tooltip) {
    this.tooltip = tooltip;
    return this;
  }

  public DonutPart addTooltipItem(Tooltip tooltipItem) {
    if (this.tooltip == null) {
      this.tooltip = new ArrayList<Tooltip>();
    }
    this.tooltip.add(tooltipItem);
    return this;
  }

   /**
   * Multi-line text to be shown on tooltip while hovering over the portion.
   * @return tooltip
  **/
  @Schema(description = "Multi-line text to be shown on tooltip while hovering over the portion.")
  public List<Tooltip> getTooltip() {
    return tooltip;
  }

  public void setTooltip(List<Tooltip> tooltip) {
    this.tooltip = tooltip;
  }

  public DonutPart label(Label label) {
    this.label = label;
    return this;
  }

   /**
   * Get label
   * @return label
  **/
  @Schema(description = "")
  public Label getLabel() {
    return label;
  }

  public void setLabel(Label label) {
    this.label = label;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DonutPart donutPart = (DonutPart) o;
    return Objects.equals(this.field, donutPart.field) &&
        Objects.equals(this.drilldownId, donutPart.drilldownId) &&
        Objects.equals(this.renderConfiguration, donutPart.renderConfiguration) &&
        Objects.equals(this.navigation, donutPart.navigation) &&
        Objects.equals(this.tooltip, donutPart.tooltip) &&
        Objects.equals(this.label, donutPart.label);
  }

  @Override
  public int hashCode() {
    return Objects.hash(field, drilldownId, renderConfiguration, navigation, tooltip, label);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DonutPart {\n");
    
    sb.append("    field: ").append(toIndentedString(field)).append("\n");
    sb.append("    drilldownId: ").append(toIndentedString(drilldownId)).append("\n");
    sb.append("    renderConfiguration: ").append(toIndentedString(renderConfiguration)).append("\n");
    sb.append("    navigation: ").append(toIndentedString(navigation)).append("\n");
    sb.append("    tooltip: ").append(toIndentedString(tooltip)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
