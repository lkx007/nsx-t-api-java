/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.VIPSubnet;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * HaVipConfig
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class HaVipConfig {
  @SerializedName("ha_vip_subnets")
  private List<VIPSubnet> haVipSubnets = new ArrayList<VIPSubnet>();

  @SerializedName("redundant_uplink_port_ids")
  private List<String> redundantUplinkPortIds = new ArrayList<String>();

  @SerializedName("enabled")
  private Boolean enabled = true;

  public HaVipConfig haVipSubnets(List<VIPSubnet> haVipSubnets) {
    this.haVipSubnets = haVipSubnets;
    return this;
  }

  public HaVipConfig addHaVipSubnetsItem(VIPSubnet haVipSubnetsItem) {
    this.haVipSubnets.add(haVipSubnetsItem);
    return this;
  }

   /**
   * Array of IP address subnets which will be used as floating IP addresses. | Note - this configuration is applicable only for Active-Standby LogicalRouter. | For Active-Active LogicalRouter this configuration will be rejected.
   * @return haVipSubnets
  **/
  @Schema(required = true, description = "Array of IP address subnets which will be used as floating IP addresses. | Note - this configuration is applicable only for Active-Standby LogicalRouter. | For Active-Active LogicalRouter this configuration will be rejected.")
  public List<VIPSubnet> getHaVipSubnets() {
    return haVipSubnets;
  }

  public void setHaVipSubnets(List<VIPSubnet> haVipSubnets) {
    this.haVipSubnets = haVipSubnets;
  }

  public HaVipConfig redundantUplinkPortIds(List<String> redundantUplinkPortIds) {
    this.redundantUplinkPortIds = redundantUplinkPortIds;
    return this;
  }

  public HaVipConfig addRedundantUplinkPortIdsItem(String redundantUplinkPortIdsItem) {
    this.redundantUplinkPortIds.add(redundantUplinkPortIdsItem);
    return this;
  }

   /**
   * Identifiers of logical router uplink ports which are to be paired to provide | redundancy. Floating IP will be owned by one of these uplink ports (depending upon | which node is Active).
   * @return redundantUplinkPortIds
  **/
  @Schema(required = true, description = "Identifiers of logical router uplink ports which are to be paired to provide | redundancy. Floating IP will be owned by one of these uplink ports (depending upon | which node is Active).")
  public List<String> getRedundantUplinkPortIds() {
    return redundantUplinkPortIds;
  }

  public void setRedundantUplinkPortIds(List<String> redundantUplinkPortIds) {
    this.redundantUplinkPortIds = redundantUplinkPortIds;
  }

  public HaVipConfig enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

   /**
   * Flag to enable this ha vip config.
   * @return enabled
  **/
  @Schema(description = "Flag to enable this ha vip config.")
  public Boolean isEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HaVipConfig haVipConfig = (HaVipConfig) o;
    return Objects.equals(this.haVipSubnets, haVipConfig.haVipSubnets) &&
        Objects.equals(this.redundantUplinkPortIds, haVipConfig.redundantUplinkPortIds) &&
        Objects.equals(this.enabled, haVipConfig.enabled);
  }

  @Override
  public int hashCode() {
    return Objects.hash(haVipSubnets, redundantUplinkPortIds, enabled);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HaVipConfig {\n");
    
    sb.append("    haVipSubnets: ").append(toIndentedString(haVipSubnets)).append("\n");
    sb.append("    redundantUplinkPortIds: ").append(toIndentedString(redundantUplinkPortIds)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
