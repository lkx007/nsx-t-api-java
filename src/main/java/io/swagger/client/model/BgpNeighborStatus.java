/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.BgpAddressFamily;
import io.swagger.client.model.ResourceReference;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * BgpNeighborStatus
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class BgpNeighborStatus {
  /**
   * Current state of the BGP session.
   */
  @JsonAdapter(ConnectionStateEnum.Adapter.class)
  public enum ConnectionStateEnum {
    INVALID("INVALID"),
    IDLE("IDLE"),
    CONNECT("CONNECT"),
    ACTIVE("ACTIVE"),
    OPEN_SENT("OPEN_SENT"),
    OPEN_CONFIRM("OPEN_CONFIRM"),
    ESTABLISHED("ESTABLISHED"),
    UNKNOWN("UNKNOWN");

    private String value;

    ConnectionStateEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ConnectionStateEnum fromValue(String text) {
      for (ConnectionStateEnum b : ConnectionStateEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ConnectionStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ConnectionStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ConnectionStateEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ConnectionStateEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("connection_state")
  private ConnectionStateEnum connectionState = null;

  @SerializedName("keep_alive_interval")
  private Long keepAliveInterval = null;

  @SerializedName("neighbor_router_id")
  private String neighborRouterId = null;

  @SerializedName("total_out_prefix_count")
  private Long totalOutPrefixCount = null;

  @SerializedName("lr_component_id")
  private String lrComponentId = null;

  @SerializedName("established_connection_count")
  private Long establishedConnectionCount = null;

  @SerializedName("messages_sent")
  private Long messagesSent = null;

  @SerializedName("time_since_established")
  private Long timeSinceEstablished = null;

  @SerializedName("hold_time")
  private Long holdTime = null;

  @SerializedName("graceful_restart")
  private Boolean gracefulRestart = null;

  @SerializedName("graceful_restart_mode")
  private String gracefulRestartMode = null;

  @SerializedName("connection_drop_count")
  private Long connectionDropCount = null;

  @SerializedName("remote_port")
  private Long remotePort = null;

  @SerializedName("total_in_prefix_count")
  private Long totalInPrefixCount = null;

  @SerializedName("messages_received")
  private Long messagesReceived = null;

  @SerializedName("transport_node")
  private ResourceReference transportNode = null;

  @SerializedName("local_port")
  private Long localPort = null;

  @SerializedName("remote_as_number")
  private String remoteAsNumber = null;

  @SerializedName("announced_capabilities")
  private List<String> announcedCapabilities = null;

  @SerializedName("negotiated_capability")
  private List<String> negotiatedCapability = null;

  @SerializedName("address_families")
  private List<BgpAddressFamily> addressFamilies = null;

  @SerializedName("source_address")
  private String sourceAddress = null;

  @SerializedName("neighbor_address")
  private String neighborAddress = null;

   /**
   * Current state of the BGP session.
   * @return connectionState
  **/
  @Schema(description = "Current state of the BGP session.")
  public ConnectionStateEnum getConnectionState() {
    return connectionState;
  }

   /**
   * Time in ms to wait for HELLO packet from BGP peer
   * @return keepAliveInterval
  **/
  @Schema(description = "Time in ms to wait for HELLO packet from BGP peer")
  public Long getKeepAliveInterval() {
    return keepAliveInterval;
  }

   /**
   * Router ID of the BGP neighbor.
   * @return neighborRouterId
  **/
  @Schema(description = "Router ID of the BGP neighbor.")
  public String getNeighborRouterId() {
    return neighborRouterId;
  }

   /**
   * Sum of out prefixes counts across all address families.
   * @return totalOutPrefixCount
  **/
  @Schema(description = "Sum of out prefixes counts across all address families.")
  public Long getTotalOutPrefixCount() {
    return totalOutPrefixCount;
  }

   /**
   * Logical router component(Service Router/Distributed Router) id
   * @return lrComponentId
  **/
  @Schema(description = "Logical router component(Service Router/Distributed Router) id")
  public String getLrComponentId() {
    return lrComponentId;
  }

   /**
   * Count of connections established
   * @return establishedConnectionCount
  **/
  @Schema(description = "Count of connections established")
  public Long getEstablishedConnectionCount() {
    return establishedConnectionCount;
  }

   /**
   * Count of messages sent to the neighbor
   * @return messagesSent
  **/
  @Schema(description = "Count of messages sent to the neighbor")
  public Long getMessagesSent() {
    return messagesSent;
  }

   /**
   * Time(in milliseconds) since connection was established.
   * @return timeSinceEstablished
  **/
  @Schema(description = "Time(in milliseconds) since connection was established.")
  public Long getTimeSinceEstablished() {
    return timeSinceEstablished;
  }

   /**
   * Time in ms to wait for HELLO from BGP peer. If a HELLO packet is not seen from BGP Peer withing hold_time then BGP neighbor will be marked as down.
   * @return holdTime
  **/
  @Schema(description = "Time in ms to wait for HELLO from BGP peer. If a HELLO packet is not seen from BGP Peer withing hold_time then BGP neighbor will be marked as down.")
  public Long getHoldTime() {
    return holdTime;
  }

   /**
   * Current state of graceful restart where graceful_restart &#x3D; true indicates graceful restart is enabled and graceful_restart &#x3D; false indicates graceful restart is disabled. This is deprecated field, use graceful_restart_mode instead. 
   * @return gracefulRestart
  **/
  @Schema(description = "Current state of graceful restart where graceful_restart = true indicates graceful restart is enabled and graceful_restart = false indicates graceful restart is disabled. This is deprecated field, use graceful_restart_mode instead. ")
  public Boolean isGracefulRestart() {
    return gracefulRestart;
  }

   /**
   * Current state of graceful restart of BGP neighbor. Possible values are - 1. GR_AND_HELPER - Graceful restart with Helper 2. HELPER_ONLY - Helper only 3. DISABLE - Disabled 
   * @return gracefulRestartMode
  **/
  @Schema(description = "Current state of graceful restart of BGP neighbor. Possible values are - 1. GR_AND_HELPER - Graceful restart with Helper 2. HELPER_ONLY - Helper only 3. DISABLE - Disabled ")
  public String getGracefulRestartMode() {
    return gracefulRestartMode;
  }

   /**
   * Count of connection drop
   * @return connectionDropCount
  **/
  @Schema(description = "Count of connection drop")
  public Long getConnectionDropCount() {
    return connectionDropCount;
  }

   /**
   * TCP port number of remote BGP Connection
   * minimum: 1
   * maximum: 65535
   * @return remotePort
  **/
  @Schema(description = "TCP port number of remote BGP Connection")
  public Long getRemotePort() {
    return remotePort;
  }

   /**
   * Sum of in prefixes counts across all address families.
   * @return totalInPrefixCount
  **/
  @Schema(description = "Sum of in prefixes counts across all address families.")
  public Long getTotalInPrefixCount() {
    return totalInPrefixCount;
  }

   /**
   * Count of messages received from the neighbor
   * @return messagesReceived
  **/
  @Schema(description = "Count of messages received from the neighbor")
  public Long getMessagesReceived() {
    return messagesReceived;
  }

  public BgpNeighborStatus transportNode(ResourceReference transportNode) {
    this.transportNode = transportNode;
    return this;
  }

   /**
   * Get transportNode
   * @return transportNode
  **/
  @Schema(description = "")
  public ResourceReference getTransportNode() {
    return transportNode;
  }

  public void setTransportNode(ResourceReference transportNode) {
    this.transportNode = transportNode;
  }

   /**
   * TCP port number of Local BGP connection
   * minimum: 1
   * maximum: 65535
   * @return localPort
  **/
  @Schema(description = "TCP port number of Local BGP connection")
  public Long getLocalPort() {
    return localPort;
  }

   /**
   * AS number of the BGP neighbor
   * @return remoteAsNumber
  **/
  @Schema(description = "AS number of the BGP neighbor")
  public String getRemoteAsNumber() {
    return remoteAsNumber;
  }

   /**
   * BGP capabilities sent to BGP neighbor.
   * @return announcedCapabilities
  **/
  @Schema(description = "BGP capabilities sent to BGP neighbor.")
  public List<String> getAnnouncedCapabilities() {
    return announcedCapabilities;
  }

   /**
   * BGP capabilities negotiated with BGP neighbor.
   * @return negotiatedCapability
  **/
  @Schema(description = "BGP capabilities negotiated with BGP neighbor.")
  public List<String> getNegotiatedCapability() {
    return negotiatedCapability;
  }

   /**
   * Address families of BGP neighbor
   * @return addressFamilies
  **/
  @Schema(description = "Address families of BGP neighbor")
  public List<BgpAddressFamily> getAddressFamilies() {
    return addressFamilies;
  }

   /**
   * The Ip address of logical port
   * @return sourceAddress
  **/
  @Schema(description = "The Ip address of logical port")
  public String getSourceAddress() {
    return sourceAddress;
  }

   /**
   * The IP of the BGP neighbor
   * @return neighborAddress
  **/
  @Schema(description = "The IP of the BGP neighbor")
  public String getNeighborAddress() {
    return neighborAddress;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BgpNeighborStatus bgpNeighborStatus = (BgpNeighborStatus) o;
    return Objects.equals(this.connectionState, bgpNeighborStatus.connectionState) &&
        Objects.equals(this.keepAliveInterval, bgpNeighborStatus.keepAliveInterval) &&
        Objects.equals(this.neighborRouterId, bgpNeighborStatus.neighborRouterId) &&
        Objects.equals(this.totalOutPrefixCount, bgpNeighborStatus.totalOutPrefixCount) &&
        Objects.equals(this.lrComponentId, bgpNeighborStatus.lrComponentId) &&
        Objects.equals(this.establishedConnectionCount, bgpNeighborStatus.establishedConnectionCount) &&
        Objects.equals(this.messagesSent, bgpNeighborStatus.messagesSent) &&
        Objects.equals(this.timeSinceEstablished, bgpNeighborStatus.timeSinceEstablished) &&
        Objects.equals(this.holdTime, bgpNeighborStatus.holdTime) &&
        Objects.equals(this.gracefulRestart, bgpNeighborStatus.gracefulRestart) &&
        Objects.equals(this.gracefulRestartMode, bgpNeighborStatus.gracefulRestartMode) &&
        Objects.equals(this.connectionDropCount, bgpNeighborStatus.connectionDropCount) &&
        Objects.equals(this.remotePort, bgpNeighborStatus.remotePort) &&
        Objects.equals(this.totalInPrefixCount, bgpNeighborStatus.totalInPrefixCount) &&
        Objects.equals(this.messagesReceived, bgpNeighborStatus.messagesReceived) &&
        Objects.equals(this.transportNode, bgpNeighborStatus.transportNode) &&
        Objects.equals(this.localPort, bgpNeighborStatus.localPort) &&
        Objects.equals(this.remoteAsNumber, bgpNeighborStatus.remoteAsNumber) &&
        Objects.equals(this.announcedCapabilities, bgpNeighborStatus.announcedCapabilities) &&
        Objects.equals(this.negotiatedCapability, bgpNeighborStatus.negotiatedCapability) &&
        Objects.equals(this.addressFamilies, bgpNeighborStatus.addressFamilies) &&
        Objects.equals(this.sourceAddress, bgpNeighborStatus.sourceAddress) &&
        Objects.equals(this.neighborAddress, bgpNeighborStatus.neighborAddress);
  }

  @Override
  public int hashCode() {
    return Objects.hash(connectionState, keepAliveInterval, neighborRouterId, totalOutPrefixCount, lrComponentId, establishedConnectionCount, messagesSent, timeSinceEstablished, holdTime, gracefulRestart, gracefulRestartMode, connectionDropCount, remotePort, totalInPrefixCount, messagesReceived, transportNode, localPort, remoteAsNumber, announcedCapabilities, negotiatedCapability, addressFamilies, sourceAddress, neighborAddress);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BgpNeighborStatus {\n");
    
    sb.append("    connectionState: ").append(toIndentedString(connectionState)).append("\n");
    sb.append("    keepAliveInterval: ").append(toIndentedString(keepAliveInterval)).append("\n");
    sb.append("    neighborRouterId: ").append(toIndentedString(neighborRouterId)).append("\n");
    sb.append("    totalOutPrefixCount: ").append(toIndentedString(totalOutPrefixCount)).append("\n");
    sb.append("    lrComponentId: ").append(toIndentedString(lrComponentId)).append("\n");
    sb.append("    establishedConnectionCount: ").append(toIndentedString(establishedConnectionCount)).append("\n");
    sb.append("    messagesSent: ").append(toIndentedString(messagesSent)).append("\n");
    sb.append("    timeSinceEstablished: ").append(toIndentedString(timeSinceEstablished)).append("\n");
    sb.append("    holdTime: ").append(toIndentedString(holdTime)).append("\n");
    sb.append("    gracefulRestart: ").append(toIndentedString(gracefulRestart)).append("\n");
    sb.append("    gracefulRestartMode: ").append(toIndentedString(gracefulRestartMode)).append("\n");
    sb.append("    connectionDropCount: ").append(toIndentedString(connectionDropCount)).append("\n");
    sb.append("    remotePort: ").append(toIndentedString(remotePort)).append("\n");
    sb.append("    totalInPrefixCount: ").append(toIndentedString(totalInPrefixCount)).append("\n");
    sb.append("    messagesReceived: ").append(toIndentedString(messagesReceived)).append("\n");
    sb.append("    transportNode: ").append(toIndentedString(transportNode)).append("\n");
    sb.append("    localPort: ").append(toIndentedString(localPort)).append("\n");
    sb.append("    remoteAsNumber: ").append(toIndentedString(remoteAsNumber)).append("\n");
    sb.append("    announcedCapabilities: ").append(toIndentedString(announcedCapabilities)).append("\n");
    sb.append("    negotiatedCapability: ").append(toIndentedString(negotiatedCapability)).append("\n");
    sb.append("    addressFamilies: ").append(toIndentedString(addressFamilies)).append("\n");
    sb.append("    sourceAddress: ").append(toIndentedString(sourceAddress)).append("\n");
    sb.append("    neighborAddress: ").append(toIndentedString(neighborAddress)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
