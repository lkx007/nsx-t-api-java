/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.LbNodeUsage;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.math.BigDecimal;
/**
 * The capacity contains basic information and load balancer entity usages and capacity for the given edge node. 
 */
@Schema(description = "The capacity contains basic information and load balancer entity usages and capacity for the given edge node. ")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class LbEdgeNodeUsage extends LbNodeUsage {
  @SerializedName("current_credit_number")
  private Long currentCreditNumber = null;

  @SerializedName("current_virtual_servers")
  private Long currentVirtualServers = null;

  @SerializedName("current_small_load_balancer_services")
  private Long currentSmallLoadBalancerServices = null;

  @SerializedName("current_pool_members")
  private Long currentPoolMembers = null;

  /**
   * The severity calculation is based on current credit usage percentage of load balancer for one node. 
   */
  @JsonAdapter(SeverityEnum.Adapter.class)
  public enum SeverityEnum {
    GREEN("GREEN"),
    ORANGE("ORANGE"),
    RED("RED");

    private String value;

    SeverityEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static SeverityEnum fromValue(String text) {
      for (SeverityEnum b : SeverityEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<SeverityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SeverityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SeverityEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return SeverityEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("severity")
  private SeverityEnum severity = null;

  @SerializedName("current_pools")
  private Long currentPools = null;

  @SerializedName("remaining_pool_members")
  private Long remainingPoolMembers = null;

  @SerializedName("edge_cluster_id")
  private String edgeClusterId = null;

  @SerializedName("remaining_small_load_balancer_services")
  private Long remainingSmallLoadBalancerServices = null;

  /**
   * The form factor of the given edge node. 
   */
  @JsonAdapter(FormFactorEnum.Adapter.class)
  public enum FormFactorEnum {
    SMALL_VIRTUAL_MACHINE("SMALL_VIRTUAL_MACHINE"),
    MEDIUM_VIRTUAL_MACHINE("MEDIUM_VIRTUAL_MACHINE"),
    LARGE_VIRTUAL_MACHINE("LARGE_VIRTUAL_MACHINE"),
    PHYSICAL_MACHINE("PHYSICAL_MACHINE");

    private String value;

    FormFactorEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static FormFactorEnum fromValue(String text) {
      for (FormFactorEnum b : FormFactorEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<FormFactorEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FormFactorEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FormFactorEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return FormFactorEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("form_factor")
  private FormFactorEnum formFactor = null;

  @SerializedName("usage_percentage")
  private BigDecimal usagePercentage = null;

  @SerializedName("current_large_load_balancer_services")
  private Long currentLargeLoadBalancerServices = null;

  @SerializedName("remaining_credit_number")
  private Long remainingCreditNumber = null;

  @SerializedName("remaining_large_load_balancer_services")
  private Long remainingLargeLoadBalancerServices = null;

  @SerializedName("remaining_medium_load_balancer_services")
  private Long remainingMediumLoadBalancerServices = null;

  @SerializedName("current_medium_load_balancer_services")
  private Long currentMediumLoadBalancerServices = null;

   /**
   * The current credit number reflects the current usage on the node. For example, configuring a medium load balancer on a node consumes 10 credits. If there are 2 medium instances configured on a node, the current credit number is 2 * 10 &#x3D; 20. 
   * @return currentCreditNumber
  **/
  @Schema(description = "The current credit number reflects the current usage on the node. For example, configuring a medium load balancer on a node consumes 10 credits. If there are 2 medium instances configured on a node, the current credit number is 2 * 10 = 20. ")
  public Long getCurrentCreditNumber() {
    return currentCreditNumber;
  }

   /**
   * The number of virtual servers configured on the node. 
   * @return currentVirtualServers
  **/
  @Schema(description = "The number of virtual servers configured on the node. ")
  public Long getCurrentVirtualServers() {
    return currentVirtualServers;
  }

   /**
   * The number of small load balancer services configured on the node. 
   * @return currentSmallLoadBalancerServices
  **/
  @Schema(description = "The number of small load balancer services configured on the node. ")
  public Long getCurrentSmallLoadBalancerServices() {
    return currentSmallLoadBalancerServices;
  }

   /**
   * The number of pool members configured on the node. 
   * @return currentPoolMembers
  **/
  @Schema(description = "The number of pool members configured on the node. ")
  public Long getCurrentPoolMembers() {
    return currentPoolMembers;
  }

   /**
   * The severity calculation is based on current credit usage percentage of load balancer for one node. 
   * @return severity
  **/
  @Schema(description = "The severity calculation is based on current credit usage percentage of load balancer for one node. ")
  public SeverityEnum getSeverity() {
    return severity;
  }

   /**
   * The number of pools configured on the node. 
   * @return currentPools
  **/
  @Schema(description = "The number of pools configured on the node. ")
  public Long getCurrentPools() {
    return currentPools;
  }

   /**
   * The remaining number of pool members which could be configured on the given edge node. 
   * @return remainingPoolMembers
  **/
  @Schema(description = "The remaining number of pool members which could be configured on the given edge node. ")
  public Long getRemainingPoolMembers() {
    return remainingPoolMembers;
  }

   /**
   * The ID of edge cluster which contains the edge node. 
   * @return edgeClusterId
  **/
  @Schema(description = "The ID of edge cluster which contains the edge node. ")
  public String getEdgeClusterId() {
    return edgeClusterId;
  }

   /**
   * The remaining number of small load balancer services which could be configured on the given edge node. 
   * @return remainingSmallLoadBalancerServices
  **/
  @Schema(description = "The remaining number of small load balancer services which could be configured on the given edge node. ")
  public Long getRemainingSmallLoadBalancerServices() {
    return remainingSmallLoadBalancerServices;
  }

   /**
   * The form factor of the given edge node. 
   * @return formFactor
  **/
  @Schema(description = "The form factor of the given edge node. ")
  public FormFactorEnum getFormFactor() {
    return formFactor;
  }

   /**
   * The usage percentage of one edge node for the load balancer services. 
   * @return usagePercentage
  **/
  @Schema(description = "The usage percentage of one edge node for the load balancer services. ")
  public BigDecimal getUsagePercentage() {
    return usagePercentage;
  }

   /**
   * The number of large load balancer services configured on the node. 
   * @return currentLargeLoadBalancerServices
  **/
  @Schema(description = "The number of large load balancer services configured on the node. ")
  public Long getCurrentLargeLoadBalancerServices() {
    return currentLargeLoadBalancerServices;
  }

   /**
   * The remaining credit number is the remaining credits that can be used for load balancer service configuration. For example, an edge node with form factor LARGE_VIRTUAL_MACHINE has 40 credits, and a medium load balancer instance costs 10 credits. If there are currently 3 medium instances configured, the remaining credit number is 40 - (3 * 10) &#x3D; 10. 
   * @return remainingCreditNumber
  **/
  @Schema(description = "The remaining credit number is the remaining credits that can be used for load balancer service configuration. For example, an edge node with form factor LARGE_VIRTUAL_MACHINE has 40 credits, and a medium load balancer instance costs 10 credits. If there are currently 3 medium instances configured, the remaining credit number is 40 - (3 * 10) = 10. ")
  public Long getRemainingCreditNumber() {
    return remainingCreditNumber;
  }

   /**
   * The remaining number of large load balancer services which could be configured on the given edge node. 
   * @return remainingLargeLoadBalancerServices
  **/
  @Schema(description = "The remaining number of large load balancer services which could be configured on the given edge node. ")
  public Long getRemainingLargeLoadBalancerServices() {
    return remainingLargeLoadBalancerServices;
  }

   /**
   * The remaining number of medium load balancer services which could be configured on the given edge node. 
   * @return remainingMediumLoadBalancerServices
  **/
  @Schema(description = "The remaining number of medium load balancer services which could be configured on the given edge node. ")
  public Long getRemainingMediumLoadBalancerServices() {
    return remainingMediumLoadBalancerServices;
  }

   /**
   * The number of medium load balancer services configured on the node. 
   * @return currentMediumLoadBalancerServices
  **/
  @Schema(description = "The number of medium load balancer services configured on the node. ")
  public Long getCurrentMediumLoadBalancerServices() {
    return currentMediumLoadBalancerServices;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LbEdgeNodeUsage lbEdgeNodeUsage = (LbEdgeNodeUsage) o;
    return Objects.equals(this.currentCreditNumber, lbEdgeNodeUsage.currentCreditNumber) &&
        Objects.equals(this.currentVirtualServers, lbEdgeNodeUsage.currentVirtualServers) &&
        Objects.equals(this.currentSmallLoadBalancerServices, lbEdgeNodeUsage.currentSmallLoadBalancerServices) &&
        Objects.equals(this.currentPoolMembers, lbEdgeNodeUsage.currentPoolMembers) &&
        Objects.equals(this.severity, lbEdgeNodeUsage.severity) &&
        Objects.equals(this.currentPools, lbEdgeNodeUsage.currentPools) &&
        Objects.equals(this.remainingPoolMembers, lbEdgeNodeUsage.remainingPoolMembers) &&
        Objects.equals(this.edgeClusterId, lbEdgeNodeUsage.edgeClusterId) &&
        Objects.equals(this.remainingSmallLoadBalancerServices, lbEdgeNodeUsage.remainingSmallLoadBalancerServices) &&
        Objects.equals(this.formFactor, lbEdgeNodeUsage.formFactor) &&
        Objects.equals(this.usagePercentage, lbEdgeNodeUsage.usagePercentage) &&
        Objects.equals(this.currentLargeLoadBalancerServices, lbEdgeNodeUsage.currentLargeLoadBalancerServices) &&
        Objects.equals(this.remainingCreditNumber, lbEdgeNodeUsage.remainingCreditNumber) &&
        Objects.equals(this.remainingLargeLoadBalancerServices, lbEdgeNodeUsage.remainingLargeLoadBalancerServices) &&
        Objects.equals(this.remainingMediumLoadBalancerServices, lbEdgeNodeUsage.remainingMediumLoadBalancerServices) &&
        Objects.equals(this.currentMediumLoadBalancerServices, lbEdgeNodeUsage.currentMediumLoadBalancerServices) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(currentCreditNumber, currentVirtualServers, currentSmallLoadBalancerServices, currentPoolMembers, severity, currentPools, remainingPoolMembers, edgeClusterId, remainingSmallLoadBalancerServices, formFactor, usagePercentage, currentLargeLoadBalancerServices, remainingCreditNumber, remainingLargeLoadBalancerServices, remainingMediumLoadBalancerServices, currentMediumLoadBalancerServices, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LbEdgeNodeUsage {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    currentCreditNumber: ").append(toIndentedString(currentCreditNumber)).append("\n");
    sb.append("    currentVirtualServers: ").append(toIndentedString(currentVirtualServers)).append("\n");
    sb.append("    currentSmallLoadBalancerServices: ").append(toIndentedString(currentSmallLoadBalancerServices)).append("\n");
    sb.append("    currentPoolMembers: ").append(toIndentedString(currentPoolMembers)).append("\n");
    sb.append("    severity: ").append(toIndentedString(severity)).append("\n");
    sb.append("    currentPools: ").append(toIndentedString(currentPools)).append("\n");
    sb.append("    remainingPoolMembers: ").append(toIndentedString(remainingPoolMembers)).append("\n");
    sb.append("    edgeClusterId: ").append(toIndentedString(edgeClusterId)).append("\n");
    sb.append("    remainingSmallLoadBalancerServices: ").append(toIndentedString(remainingSmallLoadBalancerServices)).append("\n");
    sb.append("    formFactor: ").append(toIndentedString(formFactor)).append("\n");
    sb.append("    usagePercentage: ").append(toIndentedString(usagePercentage)).append("\n");
    sb.append("    currentLargeLoadBalancerServices: ").append(toIndentedString(currentLargeLoadBalancerServices)).append("\n");
    sb.append("    remainingCreditNumber: ").append(toIndentedString(remainingCreditNumber)).append("\n");
    sb.append("    remainingLargeLoadBalancerServices: ").append(toIndentedString(remainingLargeLoadBalancerServices)).append("\n");
    sb.append("    remainingMediumLoadBalancerServices: ").append(toIndentedString(remainingMediumLoadBalancerServices)).append("\n");
    sb.append("    currentMediumLoadBalancerServices: ").append(toIndentedString(currentMediumLoadBalancerServices)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
