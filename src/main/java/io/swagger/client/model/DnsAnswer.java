/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.DnsQueryAnswer;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * The response for DNS nslookup. 
 */
@Schema(description = "The response for DNS nslookup. ")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class DnsAnswer {
  @SerializedName("dns_server")
  private String dnsServer = null;

  @SerializedName("raw_answer")
  private String rawAnswer = null;

  @SerializedName("non_authoritative_answers")
  private List<DnsQueryAnswer> nonAuthoritativeAnswers = null;

  @SerializedName("source_ip")
  private String sourceIp = null;

  @SerializedName("edge_node_id")
  private String edgeNodeId = null;

  @SerializedName("authoritative_answers")
  private List<DnsQueryAnswer> authoritativeAnswers = null;

  @SerializedName("answers")
  private List<DnsQueryAnswer> answers = null;

  public DnsAnswer dnsServer(String dnsServer) {
    this.dnsServer = dnsServer;
    return this;
  }

   /**
   * Dns server ip address and port, format is \&quot;ip address#port\&quot;. 
   * @return dnsServer
  **/
  @Schema(required = true, description = "Dns server ip address and port, format is \"ip address#port\". ")
  public String getDnsServer() {
    return dnsServer;
  }

  public void setDnsServer(String dnsServer) {
    this.dnsServer = dnsServer;
  }

  public DnsAnswer rawAnswer(String rawAnswer) {
    this.rawAnswer = rawAnswer;
    return this;
  }

   /**
   * It can be NXDOMAIN or error message which is not consisted of authoritative_answer or non_authoritative_answer. 
   * @return rawAnswer
  **/
  @Schema(description = "It can be NXDOMAIN or error message which is not consisted of authoritative_answer or non_authoritative_answer. ")
  public String getRawAnswer() {
    return rawAnswer;
  }

  public void setRawAnswer(String rawAnswer) {
    this.rawAnswer = rawAnswer;
  }

  public DnsAnswer nonAuthoritativeAnswers(List<DnsQueryAnswer> nonAuthoritativeAnswers) {
    this.nonAuthoritativeAnswers = nonAuthoritativeAnswers;
    return this;
  }

  public DnsAnswer addNonAuthoritativeAnswersItem(DnsQueryAnswer nonAuthoritativeAnswersItem) {
    if (this.nonAuthoritativeAnswers == null) {
      this.nonAuthoritativeAnswers = new ArrayList<DnsQueryAnswer>();
    }
    this.nonAuthoritativeAnswers.add(nonAuthoritativeAnswersItem);
    return this;
  }

   /**
   * Non-authotitative answers of the query. This is a deprecated property, please use &#x27;answers&#x27; instead. 
   * @return nonAuthoritativeAnswers
  **/
  @Schema(description = "Non-authotitative answers of the query. This is a deprecated property, please use 'answers' instead. ")
  public List<DnsQueryAnswer> getNonAuthoritativeAnswers() {
    return nonAuthoritativeAnswers;
  }

  public void setNonAuthoritativeAnswers(List<DnsQueryAnswer> nonAuthoritativeAnswers) {
    this.nonAuthoritativeAnswers = nonAuthoritativeAnswers;
  }

  public DnsAnswer sourceIp(String sourceIp) {
    this.sourceIp = sourceIp;
    return this;
  }

   /**
   * The source ip used in this lookup. 
   * @return sourceIp
  **/
  @Schema(required = true, description = "The source ip used in this lookup. ")
  public String getSourceIp() {
    return sourceIp;
  }

  public void setSourceIp(String sourceIp) {
    this.sourceIp = sourceIp;
  }

  public DnsAnswer edgeNodeId(String edgeNodeId) {
    this.edgeNodeId = edgeNodeId;
    return this;
  }

   /**
   * ID of the edge node that performed the query. 
   * @return edgeNodeId
  **/
  @Schema(required = true, description = "ID of the edge node that performed the query. ")
  public String getEdgeNodeId() {
    return edgeNodeId;
  }

  public void setEdgeNodeId(String edgeNodeId) {
    this.edgeNodeId = edgeNodeId;
  }

  public DnsAnswer authoritativeAnswers(List<DnsQueryAnswer> authoritativeAnswers) {
    this.authoritativeAnswers = authoritativeAnswers;
    return this;
  }

  public DnsAnswer addAuthoritativeAnswersItem(DnsQueryAnswer authoritativeAnswersItem) {
    if (this.authoritativeAnswers == null) {
      this.authoritativeAnswers = new ArrayList<DnsQueryAnswer>();
    }
    this.authoritativeAnswers.add(authoritativeAnswersItem);
    return this;
  }

   /**
   * Authotitative answers of the query. This is a deprecated property, please use &#x27;answers&#x27; instead. 
   * @return authoritativeAnswers
  **/
  @Schema(description = "Authotitative answers of the query. This is a deprecated property, please use 'answers' instead. ")
  public List<DnsQueryAnswer> getAuthoritativeAnswers() {
    return authoritativeAnswers;
  }

  public void setAuthoritativeAnswers(List<DnsQueryAnswer> authoritativeAnswers) {
    this.authoritativeAnswers = authoritativeAnswers;
  }

  public DnsAnswer answers(List<DnsQueryAnswer> answers) {
    this.answers = answers;
    return this;
  }

  public DnsAnswer addAnswersItem(DnsQueryAnswer answersItem) {
    if (this.answers == null) {
      this.answers = new ArrayList<DnsQueryAnswer>();
    }
    this.answers.add(answersItem);
    return this;
  }

   /**
   * The answers of the query. 
   * @return answers
  **/
  @Schema(description = "The answers of the query. ")
  public List<DnsQueryAnswer> getAnswers() {
    return answers;
  }

  public void setAnswers(List<DnsQueryAnswer> answers) {
    this.answers = answers;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DnsAnswer dnsAnswer = (DnsAnswer) o;
    return Objects.equals(this.dnsServer, dnsAnswer.dnsServer) &&
        Objects.equals(this.rawAnswer, dnsAnswer.rawAnswer) &&
        Objects.equals(this.nonAuthoritativeAnswers, dnsAnswer.nonAuthoritativeAnswers) &&
        Objects.equals(this.sourceIp, dnsAnswer.sourceIp) &&
        Objects.equals(this.edgeNodeId, dnsAnswer.edgeNodeId) &&
        Objects.equals(this.authoritativeAnswers, dnsAnswer.authoritativeAnswers) &&
        Objects.equals(this.answers, dnsAnswer.answers);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dnsServer, rawAnswer, nonAuthoritativeAnswers, sourceIp, edgeNodeId, authoritativeAnswers, answers);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DnsAnswer {\n");
    
    sb.append("    dnsServer: ").append(toIndentedString(dnsServer)).append("\n");
    sb.append("    rawAnswer: ").append(toIndentedString(rawAnswer)).append("\n");
    sb.append("    nonAuthoritativeAnswers: ").append(toIndentedString(nonAuthoritativeAnswers)).append("\n");
    sb.append("    sourceIp: ").append(toIndentedString(sourceIp)).append("\n");
    sb.append("    edgeNodeId: ").append(toIndentedString(edgeNodeId)).append("\n");
    sb.append("    authoritativeAnswers: ").append(toIndentedString(authoritativeAnswers)).append("\n");
    sb.append("    answers: ").append(toIndentedString(answers)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
