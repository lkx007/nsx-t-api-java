/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.Icon;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * Label that will be displayed for a UI element.
 */
@Schema(description = "Label that will be displayed for a UI element.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class Label {
  @SerializedName("text")
  private String text = null;

  @SerializedName("hover")
  private Boolean hover = false;

  @SerializedName("navigation")
  private String navigation = null;

  @SerializedName("condition")
  private String condition = null;

  @SerializedName("icons")
  private List<Icon> icons = null;

  public Label text(String text) {
    this.text = text;
    return this;
  }

   /**
   * Text to be displayed at the label.
   * @return text
  **/
  @Schema(required = true, description = "Text to be displayed at the label.")
  public String getText() {
    return text;
  }

  public void setText(String text) {
    this.text = text;
  }

  public Label hover(Boolean hover) {
    this.hover = hover;
    return this;
  }

   /**
   * If true, displays the label only on hover
   * @return hover
  **/
  @Schema(description = "If true, displays the label only on hover")
  public Boolean isHover() {
    return hover;
  }

  public void setHover(Boolean hover) {
    this.hover = hover;
  }

  public Label navigation(String navigation) {
    this.navigation = navigation;
    return this;
  }

   /**
   * Hyperlink of the specified UI page that provides details.
   * @return navigation
  **/
  @Schema(description = "Hyperlink of the specified UI page that provides details.")
  public String getNavigation() {
    return navigation;
  }

  public void setNavigation(String navigation) {
    this.navigation = navigation;
  }

  public Label condition(String condition) {
    this.condition = condition;
    return this;
  }

   /**
   * If the condition is met then the label will be applied. Examples of expression syntax are provided under example_request section of CreateWidgetConfiguration API.
   * @return condition
  **/
  @Schema(description = "If the condition is met then the label will be applied. Examples of expression syntax are provided under example_request section of CreateWidgetConfiguration API.")
  public String getCondition() {
    return condition;
  }

  public void setCondition(String condition) {
    this.condition = condition;
  }

  public Label icons(List<Icon> icons) {
    this.icons = icons;
    return this;
  }

  public Label addIconsItem(Icon iconsItem) {
    if (this.icons == null) {
      this.icons = new ArrayList<Icon>();
    }
    this.icons.add(iconsItem);
    return this;
  }

   /**
   * Icons to be applied at dashboard for the label
   * @return icons
  **/
  @Schema(description = "Icons to be applied at dashboard for the label")
  public List<Icon> getIcons() {
    return icons;
  }

  public void setIcons(List<Icon> icons) {
    this.icons = icons;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Label label = (Label) o;
    return Objects.equals(this.text, label.text) &&
        Objects.equals(this.hover, label.hover) &&
        Objects.equals(this.navigation, label.navigation) &&
        Objects.equals(this.condition, label.condition) &&
        Objects.equals(this.icons, label.icons);
  }

  @Override
  public int hashCode() {
    return Objects.hash(text, hover, navigation, condition, icons);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Label {\n");
    
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    hover: ").append(toIndentedString(hover)).append("\n");
    sb.append("    navigation: ").append(toIndentedString(navigation)).append("\n");
    sb.append("    condition: ").append(toIndentedString(condition)).append("\n");
    sb.append("    icons: ").append(toIndentedString(icons)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
