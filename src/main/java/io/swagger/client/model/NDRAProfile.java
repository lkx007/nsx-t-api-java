/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.ManagedResource;
import io.swagger.client.model.RAConfig;
import io.swagger.client.model.RaDNSConfig;
import io.swagger.client.model.Tag;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.List;
/**
 * NDRAProfile
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class NDRAProfile extends ManagedResource {
  /**
   * RA Mode
   */
  @JsonAdapter(RaModeEnum.Adapter.class)
  public enum RaModeEnum {
    DISABLED("DISABLED"),
    SLAAC_DNS_THROUGH_RA("SLAAC_DNS_THROUGH_RA"),
    SLAAC_DNS_THROUGH_DHCP("SLAAC_DNS_THROUGH_DHCP"),
    DHCP_ADDRESS_AND_DNS_THROUGH_DHCP("DHCP_ADDRESS_AND_DNS_THROUGH_DHCP"),
    SLAAC_AND_ADDRESS_DNS_THROUGH_DHCP("SLAAC_AND_ADDRESS_DNS_THROUGH_DHCP");

    private String value;

    RaModeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static RaModeEnum fromValue(String text) {
      for (RaModeEnum b : RaModeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<RaModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RaModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RaModeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return RaModeEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("ra_mode")
  private RaModeEnum raMode = RaModeEnum.SLAAC_DNS_THROUGH_RA;

  @SerializedName("ra_config")
  private RAConfig raConfig = null;

  @SerializedName("retransmit_interval")
  private Long retransmitInterval = 1000l;

  @SerializedName("dns_config")
  private RaDNSConfig dnsConfig = null;

  @SerializedName("reachable_timer")
  private Long reachableTimer = 0l;

  public NDRAProfile raMode(RaModeEnum raMode) {
    this.raMode = raMode;
    return this;
  }

   /**
   * RA Mode
   * @return raMode
  **/
  @Schema(required = true, description = "RA Mode")
  public RaModeEnum getRaMode() {
    return raMode;
  }

  public void setRaMode(RaModeEnum raMode) {
    this.raMode = raMode;
  }

  public NDRAProfile raConfig(RAConfig raConfig) {
    this.raConfig = raConfig;
    return this;
  }

   /**
   * Get raConfig
   * @return raConfig
  **/
  @Schema(required = true, description = "")
  public RAConfig getRaConfig() {
    return raConfig;
  }

  public void setRaConfig(RAConfig raConfig) {
    this.raConfig = raConfig;
  }

  public NDRAProfile retransmitInterval(Long retransmitInterval) {
    this.retransmitInterval = retransmitInterval;
    return this;
  }

   /**
   * The time, in milliseconds, between retransmitted neighbour solicitation messages. 
   * minimum: 0
   * maximum: 4294967295
   * @return retransmitInterval
  **/
  @Schema(description = "The time, in milliseconds, between retransmitted neighbour solicitation messages. ")
  public Long getRetransmitInterval() {
    return retransmitInterval;
  }

  public void setRetransmitInterval(Long retransmitInterval) {
    this.retransmitInterval = retransmitInterval;
  }

  public NDRAProfile dnsConfig(RaDNSConfig dnsConfig) {
    this.dnsConfig = dnsConfig;
    return this;
  }

   /**
   * Get dnsConfig
   * @return dnsConfig
  **/
  @Schema(description = "")
  public RaDNSConfig getDnsConfig() {
    return dnsConfig;
  }

  public void setDnsConfig(RaDNSConfig dnsConfig) {
    this.dnsConfig = dnsConfig;
  }

  public NDRAProfile reachableTimer(Long reachableTimer) {
    this.reachableTimer = reachableTimer;
    return this;
  }

   /**
   * Neighbour reachable time duration in milliseconds. A value of 0 means unspecified. 
   * minimum: 0
   * maximum: 3600000
   * @return reachableTimer
  **/
  @Schema(description = "Neighbour reachable time duration in milliseconds. A value of 0 means unspecified. ")
  public Long getReachableTimer() {
    return reachableTimer;
  }

  public void setReachableTimer(Long reachableTimer) {
    this.reachableTimer = reachableTimer;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NDRAProfile ndRAProfile = (NDRAProfile) o;
    return Objects.equals(this.raMode, ndRAProfile.raMode) &&
        Objects.equals(this.raConfig, ndRAProfile.raConfig) &&
        Objects.equals(this.retransmitInterval, ndRAProfile.retransmitInterval) &&
        Objects.equals(this.dnsConfig, ndRAProfile.dnsConfig) &&
        Objects.equals(this.reachableTimer, ndRAProfile.reachableTimer) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(raMode, raConfig, retransmitInterval, dnsConfig, reachableTimer, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NDRAProfile {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    raMode: ").append(toIndentedString(raMode)).append("\n");
    sb.append("    raConfig: ").append(toIndentedString(raConfig)).append("\n");
    sb.append("    retransmitInterval: ").append(toIndentedString(retransmitInterval)).append("\n");
    sb.append("    dnsConfig: ").append(toIndentedString(dnsConfig)).append("\n");
    sb.append("    reachableTimer: ").append(toIndentedString(reachableTimer)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
