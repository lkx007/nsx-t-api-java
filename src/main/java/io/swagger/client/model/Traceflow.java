/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.Resource;
import io.swagger.client.model.ResourceLink;
import io.swagger.client.model.SelfResourceLink;
import io.swagger.client.model.TraceflowObservationCounters;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * Traceflow
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class Traceflow extends Resource {
  /**
   * Represents the traceflow operation state
   */
  @JsonAdapter(OperationStateEnum.Adapter.class)
  public enum OperationStateEnum {
    IN_PROGRESS("IN_PROGRESS"),
    FINISHED("FINISHED"),
    FAILED("FAILED");

    private String value;

    OperationStateEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static OperationStateEnum fromValue(String text) {
      for (OperationStateEnum b : OperationStateEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<OperationStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OperationStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OperationStateEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return OperationStateEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("operation_state")
  private OperationStateEnum operationState = null;

  @SerializedName("logical_counters")
  private TraceflowObservationCounters logicalCounters = null;

  @SerializedName("timeout")
  private Long timeout = null;

  @SerializedName("result_overflowed")
  private Boolean resultOverflowed = null;

  @SerializedName("lport_id")
  private String lportId = null;

  @SerializedName("counters")
  private TraceflowObservationCounters counters = null;

  /**
   * The status of the traceflow RPC request. SUCCESS - The traceflow request is sent successfully. TIMEOUT - The traceflow request gets timeout. SOURCE_PORT_NOT_FOUND - The source port of the request cannot be found. DATA_PATH_NOT_READY - The datapath component cannot be ready to receive request. CONNECTION_ERROR - There is connection error on datapath component. UNKNOWN - The status of traceflow request cannot be determined.
   */
  @JsonAdapter(RequestStatusEnum.Adapter.class)
  public enum RequestStatusEnum {
    SUCCESS("SUCCESS"),
    TIMEOUT("TIMEOUT"),
    SOURCE_PORT_NOT_FOUND("SOURCE_PORT_NOT_FOUND"),
    DATA_PATH_NOT_READY("DATA_PATH_NOT_READY"),
    CONNECTION_ERROR("CONNECTION_ERROR"),
    UNKNOWN("UNKNOWN");

    private String value;

    RequestStatusEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static RequestStatusEnum fromValue(String text) {
      for (RequestStatusEnum b : RequestStatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<RequestStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RequestStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RequestStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return RequestStatusEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("request_status")
  private RequestStatusEnum requestStatus = null;

  @SerializedName("analysis")
  private List<String> analysis = null;

  @SerializedName("id")
  private String id = null;

   /**
   * Represents the traceflow operation state
   * @return operationState
  **/
  @Schema(description = "Represents the traceflow operation state")
  public OperationStateEnum getOperationState() {
    return operationState;
  }

  public Traceflow logicalCounters(TraceflowObservationCounters logicalCounters) {
    this.logicalCounters = logicalCounters;
    return this;
  }

   /**
   * Get logicalCounters
   * @return logicalCounters
  **/
  @Schema(description = "")
  public TraceflowObservationCounters getLogicalCounters() {
    return logicalCounters;
  }

  public void setLogicalCounters(TraceflowObservationCounters logicalCounters) {
    this.logicalCounters = logicalCounters;
  }

   /**
   * Maximum time (in ms) the management plane will be waiting for this traceflow round.
   * minimum: 5000
   * maximum: 15000
   * @return timeout
  **/
  @Schema(description = "Maximum time (in ms) the management plane will be waiting for this traceflow round.")
  public Long getTimeout() {
    return timeout;
  }

   /**
   * A flag, when set true, indicates some observations were deleted from the result set.
   * @return resultOverflowed
  **/
  @Schema(description = "A flag, when set true, indicates some observations were deleted from the result set.")
  public Boolean isResultOverflowed() {
    return resultOverflowed;
  }

   /**
   * id of the source logical port used for injecting the traceflow packet
   * @return lportId
  **/
  @Schema(description = "id of the source logical port used for injecting the traceflow packet")
  public String getLportId() {
    return lportId;
  }

  public Traceflow counters(TraceflowObservationCounters counters) {
    this.counters = counters;
    return this;
  }

   /**
   * Get counters
   * @return counters
  **/
  @Schema(description = "")
  public TraceflowObservationCounters getCounters() {
    return counters;
  }

  public void setCounters(TraceflowObservationCounters counters) {
    this.counters = counters;
  }

   /**
   * The status of the traceflow RPC request. SUCCESS - The traceflow request is sent successfully. TIMEOUT - The traceflow request gets timeout. SOURCE_PORT_NOT_FOUND - The source port of the request cannot be found. DATA_PATH_NOT_READY - The datapath component cannot be ready to receive request. CONNECTION_ERROR - There is connection error on datapath component. UNKNOWN - The status of traceflow request cannot be determined.
   * @return requestStatus
  **/
  @Schema(description = "The status of the traceflow RPC request. SUCCESS - The traceflow request is sent successfully. TIMEOUT - The traceflow request gets timeout. SOURCE_PORT_NOT_FOUND - The source port of the request cannot be found. DATA_PATH_NOT_READY - The datapath component cannot be ready to receive request. CONNECTION_ERROR - There is connection error on datapath component. UNKNOWN - The status of traceflow request cannot be determined.")
  public RequestStatusEnum getRequestStatus() {
    return requestStatus;
  }

   /**
   * Traceflow result analysis notes
   * @return analysis
  **/
  @Schema(description = "Traceflow result analysis notes")
  public List<String> getAnalysis() {
    return analysis;
  }

   /**
   * The id of the traceflow round
   * @return id
  **/
  @Schema(description = "The id of the traceflow round")
  public String getId() {
    return id;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Traceflow traceflow = (Traceflow) o;
    return Objects.equals(this.operationState, traceflow.operationState) &&
        Objects.equals(this.logicalCounters, traceflow.logicalCounters) &&
        Objects.equals(this.timeout, traceflow.timeout) &&
        Objects.equals(this.resultOverflowed, traceflow.resultOverflowed) &&
        Objects.equals(this.lportId, traceflow.lportId) &&
        Objects.equals(this.counters, traceflow.counters) &&
        Objects.equals(this.requestStatus, traceflow.requestStatus) &&
        Objects.equals(this.analysis, traceflow.analysis) &&
        Objects.equals(this.id, traceflow.id) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(operationState, logicalCounters, timeout, resultOverflowed, lportId, counters, requestStatus, analysis, id, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Traceflow {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    operationState: ").append(toIndentedString(operationState)).append("\n");
    sb.append("    logicalCounters: ").append(toIndentedString(logicalCounters)).append("\n");
    sb.append("    timeout: ").append(toIndentedString(timeout)).append("\n");
    sb.append("    resultOverflowed: ").append(toIndentedString(resultOverflowed)).append("\n");
    sb.append("    lportId: ").append(toIndentedString(lportId)).append("\n");
    sb.append("    counters: ").append(toIndentedString(counters)).append("\n");
    sb.append("    requestStatus: ").append(toIndentedString(requestStatus)).append("\n");
    sb.append("    analysis: ").append(toIndentedString(analysis)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
