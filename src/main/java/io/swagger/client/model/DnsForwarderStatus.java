/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * The current runtime status of the DNS forwarder including the hosting transport nodes and forwarder service status. 
 */
@Schema(description = "The current runtime status of the DNS forwarder including the hosting transport nodes and forwarder service status. ")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class DnsForwarderStatus {
  /**
   * UP means the DNS forwarder is working correctly on the active transport node and the stand-by transport node (if present). Failover will occur if either node goes down. DOWN means the DNS forwarder is down on both active transport node and standby node (if present). The DNS forwarder does not function in this situation. Error means there is some error on one or both transport node, or no status was reported from one or both transport nodes. The dns forwarder may be working (or not working). NO_BACKUP means dns forwarder is working in only one transport node, either because it is down on the standby node, or no standby is configured. An forwarder outage will occur if the active node goes down. 
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    UP("UP"),
    DOWN("DOWN"),
    ERROR("ERROR"),
    NO_BACKUP("NO_BACKUP");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static StatusEnum fromValue(String text) {
      for (StatusEnum b : StatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StatusEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("status")
  private StatusEnum status = null;

  @SerializedName("timestamp")
  private Long timestamp = null;

  @SerializedName("standby_node")
  private String standbyNode = null;

  @SerializedName("extra_message")
  private String extraMessage = null;

  @SerializedName("active_node")
  private String activeNode = null;

   /**
   * UP means the DNS forwarder is working correctly on the active transport node and the stand-by transport node (if present). Failover will occur if either node goes down. DOWN means the DNS forwarder is down on both active transport node and standby node (if present). The DNS forwarder does not function in this situation. Error means there is some error on one or both transport node, or no status was reported from one or both transport nodes. The dns forwarder may be working (or not working). NO_BACKUP means dns forwarder is working in only one transport node, either because it is down on the standby node, or no standby is configured. An forwarder outage will occur if the active node goes down. 
   * @return status
  **/
  @Schema(description = "UP means the DNS forwarder is working correctly on the active transport node and the stand-by transport node (if present). Failover will occur if either node goes down. DOWN means the DNS forwarder is down on both active transport node and standby node (if present). The DNS forwarder does not function in this situation. Error means there is some error on one or both transport node, or no status was reported from one or both transport nodes. The dns forwarder may be working (or not working). NO_BACKUP means dns forwarder is working in only one transport node, either because it is down on the standby node, or no standby is configured. An forwarder outage will occur if the active node goes down. ")
  public StatusEnum getStatus() {
    return status;
  }

   /**
   * Time stamp of the current status, in ms
   * @return timestamp
  **/
  @Schema(description = "Time stamp of the current status, in ms")
  public Long getTimestamp() {
    return timestamp;
  }

   /**
   * Uuid of stand_by transport node. null if non-HA mode
   * @return standbyNode
  **/
  @Schema(description = "Uuid of stand_by transport node. null if non-HA mode")
  public String getStandbyNode() {
    return standbyNode;
  }

   /**
   * Extra message, if available
   * @return extraMessage
  **/
  @Schema(description = "Extra message, if available")
  public String getExtraMessage() {
    return extraMessage;
  }

   /**
   * Uuid of active transport node
   * @return activeNode
  **/
  @Schema(description = "Uuid of active transport node")
  public String getActiveNode() {
    return activeNode;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DnsForwarderStatus dnsForwarderStatus = (DnsForwarderStatus) o;
    return Objects.equals(this.status, dnsForwarderStatus.status) &&
        Objects.equals(this.timestamp, dnsForwarderStatus.timestamp) &&
        Objects.equals(this.standbyNode, dnsForwarderStatus.standbyNode) &&
        Objects.equals(this.extraMessage, dnsForwarderStatus.extraMessage) &&
        Objects.equals(this.activeNode, dnsForwarderStatus.activeNode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(status, timestamp, standbyNode, extraMessage, activeNode);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DnsForwarderStatus {\n");
    
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    standbyNode: ").append(toIndentedString(standbyNode)).append("\n");
    sb.append("    extraMessage: ").append(toIndentedString(extraMessage)).append("\n");
    sb.append("    activeNode: ").append(toIndentedString(activeNode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
