/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * This entity represents the flow parameters which are exported. 
 */
@Schema(description = "This entity represents the flow parameters which are exported. ")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class IpfixDfwTemplateParameters {
  @SerializedName("source_icmp_type")
  private Boolean sourceIcmpType = true;

  @SerializedName("icmp_code")
  private Boolean icmpCode = true;

  @SerializedName("destination_transport_port")
  private Boolean destinationTransportPort = true;

  @SerializedName("octet_delta_count")
  private Boolean octetDeltaCount = true;

  @SerializedName("vif_uuid")
  private Boolean vifUuid = true;

  @SerializedName("protocol_identifier")
  private Boolean protocolIdentifier = true;

  @SerializedName("firewall_event")
  private Boolean firewallEvent = true;

  @SerializedName("flow_direction")
  private Boolean flowDirection = true;

  @SerializedName("flow_end")
  private Boolean flowEnd = true;

  @SerializedName("source_transport_port")
  private Boolean sourceTransportPort = true;

  @SerializedName("packet_delta_count")
  private Boolean packetDeltaCount = true;

  @SerializedName("destination_address")
  private Boolean destinationAddress = true;

  @SerializedName("source_address")
  private Boolean sourceAddress = true;

  @SerializedName("rule_id")
  private Boolean ruleId = true;

  @SerializedName("flow_start")
  private Boolean flowStart = true;

   /**
   * Type of the IPv4 ICMP message. 
   * @return sourceIcmpType
  **/
  @Schema(description = "Type of the IPv4 ICMP message. ")
  public Boolean isSourceIcmpType() {
    return sourceIcmpType;
  }

   /**
   * Code of the IPv4 ICMP message. 
   * @return icmpCode
  **/
  @Schema(description = "Code of the IPv4 ICMP message. ")
  public Boolean isIcmpCode() {
    return icmpCode;
  }

   /**
   * The destination transport port of a monitored network flow. 
   * @return destinationTransportPort
  **/
  @Schema(description = "The destination transport port of a monitored network flow. ")
  public Boolean isDestinationTransportPort() {
    return destinationTransportPort;
  }

   /**
   * The number of octets since the previous report (if any) in incoming packets for this flow at the observation point. The number of octets include IP header(s) and payload. 
   * @return octetDeltaCount
  **/
  @Schema(description = "The number of octets since the previous report (if any) in incoming packets for this flow at the observation point. The number of octets include IP header(s) and payload. ")
  public Boolean isOctetDeltaCount() {
    return octetDeltaCount;
  }

   /**
   * VIF UUID - enterprise specific Information Element that uniquely identifies VIF. 
   * @return vifUuid
  **/
  @Schema(description = "VIF UUID - enterprise specific Information Element that uniquely identifies VIF. ")
  public Boolean isVifUuid() {
    return vifUuid;
  }

   /**
   * The value of the protocol number in the IP packet header. 
   * @return protocolIdentifier
  **/
  @Schema(description = "The value of the protocol number in the IP packet header. ")
  public Boolean isProtocolIdentifier() {
    return protocolIdentifier;
  }

   /**
   * Five valid values are allowed: 1. Flow Created. 2. Flow Deleted. 3. Flow Denied. 4. Flow Alert (not used in DropKick implementation). 5. Flow Update. 
   * @return firewallEvent
  **/
  @Schema(description = "Five valid values are allowed: 1. Flow Created. 2. Flow Deleted. 3. Flow Denied. 4. Flow Alert (not used in DropKick implementation). 5. Flow Update. ")
  public Boolean isFirewallEvent() {
    return firewallEvent;
  }

   /**
   * Two valid values are allowed: 1. 0x00: igress flow to VM. 2. 0x01: egress flow from VM. 
   * @return flowDirection
  **/
  @Schema(description = "Two valid values are allowed: 1. 0x00: igress flow to VM. 2. 0x01: egress flow from VM. ")
  public Boolean isFlowDirection() {
    return flowDirection;
  }

   /**
   * The absolute timestamp (seconds) of the last packet of this flow. 
   * @return flowEnd
  **/
  @Schema(description = "The absolute timestamp (seconds) of the last packet of this flow. ")
  public Boolean isFlowEnd() {
    return flowEnd;
  }

   /**
   * The source transport port of a monitored network flow. 
   * @return sourceTransportPort
  **/
  @Schema(description = "The source transport port of a monitored network flow. ")
  public Boolean isSourceTransportPort() {
    return sourceTransportPort;
  }

   /**
   * The number of incoming packets since the previous report (if any) for this flow at the observation point. 
   * @return packetDeltaCount
  **/
  @Schema(description = "The number of incoming packets since the previous report (if any) for this flow at the observation point. ")
  public Boolean isPacketDeltaCount() {
    return packetDeltaCount;
  }

   /**
   * The destination IP address of a monitored network flow. 
   * @return destinationAddress
  **/
  @Schema(description = "The destination IP address of a monitored network flow. ")
  public Boolean isDestinationAddress() {
    return destinationAddress;
  }

   /**
   * The source IP address of a monitored network flow. 
   * @return sourceAddress
  **/
  @Schema(description = "The source IP address of a monitored network flow. ")
  public Boolean isSourceAddress() {
    return sourceAddress;
  }

   /**
   * Firewall rule Id - enterprise specific Information Element that uniquely identifies firewall rule. 
   * @return ruleId
  **/
  @Schema(description = "Firewall rule Id - enterprise specific Information Element that uniquely identifies firewall rule. ")
  public Boolean isRuleId() {
    return ruleId;
  }

   /**
   * The absolute timestamp (seconds) of the first packet of this flow. 
   * @return flowStart
  **/
  @Schema(description = "The absolute timestamp (seconds) of the first packet of this flow. ")
  public Boolean isFlowStart() {
    return flowStart;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IpfixDfwTemplateParameters ipfixDfwTemplateParameters = (IpfixDfwTemplateParameters) o;
    return Objects.equals(this.sourceIcmpType, ipfixDfwTemplateParameters.sourceIcmpType) &&
        Objects.equals(this.icmpCode, ipfixDfwTemplateParameters.icmpCode) &&
        Objects.equals(this.destinationTransportPort, ipfixDfwTemplateParameters.destinationTransportPort) &&
        Objects.equals(this.octetDeltaCount, ipfixDfwTemplateParameters.octetDeltaCount) &&
        Objects.equals(this.vifUuid, ipfixDfwTemplateParameters.vifUuid) &&
        Objects.equals(this.protocolIdentifier, ipfixDfwTemplateParameters.protocolIdentifier) &&
        Objects.equals(this.firewallEvent, ipfixDfwTemplateParameters.firewallEvent) &&
        Objects.equals(this.flowDirection, ipfixDfwTemplateParameters.flowDirection) &&
        Objects.equals(this.flowEnd, ipfixDfwTemplateParameters.flowEnd) &&
        Objects.equals(this.sourceTransportPort, ipfixDfwTemplateParameters.sourceTransportPort) &&
        Objects.equals(this.packetDeltaCount, ipfixDfwTemplateParameters.packetDeltaCount) &&
        Objects.equals(this.destinationAddress, ipfixDfwTemplateParameters.destinationAddress) &&
        Objects.equals(this.sourceAddress, ipfixDfwTemplateParameters.sourceAddress) &&
        Objects.equals(this.ruleId, ipfixDfwTemplateParameters.ruleId) &&
        Objects.equals(this.flowStart, ipfixDfwTemplateParameters.flowStart);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sourceIcmpType, icmpCode, destinationTransportPort, octetDeltaCount, vifUuid, protocolIdentifier, firewallEvent, flowDirection, flowEnd, sourceTransportPort, packetDeltaCount, destinationAddress, sourceAddress, ruleId, flowStart);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IpfixDfwTemplateParameters {\n");
    
    sb.append("    sourceIcmpType: ").append(toIndentedString(sourceIcmpType)).append("\n");
    sb.append("    icmpCode: ").append(toIndentedString(icmpCode)).append("\n");
    sb.append("    destinationTransportPort: ").append(toIndentedString(destinationTransportPort)).append("\n");
    sb.append("    octetDeltaCount: ").append(toIndentedString(octetDeltaCount)).append("\n");
    sb.append("    vifUuid: ").append(toIndentedString(vifUuid)).append("\n");
    sb.append("    protocolIdentifier: ").append(toIndentedString(protocolIdentifier)).append("\n");
    sb.append("    firewallEvent: ").append(toIndentedString(firewallEvent)).append("\n");
    sb.append("    flowDirection: ").append(toIndentedString(flowDirection)).append("\n");
    sb.append("    flowEnd: ").append(toIndentedString(flowEnd)).append("\n");
    sb.append("    sourceTransportPort: ").append(toIndentedString(sourceTransportPort)).append("\n");
    sb.append("    packetDeltaCount: ").append(toIndentedString(packetDeltaCount)).append("\n");
    sb.append("    destinationAddress: ").append(toIndentedString(destinationAddress)).append("\n");
    sb.append("    sourceAddress: ").append(toIndentedString(sourceAddress)).append("\n");
    sb.append("    ruleId: ").append(toIndentedString(ruleId)).append("\n");
    sb.append("    flowStart: ").append(toIndentedString(flowStart)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
