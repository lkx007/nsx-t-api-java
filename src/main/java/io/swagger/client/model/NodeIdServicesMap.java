/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * NodeIdServicesMap
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class NodeIdServicesMap {
  /**
   * Supported service types, that are using certificates.
   */
  @JsonAdapter(ServiceTypesEnum.Adapter.class)
  public enum ServiceTypesEnum {
    MGMT_CLUSTER("MGMT_CLUSTER"),
    MGMT_PLANE("MGMT_PLANE"),
    API("API"),
    NOTIFICATION_COLLECTOR("NOTIFICATION_COLLECTOR"),
    SYSLOG_SERVER("SYSLOG_SERVER"),
    RSYSLOG_CLIENT("RSYSLOG_CLIENT");

    private String value;

    ServiceTypesEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ServiceTypesEnum fromValue(String text) {
      for (ServiceTypesEnum b : ServiceTypesEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ServiceTypesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ServiceTypesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ServiceTypesEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ServiceTypesEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("service_types")
  private List<ServiceTypesEnum> serviceTypes = new ArrayList<ServiceTypesEnum>();

  @SerializedName("node_id")
  private String nodeId = null;

  public NodeIdServicesMap serviceTypes(List<ServiceTypesEnum> serviceTypes) {
    this.serviceTypes = serviceTypes;
    return this;
  }

  public NodeIdServicesMap addServiceTypesItem(ServiceTypesEnum serviceTypesItem) {
    this.serviceTypes.add(serviceTypesItem);
    return this;
  }

   /**
   * list of ServiceTypes
   * @return serviceTypes
  **/
  @Schema(required = true, description = "list of ServiceTypes")
  public List<ServiceTypesEnum> getServiceTypes() {
    return serviceTypes;
  }

  public void setServiceTypes(List<ServiceTypesEnum> serviceTypes) {
    this.serviceTypes = serviceTypes;
  }

  public NodeIdServicesMap nodeId(String nodeId) {
    this.nodeId = nodeId;
    return this;
  }

   /**
   * NodeId
   * @return nodeId
  **/
  @Schema(required = true, description = "NodeId")
  public String getNodeId() {
    return nodeId;
  }

  public void setNodeId(String nodeId) {
    this.nodeId = nodeId;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NodeIdServicesMap nodeIdServicesMap = (NodeIdServicesMap) o;
    return Objects.equals(this.serviceTypes, nodeIdServicesMap.serviceTypes) &&
        Objects.equals(this.nodeId, nodeIdServicesMap.nodeId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(serviceTypes, nodeId);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NodeIdServicesMap {\n");
    
    sb.append("    serviceTypes: ").append(toIndentedString(serviceTypes)).append("\n");
    sb.append("    nodeId: ").append(toIndentedString(nodeId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
