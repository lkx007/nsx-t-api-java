/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * MigrationPlanSettings
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class MigrationPlanSettings {
  @SerializedName("pause_after_each_group")
  private Boolean pauseAfterEachGroup = false;

  @SerializedName("pause_on_error")
  private Boolean pauseOnError = false;

  @SerializedName("parallel")
  private Boolean parallel = true;

  public MigrationPlanSettings pauseAfterEachGroup(Boolean pauseAfterEachGroup) {
    this.pauseAfterEachGroup = pauseAfterEachGroup;
    return this;
  }

   /**
   * Flag to indicate whether to pause the migration after migration of each group is completed
   * @return pauseAfterEachGroup
  **/
  @Schema(description = "Flag to indicate whether to pause the migration after migration of each group is completed")
  public Boolean isPauseAfterEachGroup() {
    return pauseAfterEachGroup;
  }

  public void setPauseAfterEachGroup(Boolean pauseAfterEachGroup) {
    this.pauseAfterEachGroup = pauseAfterEachGroup;
  }

  public MigrationPlanSettings pauseOnError(Boolean pauseOnError) {
    this.pauseOnError = pauseOnError;
    return this;
  }

   /**
   * Flag to indicate whether to pause the migration plan execution when an error occurs
   * @return pauseOnError
  **/
  @Schema(description = "Flag to indicate whether to pause the migration plan execution when an error occurs")
  public Boolean isPauseOnError() {
    return pauseOnError;
  }

  public void setPauseOnError(Boolean pauseOnError) {
    this.pauseOnError = pauseOnError;
  }

  public MigrationPlanSettings parallel(Boolean parallel) {
    this.parallel = parallel;
    return this;
  }

   /**
   * Migration Method to specify whether the migration is to be performed serially or in parallel
   * @return parallel
  **/
  @Schema(description = "Migration Method to specify whether the migration is to be performed serially or in parallel")
  public Boolean isParallel() {
    return parallel;
  }

  public void setParallel(Boolean parallel) {
    this.parallel = parallel;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MigrationPlanSettings migrationPlanSettings = (MigrationPlanSettings) o;
    return Objects.equals(this.pauseAfterEachGroup, migrationPlanSettings.pauseAfterEachGroup) &&
        Objects.equals(this.pauseOnError, migrationPlanSettings.pauseOnError) &&
        Objects.equals(this.parallel, migrationPlanSettings.parallel);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pauseAfterEachGroup, pauseOnError, parallel);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MigrationPlanSettings {\n");
    
    sb.append("    pauseAfterEachGroup: ").append(toIndentedString(pauseAfterEachGroup)).append("\n");
    sb.append("    pauseOnError: ").append(toIndentedString(pauseOnError)).append("\n");
    sb.append("    parallel: ").append(toIndentedString(parallel)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
