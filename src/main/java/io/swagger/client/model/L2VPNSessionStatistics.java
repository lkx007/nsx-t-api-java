/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.L2VPNPerLSTrafficStatistics;
import io.swagger.client.model.L2VPNTapTrafficStatistics;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * Session statistics gives VPN session status and traffic statistics per logical switch.
 */
@Schema(description = "Session statistics gives VPN session status and traffic statistics per logical switch.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class L2VPNSessionStatistics {
  @SerializedName("traffic_statistics_per_logical_switch")
  private List<L2VPNPerLSTrafficStatistics> trafficStatisticsPerLogicalSwitch = null;

  @SerializedName("display_name")
  private String displayName = null;

  @SerializedName("partial_stats")
  private Boolean partialStats = null;

  @SerializedName("session_id")
  private String sessionId = null;

  @SerializedName("tap_traffic_counters")
  private List<L2VPNTapTrafficStatistics> tapTrafficCounters = null;

   /**
   * Traffic statistics per logical switch.
   * @return trafficStatisticsPerLogicalSwitch
  **/
  @Schema(description = "Traffic statistics per logical switch.")
  public List<L2VPNPerLSTrafficStatistics> getTrafficStatisticsPerLogicalSwitch() {
    return trafficStatisticsPerLogicalSwitch;
  }

   /**
   * L2VPN display name.
   * @return displayName
  **/
  @Schema(description = "L2VPN display name.")
  public String getDisplayName() {
    return displayName;
  }

   /**
   * Partial statistics is set to true if onle active node responds while standby does not. In case of both nodes responded statistics will be summed and partial stats will be false. If cluster has only active node, partial statistics will always be false.
   * @return partialStats
  **/
  @Schema(description = "Partial statistics is set to true if onle active node responds while standby does not. In case of both nodes responded statistics will be summed and partial stats will be false. If cluster has only active node, partial statistics will always be false.")
  public Boolean isPartialStats() {
    return partialStats;
  }

   /**
   * Session identifier for L2VPN.
   * @return sessionId
  **/
  @Schema(description = "Session identifier for L2VPN.")
  public String getSessionId() {
    return sessionId;
  }

   /**
   * Tunnel port traffic counters.
   * @return tapTrafficCounters
  **/
  @Schema(description = "Tunnel port traffic counters.")
  public List<L2VPNTapTrafficStatistics> getTapTrafficCounters() {
    return tapTrafficCounters;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    L2VPNSessionStatistics l2VPNSessionStatistics = (L2VPNSessionStatistics) o;
    return Objects.equals(this.trafficStatisticsPerLogicalSwitch, l2VPNSessionStatistics.trafficStatisticsPerLogicalSwitch) &&
        Objects.equals(this.displayName, l2VPNSessionStatistics.displayName) &&
        Objects.equals(this.partialStats, l2VPNSessionStatistics.partialStats) &&
        Objects.equals(this.sessionId, l2VPNSessionStatistics.sessionId) &&
        Objects.equals(this.tapTrafficCounters, l2VPNSessionStatistics.tapTrafficCounters);
  }

  @Override
  public int hashCode() {
    return Objects.hash(trafficStatisticsPerLogicalSwitch, displayName, partialStats, sessionId, tapTrafficCounters);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class L2VPNSessionStatistics {\n");
    
    sb.append("    trafficStatisticsPerLogicalSwitch: ").append(toIndentedString(trafficStatisticsPerLogicalSwitch)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    partialStats: ").append(toIndentedString(partialStats)).append("\n");
    sb.append("    sessionId: ").append(toIndentedString(sessionId)).append("\n");
    sb.append("    tapTrafficCounters: ").append(toIndentedString(tapTrafficCounters)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
