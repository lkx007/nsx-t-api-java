/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.IntelligenceBrokerEndpointInfo;
import io.swagger.client.model.IntelligenceFlowPrivateIpPrefixInfo;
import io.swagger.client.model.ManagedResource;
import io.swagger.client.model.Tag;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * NSX-Intelligence configuration that can be applied to host nodes. 
 */
@Schema(description = "NSX-Intelligence configuration that can be applied to host nodes. ")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class IntelligenceHostConfigurationInfo extends ManagedResource {
  @SerializedName("context_data_collection_interval")
  private Long contextDataCollectionInterval = null;

  @SerializedName("broker_truststore")
  private String brokerTruststore = null;

  @SerializedName("broker_certificate")
  private String brokerCertificate = null;

  @SerializedName("context_user_uids")
  private List<String> contextUserUids = null;

  @SerializedName("context_process_hashes")
  private List<String> contextProcessHashes = null;

  @SerializedName("enable_data_collection")
  private Boolean enableDataCollection = null;

  @SerializedName("context_process_names")
  private List<String> contextProcessNames = null;

  @SerializedName("private_ip_prefix")
  private List<IntelligenceFlowPrivateIpPrefixInfo> privateIpPrefix = null;

  @SerializedName("broker_bootstrap_servers")
  private List<IntelligenceBrokerEndpointInfo> brokerBootstrapServers = null;

  @SerializedName("max_inactive_flow_count")
  private Long maxInactiveFlowCount = null;

  @SerializedName("context_user_sids")
  private List<String> contextUserSids = null;

  @SerializedName("flow_data_collection_interval")
  private Long flowDataCollectionInterval = null;

  @SerializedName("max_active_flow_count")
  private Long maxActiveFlowCount = null;

  public IntelligenceHostConfigurationInfo contextDataCollectionInterval(Long contextDataCollectionInterval) {
    this.contextDataCollectionInterval = contextDataCollectionInterval;
    return this;
  }

   /**
   * Interval in minute of reporting VM guest context data to NSX-Intelligence. 
   * maximum: 1440
   * @return contextDataCollectionInterval
  **/
  @Schema(description = "Interval in minute of reporting VM guest context data to NSX-Intelligence. ")
  public Long getContextDataCollectionInterval() {
    return contextDataCollectionInterval;
  }

  public void setContextDataCollectionInterval(Long contextDataCollectionInterval) {
    this.contextDataCollectionInterval = contextDataCollectionInterval;
  }

  public IntelligenceHostConfigurationInfo brokerTruststore(String brokerTruststore) {
    this.brokerTruststore = brokerTruststore;
    return this;
  }

   /**
   * A truststore to establish the trust between NSX and NSX-Intelligence brokers. 
   * @return brokerTruststore
  **/
  @Schema(description = "A truststore to establish the trust between NSX and NSX-Intelligence brokers. ")
  public String getBrokerTruststore() {
    return brokerTruststore;
  }

  public void setBrokerTruststore(String brokerTruststore) {
    this.brokerTruststore = brokerTruststore;
  }

  public IntelligenceHostConfigurationInfo brokerCertificate(String brokerCertificate) {
    this.brokerCertificate = brokerCertificate;
    return this;
  }

   /**
   * A broker certificate to verify the identity of brokers. 
   * @return brokerCertificate
  **/
  @Schema(description = "A broker certificate to verify the identity of brokers. ")
  public String getBrokerCertificate() {
    return brokerCertificate;
  }

  public void setBrokerCertificate(String brokerCertificate) {
    this.brokerCertificate = brokerCertificate;
  }

  public IntelligenceHostConfigurationInfo contextUserUids(List<String> contextUserUids) {
    this.contextUserUids = contextUserUids;
    return this;
  }

  public IntelligenceHostConfigurationInfo addContextUserUidsItem(String contextUserUidsItem) {
    if (this.contextUserUids == null) {
      this.contextUserUids = new ArrayList<String>();
    }
    this.contextUserUids.add(contextUserUidsItem);
    return this;
  }

   /**
   * List of linux user uid to collect context data. Empty implies all users. 
   * @return contextUserUids
  **/
  @Schema(description = "List of linux user uid to collect context data. Empty implies all users. ")
  public List<String> getContextUserUids() {
    return contextUserUids;
  }

  public void setContextUserUids(List<String> contextUserUids) {
    this.contextUserUids = contextUserUids;
  }

  public IntelligenceHostConfigurationInfo contextProcessHashes(List<String> contextProcessHashes) {
    this.contextProcessHashes = contextProcessHashes;
    return this;
  }

  public IntelligenceHostConfigurationInfo addContextProcessHashesItem(String contextProcessHashesItem) {
    if (this.contextProcessHashes == null) {
      this.contextProcessHashes = new ArrayList<String>();
    }
    this.contextProcessHashes.add(contextProcessHashesItem);
    return this;
  }

   /**
   * List of hashes of processes to collect context data. Empty implies all processes. 
   * @return contextProcessHashes
  **/
  @Schema(description = "List of hashes of processes to collect context data. Empty implies all processes. ")
  public List<String> getContextProcessHashes() {
    return contextProcessHashes;
  }

  public void setContextProcessHashes(List<String> contextProcessHashes) {
    this.contextProcessHashes = contextProcessHashes;
  }

  public IntelligenceHostConfigurationInfo enableDataCollection(Boolean enableDataCollection) {
    this.enableDataCollection = enableDataCollection;
    return this;
  }

   /**
   * Enable NSX-Intelligence data collection in host nodes. 
   * @return enableDataCollection
  **/
  @Schema(description = "Enable NSX-Intelligence data collection in host nodes. ")
  public Boolean isEnableDataCollection() {
    return enableDataCollection;
  }

  public void setEnableDataCollection(Boolean enableDataCollection) {
    this.enableDataCollection = enableDataCollection;
  }

  public IntelligenceHostConfigurationInfo contextProcessNames(List<String> contextProcessNames) {
    this.contextProcessNames = contextProcessNames;
    return this;
  }

  public IntelligenceHostConfigurationInfo addContextProcessNamesItem(String contextProcessNamesItem) {
    if (this.contextProcessNames == null) {
      this.contextProcessNames = new ArrayList<String>();
    }
    this.contextProcessNames.add(contextProcessNamesItem);
    return this;
  }

   /**
   * List of processes to collect context data. Empty implies all processes. 
   * @return contextProcessNames
  **/
  @Schema(description = "List of processes to collect context data. Empty implies all processes. ")
  public List<String> getContextProcessNames() {
    return contextProcessNames;
  }

  public void setContextProcessNames(List<String> contextProcessNames) {
    this.contextProcessNames = contextProcessNames;
  }

  public IntelligenceHostConfigurationInfo privateIpPrefix(List<IntelligenceFlowPrivateIpPrefixInfo> privateIpPrefix) {
    this.privateIpPrefix = privateIpPrefix;
    return this;
  }

  public IntelligenceHostConfigurationInfo addPrivateIpPrefixItem(IntelligenceFlowPrivateIpPrefixInfo privateIpPrefixItem) {
    if (this.privateIpPrefix == null) {
      this.privateIpPrefix = new ArrayList<IntelligenceFlowPrivateIpPrefixInfo>();
    }
    this.privateIpPrefix.add(privateIpPrefixItem);
    return this;
  }

   /**
   * List of private IP prefix that NSX-Intelligence network flow is collected from. 
   * @return privateIpPrefix
  **/
  @Schema(description = "List of private IP prefix that NSX-Intelligence network flow is collected from. ")
  public List<IntelligenceFlowPrivateIpPrefixInfo> getPrivateIpPrefix() {
    return privateIpPrefix;
  }

  public void setPrivateIpPrefix(List<IntelligenceFlowPrivateIpPrefixInfo> privateIpPrefix) {
    this.privateIpPrefix = privateIpPrefix;
  }

  public IntelligenceHostConfigurationInfo brokerBootstrapServers(List<IntelligenceBrokerEndpointInfo> brokerBootstrapServers) {
    this.brokerBootstrapServers = brokerBootstrapServers;
    return this;
  }

  public IntelligenceHostConfigurationInfo addBrokerBootstrapServersItem(IntelligenceBrokerEndpointInfo brokerBootstrapServersItem) {
    if (this.brokerBootstrapServers == null) {
      this.brokerBootstrapServers = new ArrayList<IntelligenceBrokerEndpointInfo>();
    }
    this.brokerBootstrapServers.add(brokerBootstrapServersItem);
    return this;
  }

   /**
   * List of NSX-Intelligence broker endpoints that host nodes contact initially. 
   * @return brokerBootstrapServers
  **/
  @Schema(description = "List of NSX-Intelligence broker endpoints that host nodes contact initially. ")
  public List<IntelligenceBrokerEndpointInfo> getBrokerBootstrapServers() {
    return brokerBootstrapServers;
  }

  public void setBrokerBootstrapServers(List<IntelligenceBrokerEndpointInfo> brokerBootstrapServers) {
    this.brokerBootstrapServers = brokerBootstrapServers;
  }

  public IntelligenceHostConfigurationInfo maxInactiveFlowCount(Long maxInactiveFlowCount) {
    this.maxInactiveFlowCount = maxInactiveFlowCount;
    return this;
  }

   /**
   * Maximum inactive network flow to collect in collection interval. 
   * minimum: 1
   * maximum: 5000000
   * @return maxInactiveFlowCount
  **/
  @Schema(description = "Maximum inactive network flow to collect in collection interval. ")
  public Long getMaxInactiveFlowCount() {
    return maxInactiveFlowCount;
  }

  public void setMaxInactiveFlowCount(Long maxInactiveFlowCount) {
    this.maxInactiveFlowCount = maxInactiveFlowCount;
  }

  public IntelligenceHostConfigurationInfo contextUserSids(List<String> contextUserSids) {
    this.contextUserSids = contextUserSids;
    return this;
  }

  public IntelligenceHostConfigurationInfo addContextUserSidsItem(String contextUserSidsItem) {
    if (this.contextUserSids == null) {
      this.contextUserSids = new ArrayList<String>();
    }
    this.contextUserSids.add(contextUserSidsItem);
    return this;
  }

   /**
   * List of windows user sid to collect context data. Empty implies all users. 
   * @return contextUserSids
  **/
  @Schema(description = "List of windows user sid to collect context data. Empty implies all users. ")
  public List<String> getContextUserSids() {
    return contextUserSids;
  }

  public void setContextUserSids(List<String> contextUserSids) {
    this.contextUserSids = contextUserSids;
  }

  public IntelligenceHostConfigurationInfo flowDataCollectionInterval(Long flowDataCollectionInterval) {
    this.flowDataCollectionInterval = flowDataCollectionInterval;
    return this;
  }

   /**
   * Interval in minute of reporting network flow data to NSX-Intelligence. 
   * minimum: 1
   * maximum: 1440
   * @return flowDataCollectionInterval
  **/
  @Schema(description = "Interval in minute of reporting network flow data to NSX-Intelligence. ")
  public Long getFlowDataCollectionInterval() {
    return flowDataCollectionInterval;
  }

  public void setFlowDataCollectionInterval(Long flowDataCollectionInterval) {
    this.flowDataCollectionInterval = flowDataCollectionInterval;
  }

  public IntelligenceHostConfigurationInfo maxActiveFlowCount(Long maxActiveFlowCount) {
    this.maxActiveFlowCount = maxActiveFlowCount;
    return this;
  }

   /**
   * Maximum active network flow to collect in collection interval. 
   * minimum: 1
   * maximum: 5000000
   * @return maxActiveFlowCount
  **/
  @Schema(description = "Maximum active network flow to collect in collection interval. ")
  public Long getMaxActiveFlowCount() {
    return maxActiveFlowCount;
  }

  public void setMaxActiveFlowCount(Long maxActiveFlowCount) {
    this.maxActiveFlowCount = maxActiveFlowCount;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IntelligenceHostConfigurationInfo intelligenceHostConfigurationInfo = (IntelligenceHostConfigurationInfo) o;
    return Objects.equals(this.contextDataCollectionInterval, intelligenceHostConfigurationInfo.contextDataCollectionInterval) &&
        Objects.equals(this.brokerTruststore, intelligenceHostConfigurationInfo.brokerTruststore) &&
        Objects.equals(this.brokerCertificate, intelligenceHostConfigurationInfo.brokerCertificate) &&
        Objects.equals(this.contextUserUids, intelligenceHostConfigurationInfo.contextUserUids) &&
        Objects.equals(this.contextProcessHashes, intelligenceHostConfigurationInfo.contextProcessHashes) &&
        Objects.equals(this.enableDataCollection, intelligenceHostConfigurationInfo.enableDataCollection) &&
        Objects.equals(this.contextProcessNames, intelligenceHostConfigurationInfo.contextProcessNames) &&
        Objects.equals(this.privateIpPrefix, intelligenceHostConfigurationInfo.privateIpPrefix) &&
        Objects.equals(this.brokerBootstrapServers, intelligenceHostConfigurationInfo.brokerBootstrapServers) &&
        Objects.equals(this.maxInactiveFlowCount, intelligenceHostConfigurationInfo.maxInactiveFlowCount) &&
        Objects.equals(this.contextUserSids, intelligenceHostConfigurationInfo.contextUserSids) &&
        Objects.equals(this.flowDataCollectionInterval, intelligenceHostConfigurationInfo.flowDataCollectionInterval) &&
        Objects.equals(this.maxActiveFlowCount, intelligenceHostConfigurationInfo.maxActiveFlowCount) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(contextDataCollectionInterval, brokerTruststore, brokerCertificate, contextUserUids, contextProcessHashes, enableDataCollection, contextProcessNames, privateIpPrefix, brokerBootstrapServers, maxInactiveFlowCount, contextUserSids, flowDataCollectionInterval, maxActiveFlowCount, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IntelligenceHostConfigurationInfo {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    contextDataCollectionInterval: ").append(toIndentedString(contextDataCollectionInterval)).append("\n");
    sb.append("    brokerTruststore: ").append(toIndentedString(brokerTruststore)).append("\n");
    sb.append("    brokerCertificate: ").append(toIndentedString(brokerCertificate)).append("\n");
    sb.append("    contextUserUids: ").append(toIndentedString(contextUserUids)).append("\n");
    sb.append("    contextProcessHashes: ").append(toIndentedString(contextProcessHashes)).append("\n");
    sb.append("    enableDataCollection: ").append(toIndentedString(enableDataCollection)).append("\n");
    sb.append("    contextProcessNames: ").append(toIndentedString(contextProcessNames)).append("\n");
    sb.append("    privateIpPrefix: ").append(toIndentedString(privateIpPrefix)).append("\n");
    sb.append("    brokerBootstrapServers: ").append(toIndentedString(brokerBootstrapServers)).append("\n");
    sb.append("    maxInactiveFlowCount: ").append(toIndentedString(maxInactiveFlowCount)).append("\n");
    sb.append("    contextUserSids: ").append(toIndentedString(contextUserSids)).append("\n");
    sb.append("    flowDataCollectionInterval: ").append(toIndentedString(flowDataCollectionInterval)).append("\n");
    sb.append("    maxActiveFlowCount: ").append(toIndentedString(maxActiveFlowCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
