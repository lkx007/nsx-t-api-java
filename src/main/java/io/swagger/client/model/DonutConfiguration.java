/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.Datasource;
import io.swagger.client.model.DonutSection;
import io.swagger.client.model.Footer;
import io.swagger.client.model.Icon;
import io.swagger.client.model.Label;
import io.swagger.client.model.Legend;
import io.swagger.client.model.WidgetConfiguration;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * Represents configuration of a Donut
 */
@Schema(description = "Represents configuration of a Donut")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class DonutConfiguration extends WidgetConfiguration {
  @SerializedName("navigation")
  private String navigation = null;

  @SerializedName("display_count")
  private Boolean displayCount = true;

  @SerializedName("sections")
  private List<DonutSection> sections = new ArrayList<DonutSection>();

  @SerializedName("label")
  private Label label = null;

  public DonutConfiguration navigation(String navigation) {
    this.navigation = navigation;
    return this;
  }

   /**
   * Hyperlink of the specified UI page that provides details.
   * @return navigation
  **/
  @Schema(description = "Hyperlink of the specified UI page that provides details.")
  public String getNavigation() {
    return navigation;
  }

  public void setNavigation(String navigation) {
    this.navigation = navigation;
  }

  public DonutConfiguration displayCount(Boolean displayCount) {
    this.displayCount = displayCount;
    return this;
  }

   /**
   * If true, displays the count of entities in the donut
   * @return displayCount
  **/
  @Schema(description = "If true, displays the count of entities in the donut")
  public Boolean isDisplayCount() {
    return displayCount;
  }

  public void setDisplayCount(Boolean displayCount) {
    this.displayCount = displayCount;
  }

  public DonutConfiguration sections(List<DonutSection> sections) {
    this.sections = sections;
    return this;
  }

  public DonutConfiguration addSectionsItem(DonutSection sectionsItem) {
    this.sections.add(sectionsItem);
    return this;
  }

   /**
   * Sections
   * @return sections
  **/
  @Schema(required = true, description = "Sections")
  public List<DonutSection> getSections() {
    return sections;
  }

  public void setSections(List<DonutSection> sections) {
    this.sections = sections;
  }

  public DonutConfiguration label(Label label) {
    this.label = label;
    return this;
  }

   /**
   * Get label
   * @return label
  **/
  @Schema(description = "")
  public Label getLabel() {
    return label;
  }

  public void setLabel(Label label) {
    this.label = label;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DonutConfiguration donutConfiguration = (DonutConfiguration) o;
    return Objects.equals(this.navigation, donutConfiguration.navigation) &&
        Objects.equals(this.displayCount, donutConfiguration.displayCount) &&
        Objects.equals(this.sections, donutConfiguration.sections) &&
        Objects.equals(this.label, donutConfiguration.label) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(navigation, displayCount, sections, label, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DonutConfiguration {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    navigation: ").append(toIndentedString(navigation)).append("\n");
    sb.append("    displayCount: ").append(toIndentedString(displayCount)).append("\n");
    sb.append("    sections: ").append(toIndentedString(sections)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
