/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.NSGroupExpression;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * Includes both scope and tag attribute of Tag. The scope and tag expressions are logically &#x27;AND&#x27; with each other. eg- tag.scope &#x3D; \&quot;S1\&quot; AND tag.tag &#x3D; &#x27;T1&#x27; 
 */
@Schema(description = "Includes both scope and tag attribute of Tag. The scope and tag expressions are logically 'AND' with each other. eg- tag.scope = \"S1\" AND tag.tag = 'T1' ")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class NSGroupTagExpression extends NSGroupExpression {
  /**
   * Target_type VirtualMachine supports all specified operators for tag expression while LogicalSwitch and LogicalPort supports only EQUALS operator. 
   */
  @JsonAdapter(TagOpEnum.Adapter.class)
  public enum TagOpEnum {
    EQUALS("EQUALS"),
    CONTAINS("CONTAINS"),
    STARTSWITH("STARTSWITH"),
    ENDSWITH("ENDSWITH");

    private String value;

    TagOpEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static TagOpEnum fromValue(String text) {
      for (TagOpEnum b : TagOpEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<TagOpEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TagOpEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TagOpEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TagOpEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("tag_op")
  private TagOpEnum tagOp = TagOpEnum.EQUALS;

  @SerializedName("scope")
  private String scope = null;

  /**
   * Operator of the scope expression eg- tag.scope &#x3D; \&quot;S1\&quot;.
   */
  @JsonAdapter(ScopeOpEnum.Adapter.class)
  public enum ScopeOpEnum {
    EQUALS("EQUALS");

    private String value;

    ScopeOpEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ScopeOpEnum fromValue(String text) {
      for (ScopeOpEnum b : ScopeOpEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ScopeOpEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ScopeOpEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ScopeOpEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ScopeOpEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("scope_op")
  private ScopeOpEnum scopeOp = ScopeOpEnum.EQUALS;

  @SerializedName("tag")
  private String tag = null;

  /**
   * Type of the resource on which this expression is evaluated
   */
  @JsonAdapter(TargetTypeEnum.Adapter.class)
  public enum TargetTypeEnum {
    LOGICALSWITCH("LogicalSwitch"),
    LOGICALPORT("LogicalPort"),
    VIRTUALMACHINE("VirtualMachine"),
    IPSET("IPSet");

    private String value;

    TargetTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static TargetTypeEnum fromValue(String text) {
      for (TargetTypeEnum b : TargetTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<TargetTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TargetTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TargetTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TargetTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("target_type")
  private TargetTypeEnum targetType = null;

  public NSGroupTagExpression tagOp(TagOpEnum tagOp) {
    this.tagOp = tagOp;
    return this;
  }

   /**
   * Target_type VirtualMachine supports all specified operators for tag expression while LogicalSwitch and LogicalPort supports only EQUALS operator. 
   * @return tagOp
  **/
  @Schema(description = "Target_type VirtualMachine supports all specified operators for tag expression while LogicalSwitch and LogicalPort supports only EQUALS operator. ")
  public TagOpEnum getTagOp() {
    return tagOp;
  }

  public void setTagOp(TagOpEnum tagOp) {
    this.tagOp = tagOp;
  }

  public NSGroupTagExpression scope(String scope) {
    this.scope = scope;
    return this;
  }

   /**
   * The tag.scope attribute of the object
   * @return scope
  **/
  @Schema(description = "The tag.scope attribute of the object")
  public String getScope() {
    return scope;
  }

  public void setScope(String scope) {
    this.scope = scope;
  }

  public NSGroupTagExpression scopeOp(ScopeOpEnum scopeOp) {
    this.scopeOp = scopeOp;
    return this;
  }

   /**
   * Operator of the scope expression eg- tag.scope &#x3D; \&quot;S1\&quot;.
   * @return scopeOp
  **/
  @Schema(description = "Operator of the scope expression eg- tag.scope = \"S1\".")
  public ScopeOpEnum getScopeOp() {
    return scopeOp;
  }

  public void setScopeOp(ScopeOpEnum scopeOp) {
    this.scopeOp = scopeOp;
  }

  public NSGroupTagExpression tag(String tag) {
    this.tag = tag;
    return this;
  }

   /**
   * The tag.tag attribute of the object
   * @return tag
  **/
  @Schema(description = "The tag.tag attribute of the object")
  public String getTag() {
    return tag;
  }

  public void setTag(String tag) {
    this.tag = tag;
  }

  public NSGroupTagExpression targetType(TargetTypeEnum targetType) {
    this.targetType = targetType;
    return this;
  }

   /**
   * Type of the resource on which this expression is evaluated
   * @return targetType
  **/
  @Schema(required = true, description = "Type of the resource on which this expression is evaluated")
  public TargetTypeEnum getTargetType() {
    return targetType;
  }

  public void setTargetType(TargetTypeEnum targetType) {
    this.targetType = targetType;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NSGroupTagExpression nsGroupTagExpression = (NSGroupTagExpression) o;
    return Objects.equals(this.tagOp, nsGroupTagExpression.tagOp) &&
        Objects.equals(this.scope, nsGroupTagExpression.scope) &&
        Objects.equals(this.scopeOp, nsGroupTagExpression.scopeOp) &&
        Objects.equals(this.tag, nsGroupTagExpression.tag) &&
        Objects.equals(this.targetType, nsGroupTagExpression.targetType) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(tagOp, scope, scopeOp, tag, targetType, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NSGroupTagExpression {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    tagOp: ").append(toIndentedString(tagOp)).append("\n");
    sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
    sb.append("    scopeOp: ").append(toIndentedString(scopeOp)).append("\n");
    sb.append("    tag: ").append(toIndentedString(tag)).append("\n");
    sb.append("    targetType: ").append(toIndentedString(targetType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
