/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.IPv4DhcpServer;
import io.swagger.client.model.ManagedResource;
import io.swagger.client.model.Tag;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.List;
/**
 * Definition of a logical DHCP server which can be attached a logical switch via a logical port. 
 */
@Schema(description = "Definition of a logical DHCP server which can be attached a logical switch via a logical port. ")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class LogicalDhcpServer extends ManagedResource {
  @SerializedName("attached_logical_port_id")
  private String attachedLogicalPortId = null;

  @SerializedName("ipv4_dhcp_server")
  private IPv4DhcpServer ipv4DhcpServer = null;

  @SerializedName("dhcp_profile_id")
  private String dhcpProfileId = null;

   /**
   * The uuid of the attached logical port. Read only.
   * @return attachedLogicalPortId
  **/
  @Schema(description = "The uuid of the attached logical port. Read only.")
  public String getAttachedLogicalPortId() {
    return attachedLogicalPortId;
  }

  public LogicalDhcpServer ipv4DhcpServer(IPv4DhcpServer ipv4DhcpServer) {
    this.ipv4DhcpServer = ipv4DhcpServer;
    return this;
  }

   /**
   * Get ipv4DhcpServer
   * @return ipv4DhcpServer
  **/
  @Schema(required = true, description = "")
  public IPv4DhcpServer getIpv4DhcpServer() {
    return ipv4DhcpServer;
  }

  public void setIpv4DhcpServer(IPv4DhcpServer ipv4DhcpServer) {
    this.ipv4DhcpServer = ipv4DhcpServer;
  }

  public LogicalDhcpServer dhcpProfileId(String dhcpProfileId) {
    this.dhcpProfileId = dhcpProfileId;
    return this;
  }

   /**
   * The DHCP profile uuid the logical DHCP server references.
   * @return dhcpProfileId
  **/
  @Schema(required = true, description = "The DHCP profile uuid the logical DHCP server references.")
  public String getDhcpProfileId() {
    return dhcpProfileId;
  }

  public void setDhcpProfileId(String dhcpProfileId) {
    this.dhcpProfileId = dhcpProfileId;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LogicalDhcpServer logicalDhcpServer = (LogicalDhcpServer) o;
    return Objects.equals(this.attachedLogicalPortId, logicalDhcpServer.attachedLogicalPortId) &&
        Objects.equals(this.ipv4DhcpServer, logicalDhcpServer.ipv4DhcpServer) &&
        Objects.equals(this.dhcpProfileId, logicalDhcpServer.dhcpProfileId) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attachedLogicalPortId, ipv4DhcpServer, dhcpProfileId, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LogicalDhcpServer {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    attachedLogicalPortId: ").append(toIndentedString(attachedLogicalPortId)).append("\n");
    sb.append("    ipv4DhcpServer: ").append(toIndentedString(ipv4DhcpServer)).append("\n");
    sb.append("    dhcpProfileId: ").append(toIndentedString(dhcpProfileId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
