/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.Resource;
import io.swagger.client.model.ResourceLink;
import io.swagger.client.model.SelfResourceLink;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.List;
/**
 * Appliance management task properties
 */
@Schema(description = "Appliance management task properties")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class ApplianceManagementTaskProperties extends Resource {
  /**
   * Current status of the task
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    RUNNING("running"),
    ERROR("error"),
    SUCCESS("success"),
    CANCELING("canceling"),
    CANCELED("canceled"),
    KILLED("killed");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static StatusEnum fromValue(String text) {
      for (StatusEnum b : StatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StatusEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("status")
  private StatusEnum status = null;

  @SerializedName("async_response_available")
  private Boolean asyncResponseAvailable = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("start_time")
  private Long startTime = null;

  @SerializedName("details")
  private Object details = null;

  @SerializedName("cancelable")
  private Boolean cancelable = null;

  @SerializedName("request_method")
  private String requestMethod = null;

  @SerializedName("end_time")
  private Long endTime = null;

  @SerializedName("progress")
  private Long progress = null;

  @SerializedName("message")
  private String message = null;

  @SerializedName("user")
  private String user = null;

  @SerializedName("id")
  private String id = null;

  @SerializedName("request_uri")
  private String requestUri = null;

   /**
   * Current status of the task
   * @return status
  **/
  @Schema(description = "Current status of the task")
  public StatusEnum getStatus() {
    return status;
  }

   /**
   * True if response for asynchronous request is available
   * @return asyncResponseAvailable
  **/
  @Schema(description = "True if response for asynchronous request is available")
  public Boolean isAsyncResponseAvailable() {
    return asyncResponseAvailable;
  }

   /**
   * Description of the task
   * @return description
  **/
  @Schema(description = "Description of the task")
  public String getDescription() {
    return description;
  }

   /**
   * The start time of the task in epoch milliseconds
   * @return startTime
  **/
  @Schema(description = "The start time of the task in epoch milliseconds")
  public Long getStartTime() {
    return startTime;
  }

   /**
   * Details about the task if known
   * @return details
  **/
  @Schema(description = "Details about the task if known")
  public Object getDetails() {
    return details;
  }

   /**
   * True if this task can be canceled
   * @return cancelable
  **/
  @Schema(description = "True if this task can be canceled")
  public Boolean isCancelable() {
    return cancelable;
  }

   /**
   * HTTP request method
   * @return requestMethod
  **/
  @Schema(description = "HTTP request method")
  public String getRequestMethod() {
    return requestMethod;
  }

   /**
   * The end time of the task in epoch milliseconds
   * @return endTime
  **/
  @Schema(description = "The end time of the task in epoch milliseconds")
  public Long getEndTime() {
    return endTime;
  }

   /**
   * Task progress if known, from 0 to 100
   * minimum: 0
   * maximum: 100
   * @return progress
  **/
  @Schema(description = "Task progress if known, from 0 to 100")
  public Long getProgress() {
    return progress;
  }

   /**
   * A message describing the disposition of the task
   * @return message
  **/
  @Schema(description = "A message describing the disposition of the task")
  public String getMessage() {
    return message;
  }

   /**
   * Name of the user who created this task
   * @return user
  **/
  @Schema(description = "Name of the user who created this task")
  public String getUser() {
    return user;
  }

   /**
   * Identifier for this task
   * @return id
  **/
  @Schema(description = "Identifier for this task")
  public String getId() {
    return id;
  }

   /**
   * URI of the method invocation that spawned this task
   * @return requestUri
  **/
  @Schema(description = "URI of the method invocation that spawned this task")
  public String getRequestUri() {
    return requestUri;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplianceManagementTaskProperties applianceManagementTaskProperties = (ApplianceManagementTaskProperties) o;
    return Objects.equals(this.status, applianceManagementTaskProperties.status) &&
        Objects.equals(this.asyncResponseAvailable, applianceManagementTaskProperties.asyncResponseAvailable) &&
        Objects.equals(this.description, applianceManagementTaskProperties.description) &&
        Objects.equals(this.startTime, applianceManagementTaskProperties.startTime) &&
        Objects.equals(this.details, applianceManagementTaskProperties.details) &&
        Objects.equals(this.cancelable, applianceManagementTaskProperties.cancelable) &&
        Objects.equals(this.requestMethod, applianceManagementTaskProperties.requestMethod) &&
        Objects.equals(this.endTime, applianceManagementTaskProperties.endTime) &&
        Objects.equals(this.progress, applianceManagementTaskProperties.progress) &&
        Objects.equals(this.message, applianceManagementTaskProperties.message) &&
        Objects.equals(this.user, applianceManagementTaskProperties.user) &&
        Objects.equals(this.id, applianceManagementTaskProperties.id) &&
        Objects.equals(this.requestUri, applianceManagementTaskProperties.requestUri) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(status, asyncResponseAvailable, description, startTime, details, cancelable, requestMethod, endTime, progress, message, user, id, requestUri, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplianceManagementTaskProperties {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    asyncResponseAvailable: ").append(toIndentedString(asyncResponseAvailable)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    details: ").append(toIndentedString(details)).append("\n");
    sb.append("    cancelable: ").append(toIndentedString(cancelable)).append("\n");
    sb.append("    requestMethod: ").append(toIndentedString(requestMethod)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    progress: ").append(toIndentedString(progress)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    requestUri: ").append(toIndentedString(requestUri)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
