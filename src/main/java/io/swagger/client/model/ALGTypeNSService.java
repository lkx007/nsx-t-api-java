/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.NSServiceElement;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * An NSService element that represents an ALG protocol
 */
@Schema(description = "An NSService element that represents an ALG protocol")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class ALGTypeNSService extends NSServiceElement {
  /**
   * The Application Layer Gateway (ALG) protocol. Please note, protocol NBNS_BROADCAST and NBDG_BROADCAST are  deprecated. Please use UDP protocol and create L4 Port Set type of service instead. 
   */
  @JsonAdapter(AlgEnum.Adapter.class)
  public enum AlgEnum {
    ORACLE_TNS("ORACLE_TNS"),
    FTP("FTP"),
    SUN_RPC_TCP("SUN_RPC_TCP"),
    SUN_RPC_UDP("SUN_RPC_UDP"),
    MS_RPC_TCP("MS_RPC_TCP"),
    MS_RPC_UDP("MS_RPC_UDP"),
    NBNS_BROADCAST("NBNS_BROADCAST"),
    NBDG_BROADCAST("NBDG_BROADCAST"),
    TFTP("TFTP");

    private String value;

    AlgEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static AlgEnum fromValue(String text) {
      for (AlgEnum b : AlgEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<AlgEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AlgEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AlgEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return AlgEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("alg")
  private AlgEnum alg = null;

  @SerializedName("destination_ports")
  private List<String> destinationPorts = new ArrayList<String>();

  @SerializedName("source_ports")
  private List<String> sourcePorts = null;

  public ALGTypeNSService alg(AlgEnum alg) {
    this.alg = alg;
    return this;
  }

   /**
   * The Application Layer Gateway (ALG) protocol. Please note, protocol NBNS_BROADCAST and NBDG_BROADCAST are  deprecated. Please use UDP protocol and create L4 Port Set type of service instead. 
   * @return alg
  **/
  @Schema(required = true, description = "The Application Layer Gateway (ALG) protocol. Please note, protocol NBNS_BROADCAST and NBDG_BROADCAST are  deprecated. Please use UDP protocol and create L4 Port Set type of service instead. ")
  public AlgEnum getAlg() {
    return alg;
  }

  public void setAlg(AlgEnum alg) {
    this.alg = alg;
  }

  public ALGTypeNSService destinationPorts(List<String> destinationPorts) {
    this.destinationPorts = destinationPorts;
    return this;
  }

  public ALGTypeNSService addDestinationPortsItem(String destinationPortsItem) {
    this.destinationPorts.add(destinationPortsItem);
    return this;
  }

   /**
   * The destination_port cannot be empty and must be a single value.
   * @return destinationPorts
  **/
  @Schema(required = true, description = "The destination_port cannot be empty and must be a single value.")
  public List<String> getDestinationPorts() {
    return destinationPorts;
  }

  public void setDestinationPorts(List<String> destinationPorts) {
    this.destinationPorts = destinationPorts;
  }

  public ALGTypeNSService sourcePorts(List<String> sourcePorts) {
    this.sourcePorts = sourcePorts;
    return this;
  }

  public ALGTypeNSService addSourcePortsItem(String sourcePortsItem) {
    if (this.sourcePorts == null) {
      this.sourcePorts = new ArrayList<String>();
    }
    this.sourcePorts.add(sourcePortsItem);
    return this;
  }

   /**
   * Source ports
   * @return sourcePorts
  **/
  @Schema(description = "Source ports")
  public List<String> getSourcePorts() {
    return sourcePorts;
  }

  public void setSourcePorts(List<String> sourcePorts) {
    this.sourcePorts = sourcePorts;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ALGTypeNSService alGTypeNSService = (ALGTypeNSService) o;
    return Objects.equals(this.alg, alGTypeNSService.alg) &&
        Objects.equals(this.destinationPorts, alGTypeNSService.destinationPorts) &&
        Objects.equals(this.sourcePorts, alGTypeNSService.sourcePorts) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alg, destinationPorts, sourcePorts, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ALGTypeNSService {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    alg: ").append(toIndentedString(alg)).append("\n");
    sb.append("    destinationPorts: ").append(toIndentedString(destinationPorts)).append("\n");
    sb.append("    sourcePorts: ").append(toIndentedString(sourcePorts)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
