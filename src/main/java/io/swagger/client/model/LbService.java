/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.ManagedResource;
import io.swagger.client.model.ResourceReference;
import io.swagger.client.model.Tag;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * LbService
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class LbService extends ManagedResource {
  @SerializedName("access_log_enabled")
  private Boolean accessLogEnabled = false;

  @SerializedName("attachment")
  private ResourceReference attachment = null;

  /**
   * Load balancer engine writes information about encountered issues of different severity levels to the error log. This setting is used to define the severity level of the error log. 
   */
  @JsonAdapter(ErrorLogLevelEnum.Adapter.class)
  public enum ErrorLogLevelEnum {
    DEBUG("DEBUG"),
    INFO("INFO"),
    WARNING("WARNING"),
    ERROR("ERROR"),
    CRITICAL("CRITICAL"),
    ALERT("ALERT"),
    EMERGENCY("EMERGENCY");

    private String value;

    ErrorLogLevelEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ErrorLogLevelEnum fromValue(String text) {
      for (ErrorLogLevelEnum b : ErrorLogLevelEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ErrorLogLevelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ErrorLogLevelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ErrorLogLevelEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ErrorLogLevelEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("error_log_level")
  private ErrorLogLevelEnum errorLogLevel = ErrorLogLevelEnum.INFO;

  @SerializedName("enabled")
  private Boolean enabled = true;

  @SerializedName("virtual_server_ids")
  private List<String> virtualServerIds = null;

  /**
   * the size of load balancer service
   */
  @JsonAdapter(SizeEnum.Adapter.class)
  public enum SizeEnum {
    SMALL("SMALL"),
    MEDIUM("MEDIUM"),
    LARGE("LARGE"),
    DLB("DLB");

    private String value;

    SizeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static SizeEnum fromValue(String text) {
      for (SizeEnum b : SizeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<SizeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SizeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SizeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return SizeEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("size")
  private SizeEnum size = SizeEnum.SMALL;

  public LbService accessLogEnabled(Boolean accessLogEnabled) {
    this.accessLogEnabled = accessLogEnabled;
    return this;
  }

   /**
   * whether access log is enabled
   * @return accessLogEnabled
  **/
  @Schema(description = "whether access log is enabled")
  public Boolean isAccessLogEnabled() {
    return accessLogEnabled;
  }

  public void setAccessLogEnabled(Boolean accessLogEnabled) {
    this.accessLogEnabled = accessLogEnabled;
  }

  public LbService attachment(ResourceReference attachment) {
    this.attachment = attachment;
    return this;
  }

   /**
   * Get attachment
   * @return attachment
  **/
  @Schema(description = "")
  public ResourceReference getAttachment() {
    return attachment;
  }

  public void setAttachment(ResourceReference attachment) {
    this.attachment = attachment;
  }

  public LbService errorLogLevel(ErrorLogLevelEnum errorLogLevel) {
    this.errorLogLevel = errorLogLevel;
    return this;
  }

   /**
   * Load balancer engine writes information about encountered issues of different severity levels to the error log. This setting is used to define the severity level of the error log. 
   * @return errorLogLevel
  **/
  @Schema(description = "Load balancer engine writes information about encountered issues of different severity levels to the error log. This setting is used to define the severity level of the error log. ")
  public ErrorLogLevelEnum getErrorLogLevel() {
    return errorLogLevel;
  }

  public void setErrorLogLevel(ErrorLogLevelEnum errorLogLevel) {
    this.errorLogLevel = errorLogLevel;
  }

  public LbService enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

   /**
   * whether the load balancer service is enabled
   * @return enabled
  **/
  @Schema(description = "whether the load balancer service is enabled")
  public Boolean isEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }

  public LbService virtualServerIds(List<String> virtualServerIds) {
    this.virtualServerIds = virtualServerIds;
    return this;
  }

  public LbService addVirtualServerIdsItem(String virtualServerIdsItem) {
    if (this.virtualServerIds == null) {
      this.virtualServerIds = new ArrayList<String>();
    }
    this.virtualServerIds.add(virtualServerIdsItem);
    return this;
  }

   /**
   * virtual servers can be associated to LbService(which is similar to physical/virtual load balancer), Lb virtual servers, pools and other entities could be defined independently, the virtual server identifier list here would be used to maintain the relationship of LbService and other Lb entities. 
   * @return virtualServerIds
  **/
  @Schema(description = "virtual servers can be associated to LbService(which is similar to physical/virtual load balancer), Lb virtual servers, pools and other entities could be defined independently, the virtual server identifier list here would be used to maintain the relationship of LbService and other Lb entities. ")
  public List<String> getVirtualServerIds() {
    return virtualServerIds;
  }

  public void setVirtualServerIds(List<String> virtualServerIds) {
    this.virtualServerIds = virtualServerIds;
  }

  public LbService size(SizeEnum size) {
    this.size = size;
    return this;
  }

   /**
   * the size of load balancer service
   * @return size
  **/
  @Schema(description = "the size of load balancer service")
  public SizeEnum getSize() {
    return size;
  }

  public void setSize(SizeEnum size) {
    this.size = size;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LbService lbService = (LbService) o;
    return Objects.equals(this.accessLogEnabled, lbService.accessLogEnabled) &&
        Objects.equals(this.attachment, lbService.attachment) &&
        Objects.equals(this.errorLogLevel, lbService.errorLogLevel) &&
        Objects.equals(this.enabled, lbService.enabled) &&
        Objects.equals(this.virtualServerIds, lbService.virtualServerIds) &&
        Objects.equals(this.size, lbService.size) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessLogEnabled, attachment, errorLogLevel, enabled, virtualServerIds, size, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LbService {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    accessLogEnabled: ").append(toIndentedString(accessLogEnabled)).append("\n");
    sb.append("    attachment: ").append(toIndentedString(attachment)).append("\n");
    sb.append("    errorLogLevel: ").append(toIndentedString(errorLogLevel)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    virtualServerIds: ").append(toIndentedString(virtualServerIds)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
