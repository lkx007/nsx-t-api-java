/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.CpuCoreConfigForEnhancedNetworkingStackSwitch;
import io.swagger.client.model.HostSwitchProfileTypeIdEntry;
import io.swagger.client.model.IpAssignmentSpec;
import io.swagger.client.model.Pnic;
import io.swagger.client.model.VmknicNetwork;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * Standard host switch specification
 */
@Schema(description = "Standard host switch specification")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class StandardHostSwitch {
  @SerializedName("pnics_uninstall_migration")
  private List<Pnic> pnicsUninstallMigration = null;

  @SerializedName("ip_assignment_spec")
  private IpAssignmentSpec ipAssignmentSpec = null;

  @SerializedName("cpu_config")
  private List<CpuCoreConfigForEnhancedNetworkingStackSwitch> cpuConfig = null;

  @SerializedName("is_migrate_pnics")
  private Boolean isMigratePnics = false;

  @SerializedName("vmk_uninstall_migration")
  private List<VmknicNetwork> vmkUninstallMigration = null;

  @SerializedName("pnics")
  private List<Pnic> pnics = null;

  @SerializedName("host_switch_name")
  private String hostSwitchName = "nsxDefaultHostSwitch";

  @SerializedName("vmk_install_migration")
  private List<VmknicNetwork> vmkInstallMigration = null;

  @SerializedName("host_switch_profile_ids")
  private List<HostSwitchProfileTypeIdEntry> hostSwitchProfileIds = null;

  public StandardHostSwitch pnicsUninstallMigration(List<Pnic> pnicsUninstallMigration) {
    this.pnicsUninstallMigration = pnicsUninstallMigration;
    return this;
  }

  public StandardHostSwitch addPnicsUninstallMigrationItem(Pnic pnicsUninstallMigrationItem) {
    if (this.pnicsUninstallMigration == null) {
      this.pnicsUninstallMigration = new ArrayList<Pnic>();
    }
    this.pnicsUninstallMigration.add(pnicsUninstallMigrationItem);
    return this;
  }

   /**
   * The pnics to be migrated out to a non N-VDS switch during transport node deletion.
   * @return pnicsUninstallMigration
  **/
  @Schema(description = "The pnics to be migrated out to a non N-VDS switch during transport node deletion.")
  public List<Pnic> getPnicsUninstallMigration() {
    return pnicsUninstallMigration;
  }

  public void setPnicsUninstallMigration(List<Pnic> pnicsUninstallMigration) {
    this.pnicsUninstallMigration = pnicsUninstallMigration;
  }

  public StandardHostSwitch ipAssignmentSpec(IpAssignmentSpec ipAssignmentSpec) {
    this.ipAssignmentSpec = ipAssignmentSpec;
    return this;
  }

   /**
   * Get ipAssignmentSpec
   * @return ipAssignmentSpec
  **/
  @Schema(description = "")
  public IpAssignmentSpec getIpAssignmentSpec() {
    return ipAssignmentSpec;
  }

  public void setIpAssignmentSpec(IpAssignmentSpec ipAssignmentSpec) {
    this.ipAssignmentSpec = ipAssignmentSpec;
  }

  public StandardHostSwitch cpuConfig(List<CpuCoreConfigForEnhancedNetworkingStackSwitch> cpuConfig) {
    this.cpuConfig = cpuConfig;
    return this;
  }

  public StandardHostSwitch addCpuConfigItem(CpuCoreConfigForEnhancedNetworkingStackSwitch cpuConfigItem) {
    if (this.cpuConfig == null) {
      this.cpuConfig = new ArrayList<CpuCoreConfigForEnhancedNetworkingStackSwitch>();
    }
    this.cpuConfig.add(cpuConfigItem);
    return this;
  }

   /**
   * CPU configuration specifies number of Logical cpu cores (Lcores) per Non Uniform Memory Access (NUMA) node dedicated to Enhanced Networking Stack enabled HostSwitch to get the best performance.
   * @return cpuConfig
  **/
  @Schema(description = "CPU configuration specifies number of Logical cpu cores (Lcores) per Non Uniform Memory Access (NUMA) node dedicated to Enhanced Networking Stack enabled HostSwitch to get the best performance.")
  public List<CpuCoreConfigForEnhancedNetworkingStackSwitch> getCpuConfig() {
    return cpuConfig;
  }

  public void setCpuConfig(List<CpuCoreConfigForEnhancedNetworkingStackSwitch> cpuConfig) {
    this.cpuConfig = cpuConfig;
  }

  public StandardHostSwitch isMigratePnics(Boolean isMigratePnics) {
    this.isMigratePnics = isMigratePnics;
    return this;
  }

   /**
   * If the pnics specified in the pnics field are used by a single Vsphere Standard Switch or DVS, then migrate the pnics to N-VDS. If any two pnics are not used by the same Vsphere Standard Switch or DVS, it is not supported. In such cases, please migrate them in multiple steps, one Vsphere Standard Switch or DVS at a time.
   * @return isMigratePnics
  **/
  @Schema(description = "If the pnics specified in the pnics field are used by a single Vsphere Standard Switch or DVS, then migrate the pnics to N-VDS. If any two pnics are not used by the same Vsphere Standard Switch or DVS, it is not supported. In such cases, please migrate them in multiple steps, one Vsphere Standard Switch or DVS at a time.")
  public Boolean isIsMigratePnics() {
    return isMigratePnics;
  }

  public void setIsMigratePnics(Boolean isMigratePnics) {
    this.isMigratePnics = isMigratePnics;
  }

  public StandardHostSwitch vmkUninstallMigration(List<VmknicNetwork> vmkUninstallMigration) {
    this.vmkUninstallMigration = vmkUninstallMigration;
    return this;
  }

  public StandardHostSwitch addVmkUninstallMigrationItem(VmknicNetwork vmkUninstallMigrationItem) {
    if (this.vmkUninstallMigration == null) {
      this.vmkUninstallMigration = new ArrayList<VmknicNetwork>();
    }
    this.vmkUninstallMigration.add(vmkUninstallMigrationItem);
    return this;
  }

   /**
   * The vmk interfaces and the associated portgroups on the VSS/DVS. This field is realized on the host during transport node deletion or NSX uninstallation to specify the destination for all vmks on N-VDS switches.
   * @return vmkUninstallMigration
  **/
  @Schema(description = "The vmk interfaces and the associated portgroups on the VSS/DVS. This field is realized on the host during transport node deletion or NSX uninstallation to specify the destination for all vmks on N-VDS switches.")
  public List<VmknicNetwork> getVmkUninstallMigration() {
    return vmkUninstallMigration;
  }

  public void setVmkUninstallMigration(List<VmknicNetwork> vmkUninstallMigration) {
    this.vmkUninstallMigration = vmkUninstallMigration;
  }

  public StandardHostSwitch pnics(List<Pnic> pnics) {
    this.pnics = pnics;
    return this;
  }

  public StandardHostSwitch addPnicsItem(Pnic pnicsItem) {
    if (this.pnics == null) {
      this.pnics = new ArrayList<Pnic>();
    }
    this.pnics.add(pnicsItem);
    return this;
  }

   /**
   * Physical NICs connected to the host switch
   * @return pnics
  **/
  @Schema(description = "Physical NICs connected to the host switch")
  public List<Pnic> getPnics() {
    return pnics;
  }

  public void setPnics(List<Pnic> pnics) {
    this.pnics = pnics;
  }

  public StandardHostSwitch hostSwitchName(String hostSwitchName) {
    this.hostSwitchName = hostSwitchName;
    return this;
  }

   /**
   * If this name is unset or empty then the default host switch name will be used. The name must be unique among all host switches specified in a given transport node; unset name, empty name and the default host switch name are considered the same in terms of uniqueness.
   * @return hostSwitchName
  **/
  @Schema(description = "If this name is unset or empty then the default host switch name will be used. The name must be unique among all host switches specified in a given transport node; unset name, empty name and the default host switch name are considered the same in terms of uniqueness.")
  public String getHostSwitchName() {
    return hostSwitchName;
  }

  public void setHostSwitchName(String hostSwitchName) {
    this.hostSwitchName = hostSwitchName;
  }

  public StandardHostSwitch vmkInstallMigration(List<VmknicNetwork> vmkInstallMigration) {
    this.vmkInstallMigration = vmkInstallMigration;
    return this;
  }

  public StandardHostSwitch addVmkInstallMigrationItem(VmknicNetwork vmkInstallMigrationItem) {
    if (this.vmkInstallMigration == null) {
      this.vmkInstallMigration = new ArrayList<VmknicNetwork>();
    }
    this.vmkInstallMigration.add(vmkInstallMigrationItem);
    return this;
  }

   /**
   * The vmk interfaces and the associated logical switches on the host switch. The state of this field is realized on the transport node during creation and update.
   * @return vmkInstallMigration
  **/
  @Schema(description = "The vmk interfaces and the associated logical switches on the host switch. The state of this field is realized on the transport node during creation and update.")
  public List<VmknicNetwork> getVmkInstallMigration() {
    return vmkInstallMigration;
  }

  public void setVmkInstallMigration(List<VmknicNetwork> vmkInstallMigration) {
    this.vmkInstallMigration = vmkInstallMigration;
  }

  public StandardHostSwitch hostSwitchProfileIds(List<HostSwitchProfileTypeIdEntry> hostSwitchProfileIds) {
    this.hostSwitchProfileIds = hostSwitchProfileIds;
    return this;
  }

  public StandardHostSwitch addHostSwitchProfileIdsItem(HostSwitchProfileTypeIdEntry hostSwitchProfileIdsItem) {
    if (this.hostSwitchProfileIds == null) {
      this.hostSwitchProfileIds = new ArrayList<HostSwitchProfileTypeIdEntry>();
    }
    this.hostSwitchProfileIds.add(hostSwitchProfileIdsItem);
    return this;
  }

   /**
   * host switch profiles bound to this host switch. If a profile ID is not provided for any HostSwitchProfileType that is supported by the transport node, the corresponding default profile will be bound to the host switch.
   * @return hostSwitchProfileIds
  **/
  @Schema(description = "host switch profiles bound to this host switch. If a profile ID is not provided for any HostSwitchProfileType that is supported by the transport node, the corresponding default profile will be bound to the host switch.")
  public List<HostSwitchProfileTypeIdEntry> getHostSwitchProfileIds() {
    return hostSwitchProfileIds;
  }

  public void setHostSwitchProfileIds(List<HostSwitchProfileTypeIdEntry> hostSwitchProfileIds) {
    this.hostSwitchProfileIds = hostSwitchProfileIds;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StandardHostSwitch standardHostSwitch = (StandardHostSwitch) o;
    return Objects.equals(this.pnicsUninstallMigration, standardHostSwitch.pnicsUninstallMigration) &&
        Objects.equals(this.ipAssignmentSpec, standardHostSwitch.ipAssignmentSpec) &&
        Objects.equals(this.cpuConfig, standardHostSwitch.cpuConfig) &&
        Objects.equals(this.isMigratePnics, standardHostSwitch.isMigratePnics) &&
        Objects.equals(this.vmkUninstallMigration, standardHostSwitch.vmkUninstallMigration) &&
        Objects.equals(this.pnics, standardHostSwitch.pnics) &&
        Objects.equals(this.hostSwitchName, standardHostSwitch.hostSwitchName) &&
        Objects.equals(this.vmkInstallMigration, standardHostSwitch.vmkInstallMigration) &&
        Objects.equals(this.hostSwitchProfileIds, standardHostSwitch.hostSwitchProfileIds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pnicsUninstallMigration, ipAssignmentSpec, cpuConfig, isMigratePnics, vmkUninstallMigration, pnics, hostSwitchName, vmkInstallMigration, hostSwitchProfileIds);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StandardHostSwitch {\n");
    
    sb.append("    pnicsUninstallMigration: ").append(toIndentedString(pnicsUninstallMigration)).append("\n");
    sb.append("    ipAssignmentSpec: ").append(toIndentedString(ipAssignmentSpec)).append("\n");
    sb.append("    cpuConfig: ").append(toIndentedString(cpuConfig)).append("\n");
    sb.append("    isMigratePnics: ").append(toIndentedString(isMigratePnics)).append("\n");
    sb.append("    vmkUninstallMigration: ").append(toIndentedString(vmkUninstallMigration)).append("\n");
    sb.append("    pnics: ").append(toIndentedString(pnics)).append("\n");
    sb.append("    hostSwitchName: ").append(toIndentedString(hostSwitchName)).append("\n");
    sb.append("    vmkInstallMigration: ").append(toIndentedString(vmkInstallMigration)).append("\n");
    sb.append("    hostSwitchProfileIds: ").append(toIndentedString(hostSwitchProfileIds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
