/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * Attributes/sub-attributes data holder structure for NSProfile
 */
@Schema(description = "Attributes/sub-attributes data holder structure for NSProfile")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class NSAttributesData {
  /**
   * Data type of attribute/sub attribute key
   */
  @JsonAdapter(DatatypeEnum.Adapter.class)
  public enum DatatypeEnum {
    STRING("STRING");

    private String value;

    DatatypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static DatatypeEnum fromValue(String text) {
      for (DatatypeEnum b : DatatypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<DatatypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DatatypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DatatypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return DatatypeEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("datatype")
  private DatatypeEnum datatype = null;

  @SerializedName("value")
  private List<String> value = new ArrayList<String>();

  @SerializedName("key")
  private String key = null;

  @SerializedName("description")
  private String description = null;

  public NSAttributesData datatype(DatatypeEnum datatype) {
    this.datatype = datatype;
    return this;
  }

   /**
   * Data type of attribute/sub attribute key
   * @return datatype
  **/
  @Schema(required = true, description = "Data type of attribute/sub attribute key")
  public DatatypeEnum getDatatype() {
    return datatype;
  }

  public void setDatatype(DatatypeEnum datatype) {
    this.datatype = datatype;
  }

  public NSAttributesData value(List<String> value) {
    this.value = value;
    return this;
  }

  public NSAttributesData addValueItem(String valueItem) {
    this.value.add(valueItem);
    return this;
  }

   /**
   * Multiple attribute/sub attribute values can be specified as elements of array. 
   * @return value
  **/
  @Schema(required = true, description = "Multiple attribute/sub attribute values can be specified as elements of array. ")
  public List<String> getValue() {
    return value;
  }

  public void setValue(List<String> value) {
    this.value = value;
  }

  public NSAttributesData key(String key) {
    this.key = key;
    return this;
  }

   /**
   * NSProfile attribute/sub attribute keys. 
   * @return key
  **/
  @Schema(required = true, description = "NSProfile attribute/sub attribute keys. ")
  public String getKey() {
    return key;
  }

  public void setKey(String key) {
    this.key = key;
  }

  public NSAttributesData description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Description for NSProfile attributes
   * @return description
  **/
  @Schema(description = "Description for NSProfile attributes")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NSAttributesData nsAttributesData = (NSAttributesData) o;
    return Objects.equals(this.datatype, nsAttributesData.datatype) &&
        Objects.equals(this.value, nsAttributesData.value) &&
        Objects.equals(this.key, nsAttributesData.key) &&
        Objects.equals(this.description, nsAttributesData.description);
  }

  @Override
  public int hashCode() {
    return Objects.hash(datatype, value, key, description);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NSAttributesData {\n");
    
    sb.append("    datatype: ").append(toIndentedString(datatype)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
