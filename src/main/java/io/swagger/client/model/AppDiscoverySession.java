/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.ManagedResource;
import io.swagger.client.model.Tag;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.List;
/**
 * Contains the details of an application discovery session 
 */
@Schema(description = "Contains the details of an application discovery session ")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class AppDiscoverySession extends ManagedResource {
  /**
   * The status of the session
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    FAILED("FAILED"),
    RUNNING("RUNNING"),
    FINISHED("FINISHED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static StatusEnum fromValue(String text) {
      for (StatusEnum b : StatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StatusEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("status")
  private StatusEnum status = null;

  @SerializedName("end_timestamp")
  private Long endTimestamp = null;

  @SerializedName("start_timestamp")
  private Long startTimestamp = null;

  @SerializedName("failed_reason")
  private String failedReason = null;

  /**
   * Some App Profiles that were part of the discovery session could be modified or deleted | after the session has been completed. NOT_REQUIRED status denotes that there were no such modifications. | REQUIRED status denotes some App Profiles that were part of the session has been modified/deleted and some | and some applications might not have been classfifed correctly. Use /session/&lt;session-id&gt;/reclassify API to| re-classfy the applications discovered based on app profiles. 
   */
  @JsonAdapter(ReclassificationEnum.Adapter.class)
  public enum ReclassificationEnum {
    NOT_REQUIRED("NOT_REQUIRED"),
    REQUIRED("REQUIRED");

    private String value;

    ReclassificationEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ReclassificationEnum fromValue(String text) {
      for (ReclassificationEnum b : ReclassificationEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ReclassificationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ReclassificationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ReclassificationEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ReclassificationEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("reclassification")
  private ReclassificationEnum reclassification = null;

   /**
   * The status of the session
   * @return status
  **/
  @Schema(description = "The status of the session")
  public StatusEnum getStatus() {
    return status;
  }

  public AppDiscoverySession endTimestamp(Long endTimestamp) {
    this.endTimestamp = endTimestamp;
    return this;
  }

   /**
   * End time of the session expressed in milliseconds since epoch
   * @return endTimestamp
  **/
  @Schema(description = "End time of the session expressed in milliseconds since epoch")
  public Long getEndTimestamp() {
    return endTimestamp;
  }

  public void setEndTimestamp(Long endTimestamp) {
    this.endTimestamp = endTimestamp;
  }

  public AppDiscoverySession startTimestamp(Long startTimestamp) {
    this.startTimestamp = startTimestamp;
    return this;
  }

   /**
   * Start time of the session expressed in milliseconds since epoch
   * @return startTimestamp
  **/
  @Schema(description = "Start time of the session expressed in milliseconds since epoch")
  public Long getStartTimestamp() {
    return startTimestamp;
  }

  public void setStartTimestamp(Long startTimestamp) {
    this.startTimestamp = startTimestamp;
  }

   /**
   * The reason for the session status failure.
   * @return failedReason
  **/
  @Schema(description = "The reason for the session status failure.")
  public String getFailedReason() {
    return failedReason;
  }

   /**
   * Some App Profiles that were part of the discovery session could be modified or deleted | after the session has been completed. NOT_REQUIRED status denotes that there were no such modifications. | REQUIRED status denotes some App Profiles that were part of the session has been modified/deleted and some | and some applications might not have been classfifed correctly. Use /session/&lt;session-id&gt;/reclassify API to| re-classfy the applications discovered based on app profiles. 
   * @return reclassification
  **/
  @Schema(description = "Some App Profiles that were part of the discovery session could be modified or deleted | after the session has been completed. NOT_REQUIRED status denotes that there were no such modifications. | REQUIRED status denotes some App Profiles that were part of the session has been modified/deleted and some | and some applications might not have been classfifed correctly. Use /session/<session-id>/reclassify API to| re-classfy the applications discovered based on app profiles. ")
  public ReclassificationEnum getReclassification() {
    return reclassification;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AppDiscoverySession appDiscoverySession = (AppDiscoverySession) o;
    return Objects.equals(this.status, appDiscoverySession.status) &&
        Objects.equals(this.endTimestamp, appDiscoverySession.endTimestamp) &&
        Objects.equals(this.startTimestamp, appDiscoverySession.startTimestamp) &&
        Objects.equals(this.failedReason, appDiscoverySession.failedReason) &&
        Objects.equals(this.reclassification, appDiscoverySession.reclassification) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(status, endTimestamp, startTimestamp, failedReason, reclassification, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AppDiscoverySession {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    endTimestamp: ").append(toIndentedString(endTimestamp)).append("\n");
    sb.append("    startTimestamp: ").append(toIndentedString(startTimestamp)).append("\n");
    sb.append("    failedReason: ").append(toIndentedString(failedReason)).append("\n");
    sb.append("    reclassification: ").append(toIndentedString(reclassification)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
