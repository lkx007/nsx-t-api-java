/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.ManagedResource;
import io.swagger.client.model.Tag;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.List;
/**
 * Type to define the Proxy configuration.
 */
@Schema(description = "Type to define the Proxy configuration.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class Proxy extends ManagedResource {
  @SerializedName("username")
  private String username = null;

  @SerializedName("host")
  private String host = null;

  @SerializedName("password")
  private String password = null;

  /**
   * The scheme accepted by the proxy server. Specify one of HTTP and HTTPS. 
   */
  @JsonAdapter(SchemeEnum.Adapter.class)
  public enum SchemeEnum {
    HTTP("HTTP"),
    HTTPS("HTTPS");

    private String value;

    SchemeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static SchemeEnum fromValue(String text) {
      for (SchemeEnum b : SchemeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<SchemeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SchemeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SchemeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return SchemeEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("scheme")
  private SchemeEnum scheme = null;

  @SerializedName("enabled")
  private Boolean enabled = null;

  @SerializedName("port")
  private Integer port = null;

  public Proxy username(String username) {
    this.username = username;
    return this;
  }

   /**
   * Specify the user name used to authenticate with the proxy server, if required. 
   * @return username
  **/
  @Schema(description = "Specify the user name used to authenticate with the proxy server, if required. ")
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }

  public Proxy host(String host) {
    this.host = host;
    return this;
  }

   /**
   * Specify the fully qualified domain name, or ip address, of the proxy server. 
   * @return host
  **/
  @Schema(description = "Specify the fully qualified domain name, or ip address, of the proxy server. ")
  public String getHost() {
    return host;
  }

  public void setHost(String host) {
    this.host = host;
  }

  public Proxy password(String password) {
    this.password = password;
    return this;
  }

   /**
   * Specify the password used to authenticate with the proxy server, if required. 
   * @return password
  **/
  @Schema(description = "Specify the password used to authenticate with the proxy server, if required. ")
  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }

  public Proxy scheme(SchemeEnum scheme) {
    this.scheme = scheme;
    return this;
  }

   /**
   * The scheme accepted by the proxy server. Specify one of HTTP and HTTPS. 
   * @return scheme
  **/
  @Schema(description = "The scheme accepted by the proxy server. Specify one of HTTP and HTTPS. ")
  public SchemeEnum getScheme() {
    return scheme;
  }

  public void setScheme(SchemeEnum scheme) {
    this.scheme = scheme;
  }

  public Proxy enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

   /**
   * Flag to indicate if proxy is enabled. When set to true, a scheme, host and port must be provided. 
   * @return enabled
  **/
  @Schema(required = true, description = "Flag to indicate if proxy is enabled. When set to true, a scheme, host and port must be provided. ")
  public Boolean isEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }

  public Proxy port(Integer port) {
    this.port = port;
    return this;
  }

   /**
   * Specify the port of the proxy server.
   * @return port
  **/
  @Schema(description = "Specify the port of the proxy server.")
  public Integer getPort() {
    return port;
  }

  public void setPort(Integer port) {
    this.port = port;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Proxy proxy = (Proxy) o;
    return Objects.equals(this.username, proxy.username) &&
        Objects.equals(this.host, proxy.host) &&
        Objects.equals(this.password, proxy.password) &&
        Objects.equals(this.scheme, proxy.scheme) &&
        Objects.equals(this.enabled, proxy.enabled) &&
        Objects.equals(this.port, proxy.port) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(username, host, password, scheme, enabled, port, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Proxy {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    host: ").append(toIndentedString(host)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    scheme: ").append(toIndentedString(scheme)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
