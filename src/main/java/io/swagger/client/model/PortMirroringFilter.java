/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.IPAddresses;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * PortMirroringFilter
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class PortMirroringFilter {
  /**
   * If set to MIRROR, packets will be mirrored. If set to DO_NOT_MIRROR, packets will not be mirrored.
   */
  @JsonAdapter(FilterActionEnum.Adapter.class)
  public enum FilterActionEnum {
    MIRROR("MIRROR"),
    DO_NOT_MIRROR("DO_NOT_MIRROR");

    private String value;

    FilterActionEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static FilterActionEnum fromValue(String text) {
      for (FilterActionEnum b : FilterActionEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<FilterActionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FilterActionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FilterActionEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return FilterActionEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("filter_action")
  private FilterActionEnum filterAction = FilterActionEnum.MIRROR;

  /**
   * The transport protocols of TCP or UDP, used to match the transport protocol of a packet. If not provided, no filtering by IP protocols is performed.
   */
  @JsonAdapter(IpProtocolEnum.Adapter.class)
  public enum IpProtocolEnum {
    TCP("TCP"),
    UDP("UDP");

    private String value;

    IpProtocolEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static IpProtocolEnum fromValue(String text) {
      for (IpProtocolEnum b : IpProtocolEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<IpProtocolEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IpProtocolEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IpProtocolEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return IpProtocolEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("ip_protocol")
  private IpProtocolEnum ipProtocol = null;

  @SerializedName("src_ips")
  private IPAddresses srcIps = null;

  @SerializedName("dst_ips")
  private IPAddresses dstIps = null;

  @SerializedName("dst_ports")
  private String dstPorts = null;

  @SerializedName("src_ports")
  private String srcPorts = null;

  public PortMirroringFilter filterAction(FilterActionEnum filterAction) {
    this.filterAction = filterAction;
    return this;
  }

   /**
   * If set to MIRROR, packets will be mirrored. If set to DO_NOT_MIRROR, packets will not be mirrored.
   * @return filterAction
  **/
  @Schema(description = "If set to MIRROR, packets will be mirrored. If set to DO_NOT_MIRROR, packets will not be mirrored.")
  public FilterActionEnum getFilterAction() {
    return filterAction;
  }

  public void setFilterAction(FilterActionEnum filterAction) {
    this.filterAction = filterAction;
  }

  public PortMirroringFilter ipProtocol(IpProtocolEnum ipProtocol) {
    this.ipProtocol = ipProtocol;
    return this;
  }

   /**
   * The transport protocols of TCP or UDP, used to match the transport protocol of a packet. If not provided, no filtering by IP protocols is performed.
   * @return ipProtocol
  **/
  @Schema(description = "The transport protocols of TCP or UDP, used to match the transport protocol of a packet. If not provided, no filtering by IP protocols is performed.")
  public IpProtocolEnum getIpProtocol() {
    return ipProtocol;
  }

  public void setIpProtocol(IpProtocolEnum ipProtocol) {
    this.ipProtocol = ipProtocol;
  }

  public PortMirroringFilter srcIps(IPAddresses srcIps) {
    this.srcIps = srcIps;
    return this;
  }

   /**
   * Get srcIps
   * @return srcIps
  **/
  @Schema(description = "")
  public IPAddresses getSrcIps() {
    return srcIps;
  }

  public void setSrcIps(IPAddresses srcIps) {
    this.srcIps = srcIps;
  }

  public PortMirroringFilter dstIps(IPAddresses dstIps) {
    this.dstIps = dstIps;
    return this;
  }

   /**
   * Get dstIps
   * @return dstIps
  **/
  @Schema(description = "")
  public IPAddresses getDstIps() {
    return dstIps;
  }

  public void setDstIps(IPAddresses dstIps) {
    this.dstIps = dstIps;
  }

  public PortMirroringFilter dstPorts(String dstPorts) {
    this.dstPorts = dstPorts;
    return this;
  }

   /**
   * Destination port in the form of a port or port range, used to match the destination port of a packet. If not provided, no filtering by destination port is performed.
   * @return dstPorts
  **/
  @Schema(description = "Destination port in the form of a port or port range, used to match the destination port of a packet. If not provided, no filtering by destination port is performed.")
  public String getDstPorts() {
    return dstPorts;
  }

  public void setDstPorts(String dstPorts) {
    this.dstPorts = dstPorts;
  }

  public PortMirroringFilter srcPorts(String srcPorts) {
    this.srcPorts = srcPorts;
    return this;
  }

   /**
   * Source port in the form of a port or port range, used to match the source port of a packet. If not provided, no filtering by source port is performed.
   * @return srcPorts
  **/
  @Schema(description = "Source port in the form of a port or port range, used to match the source port of a packet. If not provided, no filtering by source port is performed.")
  public String getSrcPorts() {
    return srcPorts;
  }

  public void setSrcPorts(String srcPorts) {
    this.srcPorts = srcPorts;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PortMirroringFilter portMirroringFilter = (PortMirroringFilter) o;
    return Objects.equals(this.filterAction, portMirroringFilter.filterAction) &&
        Objects.equals(this.ipProtocol, portMirroringFilter.ipProtocol) &&
        Objects.equals(this.srcIps, portMirroringFilter.srcIps) &&
        Objects.equals(this.dstIps, portMirroringFilter.dstIps) &&
        Objects.equals(this.dstPorts, portMirroringFilter.dstPorts) &&
        Objects.equals(this.srcPorts, portMirroringFilter.srcPorts);
  }

  @Override
  public int hashCode() {
    return Objects.hash(filterAction, ipProtocol, srcIps, dstIps, dstPorts, srcPorts);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PortMirroringFilter {\n");
    
    sb.append("    filterAction: ").append(toIndentedString(filterAction)).append("\n");
    sb.append("    ipProtocol: ").append(toIndentedString(ipProtocol)).append("\n");
    sb.append("    srcIps: ").append(toIndentedString(srcIps)).append("\n");
    sb.append("    dstIps: ").append(toIndentedString(dstIps)).append("\n");
    sb.append("    dstPorts: ").append(toIndentedString(dstPorts)).append("\n");
    sb.append("    srcPorts: ").append(toIndentedString(srcPorts)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
