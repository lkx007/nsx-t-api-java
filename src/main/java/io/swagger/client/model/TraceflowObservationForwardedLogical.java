/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.TraceflowObservation;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * TraceflowObservationForwardedLogical
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class TraceflowObservationForwardedLogical extends TraceflowObservation {
  @SerializedName("service_path_index")
  private Long servicePathIndex = null;

  @SerializedName("component_id")
  private String componentId = null;

  /**
   * ARP_UNKNOWN_FROM_CP - Unknown ARP query result emitted by control plane ND_NS_UNKNOWN_FROM_CP - Unknown neighbor solicitation query result emitted by control plane UNKNOWN - Unknown resend type
   */
  @JsonAdapter(ResendTypeEnum.Adapter.class)
  public enum ResendTypeEnum {
    UNKNOWN("UNKNOWN"),
    ARP_UNKNOWN_FROM_CP("ARP_UNKNOWN_FROM_CP"),
    ND_NS_UNKNWON_FROM_CP("ND_NS_UNKNWON_FROM_CP");

    private String value;

    ResendTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ResendTypeEnum fromValue(String text) {
      for (ResendTypeEnum b : ResendTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ResendTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ResendTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ResendTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ResendTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("resend_type")
  private ResendTypeEnum resendType = null;

  @SerializedName("lport_name")
  private String lportName = null;

  @SerializedName("acl_rule_id")
  private Long aclRuleId = null;

  @SerializedName("service_index")
  private Long serviceIndex = null;

  /**
   * The type of the destination component to which the traceflow packet was forwarded.
   */
  @JsonAdapter(DstComponentTypeEnum.Adapter.class)
  public enum DstComponentTypeEnum {
    PHYSICAL("PHYSICAL"),
    LR("LR"),
    LS("LS"),
    DFW("DFW"),
    BRIDGE("BRIDGE"),
    EDGE_TUNNEL("EDGE_TUNNEL"),
    EDGE_HOSTSWITCH("EDGE_HOSTSWITCH"),
    FW_BRIDGE("FW_BRIDGE"),
    LOAD_BALANCER("LOAD_BALANCER"),
    NAT("NAT"),
    IPSEC("IPSEC"),
    SERVICE_INSERTION("SERVICE_INSERTION"),
    VMC("VMC"),
    EDGE_FW("EDGE_FW"),
    UNKNOWN("UNKNOWN");

    private String value;

    DstComponentTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static DstComponentTypeEnum fromValue(String text) {
      for (DstComponentTypeEnum b : DstComponentTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<DstComponentTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DstComponentTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DstComponentTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return DstComponentTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("dst_component_type")
  private DstComponentTypeEnum dstComponentType = null;

  @SerializedName("dst_component_name")
  private String dstComponentName = null;

  @SerializedName("nat_rule_id")
  private Long natRuleId = null;

  @SerializedName("translated_src_ip")
  private String translatedSrcIp = null;

  @SerializedName("translated_dst_ip")
  private String translatedDstIp = null;

  @SerializedName("vni")
  private Integer vni = null;

  @SerializedName("lport_id")
  private String lportId = null;

  @SerializedName("dst_component_id")
  private String dstComponentId = null;

  @SerializedName("service_ttl")
  private Long serviceTtl = null;

   /**
   * The path index of the service insertion component
   * @return servicePathIndex
  **/
  @Schema(description = "The path index of the service insertion component")
  public Long getServicePathIndex() {
    return servicePathIndex;
  }

   /**
   * The id of the component that forwarded the traceflow packet.
   * @return componentId
  **/
  @Schema(description = "The id of the component that forwarded the traceflow packet.")
  public String getComponentId() {
    return componentId;
  }

   /**
   * ARP_UNKNOWN_FROM_CP - Unknown ARP query result emitted by control plane ND_NS_UNKNOWN_FROM_CP - Unknown neighbor solicitation query result emitted by control plane UNKNOWN - Unknown resend type
   * @return resendType
  **/
  @Schema(description = "ARP_UNKNOWN_FROM_CP - Unknown ARP query result emitted by control plane ND_NS_UNKNOWN_FROM_CP - Unknown neighbor solicitation query result emitted by control plane UNKNOWN - Unknown resend type")
  public ResendTypeEnum getResendType() {
    return resendType;
  }

   /**
   * The name of the logical port through which the traceflow packet was forwarded.
   * @return lportName
  **/
  @Schema(description = "The name of the logical port through which the traceflow packet was forwarded.")
  public String getLportName() {
    return lportName;
  }

   /**
   * The id of the acl rule that was applied to forward the traceflow packet
   * @return aclRuleId
  **/
  @Schema(description = "The id of the acl rule that was applied to forward the traceflow packet")
  public Long getAclRuleId() {
    return aclRuleId;
  }

   /**
   * The index of the service insertion component
   * @return serviceIndex
  **/
  @Schema(description = "The index of the service insertion component")
  public Long getServiceIndex() {
    return serviceIndex;
  }

   /**
   * The type of the destination component to which the traceflow packet was forwarded.
   * @return dstComponentType
  **/
  @Schema(description = "The type of the destination component to which the traceflow packet was forwarded.")
  public DstComponentTypeEnum getDstComponentType() {
    return dstComponentType;
  }

   /**
   * The name of the destination component to which the traceflow packet was forwarded.
   * @return dstComponentName
  **/
  @Schema(description = "The name of the destination component to which the traceflow packet was forwarded.")
  public String getDstComponentName() {
    return dstComponentName;
  }

   /**
   * The ID of the NAT rule that was applied to forward the traceflow packet
   * @return natRuleId
  **/
  @Schema(description = "The ID of the NAT rule that was applied to forward the traceflow packet")
  public Long getNatRuleId() {
    return natRuleId;
  }

   /**
   * The translated source IP address of VPN/NAT
   * @return translatedSrcIp
  **/
  @Schema(description = "The translated source IP address of VPN/NAT")
  public String getTranslatedSrcIp() {
    return translatedSrcIp;
  }

   /**
   * The translated destination IP address of VNP/NAT
   * @return translatedDstIp
  **/
  @Schema(description = "The translated destination IP address of VNP/NAT")
  public String getTranslatedDstIp() {
    return translatedDstIp;
  }

   /**
   * VNI for the logical network on which the traceflow packet was forwarded.
   * @return vni
  **/
  @Schema(description = "VNI for the logical network on which the traceflow packet was forwarded.")
  public Integer getVni() {
    return vni;
  }

   /**
   * The id of the logical port through which the traceflow packet was forwarded.
   * @return lportId
  **/
  @Schema(description = "The id of the logical port through which the traceflow packet was forwarded.")
  public String getLportId() {
    return lportId;
  }

   /**
   * The id of the destination component to which the traceflow packet was forwarded.
   * @return dstComponentId
  **/
  @Schema(description = "The id of the destination component to which the traceflow packet was forwarded.")
  public String getDstComponentId() {
    return dstComponentId;
  }

   /**
   * The ttl of the service insertion component
   * @return serviceTtl
  **/
  @Schema(description = "The ttl of the service insertion component")
  public Long getServiceTtl() {
    return serviceTtl;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TraceflowObservationForwardedLogical traceflowObservationForwardedLogical = (TraceflowObservationForwardedLogical) o;
    return Objects.equals(this.servicePathIndex, traceflowObservationForwardedLogical.servicePathIndex) &&
        Objects.equals(this.componentId, traceflowObservationForwardedLogical.componentId) &&
        Objects.equals(this.resendType, traceflowObservationForwardedLogical.resendType) &&
        Objects.equals(this.lportName, traceflowObservationForwardedLogical.lportName) &&
        Objects.equals(this.aclRuleId, traceflowObservationForwardedLogical.aclRuleId) &&
        Objects.equals(this.serviceIndex, traceflowObservationForwardedLogical.serviceIndex) &&
        Objects.equals(this.dstComponentType, traceflowObservationForwardedLogical.dstComponentType) &&
        Objects.equals(this.dstComponentName, traceflowObservationForwardedLogical.dstComponentName) &&
        Objects.equals(this.natRuleId, traceflowObservationForwardedLogical.natRuleId) &&
        Objects.equals(this.translatedSrcIp, traceflowObservationForwardedLogical.translatedSrcIp) &&
        Objects.equals(this.translatedDstIp, traceflowObservationForwardedLogical.translatedDstIp) &&
        Objects.equals(this.vni, traceflowObservationForwardedLogical.vni) &&
        Objects.equals(this.lportId, traceflowObservationForwardedLogical.lportId) &&
        Objects.equals(this.dstComponentId, traceflowObservationForwardedLogical.dstComponentId) &&
        Objects.equals(this.serviceTtl, traceflowObservationForwardedLogical.serviceTtl) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(servicePathIndex, componentId, resendType, lportName, aclRuleId, serviceIndex, dstComponentType, dstComponentName, natRuleId, translatedSrcIp, translatedDstIp, vni, lportId, dstComponentId, serviceTtl, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TraceflowObservationForwardedLogical {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    servicePathIndex: ").append(toIndentedString(servicePathIndex)).append("\n");
    sb.append("    componentId: ").append(toIndentedString(componentId)).append("\n");
    sb.append("    resendType: ").append(toIndentedString(resendType)).append("\n");
    sb.append("    lportName: ").append(toIndentedString(lportName)).append("\n");
    sb.append("    aclRuleId: ").append(toIndentedString(aclRuleId)).append("\n");
    sb.append("    serviceIndex: ").append(toIndentedString(serviceIndex)).append("\n");
    sb.append("    dstComponentType: ").append(toIndentedString(dstComponentType)).append("\n");
    sb.append("    dstComponentName: ").append(toIndentedString(dstComponentName)).append("\n");
    sb.append("    natRuleId: ").append(toIndentedString(natRuleId)).append("\n");
    sb.append("    translatedSrcIp: ").append(toIndentedString(translatedSrcIp)).append("\n");
    sb.append("    translatedDstIp: ").append(toIndentedString(translatedDstIp)).append("\n");
    sb.append("    vni: ").append(toIndentedString(vni)).append("\n");
    sb.append("    lportId: ").append(toIndentedString(lportId)).append("\n");
    sb.append("    dstComponentId: ").append(toIndentedString(dstComponentId)).append("\n");
    sb.append("    serviceTtl: ").append(toIndentedString(serviceTtl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
