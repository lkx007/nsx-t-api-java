/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.CipherSuite;
import io.swagger.client.model.ProtocolVersion;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * Properties that affect the configuration of the NSX API service. 
 */
@Schema(description = "Properties that affect the configuration of the NSX API service. ")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class ApiServiceConfig {
  @SerializedName("global_api_concurrency_limit")
  private Long globalApiConcurrencyLimit = 199l;

  @SerializedName("lockout_immune_addresses")
  private List<String> lockoutImmuneAddresses = null;

  @SerializedName("client_api_concurrency_limit")
  private Long clientApiConcurrencyLimit = 40l;

  @SerializedName("session_timeout")
  private Long sessionTimeout = 1800l;

  @SerializedName("client_api_rate_limit")
  private Long clientApiRateLimit = 100l;

  @SerializedName("redirect_host")
  private String redirectHost = "";

  @SerializedName("protocol_versions")
  private List<ProtocolVersion> protocolVersions = null;

  @SerializedName("cipher_suites")
  private List<CipherSuite> cipherSuites = null;

  @SerializedName("connection_timeout")
  private Long connectionTimeout = 30l;

  public ApiServiceConfig globalApiConcurrencyLimit(Long globalApiConcurrencyLimit) {
    this.globalApiConcurrencyLimit = globalApiConcurrencyLimit;
    return this;
  }

   /**
   * The maximum number of concurrent API requests that will be serviced. If the number of API requests being processed exceeds this limit, new API requests will be refused and a 503 Service Unavailable response will be returned to the client.  To disable API concurrency limiting, set this value to 0.
   * minimum: 0
   * @return globalApiConcurrencyLimit
  **/
  @Schema(description = "The maximum number of concurrent API requests that will be serviced. If the number of API requests being processed exceeds this limit, new API requests will be refused and a 503 Service Unavailable response will be returned to the client.  To disable API concurrency limiting, set this value to 0.")
  public Long getGlobalApiConcurrencyLimit() {
    return globalApiConcurrencyLimit;
  }

  public void setGlobalApiConcurrencyLimit(Long globalApiConcurrencyLimit) {
    this.globalApiConcurrencyLimit = globalApiConcurrencyLimit;
  }

  public ApiServiceConfig lockoutImmuneAddresses(List<String> lockoutImmuneAddresses) {
    this.lockoutImmuneAddresses = lockoutImmuneAddresses;
    return this;
  }

  public ApiServiceConfig addLockoutImmuneAddressesItem(String lockoutImmuneAddressesItem) {
    if (this.lockoutImmuneAddresses == null) {
      this.lockoutImmuneAddresses = new ArrayList<String>();
    }
    this.lockoutImmuneAddresses.add(lockoutImmuneAddressesItem);
    return this;
  }

   /**
   * The list of IP addresses which are not subjected to a lockout on failed login attempts.
   * @return lockoutImmuneAddresses
  **/
  @Schema(description = "The list of IP addresses which are not subjected to a lockout on failed login attempts.")
  public List<String> getLockoutImmuneAddresses() {
    return lockoutImmuneAddresses;
  }

  public void setLockoutImmuneAddresses(List<String> lockoutImmuneAddresses) {
    this.lockoutImmuneAddresses = lockoutImmuneAddresses;
  }

  public ApiServiceConfig clientApiConcurrencyLimit(Long clientApiConcurrencyLimit) {
    this.clientApiConcurrencyLimit = clientApiConcurrencyLimit;
    return this;
  }

   /**
   * The maximum number of concurrent API requests that will be serviced for a given authenticated client.  If the number of API requests being processed exceeds this limit, new API requests will be refused and a 503 Service Unavailable response will be returned to the client. To disable API concurrency limiting, set this value to 0.
   * minimum: 0
   * @return clientApiConcurrencyLimit
  **/
  @Schema(description = "The maximum number of concurrent API requests that will be serviced for a given authenticated client.  If the number of API requests being processed exceeds this limit, new API requests will be refused and a 503 Service Unavailable response will be returned to the client. To disable API concurrency limiting, set this value to 0.")
  public Long getClientApiConcurrencyLimit() {
    return clientApiConcurrencyLimit;
  }

  public void setClientApiConcurrencyLimit(Long clientApiConcurrencyLimit) {
    this.clientApiConcurrencyLimit = clientApiConcurrencyLimit;
  }

  public ApiServiceConfig sessionTimeout(Long sessionTimeout) {
    this.sessionTimeout = sessionTimeout;
    return this;
  }

   /**
   * NSX session inactivity timeout
   * minimum: 0
   * maximum: 2147483647
   * @return sessionTimeout
  **/
  @Schema(description = "NSX session inactivity timeout")
  public Long getSessionTimeout() {
    return sessionTimeout;
  }

  public void setSessionTimeout(Long sessionTimeout) {
    this.sessionTimeout = sessionTimeout;
  }

  public ApiServiceConfig clientApiRateLimit(Long clientApiRateLimit) {
    this.clientApiRateLimit = clientApiRateLimit;
    return this;
  }

   /**
   * The maximum number of API requests that will be serviced per second for a given authenticated client.  If more API requests are received than can be serviced, a 429 Too Many Requests HTTP response will be returned. To disable API rate limiting, set this value to 0.
   * minimum: 0
   * @return clientApiRateLimit
  **/
  @Schema(description = "The maximum number of API requests that will be serviced per second for a given authenticated client.  If more API requests are received than can be serviced, a 429 Too Many Requests HTTP response will be returned. To disable API rate limiting, set this value to 0.")
  public Long getClientApiRateLimit() {
    return clientApiRateLimit;
  }

  public void setClientApiRateLimit(Long clientApiRateLimit) {
    this.clientApiRateLimit = clientApiRateLimit;
  }

  public ApiServiceConfig redirectHost(String redirectHost) {
    this.redirectHost = redirectHost;
    return this;
  }

   /**
   * Host name or IP address to use for redirect location headers, or empty string to derive from current request. To disable, set redirect_host to the empty string (\&quot;\&quot;).
   * @return redirectHost
  **/
  @Schema(description = "Host name or IP address to use for redirect location headers, or empty string to derive from current request. To disable, set redirect_host to the empty string (\"\").")
  public String getRedirectHost() {
    return redirectHost;
  }

  public void setRedirectHost(String redirectHost) {
    this.redirectHost = redirectHost;
  }

  public ApiServiceConfig protocolVersions(List<ProtocolVersion> protocolVersions) {
    this.protocolVersions = protocolVersions;
    return this;
  }

  public ApiServiceConfig addProtocolVersionsItem(ProtocolVersion protocolVersionsItem) {
    if (this.protocolVersions == null) {
      this.protocolVersions = new ArrayList<ProtocolVersion>();
    }
    this.protocolVersions.add(protocolVersionsItem);
    return this;
  }

   /**
   * The TLS protocol versions that the API service will negotiate.
   * @return protocolVersions
  **/
  @Schema(description = "The TLS protocol versions that the API service will negotiate.")
  public List<ProtocolVersion> getProtocolVersions() {
    return protocolVersions;
  }

  public void setProtocolVersions(List<ProtocolVersion> protocolVersions) {
    this.protocolVersions = protocolVersions;
  }

  public ApiServiceConfig cipherSuites(List<CipherSuite> cipherSuites) {
    this.cipherSuites = cipherSuites;
    return this;
  }

  public ApiServiceConfig addCipherSuitesItem(CipherSuite cipherSuitesItem) {
    if (this.cipherSuites == null) {
      this.cipherSuites = new ArrayList<CipherSuite>();
    }
    this.cipherSuites.add(cipherSuitesItem);
    return this;
  }

   /**
   * The TLS cipher suites that the API service will negotiate.
   * @return cipherSuites
  **/
  @Schema(description = "The TLS cipher suites that the API service will negotiate.")
  public List<CipherSuite> getCipherSuites() {
    return cipherSuites;
  }

  public void setCipherSuites(List<CipherSuite> cipherSuites) {
    this.cipherSuites = cipherSuites;
  }

  public ApiServiceConfig connectionTimeout(Long connectionTimeout) {
    this.connectionTimeout = connectionTimeout;
    return this;
  }

   /**
   * NSX connection timeout, in seconds. To disable timeout, set to 0.
   * minimum: 0
   * maximum: 2147483647
   * @return connectionTimeout
  **/
  @Schema(description = "NSX connection timeout, in seconds. To disable timeout, set to 0.")
  public Long getConnectionTimeout() {
    return connectionTimeout;
  }

  public void setConnectionTimeout(Long connectionTimeout) {
    this.connectionTimeout = connectionTimeout;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApiServiceConfig apiServiceConfig = (ApiServiceConfig) o;
    return Objects.equals(this.globalApiConcurrencyLimit, apiServiceConfig.globalApiConcurrencyLimit) &&
        Objects.equals(this.lockoutImmuneAddresses, apiServiceConfig.lockoutImmuneAddresses) &&
        Objects.equals(this.clientApiConcurrencyLimit, apiServiceConfig.clientApiConcurrencyLimit) &&
        Objects.equals(this.sessionTimeout, apiServiceConfig.sessionTimeout) &&
        Objects.equals(this.clientApiRateLimit, apiServiceConfig.clientApiRateLimit) &&
        Objects.equals(this.redirectHost, apiServiceConfig.redirectHost) &&
        Objects.equals(this.protocolVersions, apiServiceConfig.protocolVersions) &&
        Objects.equals(this.cipherSuites, apiServiceConfig.cipherSuites) &&
        Objects.equals(this.connectionTimeout, apiServiceConfig.connectionTimeout);
  }

  @Override
  public int hashCode() {
    return Objects.hash(globalApiConcurrencyLimit, lockoutImmuneAddresses, clientApiConcurrencyLimit, sessionTimeout, clientApiRateLimit, redirectHost, protocolVersions, cipherSuites, connectionTimeout);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApiServiceConfig {\n");
    
    sb.append("    globalApiConcurrencyLimit: ").append(toIndentedString(globalApiConcurrencyLimit)).append("\n");
    sb.append("    lockoutImmuneAddresses: ").append(toIndentedString(lockoutImmuneAddresses)).append("\n");
    sb.append("    clientApiConcurrencyLimit: ").append(toIndentedString(clientApiConcurrencyLimit)).append("\n");
    sb.append("    sessionTimeout: ").append(toIndentedString(sessionTimeout)).append("\n");
    sb.append("    clientApiRateLimit: ").append(toIndentedString(clientApiRateLimit)).append("\n");
    sb.append("    redirectHost: ").append(toIndentedString(redirectHost)).append("\n");
    sb.append("    protocolVersions: ").append(toIndentedString(protocolVersions)).append("\n");
    sb.append("    cipherSuites: ").append(toIndentedString(cipherSuites)).append("\n");
    sb.append("    connectionTimeout: ").append(toIndentedString(connectionTimeout)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
