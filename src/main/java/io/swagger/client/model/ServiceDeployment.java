/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.DeploymentTemplate;
import io.swagger.client.model.ManagedResource;
import io.swagger.client.model.ResourceReference;
import io.swagger.client.model.ServiceDeploymentConfig;
import io.swagger.client.model.Tag;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * Used to provide the deployment specification for the service.
 */
@Schema(description = "Used to provide the deployment specification for the service.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class ServiceDeployment extends ManagedResource {
  /**
   * This indicates the deployment perimeter, such as a VC cluster or a host.
   */
  @JsonAdapter(PerimeterEnum.Adapter.class)
  public enum PerimeterEnum {
    CLUSTER("CLUSTER"),
    HOST("HOST");

    private String value;

    PerimeterEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static PerimeterEnum fromValue(String text) {
      for (PerimeterEnum b : PerimeterEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<PerimeterEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PerimeterEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PerimeterEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return PerimeterEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("perimeter")
  private PerimeterEnum perimeter = PerimeterEnum.HOST;

  @SerializedName("deployment_spec_name")
  private String deploymentSpecName = null;

  /**
   * Mode of deployment. Currently, only stand alone deployment is supported. It is a single VM deployed through this deployment spec. In future, HA configurations will be supported here.
   */
  @JsonAdapter(DeploymentModeEnum.Adapter.class)
  public enum DeploymentModeEnum {
    STAND_ALONE("STAND_ALONE"),
    ACTIVE_STANDBY("ACTIVE_STANDBY");

    private String value;

    DeploymentModeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static DeploymentModeEnum fromValue(String text) {
      for (DeploymentModeEnum b : DeploymentModeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<DeploymentModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DeploymentModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DeploymentModeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return DeploymentModeEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("deployment_mode")
  private DeploymentModeEnum deploymentMode = DeploymentModeEnum.STAND_ALONE;

  @SerializedName("instance_deployment_template")
  private DeploymentTemplate instanceDeploymentTemplate = null;

  @SerializedName("service_deployment_config")
  private ServiceDeploymentConfig serviceDeploymentConfig = null;

  @SerializedName("service_id")
  private String serviceId = null;

  @SerializedName("clustered_deployment_count")
  private Long clusteredDeploymentCount = 1l;

  @SerializedName("deployed_to")
  private List<ResourceReference> deployedTo = null;

  /**
   * Specifies whether the service VM should be deployed on each host such that it provides partner service locally on the host, or whether the service VMs can be deployed as a cluster. If deployment_type is CLUSTERED, then the clustered_deployment_count should be provided.
   */
  @JsonAdapter(DeploymentTypeEnum.Adapter.class)
  public enum DeploymentTypeEnum {
    HOSTLOCAL("HOSTLOCAL"),
    CLUSTERED("CLUSTERED");

    private String value;

    DeploymentTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static DeploymentTypeEnum fromValue(String text) {
      for (DeploymentTypeEnum b : DeploymentTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<DeploymentTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DeploymentTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DeploymentTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return DeploymentTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("deployment_type")
  private DeploymentTypeEnum deploymentType = DeploymentTypeEnum.CLUSTERED;

  public ServiceDeployment perimeter(PerimeterEnum perimeter) {
    this.perimeter = perimeter;
    return this;
  }

   /**
   * This indicates the deployment perimeter, such as a VC cluster or a host.
   * @return perimeter
  **/
  @Schema(description = "This indicates the deployment perimeter, such as a VC cluster or a host.")
  public PerimeterEnum getPerimeter() {
    return perimeter;
  }

  public void setPerimeter(PerimeterEnum perimeter) {
    this.perimeter = perimeter;
  }

  public ServiceDeployment deploymentSpecName(String deploymentSpecName) {
    this.deploymentSpecName = deploymentSpecName;
    return this;
  }

   /**
   * Name of the deployment spec to be used for deployment, which specifies the OVF provided by the partner and the form factor.
   * @return deploymentSpecName
  **/
  @Schema(required = true, description = "Name of the deployment spec to be used for deployment, which specifies the OVF provided by the partner and the form factor.")
  public String getDeploymentSpecName() {
    return deploymentSpecName;
  }

  public void setDeploymentSpecName(String deploymentSpecName) {
    this.deploymentSpecName = deploymentSpecName;
  }

  public ServiceDeployment deploymentMode(DeploymentModeEnum deploymentMode) {
    this.deploymentMode = deploymentMode;
    return this;
  }

   /**
   * Mode of deployment. Currently, only stand alone deployment is supported. It is a single VM deployed through this deployment spec. In future, HA configurations will be supported here.
   * @return deploymentMode
  **/
  @Schema(description = "Mode of deployment. Currently, only stand alone deployment is supported. It is a single VM deployed through this deployment spec. In future, HA configurations will be supported here.")
  public DeploymentModeEnum getDeploymentMode() {
    return deploymentMode;
  }

  public void setDeploymentMode(DeploymentModeEnum deploymentMode) {
    this.deploymentMode = deploymentMode;
  }

  public ServiceDeployment instanceDeploymentTemplate(DeploymentTemplate instanceDeploymentTemplate) {
    this.instanceDeploymentTemplate = instanceDeploymentTemplate;
    return this;
  }

   /**
   * Get instanceDeploymentTemplate
   * @return instanceDeploymentTemplate
  **/
  @Schema(required = true, description = "")
  public DeploymentTemplate getInstanceDeploymentTemplate() {
    return instanceDeploymentTemplate;
  }

  public void setInstanceDeploymentTemplate(DeploymentTemplate instanceDeploymentTemplate) {
    this.instanceDeploymentTemplate = instanceDeploymentTemplate;
  }

  public ServiceDeployment serviceDeploymentConfig(ServiceDeploymentConfig serviceDeploymentConfig) {
    this.serviceDeploymentConfig = serviceDeploymentConfig;
    return this;
  }

   /**
   * Get serviceDeploymentConfig
   * @return serviceDeploymentConfig
  **/
  @Schema(required = true, description = "")
  public ServiceDeploymentConfig getServiceDeploymentConfig() {
    return serviceDeploymentConfig;
  }

  public void setServiceDeploymentConfig(ServiceDeploymentConfig serviceDeploymentConfig) {
    this.serviceDeploymentConfig = serviceDeploymentConfig;
  }

   /**
   * The Service to which the service deployment is associated.
   * @return serviceId
  **/
  @Schema(description = "The Service to which the service deployment is associated.")
  public String getServiceId() {
    return serviceId;
  }

  public ServiceDeployment clusteredDeploymentCount(Long clusteredDeploymentCount) {
    this.clusteredDeploymentCount = clusteredDeploymentCount;
    return this;
  }

   /**
   * Number of instances in case of clustered deployment.
   * minimum: 1
   * maximum: 10
   * @return clusteredDeploymentCount
  **/
  @Schema(description = "Number of instances in case of clustered deployment.")
  public Long getClusteredDeploymentCount() {
    return clusteredDeploymentCount;
  }

  public void setClusteredDeploymentCount(Long clusteredDeploymentCount) {
    this.clusteredDeploymentCount = clusteredDeploymentCount;
  }

  public ServiceDeployment deployedTo(List<ResourceReference> deployedTo) {
    this.deployedTo = deployedTo;
    return this;
  }

  public ServiceDeployment addDeployedToItem(ResourceReference deployedToItem) {
    if (this.deployedTo == null) {
      this.deployedTo = new ArrayList<ResourceReference>();
    }
    this.deployedTo.add(deployedToItem);
    return this;
  }

   /**
   * List of resource references where service instance be deployed. Ex. Tier 0 Logical Router in case of N-S ServiceInsertion. Service Attachment in case of E-W ServiceInsertion.
   * @return deployedTo
  **/
  @Schema(description = "List of resource references where service instance be deployed. Ex. Tier 0 Logical Router in case of N-S ServiceInsertion. Service Attachment in case of E-W ServiceInsertion.")
  public List<ResourceReference> getDeployedTo() {
    return deployedTo;
  }

  public void setDeployedTo(List<ResourceReference> deployedTo) {
    this.deployedTo = deployedTo;
  }

  public ServiceDeployment deploymentType(DeploymentTypeEnum deploymentType) {
    this.deploymentType = deploymentType;
    return this;
  }

   /**
   * Specifies whether the service VM should be deployed on each host such that it provides partner service locally on the host, or whether the service VMs can be deployed as a cluster. If deployment_type is CLUSTERED, then the clustered_deployment_count should be provided.
   * @return deploymentType
  **/
  @Schema(description = "Specifies whether the service VM should be deployed on each host such that it provides partner service locally on the host, or whether the service VMs can be deployed as a cluster. If deployment_type is CLUSTERED, then the clustered_deployment_count should be provided.")
  public DeploymentTypeEnum getDeploymentType() {
    return deploymentType;
  }

  public void setDeploymentType(DeploymentTypeEnum deploymentType) {
    this.deploymentType = deploymentType;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServiceDeployment serviceDeployment = (ServiceDeployment) o;
    return Objects.equals(this.perimeter, serviceDeployment.perimeter) &&
        Objects.equals(this.deploymentSpecName, serviceDeployment.deploymentSpecName) &&
        Objects.equals(this.deploymentMode, serviceDeployment.deploymentMode) &&
        Objects.equals(this.instanceDeploymentTemplate, serviceDeployment.instanceDeploymentTemplate) &&
        Objects.equals(this.serviceDeploymentConfig, serviceDeployment.serviceDeploymentConfig) &&
        Objects.equals(this.serviceId, serviceDeployment.serviceId) &&
        Objects.equals(this.clusteredDeploymentCount, serviceDeployment.clusteredDeploymentCount) &&
        Objects.equals(this.deployedTo, serviceDeployment.deployedTo) &&
        Objects.equals(this.deploymentType, serviceDeployment.deploymentType) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(perimeter, deploymentSpecName, deploymentMode, instanceDeploymentTemplate, serviceDeploymentConfig, serviceId, clusteredDeploymentCount, deployedTo, deploymentType, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServiceDeployment {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    perimeter: ").append(toIndentedString(perimeter)).append("\n");
    sb.append("    deploymentSpecName: ").append(toIndentedString(deploymentSpecName)).append("\n");
    sb.append("    deploymentMode: ").append(toIndentedString(deploymentMode)).append("\n");
    sb.append("    instanceDeploymentTemplate: ").append(toIndentedString(instanceDeploymentTemplate)).append("\n");
    sb.append("    serviceDeploymentConfig: ").append(toIndentedString(serviceDeploymentConfig)).append("\n");
    sb.append("    serviceId: ").append(toIndentedString(serviceId)).append("\n");
    sb.append("    clusteredDeploymentCount: ").append(toIndentedString(clusteredDeploymentCount)).append("\n");
    sb.append("    deployedTo: ").append(toIndentedString(deployedTo)).append("\n");
    sb.append("    deploymentType: ").append(toIndentedString(deploymentType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
