/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * Parameters to tell where rule/section need to be added. All the params take rule/section Id.
 */
@Schema(description = "Parameters to tell where rule/section need to be added. All the params take rule/section Id.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class DSInsertParameters {
  /**
   * Operation
   */
  @JsonAdapter(OperationEnum.Adapter.class)
  public enum OperationEnum {
    TOP("insert_top"),
    BOTTOM("insert_bottom"),
    AFTER("insert_after"),
    BEFORE("insert_before");

    private String value;

    OperationEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static OperationEnum fromValue(String text) {
      for (OperationEnum b : OperationEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<OperationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OperationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OperationEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return OperationEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("operation")
  private OperationEnum operation = OperationEnum.TOP;

  @SerializedName("id")
  private String id = null;

  public DSInsertParameters operation(OperationEnum operation) {
    this.operation = operation;
    return this;
  }

   /**
   * Operation
   * @return operation
  **/
  @Schema(description = "Operation")
  public OperationEnum getOperation() {
    return operation;
  }

  public void setOperation(OperationEnum operation) {
    this.operation = operation;
  }

  public DSInsertParameters id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Identifier of the anchor rule or section. This is a required field in case operation like &#x27;insert_before&#x27; and &#x27;insert_after&#x27;.
   * @return id
  **/
  @Schema(description = "Identifier of the anchor rule or section. This is a required field in case operation like 'insert_before' and 'insert_after'.")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DSInsertParameters dsInsertParameters = (DSInsertParameters) o;
    return Objects.equals(this.operation, dsInsertParameters.operation) &&
        Objects.equals(this.id, dsInsertParameters.id);
  }

  @Override
  public int hashCode() {
    return Objects.hash(operation, id);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DSInsertParameters {\n");
    
    sb.append("    operation: ").append(toIndentedString(operation)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
