/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.Tooltip;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * Icon to be applied at dashboard for widgets and UI elements.
 */
@Schema(description = "Icon to be applied at dashboard for widgets and UI elements.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class Icon {
  /**
   * If specified as PRE, the icon appears before the UI element. If set as POST, the icon appears after the UI element.
   */
  @JsonAdapter(PlacementEnum.Adapter.class)
  public enum PlacementEnum {
    PRE("PRE"),
    POST("POST");

    private String value;

    PlacementEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static PlacementEnum fromValue(String text) {
      for (PlacementEnum b : PlacementEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<PlacementEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PlacementEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PlacementEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return PlacementEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("placement")
  private PlacementEnum placement = PlacementEnum.PRE;

  /**
   * Icon will be rendered based on its type. For example, if ERROR is chosen, then icon representing error will be rendered.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    ERROR("ERROR"),
    WARNING("WARNING"),
    INFO("INFO"),
    INPROGRESS("INPROGRESS"),
    SUCCESS("SUCCESS"),
    DETAIL("DETAIL"),
    NOT_AVAILABLE("NOT_AVAILABLE"),
    SECURITY("SECURITY"),
    NETWORKING("NETWORKING"),
    LOAD_BALANCER("LOAD_BALANCER"),
    VPN("VPN"),
    DOMAIN("DOMAIN"),
    GROUP("GROUP"),
    DISTRIBUTED_FIREWALL("DISTRIBUTED_FIREWALL"),
    NETWORKING_TIER0("NETWORKING_TIER0"),
    NETWORKING_TIER1("NETWORKING_TIER1"),
    SEGMENT("SEGMENT"),
    SYSTEM("SYSTEM"),
    SYSTEM_FABRIC("SYSTEM_FABRIC"),
    SYSTEM_BACKUPRESTORE("SYSTEM_BACKUPRESTORE"),
    INVENTORY_GROUPS("INVENTORY_GROUPS"),
    SECURITY_DFW("SECURITY_DFW");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static TypeEnum fromValue(String text) {
      for (TypeEnum b : TypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TypeEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("type")
  private TypeEnum type = null;

  @SerializedName("tooltip")
  private List<Tooltip> tooltip = null;

  public Icon placement(PlacementEnum placement) {
    this.placement = placement;
    return this;
  }

   /**
   * If specified as PRE, the icon appears before the UI element. If set as POST, the icon appears after the UI element.
   * @return placement
  **/
  @Schema(description = "If specified as PRE, the icon appears before the UI element. If set as POST, the icon appears after the UI element.")
  public PlacementEnum getPlacement() {
    return placement;
  }

  public void setPlacement(PlacementEnum placement) {
    this.placement = placement;
  }

  public Icon type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * Icon will be rendered based on its type. For example, if ERROR is chosen, then icon representing error will be rendered.
   * @return type
  **/
  @Schema(description = "Icon will be rendered based on its type. For example, if ERROR is chosen, then icon representing error will be rendered.")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public Icon tooltip(List<Tooltip> tooltip) {
    this.tooltip = tooltip;
    return this;
  }

  public Icon addTooltipItem(Tooltip tooltipItem) {
    if (this.tooltip == null) {
      this.tooltip = new ArrayList<Tooltip>();
    }
    this.tooltip.add(tooltipItem);
    return this;
  }

   /**
   * Multi-line text to be shown on tooltip while hovering over the icon.
   * @return tooltip
  **/
  @Schema(description = "Multi-line text to be shown on tooltip while hovering over the icon.")
  public List<Tooltip> getTooltip() {
    return tooltip;
  }

  public void setTooltip(List<Tooltip> tooltip) {
    this.tooltip = tooltip;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Icon icon = (Icon) o;
    return Objects.equals(this.placement, icon.placement) &&
        Objects.equals(this.type, icon.type) &&
        Objects.equals(this.tooltip, icon.tooltip);
  }

  @Override
  public int hashCode() {
    return Objects.hash(placement, type, tooltip);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Icon {\n");
    
    sb.append("    placement: ").append(toIndentedString(placement)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    tooltip: ").append(toIndentedString(tooltip)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
