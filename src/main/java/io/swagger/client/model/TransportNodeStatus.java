/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.AgentStatusCount;
import io.swagger.client.model.NodeStatus;
import io.swagger.client.model.StatusCount;
import io.swagger.client.model.ThreatStatus;
import io.swagger.client.model.TunnelStatusCount;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * TransportNodeStatus
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class TransportNodeStatus {
  /**
   * Roll-up status of pNIC, management connection, control connection, tunnel status, agent status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    UP("UP"),
    DOWN("DOWN"),
    DEGRADED("DEGRADED"),
    UNKNOWN("UNKNOWN");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static StatusEnum fromValue(String text) {
      for (StatusEnum b : StatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StatusEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("status")
  private StatusEnum status = null;

  @SerializedName("threat_status")
  private ThreatStatus threatStatus = null;

  @SerializedName("agent_status")
  private AgentStatusCount agentStatus = null;

  @SerializedName("node_uuid")
  private String nodeUuid = null;

  @SerializedName("tunnel_status")
  private TunnelStatusCount tunnelStatus = null;

  /**
   * Management connection status
   */
  @JsonAdapter(MgmtConnectionStatusEnum.Adapter.class)
  public enum MgmtConnectionStatusEnum {
    UP("UP"),
    DOWN("DOWN");

    private String value;

    MgmtConnectionStatusEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static MgmtConnectionStatusEnum fromValue(String text) {
      for (MgmtConnectionStatusEnum b : MgmtConnectionStatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<MgmtConnectionStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MgmtConnectionStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MgmtConnectionStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return MgmtConnectionStatusEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("mgmt_connection_status")
  private MgmtConnectionStatusEnum mgmtConnectionStatus = null;

  @SerializedName("control_connection_status")
  private StatusCount controlConnectionStatus = null;

  @SerializedName("pnic_status")
  private StatusCount pnicStatus = null;

  @SerializedName("node_status")
  private NodeStatus nodeStatus = null;

  @SerializedName("node_display_name")
  private String nodeDisplayName = null;

  public TransportNodeStatus status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * Roll-up status of pNIC, management connection, control connection, tunnel status, agent status
   * @return status
  **/
  @Schema(description = "Roll-up status of pNIC, management connection, control connection, tunnel status, agent status")
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }

  public TransportNodeStatus threatStatus(ThreatStatus threatStatus) {
    this.threatStatus = threatStatus;
    return this;
  }

   /**
   * Get threatStatus
   * @return threatStatus
  **/
  @Schema(description = "")
  public ThreatStatus getThreatStatus() {
    return threatStatus;
  }

  public void setThreatStatus(ThreatStatus threatStatus) {
    this.threatStatus = threatStatus;
  }

  public TransportNodeStatus agentStatus(AgentStatusCount agentStatus) {
    this.agentStatus = agentStatus;
    return this;
  }

   /**
   * Get agentStatus
   * @return agentStatus
  **/
  @Schema(description = "")
  public AgentStatusCount getAgentStatus() {
    return agentStatus;
  }

  public void setAgentStatus(AgentStatusCount agentStatus) {
    this.agentStatus = agentStatus;
  }

  public TransportNodeStatus nodeUuid(String nodeUuid) {
    this.nodeUuid = nodeUuid;
    return this;
  }

   /**
   * Transport node uuid
   * @return nodeUuid
  **/
  @Schema(description = "Transport node uuid")
  public String getNodeUuid() {
    return nodeUuid;
  }

  public void setNodeUuid(String nodeUuid) {
    this.nodeUuid = nodeUuid;
  }

  public TransportNodeStatus tunnelStatus(TunnelStatusCount tunnelStatus) {
    this.tunnelStatus = tunnelStatus;
    return this;
  }

   /**
   * Get tunnelStatus
   * @return tunnelStatus
  **/
  @Schema(description = "")
  public TunnelStatusCount getTunnelStatus() {
    return tunnelStatus;
  }

  public void setTunnelStatus(TunnelStatusCount tunnelStatus) {
    this.tunnelStatus = tunnelStatus;
  }

  public TransportNodeStatus mgmtConnectionStatus(MgmtConnectionStatusEnum mgmtConnectionStatus) {
    this.mgmtConnectionStatus = mgmtConnectionStatus;
    return this;
  }

   /**
   * Management connection status
   * @return mgmtConnectionStatus
  **/
  @Schema(description = "Management connection status")
  public MgmtConnectionStatusEnum getMgmtConnectionStatus() {
    return mgmtConnectionStatus;
  }

  public void setMgmtConnectionStatus(MgmtConnectionStatusEnum mgmtConnectionStatus) {
    this.mgmtConnectionStatus = mgmtConnectionStatus;
  }

  public TransportNodeStatus controlConnectionStatus(StatusCount controlConnectionStatus) {
    this.controlConnectionStatus = controlConnectionStatus;
    return this;
  }

   /**
   * Get controlConnectionStatus
   * @return controlConnectionStatus
  **/
  @Schema(description = "")
  public StatusCount getControlConnectionStatus() {
    return controlConnectionStatus;
  }

  public void setControlConnectionStatus(StatusCount controlConnectionStatus) {
    this.controlConnectionStatus = controlConnectionStatus;
  }

  public TransportNodeStatus pnicStatus(StatusCount pnicStatus) {
    this.pnicStatus = pnicStatus;
    return this;
  }

   /**
   * Get pnicStatus
   * @return pnicStatus
  **/
  @Schema(description = "")
  public StatusCount getPnicStatus() {
    return pnicStatus;
  }

  public void setPnicStatus(StatusCount pnicStatus) {
    this.pnicStatus = pnicStatus;
  }

  public TransportNodeStatus nodeStatus(NodeStatus nodeStatus) {
    this.nodeStatus = nodeStatus;
    return this;
  }

   /**
   * Get nodeStatus
   * @return nodeStatus
  **/
  @Schema(description = "")
  public NodeStatus getNodeStatus() {
    return nodeStatus;
  }

  public void setNodeStatus(NodeStatus nodeStatus) {
    this.nodeStatus = nodeStatus;
  }

  public TransportNodeStatus nodeDisplayName(String nodeDisplayName) {
    this.nodeDisplayName = nodeDisplayName;
    return this;
  }

   /**
   * Transport node display name
   * @return nodeDisplayName
  **/
  @Schema(description = "Transport node display name")
  public String getNodeDisplayName() {
    return nodeDisplayName;
  }

  public void setNodeDisplayName(String nodeDisplayName) {
    this.nodeDisplayName = nodeDisplayName;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransportNodeStatus transportNodeStatus = (TransportNodeStatus) o;
    return Objects.equals(this.status, transportNodeStatus.status) &&
        Objects.equals(this.threatStatus, transportNodeStatus.threatStatus) &&
        Objects.equals(this.agentStatus, transportNodeStatus.agentStatus) &&
        Objects.equals(this.nodeUuid, transportNodeStatus.nodeUuid) &&
        Objects.equals(this.tunnelStatus, transportNodeStatus.tunnelStatus) &&
        Objects.equals(this.mgmtConnectionStatus, transportNodeStatus.mgmtConnectionStatus) &&
        Objects.equals(this.controlConnectionStatus, transportNodeStatus.controlConnectionStatus) &&
        Objects.equals(this.pnicStatus, transportNodeStatus.pnicStatus) &&
        Objects.equals(this.nodeStatus, transportNodeStatus.nodeStatus) &&
        Objects.equals(this.nodeDisplayName, transportNodeStatus.nodeDisplayName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(status, threatStatus, agentStatus, nodeUuid, tunnelStatus, mgmtConnectionStatus, controlConnectionStatus, pnicStatus, nodeStatus, nodeDisplayName);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransportNodeStatus {\n");
    
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    threatStatus: ").append(toIndentedString(threatStatus)).append("\n");
    sb.append("    agentStatus: ").append(toIndentedString(agentStatus)).append("\n");
    sb.append("    nodeUuid: ").append(toIndentedString(nodeUuid)).append("\n");
    sb.append("    tunnelStatus: ").append(toIndentedString(tunnelStatus)).append("\n");
    sb.append("    mgmtConnectionStatus: ").append(toIndentedString(mgmtConnectionStatus)).append("\n");
    sb.append("    controlConnectionStatus: ").append(toIndentedString(controlConnectionStatus)).append("\n");
    sb.append("    pnicStatus: ").append(toIndentedString(pnicStatus)).append("\n");
    sb.append("    nodeStatus: ").append(toIndentedString(nodeStatus)).append("\n");
    sb.append("    nodeDisplayName: ").append(toIndentedString(nodeDisplayName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
