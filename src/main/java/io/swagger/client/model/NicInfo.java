/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.NicMetadata;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * Information of a network interface present on the partner appliance that needs to be configured by the NSX Manager.
 */
@Schema(description = "Information of a network interface present on the partner appliance that needs to be configured by the NSX Manager.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class NicInfo {
  @SerializedName("subnet_mask")
  private String subnetMask = null;

  @SerializedName("gateway_address")
  private String gatewayAddress = null;

  /**
   * IP allocation type with values STATIC, DHCP, or NONE indicating that IP address is not required.
   */
  @JsonAdapter(IpAllocationTypeEnum.Adapter.class)
  public enum IpAllocationTypeEnum {
    STATIC("STATIC"),
    DHCP("DHCP"),
    NONE("NONE");

    private String value;

    IpAllocationTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static IpAllocationTypeEnum fromValue(String text) {
      for (IpAllocationTypeEnum b : IpAllocationTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<IpAllocationTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IpAllocationTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IpAllocationTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return IpAllocationTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("ip_allocation_type")
  private IpAllocationTypeEnum ipAllocationType = null;

  @SerializedName("nic_metadata")
  private NicMetadata nicMetadata = null;

  @SerializedName("network_id")
  private String networkId = null;

  @SerializedName("ip_pool_id")
  private String ipPoolId = null;

  @SerializedName("ip_address")
  private String ipAddress = null;

  public NicInfo subnetMask(String subnetMask) {
    this.subnetMask = subnetMask;
    return this;
  }

   /**
   * Subnet mask associated with the NIC metadata.
   * @return subnetMask
  **/
  @Schema(description = "Subnet mask associated with the NIC metadata.")
  public String getSubnetMask() {
    return subnetMask;
  }

  public void setSubnetMask(String subnetMask) {
    this.subnetMask = subnetMask;
  }

  public NicInfo gatewayAddress(String gatewayAddress) {
    this.gatewayAddress = gatewayAddress;
    return this;
  }

   /**
   * Gateway address associated with the NIC metadata.
   * @return gatewayAddress
  **/
  @Schema(description = "Gateway address associated with the NIC metadata.")
  public String getGatewayAddress() {
    return gatewayAddress;
  }

  public void setGatewayAddress(String gatewayAddress) {
    this.gatewayAddress = gatewayAddress;
  }

  public NicInfo ipAllocationType(IpAllocationTypeEnum ipAllocationType) {
    this.ipAllocationType = ipAllocationType;
    return this;
  }

   /**
   * IP allocation type with values STATIC, DHCP, or NONE indicating that IP address is not required.
   * @return ipAllocationType
  **/
  @Schema(description = "IP allocation type with values STATIC, DHCP, or NONE indicating that IP address is not required.")
  public IpAllocationTypeEnum getIpAllocationType() {
    return ipAllocationType;
  }

  public void setIpAllocationType(IpAllocationTypeEnum ipAllocationType) {
    this.ipAllocationType = ipAllocationType;
  }

  public NicInfo nicMetadata(NicMetadata nicMetadata) {
    this.nicMetadata = nicMetadata;
    return this;
  }

   /**
   * Get nicMetadata
   * @return nicMetadata
  **/
  @Schema(description = "")
  public NicMetadata getNicMetadata() {
    return nicMetadata;
  }

  public void setNicMetadata(NicMetadata nicMetadata) {
    this.nicMetadata = nicMetadata;
  }

  public NicInfo networkId(String networkId) {
    this.networkId = networkId;
    return this;
  }

   /**
   * Network Id associated with the NIC metadata. It can be a moref, or a logical switch ID. If it is to be taken from &#x27;Agent VM Settings&#x27;, then it should be empty.
   * @return networkId
  **/
  @Schema(description = "Network Id associated with the NIC metadata. It can be a moref, or a logical switch ID. If it is to be taken from 'Agent VM Settings', then it should be empty.")
  public String getNetworkId() {
    return networkId;
  }

  public void setNetworkId(String networkId) {
    this.networkId = networkId;
  }

  public NicInfo ipPoolId(String ipPoolId) {
    this.ipPoolId = ipPoolId;
    return this;
  }

   /**
   * If the nic should get IP using a static IP pool then IP pool id should be provided here.
   * @return ipPoolId
  **/
  @Schema(description = "If the nic should get IP using a static IP pool then IP pool id should be provided here.")
  public String getIpPoolId() {
    return ipPoolId;
  }

  public void setIpPoolId(String ipPoolId) {
    this.ipPoolId = ipPoolId;
  }

  public NicInfo ipAddress(String ipAddress) {
    this.ipAddress = ipAddress;
    return this;
  }

   /**
   * IP address associated with the NIC metadata. Required only when assigning IP statically for a deployment that is for a single VM instance.
   * @return ipAddress
  **/
  @Schema(description = "IP address associated with the NIC metadata. Required only when assigning IP statically for a deployment that is for a single VM instance.")
  public String getIpAddress() {
    return ipAddress;
  }

  public void setIpAddress(String ipAddress) {
    this.ipAddress = ipAddress;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NicInfo nicInfo = (NicInfo) o;
    return Objects.equals(this.subnetMask, nicInfo.subnetMask) &&
        Objects.equals(this.gatewayAddress, nicInfo.gatewayAddress) &&
        Objects.equals(this.ipAllocationType, nicInfo.ipAllocationType) &&
        Objects.equals(this.nicMetadata, nicInfo.nicMetadata) &&
        Objects.equals(this.networkId, nicInfo.networkId) &&
        Objects.equals(this.ipPoolId, nicInfo.ipPoolId) &&
        Objects.equals(this.ipAddress, nicInfo.ipAddress);
  }

  @Override
  public int hashCode() {
    return Objects.hash(subnetMask, gatewayAddress, ipAllocationType, nicMetadata, networkId, ipPoolId, ipAddress);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NicInfo {\n");
    
    sb.append("    subnetMask: ").append(toIndentedString(subnetMask)).append("\n");
    sb.append("    gatewayAddress: ").append(toIndentedString(gatewayAddress)).append("\n");
    sb.append("    ipAllocationType: ").append(toIndentedString(ipAllocationType)).append("\n");
    sb.append("    nicMetadata: ").append(toIndentedString(nicMetadata)).append("\n");
    sb.append("    networkId: ").append(toIndentedString(networkId)).append("\n");
    sb.append("    ipPoolId: ").append(toIndentedString(ipPoolId)).append("\n");
    sb.append("    ipAddress: ").append(toIndentedString(ipAddress)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
