/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.Resource;
import io.swagger.client.model.ResourceLink;
import io.swagger.client.model.SelfResourceLink;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.List;
/**
 * license properties
 */
@Schema(description = "license properties")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class License extends Resource {
  @SerializedName("features")
  private String features = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("product_version")
  private String productVersion = null;

  @SerializedName("expiry")
  private Long expiry = null;

  @SerializedName("is_eval")
  private Boolean isEval = null;

  @SerializedName("is_mh")
  private Boolean isMh = null;

  @SerializedName("license_key")
  private String licenseKey = null;

  @SerializedName("is_expired")
  private Boolean isExpired = null;

  @SerializedName("product_name")
  private String productName = null;

  /**
   * License metrics specifying the capacity type of license key. Types are: - VM - CPU - USER(Concurrent User) 
   */
  @JsonAdapter(CapacityTypeEnum.Adapter.class)
  public enum CapacityTypeEnum {
    VM("VM"),
    CPU("CPU"),
    USER("USER");

    private String value;

    CapacityTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static CapacityTypeEnum fromValue(String text) {
      for (CapacityTypeEnum b : CapacityTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<CapacityTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CapacityTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CapacityTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return CapacityTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("capacity_type")
  private CapacityTypeEnum capacityType = null;

  @SerializedName("quantity")
  private Long quantity = null;

   /**
   * semicolon delimited feature list
   * @return features
  **/
  @Schema(description = "semicolon delimited feature list")
  public String getFeatures() {
    return features;
  }

   /**
   * license edition
   * @return description
  **/
  @Schema(description = "license edition")
  public String getDescription() {
    return description;
  }

   /**
   * product version
   * @return productVersion
  **/
  @Schema(description = "product version")
  public String getProductVersion() {
    return productVersion;
  }

   /**
   * date that license expires
   * @return expiry
  **/
  @Schema(description = "date that license expires")
  public Long getExpiry() {
    return expiry;
  }

   /**
   * true for evalution license
   * @return isEval
  **/
  @Schema(description = "true for evalution license")
  public Boolean isIsEval() {
    return isEval;
  }

   /**
   * multi-hypervisor support
   * @return isMh
  **/
  @Schema(description = "multi-hypervisor support")
  public Boolean isIsMh() {
    return isMh;
  }

  public License licenseKey(String licenseKey) {
    this.licenseKey = licenseKey;
    return this;
  }

   /**
   * license key
   * @return licenseKey
  **/
  @Schema(description = "license key")
  public String getLicenseKey() {
    return licenseKey;
  }

  public void setLicenseKey(String licenseKey) {
    this.licenseKey = licenseKey;
  }

   /**
   * whether the license has expired
   * @return isExpired
  **/
  @Schema(description = "whether the license has expired")
  public Boolean isIsExpired() {
    return isExpired;
  }

   /**
   * product name
   * @return productName
  **/
  @Schema(description = "product name")
  public String getProductName() {
    return productName;
  }

   /**
   * License metrics specifying the capacity type of license key. Types are: - VM - CPU - USER(Concurrent User) 
   * @return capacityType
  **/
  @Schema(description = "License metrics specifying the capacity type of license key. Types are: - VM - CPU - USER(Concurrent User) ")
  public CapacityTypeEnum getCapacityType() {
    return capacityType;
  }

   /**
   * license capacity; 0 for unlimited
   * @return quantity
  **/
  @Schema(description = "license capacity; 0 for unlimited")
  public Long getQuantity() {
    return quantity;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    License license = (License) o;
    return Objects.equals(this.features, license.features) &&
        Objects.equals(this.description, license.description) &&
        Objects.equals(this.productVersion, license.productVersion) &&
        Objects.equals(this.expiry, license.expiry) &&
        Objects.equals(this.isEval, license.isEval) &&
        Objects.equals(this.isMh, license.isMh) &&
        Objects.equals(this.licenseKey, license.licenseKey) &&
        Objects.equals(this.isExpired, license.isExpired) &&
        Objects.equals(this.productName, license.productName) &&
        Objects.equals(this.capacityType, license.capacityType) &&
        Objects.equals(this.quantity, license.quantity) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(features, description, productVersion, expiry, isEval, isMh, licenseKey, isExpired, productName, capacityType, quantity, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class License {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    features: ").append(toIndentedString(features)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    productVersion: ").append(toIndentedString(productVersion)).append("\n");
    sb.append("    expiry: ").append(toIndentedString(expiry)).append("\n");
    sb.append("    isEval: ").append(toIndentedString(isEval)).append("\n");
    sb.append("    isMh: ").append(toIndentedString(isMh)).append("\n");
    sb.append("    licenseKey: ").append(toIndentedString(licenseKey)).append("\n");
    sb.append("    isExpired: ").append(toIndentedString(isExpired)).append("\n");
    sb.append("    productName: ").append(toIndentedString(productName)).append("\n");
    sb.append("    capacityType: ").append(toIndentedString(capacityType)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
