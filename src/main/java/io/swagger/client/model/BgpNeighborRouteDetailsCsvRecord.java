/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.CsvRecord;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * BGP neighbor learned/advertised route details.
 */
@Schema(description = "BGP neighbor learned/advertised route details.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class BgpNeighborRouteDetailsCsvRecord extends CsvRecord {
  @SerializedName("med")
  private Long med = null;

  @SerializedName("network")
  private String network = null;

  @SerializedName("weight")
  private Long weight = null;

  @SerializedName("transport_node_id")
  private String transportNodeId = null;

  @SerializedName("as_path")
  private String asPath = null;

  @SerializedName("next_hop")
  private String nextHop = null;

  @SerializedName("logical_router_id")
  private String logicalRouterId = null;

  @SerializedName("local_pref")
  private Long localPref = null;

  @SerializedName("source_address")
  private String sourceAddress = null;

  @SerializedName("neighbor_id")
  private String neighborId = null;

  @SerializedName("neighbor_address")
  private String neighborAddress = null;

   /**
   * BGP Multi Exit Discriminator attribute.
   * @return med
  **/
  @Schema(description = "BGP Multi Exit Discriminator attribute.")
  public Long getMed() {
    return med;
  }

   /**
   * CIDR network address.
   * @return network
  **/
  @Schema(description = "CIDR network address.")
  public String getNetwork() {
    return network;
  }

   /**
   * BGP Weight attribute.
   * @return weight
  **/
  @Schema(description = "BGP Weight attribute.")
  public Long getWeight() {
    return weight;
  }

   /**
   * Transport node id
   * @return transportNodeId
  **/
  @Schema(description = "Transport node id")
  public String getTransportNodeId() {
    return transportNodeId;
  }

   /**
   * BGP AS path attribute.
   * @return asPath
  **/
  @Schema(description = "BGP AS path attribute.")
  public String getAsPath() {
    return asPath;
  }

   /**
   * Next hop IP address.
   * @return nextHop
  **/
  @Schema(description = "Next hop IP address.")
  public String getNextHop() {
    return nextHop;
  }

   /**
   * Logical router id
   * @return logicalRouterId
  **/
  @Schema(description = "Logical router id")
  public String getLogicalRouterId() {
    return logicalRouterId;
  }

   /**
   * BGP Local Preference attribute.
   * @return localPref
  **/
  @Schema(description = "BGP Local Preference attribute.")
  public Long getLocalPref() {
    return localPref;
  }

   /**
   * BGP neighbor source address.
   * @return sourceAddress
  **/
  @Schema(description = "BGP neighbor source address.")
  public String getSourceAddress() {
    return sourceAddress;
  }

   /**
   * BGP neighbor id
   * @return neighborId
  **/
  @Schema(description = "BGP neighbor id")
  public String getNeighborId() {
    return neighborId;
  }

   /**
   * BGP neighbor peer IP address.
   * @return neighborAddress
  **/
  @Schema(description = "BGP neighbor peer IP address.")
  public String getNeighborAddress() {
    return neighborAddress;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BgpNeighborRouteDetailsCsvRecord bgpNeighborRouteDetailsCsvRecord = (BgpNeighborRouteDetailsCsvRecord) o;
    return Objects.equals(this.med, bgpNeighborRouteDetailsCsvRecord.med) &&
        Objects.equals(this.network, bgpNeighborRouteDetailsCsvRecord.network) &&
        Objects.equals(this.weight, bgpNeighborRouteDetailsCsvRecord.weight) &&
        Objects.equals(this.transportNodeId, bgpNeighborRouteDetailsCsvRecord.transportNodeId) &&
        Objects.equals(this.asPath, bgpNeighborRouteDetailsCsvRecord.asPath) &&
        Objects.equals(this.nextHop, bgpNeighborRouteDetailsCsvRecord.nextHop) &&
        Objects.equals(this.logicalRouterId, bgpNeighborRouteDetailsCsvRecord.logicalRouterId) &&
        Objects.equals(this.localPref, bgpNeighborRouteDetailsCsvRecord.localPref) &&
        Objects.equals(this.sourceAddress, bgpNeighborRouteDetailsCsvRecord.sourceAddress) &&
        Objects.equals(this.neighborId, bgpNeighborRouteDetailsCsvRecord.neighborId) &&
        Objects.equals(this.neighborAddress, bgpNeighborRouteDetailsCsvRecord.neighborAddress) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(med, network, weight, transportNodeId, asPath, nextHop, logicalRouterId, localPref, sourceAddress, neighborId, neighborAddress, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BgpNeighborRouteDetailsCsvRecord {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    med: ").append(toIndentedString(med)).append("\n");
    sb.append("    network: ").append(toIndentedString(network)).append("\n");
    sb.append("    weight: ").append(toIndentedString(weight)).append("\n");
    sb.append("    transportNodeId: ").append(toIndentedString(transportNodeId)).append("\n");
    sb.append("    asPath: ").append(toIndentedString(asPath)).append("\n");
    sb.append("    nextHop: ").append(toIndentedString(nextHop)).append("\n");
    sb.append("    logicalRouterId: ").append(toIndentedString(logicalRouterId)).append("\n");
    sb.append("    localPref: ").append(toIndentedString(localPref)).append("\n");
    sb.append("    sourceAddress: ").append(toIndentedString(sourceAddress)).append("\n");
    sb.append("    neighborId: ").append(toIndentedString(neighborId)).append("\n");
    sb.append("    neighborAddress: ").append(toIndentedString(neighborAddress)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
