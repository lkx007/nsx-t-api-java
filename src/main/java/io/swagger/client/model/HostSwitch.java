/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.HostSwitchProfileTypeIdEntry;
import io.swagger.client.model.Pnic;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * Host Switch specification
 */
@Schema(description = "Host Switch specification")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class HostSwitch {
  @SerializedName("pnics")
  private List<Pnic> pnics = null;

  @SerializedName("host_switch_name")
  private String hostSwitchName = "nsxDefaultHostSwitch";

  @SerializedName("static_ip_pool_id")
  private String staticIpPoolId = null;

  @SerializedName("host_switch_profile_ids")
  private List<HostSwitchProfileTypeIdEntry> hostSwitchProfileIds = null;

  public HostSwitch pnics(List<Pnic> pnics) {
    this.pnics = pnics;
    return this;
  }

  public HostSwitch addPnicsItem(Pnic pnicsItem) {
    if (this.pnics == null) {
      this.pnics = new ArrayList<Pnic>();
    }
    this.pnics.add(pnicsItem);
    return this;
  }

   /**
   * Physical NICs connected to the host switch
   * @return pnics
  **/
  @Schema(description = "Physical NICs connected to the host switch")
  public List<Pnic> getPnics() {
    return pnics;
  }

  public void setPnics(List<Pnic> pnics) {
    this.pnics = pnics;
  }

  public HostSwitch hostSwitchName(String hostSwitchName) {
    this.hostSwitchName = hostSwitchName;
    return this;
  }

   /**
   * If this name is unset or empty then the default host switch name will be used. The name must be unique among all host switches specified in a given Transport Node; unset name, empty name and the default host switch name are considered the same in terms of uniqueness.
   * @return hostSwitchName
  **/
  @Schema(description = "If this name is unset or empty then the default host switch name will be used. The name must be unique among all host switches specified in a given Transport Node; unset name, empty name and the default host switch name are considered the same in terms of uniqueness.")
  public String getHostSwitchName() {
    return hostSwitchName;
  }

  public void setHostSwitchName(String hostSwitchName) {
    this.hostSwitchName = hostSwitchName;
  }

  public HostSwitch staticIpPoolId(String staticIpPoolId) {
    this.staticIpPoolId = staticIpPoolId;
    return this;
  }

   /**
   * ID of configured Static IP Pool. If specified allocate IP for Endpoints from Pool. Else assume IP will be assigned for Endpoints from DHCP. This field is deprecated, use ip_assignment_spec field instead.
   * @return staticIpPoolId
  **/
  @Schema(description = "ID of configured Static IP Pool. If specified allocate IP for Endpoints from Pool. Else assume IP will be assigned for Endpoints from DHCP. This field is deprecated, use ip_assignment_spec field instead.")
  public String getStaticIpPoolId() {
    return staticIpPoolId;
  }

  public void setStaticIpPoolId(String staticIpPoolId) {
    this.staticIpPoolId = staticIpPoolId;
  }

  public HostSwitch hostSwitchProfileIds(List<HostSwitchProfileTypeIdEntry> hostSwitchProfileIds) {
    this.hostSwitchProfileIds = hostSwitchProfileIds;
    return this;
  }

  public HostSwitch addHostSwitchProfileIdsItem(HostSwitchProfileTypeIdEntry hostSwitchProfileIdsItem) {
    if (this.hostSwitchProfileIds == null) {
      this.hostSwitchProfileIds = new ArrayList<HostSwitchProfileTypeIdEntry>();
    }
    this.hostSwitchProfileIds.add(hostSwitchProfileIdsItem);
    return this;
  }

   /**
   * HostSwitch profiles bound to this HostSwitch. If a profile ID is not provided for any HostSwitchProfileType that is supported by the Transport Node, the corresponding default profile will be bound to the HostSwitch.
   * @return hostSwitchProfileIds
  **/
  @Schema(description = "HostSwitch profiles bound to this HostSwitch. If a profile ID is not provided for any HostSwitchProfileType that is supported by the Transport Node, the corresponding default profile will be bound to the HostSwitch.")
  public List<HostSwitchProfileTypeIdEntry> getHostSwitchProfileIds() {
    return hostSwitchProfileIds;
  }

  public void setHostSwitchProfileIds(List<HostSwitchProfileTypeIdEntry> hostSwitchProfileIds) {
    this.hostSwitchProfileIds = hostSwitchProfileIds;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HostSwitch hostSwitch = (HostSwitch) o;
    return Objects.equals(this.pnics, hostSwitch.pnics) &&
        Objects.equals(this.hostSwitchName, hostSwitch.hostSwitchName) &&
        Objects.equals(this.staticIpPoolId, hostSwitch.staticIpPoolId) &&
        Objects.equals(this.hostSwitchProfileIds, hostSwitch.hostSwitchProfileIds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pnics, hostSwitchName, staticIpPoolId, hostSwitchProfileIds);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HostSwitch {\n");
    
    sb.append("    pnics: ").append(toIndentedString(pnics)).append("\n");
    sb.append("    hostSwitchName: ").append(toIndentedString(hostSwitchName)).append("\n");
    sb.append("    staticIpPoolId: ").append(toIndentedString(staticIpPoolId)).append("\n");
    sb.append("    hostSwitchProfileIds: ").append(toIndentedString(hostSwitchProfileIds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
