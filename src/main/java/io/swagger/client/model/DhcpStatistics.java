/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.DhcpIpPoolUsage;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * DhcpStatistics
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class DhcpStatistics {
  @SerializedName("errors")
  private Long errors = null;

  @SerializedName("releases")
  private Long releases = null;

  @SerializedName("informs")
  private Long informs = null;

  @SerializedName("declines")
  private Long declines = null;

  @SerializedName("dhcp_server_id")
  private String dhcpServerId = null;

  @SerializedName("nacks")
  private Long nacks = null;

  @SerializedName("offers")
  private Long offers = null;

  @SerializedName("discovers")
  private Long discovers = null;

  @SerializedName("acks")
  private Long acks = null;

  @SerializedName("timestamp")
  private Long timestamp = null;

  @SerializedName("requests")
  private Long requests = null;

  @SerializedName("ip_pool_stats")
  private List<DhcpIpPoolUsage> ipPoolStats = null;

  public DhcpStatistics errors(Long errors) {
    this.errors = errors;
    return this;
  }

   /**
   * The total number of DHCP errors
   * @return errors
  **/
  @Schema(required = true, description = "The total number of DHCP errors")
  public Long getErrors() {
    return errors;
  }

  public void setErrors(Long errors) {
    this.errors = errors;
  }

  public DhcpStatistics releases(Long releases) {
    this.releases = releases;
    return this;
  }

   /**
   * The total number of DHCP RELEASE packets
   * @return releases
  **/
  @Schema(required = true, description = "The total number of DHCP RELEASE packets")
  public Long getReleases() {
    return releases;
  }

  public void setReleases(Long releases) {
    this.releases = releases;
  }

  public DhcpStatistics informs(Long informs) {
    this.informs = informs;
    return this;
  }

   /**
   * The total number of DHCP INFORM packets
   * @return informs
  **/
  @Schema(required = true, description = "The total number of DHCP INFORM packets")
  public Long getInforms() {
    return informs;
  }

  public void setInforms(Long informs) {
    this.informs = informs;
  }

  public DhcpStatistics declines(Long declines) {
    this.declines = declines;
    return this;
  }

   /**
   * The total number of DHCP DECLINE packets
   * @return declines
  **/
  @Schema(required = true, description = "The total number of DHCP DECLINE packets")
  public Long getDeclines() {
    return declines;
  }

  public void setDeclines(Long declines) {
    this.declines = declines;
  }

  public DhcpStatistics dhcpServerId(String dhcpServerId) {
    this.dhcpServerId = dhcpServerId;
    return this;
  }

   /**
   * dhcp server uuid
   * @return dhcpServerId
  **/
  @Schema(required = true, description = "dhcp server uuid")
  public String getDhcpServerId() {
    return dhcpServerId;
  }

  public void setDhcpServerId(String dhcpServerId) {
    this.dhcpServerId = dhcpServerId;
  }

  public DhcpStatistics nacks(Long nacks) {
    this.nacks = nacks;
    return this;
  }

   /**
   * The total number of DHCP NACK packets
   * @return nacks
  **/
  @Schema(required = true, description = "The total number of DHCP NACK packets")
  public Long getNacks() {
    return nacks;
  }

  public void setNacks(Long nacks) {
    this.nacks = nacks;
  }

  public DhcpStatistics offers(Long offers) {
    this.offers = offers;
    return this;
  }

   /**
   * The total number of DHCP OFFER packets
   * @return offers
  **/
  @Schema(required = true, description = "The total number of DHCP OFFER packets")
  public Long getOffers() {
    return offers;
  }

  public void setOffers(Long offers) {
    this.offers = offers;
  }

  public DhcpStatistics discovers(Long discovers) {
    this.discovers = discovers;
    return this;
  }

   /**
   * The total number of DHCP DISCOVER packets
   * @return discovers
  **/
  @Schema(required = true, description = "The total number of DHCP DISCOVER packets")
  public Long getDiscovers() {
    return discovers;
  }

  public void setDiscovers(Long discovers) {
    this.discovers = discovers;
  }

  public DhcpStatistics acks(Long acks) {
    this.acks = acks;
    return this;
  }

   /**
   * The total number of DHCP ACK packets
   * @return acks
  **/
  @Schema(required = true, description = "The total number of DHCP ACK packets")
  public Long getAcks() {
    return acks;
  }

  public void setAcks(Long acks) {
    this.acks = acks;
  }

  public DhcpStatistics timestamp(Long timestamp) {
    this.timestamp = timestamp;
    return this;
  }

   /**
   * timestamp of the statistics
   * @return timestamp
  **/
  @Schema(required = true, description = "timestamp of the statistics")
  public Long getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(Long timestamp) {
    this.timestamp = timestamp;
  }

  public DhcpStatistics requests(Long requests) {
    this.requests = requests;
    return this;
  }

   /**
   * The total number of DHCP REQUEST packets
   * @return requests
  **/
  @Schema(required = true, description = "The total number of DHCP REQUEST packets")
  public Long getRequests() {
    return requests;
  }

  public void setRequests(Long requests) {
    this.requests = requests;
  }

  public DhcpStatistics ipPoolStats(List<DhcpIpPoolUsage> ipPoolStats) {
    this.ipPoolStats = ipPoolStats;
    return this;
  }

  public DhcpStatistics addIpPoolStatsItem(DhcpIpPoolUsage ipPoolStatsItem) {
    if (this.ipPoolStats == null) {
      this.ipPoolStats = new ArrayList<DhcpIpPoolUsage>();
    }
    this.ipPoolStats.add(ipPoolStatsItem);
    return this;
  }

   /**
   * The DHCP ip pool usage statistics
   * @return ipPoolStats
  **/
  @Schema(description = "The DHCP ip pool usage statistics")
  public List<DhcpIpPoolUsage> getIpPoolStats() {
    return ipPoolStats;
  }

  public void setIpPoolStats(List<DhcpIpPoolUsage> ipPoolStats) {
    this.ipPoolStats = ipPoolStats;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DhcpStatistics dhcpStatistics = (DhcpStatistics) o;
    return Objects.equals(this.errors, dhcpStatistics.errors) &&
        Objects.equals(this.releases, dhcpStatistics.releases) &&
        Objects.equals(this.informs, dhcpStatistics.informs) &&
        Objects.equals(this.declines, dhcpStatistics.declines) &&
        Objects.equals(this.dhcpServerId, dhcpStatistics.dhcpServerId) &&
        Objects.equals(this.nacks, dhcpStatistics.nacks) &&
        Objects.equals(this.offers, dhcpStatistics.offers) &&
        Objects.equals(this.discovers, dhcpStatistics.discovers) &&
        Objects.equals(this.acks, dhcpStatistics.acks) &&
        Objects.equals(this.timestamp, dhcpStatistics.timestamp) &&
        Objects.equals(this.requests, dhcpStatistics.requests) &&
        Objects.equals(this.ipPoolStats, dhcpStatistics.ipPoolStats);
  }

  @Override
  public int hashCode() {
    return Objects.hash(errors, releases, informs, declines, dhcpServerId, nacks, offers, discovers, acks, timestamp, requests, ipPoolStats);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DhcpStatistics {\n");
    
    sb.append("    errors: ").append(toIndentedString(errors)).append("\n");
    sb.append("    releases: ").append(toIndentedString(releases)).append("\n");
    sb.append("    informs: ").append(toIndentedString(informs)).append("\n");
    sb.append("    declines: ").append(toIndentedString(declines)).append("\n");
    sb.append("    dhcpServerId: ").append(toIndentedString(dhcpServerId)).append("\n");
    sb.append("    nacks: ").append(toIndentedString(nacks)).append("\n");
    sb.append("    offers: ").append(toIndentedString(offers)).append("\n");
    sb.append("    discovers: ").append(toIndentedString(discovers)).append("\n");
    sb.append("    acks: ").append(toIndentedString(acks)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    requests: ").append(toIndentedString(requests)).append("\n");
    sb.append("    ipPoolStats: ").append(toIndentedString(ipPoolStats)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
