/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.CsvRecord;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * LogicalRouterRouteCsvRecord
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class LogicalRouterRouteCsvRecord extends CsvRecord {
  @SerializedName("lr_component_id")
  private String lrComponentId = null;

  @SerializedName("next_hop")
  private String nextHop = null;

  @SerializedName("lr_component_type")
  private String lrComponentType = null;

  @SerializedName("network")
  private String network = null;

  @SerializedName("route_type")
  private String routeType = null;

  @SerializedName("logical_router_port_id")
  private String logicalRouterPortId = null;

  @SerializedName("admin_distance")
  private Long adminDistance = null;

  public LogicalRouterRouteCsvRecord lrComponentId(String lrComponentId) {
    this.lrComponentId = lrComponentId;
    return this;
  }

   /**
   * Logical router component(Service Router/Distributed Router) id
   * @return lrComponentId
  **/
  @Schema(description = "Logical router component(Service Router/Distributed Router) id")
  public String getLrComponentId() {
    return lrComponentId;
  }

  public void setLrComponentId(String lrComponentId) {
    this.lrComponentId = lrComponentId;
  }

  public LogicalRouterRouteCsvRecord nextHop(String nextHop) {
    this.nextHop = nextHop;
    return this;
  }

   /**
   * The IP of the next hop
   * @return nextHop
  **/
  @Schema(description = "The IP of the next hop")
  public String getNextHop() {
    return nextHop;
  }

  public void setNextHop(String nextHop) {
    this.nextHop = nextHop;
  }

  public LogicalRouterRouteCsvRecord lrComponentType(String lrComponentType) {
    this.lrComponentType = lrComponentType;
    return this;
  }

   /**
   * Logical router component(Service Router/Distributed Router) type
   * @return lrComponentType
  **/
  @Schema(description = "Logical router component(Service Router/Distributed Router) type")
  public String getLrComponentType() {
    return lrComponentType;
  }

  public void setLrComponentType(String lrComponentType) {
    this.lrComponentType = lrComponentType;
  }

  public LogicalRouterRouteCsvRecord network(String network) {
    this.network = network;
    return this;
  }

   /**
   * CIDR network address
   * @return network
  **/
  @Schema(required = true, description = "CIDR network address")
  public String getNetwork() {
    return network;
  }

  public void setNetwork(String network) {
    this.network = network;
  }

  public LogicalRouterRouteCsvRecord routeType(String routeType) {
    this.routeType = routeType;
    return this;
  }

   /**
   * Route type (USER, CONNECTED, NSX_INTERNAL,..)
   * @return routeType
  **/
  @Schema(required = true, description = "Route type (USER, CONNECTED, NSX_INTERNAL,..)")
  public String getRouteType() {
    return routeType;
  }

  public void setRouteType(String routeType) {
    this.routeType = routeType;
  }

  public LogicalRouterRouteCsvRecord logicalRouterPortId(String logicalRouterPortId) {
    this.logicalRouterPortId = logicalRouterPortId;
    return this;
  }

   /**
   * The id of the logical router port which is used as the next hop
   * @return logicalRouterPortId
  **/
  @Schema(description = "The id of the logical router port which is used as the next hop")
  public String getLogicalRouterPortId() {
    return logicalRouterPortId;
  }

  public void setLogicalRouterPortId(String logicalRouterPortId) {
    this.logicalRouterPortId = logicalRouterPortId;
  }

  public LogicalRouterRouteCsvRecord adminDistance(Long adminDistance) {
    this.adminDistance = adminDistance;
    return this;
  }

   /**
   * The admin distance of the next hop
   * @return adminDistance
  **/
  @Schema(description = "The admin distance of the next hop")
  public Long getAdminDistance() {
    return adminDistance;
  }

  public void setAdminDistance(Long adminDistance) {
    this.adminDistance = adminDistance;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LogicalRouterRouteCsvRecord logicalRouterRouteCsvRecord = (LogicalRouterRouteCsvRecord) o;
    return Objects.equals(this.lrComponentId, logicalRouterRouteCsvRecord.lrComponentId) &&
        Objects.equals(this.nextHop, logicalRouterRouteCsvRecord.nextHop) &&
        Objects.equals(this.lrComponentType, logicalRouterRouteCsvRecord.lrComponentType) &&
        Objects.equals(this.network, logicalRouterRouteCsvRecord.network) &&
        Objects.equals(this.routeType, logicalRouterRouteCsvRecord.routeType) &&
        Objects.equals(this.logicalRouterPortId, logicalRouterRouteCsvRecord.logicalRouterPortId) &&
        Objects.equals(this.adminDistance, logicalRouterRouteCsvRecord.adminDistance) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(lrComponentId, nextHop, lrComponentType, network, routeType, logicalRouterPortId, adminDistance, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LogicalRouterRouteCsvRecord {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    lrComponentId: ").append(toIndentedString(lrComponentId)).append("\n");
    sb.append("    nextHop: ").append(toIndentedString(nextHop)).append("\n");
    sb.append("    lrComponentType: ").append(toIndentedString(lrComponentType)).append("\n");
    sb.append("    network: ").append(toIndentedString(network)).append("\n");
    sb.append("    routeType: ").append(toIndentedString(routeType)).append("\n");
    sb.append("    logicalRouterPortId: ").append(toIndentedString(logicalRouterPortId)).append("\n");
    sb.append("    adminDistance: ").append(toIndentedString(adminDistance)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
