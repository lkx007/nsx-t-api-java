/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.TraceflowObservation;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * TraceflowObservationDelivered
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class TraceflowObservationDelivered extends TraceflowObservation {
  /**
   * This field specifies the resolution type of ARP ARP_SUPPRESSION_PORT_CACHE - ARP request is suppressed by port DB ARP_SUPPRESSION_TABLE - ARP request is suppressed by ARP table ARP_SUPPRESSION_CP_QUERY - ARP request is suppressed by info derived from CP ARP_VM - No suppression and the ARP request is resolved.
   */
  @JsonAdapter(ResolutionTypeEnum.Adapter.class)
  public enum ResolutionTypeEnum {
    UNKNOWN("UNKNOWN"),
    ARP_SUPPRESSION_PORT_CACHE("ARP_SUPPRESSION_PORT_CACHE"),
    ARP_SUPPRESSION_TABLE("ARP_SUPPRESSION_TABLE"),
    ARP_SUPPRESSION_CP_QUERY("ARP_SUPPRESSION_CP_QUERY"),
    ARP_VM("ARP_VM");

    private String value;

    ResolutionTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ResolutionTypeEnum fromValue(String text) {
      for (ResolutionTypeEnum b : ResolutionTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ResolutionTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ResolutionTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ResolutionTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ResolutionTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("resolution_type")
  private ResolutionTypeEnum resolutionType = null;

  @SerializedName("lport_name")
  private String lportName = null;

  @SerializedName("target_mac")
  private String targetMac = null;

  @SerializedName("vlan_id")
  private Long vlanId = null;

  @SerializedName("lport_id")
  private String lportId = null;

   /**
   * This field specifies the resolution type of ARP ARP_SUPPRESSION_PORT_CACHE - ARP request is suppressed by port DB ARP_SUPPRESSION_TABLE - ARP request is suppressed by ARP table ARP_SUPPRESSION_CP_QUERY - ARP request is suppressed by info derived from CP ARP_VM - No suppression and the ARP request is resolved.
   * @return resolutionType
  **/
  @Schema(description = "This field specifies the resolution type of ARP ARP_SUPPRESSION_PORT_CACHE - ARP request is suppressed by port DB ARP_SUPPRESSION_TABLE - ARP request is suppressed by ARP table ARP_SUPPRESSION_CP_QUERY - ARP request is suppressed by info derived from CP ARP_VM - No suppression and the ARP request is resolved.")
  public ResolutionTypeEnum getResolutionType() {
    return resolutionType;
  }

   /**
   * The name of the logical port into which the traceflow packet was delivered
   * @return lportName
  **/
  @Schema(description = "The name of the logical port into which the traceflow packet was delivered")
  public String getLportName() {
    return lportName;
  }

   /**
   * The source MAC address of form: \&quot;^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$\&quot;. For example: 00:00:00:00:00:00. 
   * @return targetMac
  **/
  @Schema(description = "The source MAC address of form: \"^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$\". For example: 00:00:00:00:00:00. ")
  public String getTargetMac() {
    return targetMac;
  }

  public TraceflowObservationDelivered vlanId(Long vlanId) {
    this.vlanId = vlanId;
    return this;
  }

   /**
   * VLAN on bridged network
   * @return vlanId
  **/
  @Schema(description = "VLAN on bridged network")
  public Long getVlanId() {
    return vlanId;
  }

  public void setVlanId(Long vlanId) {
    this.vlanId = vlanId;
  }

   /**
   * The id of the logical port into which the traceflow packet was delivered
   * @return lportId
  **/
  @Schema(description = "The id of the logical port into which the traceflow packet was delivered")
  public String getLportId() {
    return lportId;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TraceflowObservationDelivered traceflowObservationDelivered = (TraceflowObservationDelivered) o;
    return Objects.equals(this.resolutionType, traceflowObservationDelivered.resolutionType) &&
        Objects.equals(this.lportName, traceflowObservationDelivered.lportName) &&
        Objects.equals(this.targetMac, traceflowObservationDelivered.targetMac) &&
        Objects.equals(this.vlanId, traceflowObservationDelivered.vlanId) &&
        Objects.equals(this.lportId, traceflowObservationDelivered.lportId) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(resolutionType, lportName, targetMac, vlanId, lportId, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TraceflowObservationDelivered {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    resolutionType: ").append(toIndentedString(resolutionType)).append("\n");
    sb.append("    lportName: ").append(toIndentedString(lportName)).append("\n");
    sb.append("    targetMac: ").append(toIndentedString(targetMac)).append("\n");
    sb.append("    vlanId: ").append(toIndentedString(vlanId)).append("\n");
    sb.append("    lportId: ").append(toIndentedString(lportId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
