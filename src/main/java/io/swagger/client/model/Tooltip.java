/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * Tooltip to be shown while hovering over the dashboard UI element.
 */
@Schema(description = "Tooltip to be shown while hovering over the dashboard UI element.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class Tooltip {
  @SerializedName("text")
  private String text = null;

  @SerializedName("heading")
  private Boolean heading = null;

  @SerializedName("condition")
  private String condition = null;

  public Tooltip text(String text) {
    this.text = text;
    return this;
  }

   /**
   * Text to be shown on tooltip while hovering over UI element. The text would be wrapped if it exceeds 80 chars.
   * @return text
  **/
  @Schema(required = true, description = "Text to be shown on tooltip while hovering over UI element. The text would be wrapped if it exceeds 80 chars.")
  public String getText() {
    return text;
  }

  public void setText(String text) {
    this.text = text;
  }

  public Tooltip heading(Boolean heading) {
    this.heading = heading;
    return this;
  }

   /**
   * If true, displays tooltip text in bold
   * @return heading
  **/
  @Schema(description = "If true, displays tooltip text in bold")
  public Boolean isHeading() {
    return heading;
  }

  public void setHeading(Boolean heading) {
    this.heading = heading;
  }

  public Tooltip condition(String condition) {
    this.condition = condition;
    return this;
  }

   /**
   * If the condition is met then the tooltip will be applied. If no condition is provided, then the tooltip will be applied unconditionally. Examples of expression syntax are provided under &#x27;example_request&#x27; section of &#x27;CreateWidgetConfiguration&#x27; API.
   * @return condition
  **/
  @Schema(description = "If the condition is met then the tooltip will be applied. If no condition is provided, then the tooltip will be applied unconditionally. Examples of expression syntax are provided under 'example_request' section of 'CreateWidgetConfiguration' API.")
  public String getCondition() {
    return condition;
  }

  public void setCondition(String condition) {
    this.condition = condition;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Tooltip tooltip = (Tooltip) o;
    return Objects.equals(this.text, tooltip.text) &&
        Objects.equals(this.heading, tooltip.heading) &&
        Objects.equals(this.condition, tooltip.condition);
  }

  @Override
  public int hashCode() {
    return Objects.hash(text, heading, condition);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Tooltip {\n");
    
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    heading: ").append(toIndentedString(heading)).append("\n");
    sb.append("    condition: ").append(toIndentedString(condition)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
