/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * TraceflowObservation
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")

public class TraceflowObservation {
  @SerializedName("timestamp_micro")
  private Long timestampMicro = null;

  /**
   * The sub type of the component that issued the observation.
   */
  @JsonAdapter(ComponentSubTypeEnum.Adapter.class)
  public enum ComponentSubTypeEnum {
    LR_TIER0("LR_TIER0"),
    LR_TIER1("LR_TIER1"),
    LR_VRF_TIER0("LR_VRF_TIER0"),
    LS_TRANSIT("LS_TRANSIT"),
    SI_CLASSIFIER("SI_CLASSIFIER"),
    SI_PROXY("SI_PROXY"),
    VDR("VDR"),
    ENI("ENI"),
    AWS_GATEWAY("AWS_GATEWAY"),
    TGW_ROUTE("TGW_ROUTE"),
    EDGE_UPLINK("EDGE_UPLINK"),
    UNKNOWN("UNKNOWN");

    private String value;

    ComponentSubTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ComponentSubTypeEnum fromValue(String text) {
      for (ComponentSubTypeEnum b : ComponentSubTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ComponentSubTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ComponentSubTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ComponentSubTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ComponentSubTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("component_sub_type")
  private ComponentSubTypeEnum componentSubType = null;

  /**
   * Gets or Sets resourceType
   */
  @JsonAdapter(ResourceTypeEnum.Adapter.class)
  public enum ResourceTypeEnum {
    TRACEFLOWOBSERVATIONFORWARDED("TraceflowObservationForwarded"),
    TRACEFLOWOBSERVATIONDROPPED("TraceflowObservationDropped"),
    TRACEFLOWOBSERVATIONDELIVERED("TraceflowObservationDelivered"),
    TRACEFLOWOBSERVATIONRECEIVED("TraceflowObservationReceived"),
    TRACEFLOWOBSERVATIONFORWARDEDLOGICAL("TraceflowObservationForwardedLogical"),
    TRACEFLOWOBSERVATIONDROPPEDLOGICAL("TraceflowObservationDroppedLogical"),
    TRACEFLOWOBSERVATIONRECEIVEDLOGICAL("TraceflowObservationReceivedLogical"),
    TRACEFLOWOBSERVATIONREPLICATIONLOGICAL("TraceflowObservationReplicationLogical"),
    TRACEFLOWOBSERVATIONRELAYEDLOGICAL("TraceflowObservationRelayedLogical");

    private String value;

    ResourceTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ResourceTypeEnum fromValue(String text) {
      for (ResourceTypeEnum b : ResourceTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ResourceTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ResourceTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ResourceTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ResourceTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("resource_type")
  private ResourceTypeEnum resourceType = null;

  /**
   * The type of the component that issued the observation.
   */
  @JsonAdapter(ComponentTypeEnum.Adapter.class)
  public enum ComponentTypeEnum {
    PHYSICAL("PHYSICAL"),
    LR("LR"),
    LS("LS"),
    DFW("DFW"),
    BRIDGE("BRIDGE"),
    EDGE_TUNNEL("EDGE_TUNNEL"),
    EDGE_HOSTSWITCH("EDGE_HOSTSWITCH"),
    FW_BRIDGE("FW_BRIDGE"),
    LOAD_BALANCER("LOAD_BALANCER"),
    NAT("NAT"),
    IPSEC("IPSEC"),
    SERVICE_INSERTION("SERVICE_INSERTION"),
    VMC("VMC"),
    EDGE_FW("EDGE_FW"),
    UNKNOWN("UNKNOWN");

    private String value;

    ComponentTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ComponentTypeEnum fromValue(String text) {
      for (ComponentTypeEnum b : ComponentTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ComponentTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ComponentTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ComponentTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ComponentTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("component_type")
  private ComponentTypeEnum componentType = null;

  @SerializedName("transport_node_name")
  private String transportNodeName = null;

  @SerializedName("timestamp")
  private Long timestamp = null;

  @SerializedName("transport_node_id")
  private String transportNodeId = null;

  @SerializedName("sequence_no")
  private Long sequenceNo = null;

  /**
   * type of the transport node that observed a traceflow packet
   */
  @JsonAdapter(TransportNodeTypeEnum.Adapter.class)
  public enum TransportNodeTypeEnum {
    ESX("ESX"),
    RHELKVM("RHELKVM"),
    UBUNTUKVM("UBUNTUKVM"),
    EDGE("EDGE"),
    PUBLIC_CLOUD_GATEWAY_NODE("PUBLIC_CLOUD_GATEWAY_NODE"),
    OTHERS("OTHERS"),
    HYPERV("HYPERV");

    private String value;

    TransportNodeTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static TransportNodeTypeEnum fromValue(String text) {
      for (TransportNodeTypeEnum b : TransportNodeTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<TransportNodeTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TransportNodeTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TransportNodeTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TransportNodeTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("transport_node_type")
  private TransportNodeTypeEnum transportNodeType = null;

  @SerializedName("component_name")
  private String componentName = null;

  public TraceflowObservation() {
    this.resource_type = this.getClass().getSimpleName();
  }
   /**
   * Timestamp when the observation was created by the transport node (microseconds epoch)
   * @return timestampMicro
  **/
  @Schema(description = "Timestamp when the observation was created by the transport node (microseconds epoch)")
  public Long getTimestampMicro() {
    return timestampMicro;
  }

   /**
   * The sub type of the component that issued the observation.
   * @return componentSubType
  **/
  @Schema(description = "The sub type of the component that issued the observation.")
  public ComponentSubTypeEnum getComponentSubType() {
    return componentSubType;
  }

  public TraceflowObservation resourceType(ResourceTypeEnum resourceType) {
    this.resourceType = resourceType;
    return this;
  }

   /**
   * Get resourceType
   * @return resourceType
  **/
  @Schema(required = true, description = "")
  public ResourceTypeEnum getResourceType() {
    return resourceType;
  }

  public void setResourceType(ResourceTypeEnum resourceType) {
    this.resourceType = resourceType;
  }

   /**
   * The type of the component that issued the observation.
   * @return componentType
  **/
  @Schema(description = "The type of the component that issued the observation.")
  public ComponentTypeEnum getComponentType() {
    return componentType;
  }

   /**
   * name of the transport node that observed a traceflow packet
   * @return transportNodeName
  **/
  @Schema(description = "name of the transport node that observed a traceflow packet")
  public String getTransportNodeName() {
    return transportNodeName;
  }

   /**
   * Timestamp when the observation was created by the transport node (milliseconds epoch)
   * @return timestamp
  **/
  @Schema(description = "Timestamp when the observation was created by the transport node (milliseconds epoch)")
  public Long getTimestamp() {
    return timestamp;
  }

   /**
   * id of the transport node that observed a traceflow packet
   * @return transportNodeId
  **/
  @Schema(description = "id of the transport node that observed a traceflow packet")
  public String getTransportNodeId() {
    return transportNodeId;
  }

   /**
   * the hop count for observations on the transport node that a traceflow packet is injected in will be 0. The hop count is incremented each time a subsequent transport node receives the traceflow packet. The sequence number of 999 indicates that the hop count could not be determined for the containing observation.
   * @return sequenceNo
  **/
  @Schema(description = "the hop count for observations on the transport node that a traceflow packet is injected in will be 0. The hop count is incremented each time a subsequent transport node receives the traceflow packet. The sequence number of 999 indicates that the hop count could not be determined for the containing observation.")
  public Long getSequenceNo() {
    return sequenceNo;
  }

   /**
   * type of the transport node that observed a traceflow packet
   * @return transportNodeType
  **/
  @Schema(description = "type of the transport node that observed a traceflow packet")
  public TransportNodeTypeEnum getTransportNodeType() {
    return transportNodeType;
  }

   /**
   * The name of the component that issued the observation.
   * @return componentName
  **/
  @Schema(description = "The name of the component that issued the observation.")
  public String getComponentName() {
    return componentName;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TraceflowObservation traceflowObservation = (TraceflowObservation) o;
    return Objects.equals(this.timestampMicro, traceflowObservation.timestampMicro) &&
        Objects.equals(this.componentSubType, traceflowObservation.componentSubType) &&
        Objects.equals(this.resourceType, traceflowObservation.resourceType) &&
        Objects.equals(this.componentType, traceflowObservation.componentType) &&
        Objects.equals(this.transportNodeName, traceflowObservation.transportNodeName) &&
        Objects.equals(this.timestamp, traceflowObservation.timestamp) &&
        Objects.equals(this.transportNodeId, traceflowObservation.transportNodeId) &&
        Objects.equals(this.sequenceNo, traceflowObservation.sequenceNo) &&
        Objects.equals(this.transportNodeType, traceflowObservation.transportNodeType) &&
        Objects.equals(this.componentName, traceflowObservation.componentName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(timestampMicro, componentSubType, resourceType, componentType, transportNodeName, timestamp, transportNodeId, sequenceNo, transportNodeType, componentName);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TraceflowObservation {\n");
    
    sb.append("    timestampMicro: ").append(toIndentedString(timestampMicro)).append("\n");
    sb.append("    componentSubType: ").append(toIndentedString(componentSubType)).append("\n");
    sb.append("    resourceType: ").append(toIndentedString(resourceType)).append("\n");
    sb.append("    componentType: ").append(toIndentedString(componentType)).append("\n");
    sb.append("    transportNodeName: ").append(toIndentedString(transportNodeName)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    transportNodeId: ").append(toIndentedString(transportNodeId)).append("\n");
    sb.append("    sequenceNo: ").append(toIndentedString(sequenceNo)).append("\n");
    sb.append("    transportNodeType: ").append(toIndentedString(transportNodeType)).append("\n");
    sb.append("    componentName: ").append(toIndentedString(componentName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
