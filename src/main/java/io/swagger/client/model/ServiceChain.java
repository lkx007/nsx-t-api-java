/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.ManagedResource;
import io.swagger.client.model.ResourceReference;
import io.swagger.client.model.Tag;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * Service chain is a set of network Services. A Service chain is made up of ordered list of service profiles belonging to any same or different services.
 */
@Schema(description = "Service chain is a set of network Services. A Service chain is made up of ordered list of service profiles belonging to any same or different services.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class ServiceChain extends ManagedResource {
  @SerializedName("reverse_path_service_profiles")
  private List<ResourceReference> reversePathServiceProfiles = null;

  @SerializedName("service_attachments")
  private List<ResourceReference> serviceAttachments = new ArrayList<ResourceReference>();

  @SerializedName("forward_path_service_profiles")
  private List<ResourceReference> forwardPathServiceProfiles = new ArrayList<ResourceReference>();

  @SerializedName("service_chain_id")
  private String serviceChainId = null;

  /**
   * Path selection policy can be - ANY - Service Insertion is free to redirect to any service path regardless of any load balancing considerations or flow pinning. LOCAL - means to prefer local service insances. REMOTE - preference is to redirect to the SVM co-located on the same host.
   */
  @JsonAdapter(PathSelectionPolicyEnum.Adapter.class)
  public enum PathSelectionPolicyEnum {
    ANY("ANY"),
    LOCAL("LOCAL"),
    REMOTE("REMOTE");

    private String value;

    PathSelectionPolicyEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static PathSelectionPolicyEnum fromValue(String text) {
      for (PathSelectionPolicyEnum b : PathSelectionPolicyEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<PathSelectionPolicyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PathSelectionPolicyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PathSelectionPolicyEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return PathSelectionPolicyEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("path_selection_policy")
  private PathSelectionPolicyEnum pathSelectionPolicy = PathSelectionPolicyEnum.ANY;

  /**
   * Failure policy for the service tells datapath, the action to take i.e to allow or block traffic during failure scenarios.
   */
  @JsonAdapter(OnFailurePolicyEnum.Adapter.class)
  public enum OnFailurePolicyEnum {
    ALLOW("ALLOW"),
    BLOCK("BLOCK");

    private String value;

    OnFailurePolicyEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static OnFailurePolicyEnum fromValue(String text) {
      for (OnFailurePolicyEnum b : OnFailurePolicyEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<OnFailurePolicyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OnFailurePolicyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OnFailurePolicyEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return OnFailurePolicyEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("on_failure_policy")
  private OnFailurePolicyEnum onFailurePolicy = OnFailurePolicyEnum.ALLOW;

  public ServiceChain reversePathServiceProfiles(List<ResourceReference> reversePathServiceProfiles) {
    this.reversePathServiceProfiles = reversePathServiceProfiles;
    return this;
  }

  public ServiceChain addReversePathServiceProfilesItem(ResourceReference reversePathServiceProfilesItem) {
    if (this.reversePathServiceProfiles == null) {
      this.reversePathServiceProfiles = new ArrayList<ResourceReference>();
    }
    this.reversePathServiceProfiles.add(reversePathServiceProfilesItem);
    return this;
  }

   /**
   * List of ServiceInsertionServiceProfiles id. Reverse path service profiles are applied to egress traffic and is optional. 2 different set of profiles can be defined for forward and reverse path. If not defined, the reverse of the forward path service profile is applied.
   * @return reversePathServiceProfiles
  **/
  @Schema(description = "List of ServiceInsertionServiceProfiles id. Reverse path service profiles are applied to egress traffic and is optional. 2 different set of profiles can be defined for forward and reverse path. If not defined, the reverse of the forward path service profile is applied.")
  public List<ResourceReference> getReversePathServiceProfiles() {
    return reversePathServiceProfiles;
  }

  public void setReversePathServiceProfiles(List<ResourceReference> reversePathServiceProfiles) {
    this.reversePathServiceProfiles = reversePathServiceProfiles;
  }

  public ServiceChain serviceAttachments(List<ResourceReference> serviceAttachments) {
    this.serviceAttachments = serviceAttachments;
    return this;
  }

  public ServiceChain addServiceAttachmentsItem(ResourceReference serviceAttachmentsItem) {
    this.serviceAttachments.add(serviceAttachmentsItem);
    return this;
  }

   /**
   * Service attachment specifies the scope i.e Service plane at which the SVMs are deployed.
   * @return serviceAttachments
  **/
  @Schema(required = true, description = "Service attachment specifies the scope i.e Service plane at which the SVMs are deployed.")
  public List<ResourceReference> getServiceAttachments() {
    return serviceAttachments;
  }

  public void setServiceAttachments(List<ResourceReference> serviceAttachments) {
    this.serviceAttachments = serviceAttachments;
  }

  public ServiceChain forwardPathServiceProfiles(List<ResourceReference> forwardPathServiceProfiles) {
    this.forwardPathServiceProfiles = forwardPathServiceProfiles;
    return this;
  }

  public ServiceChain addForwardPathServiceProfilesItem(ResourceReference forwardPathServiceProfilesItem) {
    this.forwardPathServiceProfiles.add(forwardPathServiceProfilesItem);
    return this;
  }

   /**
   * List of ServiceInsertionServiceProfiles that constitutes the the service chain. The forward path service profiles are applied to ingress traffic.
   * @return forwardPathServiceProfiles
  **/
  @Schema(required = true, description = "List of ServiceInsertionServiceProfiles that constitutes the the service chain. The forward path service profiles are applied to ingress traffic.")
  public List<ResourceReference> getForwardPathServiceProfiles() {
    return forwardPathServiceProfiles;
  }

  public void setForwardPathServiceProfiles(List<ResourceReference> forwardPathServiceProfiles) {
    this.forwardPathServiceProfiles = forwardPathServiceProfiles;
  }

   /**
   * A unique id generated for every service chain. This is not a uuid.
   * @return serviceChainId
  **/
  @Schema(description = "A unique id generated for every service chain. This is not a uuid.")
  public String getServiceChainId() {
    return serviceChainId;
  }

  public ServiceChain pathSelectionPolicy(PathSelectionPolicyEnum pathSelectionPolicy) {
    this.pathSelectionPolicy = pathSelectionPolicy;
    return this;
  }

   /**
   * Path selection policy can be - ANY - Service Insertion is free to redirect to any service path regardless of any load balancing considerations or flow pinning. LOCAL - means to prefer local service insances. REMOTE - preference is to redirect to the SVM co-located on the same host.
   * @return pathSelectionPolicy
  **/
  @Schema(description = "Path selection policy can be - ANY - Service Insertion is free to redirect to any service path regardless of any load balancing considerations or flow pinning. LOCAL - means to prefer local service insances. REMOTE - preference is to redirect to the SVM co-located on the same host.")
  public PathSelectionPolicyEnum getPathSelectionPolicy() {
    return pathSelectionPolicy;
  }

  public void setPathSelectionPolicy(PathSelectionPolicyEnum pathSelectionPolicy) {
    this.pathSelectionPolicy = pathSelectionPolicy;
  }

  public ServiceChain onFailurePolicy(OnFailurePolicyEnum onFailurePolicy) {
    this.onFailurePolicy = onFailurePolicy;
    return this;
  }

   /**
   * Failure policy for the service tells datapath, the action to take i.e to allow or block traffic during failure scenarios.
   * @return onFailurePolicy
  **/
  @Schema(description = "Failure policy for the service tells datapath, the action to take i.e to allow or block traffic during failure scenarios.")
  public OnFailurePolicyEnum getOnFailurePolicy() {
    return onFailurePolicy;
  }

  public void setOnFailurePolicy(OnFailurePolicyEnum onFailurePolicy) {
    this.onFailurePolicy = onFailurePolicy;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServiceChain serviceChain = (ServiceChain) o;
    return Objects.equals(this.reversePathServiceProfiles, serviceChain.reversePathServiceProfiles) &&
        Objects.equals(this.serviceAttachments, serviceChain.serviceAttachments) &&
        Objects.equals(this.forwardPathServiceProfiles, serviceChain.forwardPathServiceProfiles) &&
        Objects.equals(this.serviceChainId, serviceChain.serviceChainId) &&
        Objects.equals(this.pathSelectionPolicy, serviceChain.pathSelectionPolicy) &&
        Objects.equals(this.onFailurePolicy, serviceChain.onFailurePolicy) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(reversePathServiceProfiles, serviceAttachments, forwardPathServiceProfiles, serviceChainId, pathSelectionPolicy, onFailurePolicy, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServiceChain {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    reversePathServiceProfiles: ").append(toIndentedString(reversePathServiceProfiles)).append("\n");
    sb.append("    serviceAttachments: ").append(toIndentedString(serviceAttachments)).append("\n");
    sb.append("    forwardPathServiceProfiles: ").append(toIndentedString(forwardPathServiceProfiles)).append("\n");
    sb.append("    serviceChainId: ").append(toIndentedString(serviceChainId)).append("\n");
    sb.append("    pathSelectionPolicy: ").append(toIndentedString(pathSelectionPolicy)).append("\n");
    sb.append("    onFailurePolicy: ").append(toIndentedString(onFailurePolicy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
