/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.LbAppProfile;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * LbFastTcpProfile
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class LbFastTcpProfile extends LbAppProfile {
  @SerializedName("close_timeout")
  private Long closeTimeout = 8l;

  @SerializedName("idle_timeout")
  private Long idleTimeout = 1800l;

  @SerializedName("ha_flow_mirroring_enabled")
  private Boolean haFlowMirroringEnabled = false;

  public LbFastTcpProfile closeTimeout(Long closeTimeout) {
    this.closeTimeout = closeTimeout;
    return this;
  }

   /**
   * It is used to specify how long a closing TCP connection (both FINs received or a RST is received) should be kept for this application before cleaning up the connection. 
   * minimum: 1
   * maximum: 60
   * @return closeTimeout
  **/
  @Schema(description = "It is used to specify how long a closing TCP connection (both FINs received or a RST is received) should be kept for this application before cleaning up the connection. ")
  public Long getCloseTimeout() {
    return closeTimeout;
  }

  public void setCloseTimeout(Long closeTimeout) {
    this.closeTimeout = closeTimeout;
  }

  public LbFastTcpProfile idleTimeout(Long idleTimeout) {
    this.idleTimeout = idleTimeout;
    return this;
  }

   /**
   * It is used to configure how long an idle TCP connection in ESTABLISHED state should be kept for this application before cleaning up. 
   * minimum: 1
   * maximum: 2147483647
   * @return idleTimeout
  **/
  @Schema(description = "It is used to configure how long an idle TCP connection in ESTABLISHED state should be kept for this application before cleaning up. ")
  public Long getIdleTimeout() {
    return idleTimeout;
  }

  public void setIdleTimeout(Long idleTimeout) {
    this.idleTimeout = idleTimeout;
  }

  public LbFastTcpProfile haFlowMirroringEnabled(Boolean haFlowMirroringEnabled) {
    this.haFlowMirroringEnabled = haFlowMirroringEnabled;
    return this;
  }

   /**
   * If flow mirroring is enabled, all the flows to the bounded virtual server are mirrored to the standby node. 
   * @return haFlowMirroringEnabled
  **/
  @Schema(description = "If flow mirroring is enabled, all the flows to the bounded virtual server are mirrored to the standby node. ")
  public Boolean isHaFlowMirroringEnabled() {
    return haFlowMirroringEnabled;
  }

  public void setHaFlowMirroringEnabled(Boolean haFlowMirroringEnabled) {
    this.haFlowMirroringEnabled = haFlowMirroringEnabled;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LbFastTcpProfile lbFastTcpProfile = (LbFastTcpProfile) o;
    return Objects.equals(this.closeTimeout, lbFastTcpProfile.closeTimeout) &&
        Objects.equals(this.idleTimeout, lbFastTcpProfile.idleTimeout) &&
        Objects.equals(this.haFlowMirroringEnabled, lbFastTcpProfile.haFlowMirroringEnabled) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(closeTimeout, idleTimeout, haFlowMirroringEnabled, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LbFastTcpProfile {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    closeTimeout: ").append(toIndentedString(closeTimeout)).append("\n");
    sb.append("    idleTimeout: ").append(toIndentedString(idleTimeout)).append("\n");
    sb.append("    haFlowMirroringEnabled: ").append(toIndentedString(haFlowMirroringEnabled)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
