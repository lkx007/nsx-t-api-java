/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * Community match operation
 */
@Schema(description = "Community match operation")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class CommunityMatchOperation {
  /**
   * Match operator for communities from provided community list id. MATCH_ANY will match any community MATCH_ALL will match all communities MATCH_EXACT will do exact match on community MATCH_NONE [operator not supported] will not match any community MATCH_REGEX will match normal communities by evaluating regular expression MATCH_LARGE_COMMUNITY_REGEX will match large communities by evaluating regular expression 
   */
  @JsonAdapter(MatchOperatorEnum.Adapter.class)
  public enum MatchOperatorEnum {
    ANY("MATCH_ANY"),
    ALL("MATCH_ALL"),
    EXACT("MATCH_EXACT"),
    NONE("MATCH_NONE"),
    REGEX("MATCH_REGEX"),
    LARGE_COMMUNITY_REGEX("MATCH_LARGE_COMMUNITY_REGEX");

    private String value;

    MatchOperatorEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static MatchOperatorEnum fromValue(String text) {
      for (MatchOperatorEnum b : MatchOperatorEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<MatchOperatorEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MatchOperatorEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MatchOperatorEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return MatchOperatorEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("match_operator")
  private MatchOperatorEnum matchOperator = MatchOperatorEnum.ANY;

  @SerializedName("regular_expression")
  private String regularExpression = null;

  @SerializedName("community_list_id")
  private String communityListId = null;

  public CommunityMatchOperation matchOperator(MatchOperatorEnum matchOperator) {
    this.matchOperator = matchOperator;
    return this;
  }

   /**
   * Match operator for communities from provided community list id. MATCH_ANY will match any community MATCH_ALL will match all communities MATCH_EXACT will do exact match on community MATCH_NONE [operator not supported] will not match any community MATCH_REGEX will match normal communities by evaluating regular expression MATCH_LARGE_COMMUNITY_REGEX will match large communities by evaluating regular expression 
   * @return matchOperator
  **/
  @Schema(description = "Match operator for communities from provided community list id. MATCH_ANY will match any community MATCH_ALL will match all communities MATCH_EXACT will do exact match on community MATCH_NONE [operator not supported] will not match any community MATCH_REGEX will match normal communities by evaluating regular expression MATCH_LARGE_COMMUNITY_REGEX will match large communities by evaluating regular expression ")
  public MatchOperatorEnum getMatchOperator() {
    return matchOperator;
  }

  public void setMatchOperator(MatchOperatorEnum matchOperator) {
    this.matchOperator = matchOperator;
  }

  public CommunityMatchOperation regularExpression(String regularExpression) {
    this.regularExpression = regularExpression;
    return this;
  }

   /**
   * Regular expression to match BGP communities. If match_operator is MATCH_REGEX then this value must be specified. 
   * @return regularExpression
  **/
  @Schema(description = "Regular expression to match BGP communities. If match_operator is MATCH_REGEX then this value must be specified. ")
  public String getRegularExpression() {
    return regularExpression;
  }

  public void setRegularExpression(String regularExpression) {
    this.regularExpression = regularExpression;
  }

  public CommunityMatchOperation communityListId(String communityListId) {
    this.communityListId = communityListId;
    return this;
  }

   /**
   * ID of BGP community list. This value is not required when match_operator is MATCH_REGEX otherwise required. 
   * @return communityListId
  **/
  @Schema(description = "ID of BGP community list. This value is not required when match_operator is MATCH_REGEX otherwise required. ")
  public String getCommunityListId() {
    return communityListId;
  }

  public void setCommunityListId(String communityListId) {
    this.communityListId = communityListId;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CommunityMatchOperation communityMatchOperation = (CommunityMatchOperation) o;
    return Objects.equals(this.matchOperator, communityMatchOperation.matchOperator) &&
        Objects.equals(this.regularExpression, communityMatchOperation.regularExpression) &&
        Objects.equals(this.communityListId, communityMatchOperation.communityListId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(matchOperator, regularExpression, communityListId);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CommunityMatchOperation {\n");
    
    sb.append("    matchOperator: ").append(toIndentedString(matchOperator)).append("\n");
    sb.append("    regularExpression: ").append(toIndentedString(regularExpression)).append("\n");
    sb.append("    communityListId: ").append(toIndentedString(communityListId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
