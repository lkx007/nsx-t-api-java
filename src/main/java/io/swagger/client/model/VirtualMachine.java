/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.DiscoveredResource;
import io.swagger.client.model.GuestInfo;
import io.swagger.client.model.ResourceReference;
import io.swagger.client.model.Tag;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * VirtualMachine
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class VirtualMachine extends DiscoveredResource {
  @SerializedName("source")
  private ResourceReference source = null;

  @SerializedName("local_id_on_host")
  private String localIdOnHost = null;

  /**
   * Virtual Machine type; Edge, Service VM or other.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    EDGE("EDGE"),
    SERVICE("SERVICE"),
    REGULAR("REGULAR");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static TypeEnum fromValue(String text) {
      for (TypeEnum b : TypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TypeEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("type")
  private TypeEnum type = null;

  @SerializedName("guest_info")
  private GuestInfo guestInfo = null;

  /**
   * Current power state of this virtual machine in the system.
   */
  @JsonAdapter(PowerStateEnum.Adapter.class)
  public enum PowerStateEnum {
    VM_RUNNING("VM_RUNNING"),
    VM_STOPPED("VM_STOPPED"),
    VM_SUSPENDED("VM_SUSPENDED"),
    UNKNOWN("UNKNOWN");

    private String value;

    PowerStateEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static PowerStateEnum fromValue(String text) {
      for (PowerStateEnum b : PowerStateEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<PowerStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PowerStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PowerStateEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return PowerStateEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("power_state")
  private PowerStateEnum powerState = null;

  @SerializedName("compute_ids")
  private List<String> computeIds = new ArrayList<String>();

  @SerializedName("host_id")
  private String hostId = null;

  @SerializedName("external_id")
  private String externalId = null;

  public VirtualMachine source(ResourceReference source) {
    this.source = source;
    return this;
  }

   /**
   * Get source
   * @return source
  **/
  @Schema(description = "")
  public ResourceReference getSource() {
    return source;
  }

  public void setSource(ResourceReference source) {
    this.source = source;
  }

  public VirtualMachine localIdOnHost(String localIdOnHost) {
    this.localIdOnHost = localIdOnHost;
    return this;
  }

   /**
   * Id of the vm unique within the host.
   * @return localIdOnHost
  **/
  @Schema(required = true, description = "Id of the vm unique within the host.")
  public String getLocalIdOnHost() {
    return localIdOnHost;
  }

  public void setLocalIdOnHost(String localIdOnHost) {
    this.localIdOnHost = localIdOnHost;
  }

   /**
   * Virtual Machine type; Edge, Service VM or other.
   * @return type
  **/
  @Schema(description = "Virtual Machine type; Edge, Service VM or other.")
  public TypeEnum getType() {
    return type;
  }

  public VirtualMachine guestInfo(GuestInfo guestInfo) {
    this.guestInfo = guestInfo;
    return this;
  }

   /**
   * Get guestInfo
   * @return guestInfo
  **/
  @Schema(description = "")
  public GuestInfo getGuestInfo() {
    return guestInfo;
  }

  public void setGuestInfo(GuestInfo guestInfo) {
    this.guestInfo = guestInfo;
  }

  public VirtualMachine powerState(PowerStateEnum powerState) {
    this.powerState = powerState;
    return this;
  }

   /**
   * Current power state of this virtual machine in the system.
   * @return powerState
  **/
  @Schema(required = true, description = "Current power state of this virtual machine in the system.")
  public PowerStateEnum getPowerState() {
    return powerState;
  }

  public void setPowerState(PowerStateEnum powerState) {
    this.powerState = powerState;
  }

  public VirtualMachine computeIds(List<String> computeIds) {
    this.computeIds = computeIds;
    return this;
  }

  public VirtualMachine addComputeIdsItem(String computeIdsItem) {
    this.computeIds.add(computeIdsItem);
    return this;
  }

   /**
   * List of external compute ids of the virtual machine in the format &#x27;id-type-key:value&#x27; , list of external compute ids [&#x27;uuid:xxxx-xxxx-xxxx-xxxx&#x27;, &#x27;moIdOnHost:moref-11&#x27;, &#x27;instanceUuid:xxxx-xxxx-xxxx-xxxx&#x27;]
   * @return computeIds
  **/
  @Schema(required = true, description = "List of external compute ids of the virtual machine in the format 'id-type-key:value' , list of external compute ids ['uuid:xxxx-xxxx-xxxx-xxxx', 'moIdOnHost:moref-11', 'instanceUuid:xxxx-xxxx-xxxx-xxxx']")
  public List<String> getComputeIds() {
    return computeIds;
  }

  public void setComputeIds(List<String> computeIds) {
    this.computeIds = computeIds;
  }

  public VirtualMachine hostId(String hostId) {
    this.hostId = hostId;
    return this;
  }

   /**
   * Id of the host in which this virtual machine exists.
   * @return hostId
  **/
  @Schema(description = "Id of the host in which this virtual machine exists.")
  public String getHostId() {
    return hostId;
  }

  public void setHostId(String hostId) {
    this.hostId = hostId;
  }

  public VirtualMachine externalId(String externalId) {
    this.externalId = externalId;
    return this;
  }

   /**
   * Current external id of this virtual machine in the system.
   * @return externalId
  **/
  @Schema(required = true, description = "Current external id of this virtual machine in the system.")
  public String getExternalId() {
    return externalId;
  }

  public void setExternalId(String externalId) {
    this.externalId = externalId;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VirtualMachine virtualMachine = (VirtualMachine) o;
    return Objects.equals(this.source, virtualMachine.source) &&
        Objects.equals(this.localIdOnHost, virtualMachine.localIdOnHost) &&
        Objects.equals(this.type, virtualMachine.type) &&
        Objects.equals(this.guestInfo, virtualMachine.guestInfo) &&
        Objects.equals(this.powerState, virtualMachine.powerState) &&
        Objects.equals(this.computeIds, virtualMachine.computeIds) &&
        Objects.equals(this.hostId, virtualMachine.hostId) &&
        Objects.equals(this.externalId, virtualMachine.externalId) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(source, localIdOnHost, type, guestInfo, powerState, computeIds, hostId, externalId, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VirtualMachine {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    localIdOnHost: ").append(toIndentedString(localIdOnHost)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    guestInfo: ").append(toIndentedString(guestInfo)).append("\n");
    sb.append("    powerState: ").append(toIndentedString(powerState)).append("\n");
    sb.append("    computeIds: ").append(toIndentedString(computeIds)).append("\n");
    sb.append("    hostId: ").append(toIndentedString(hostId)).append("\n");
    sb.append("    externalId: ").append(toIndentedString(externalId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
