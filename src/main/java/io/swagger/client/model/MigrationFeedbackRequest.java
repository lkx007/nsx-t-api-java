/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * Detailed feedback requests from the migration tool where user input is required.
 */
@Schema(description = "Detailed feedback requests from the migration tool where user input is required.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class MigrationFeedbackRequest {
  @SerializedName("resolved")
  private Boolean resolved = null;

  @SerializedName("accepted_actions")
  private List<String> acceptedActions = null;

  @SerializedName("hash")
  private String hash = null;

  @SerializedName("vertical")
  private String vertical = null;

  @SerializedName("v_object_id")
  private String vObjectId = null;

  @SerializedName("suggested_value")
  private String suggestedValue = null;

  @SerializedName("message")
  private String message = null;

  @SerializedName("object_id")
  private String objectId = null;

  @SerializedName("accepted_value_type")
  private String acceptedValueType = null;

  @SerializedName("v_object_name")
  private String vObjectName = null;

  @SerializedName("multi_value")
  private Boolean multiValue = null;

  @SerializedName("accepted_values")
  private List<String> acceptedValues = null;

  @SerializedName("id")
  private String id = null;

  @SerializedName("suggested_action")
  private String suggestedAction = null;

  @SerializedName("sub_vertical")
  private String subVertical = null;

  @SerializedName("resolution")
  private String resolution = null;

  @SerializedName("rejected")
  private Boolean rejected = null;

   /**
   * Indicates if a valid response already exist for this feedback request.
   * @return resolved
  **/
  @Schema(description = "Indicates if a valid response already exist for this feedback request.")
  public Boolean isResolved() {
    return resolved;
  }

   /**
   * List of acceptable actions for this feedback request.
   * @return acceptedActions
  **/
  @Schema(description = "List of acceptable actions for this feedback request.")
  public List<String> getAcceptedActions() {
    return acceptedActions;
  }

   /**
   * Identify a feedback request type across objects. This can be used to group together objects with similar feedback request and resolve them in one go.
   * @return hash
  **/
  @Schema(description = "Identify a feedback request type across objects. This can be used to group together objects with similar feedback request and resolve them in one go.")
  public String getHash() {
    return hash;
  }

   /**
   * Functional area that this query falls into.
   * @return vertical
  **/
  @Schema(description = "Functional area that this query falls into.")
  public String getVertical() {
    return vertical;
  }

   /**
   * Identifier for this object in the source NSX endpoint.
   * @return vObjectId
  **/
  @Schema(description = "Identifier for this object in the source NSX endpoint.")
  public String getVObjectId() {
    return vObjectId;
  }

   /**
   * The suggested value to resolve this feedback request.
   * @return suggestedValue
  **/
  @Schema(description = "The suggested value to resolve this feedback request.")
  public String getSuggestedValue() {
    return suggestedValue;
  }

   /**
   * Detailed feedback request with options.
   * @return message
  **/
  @Schema(description = "Detailed feedback request with options.")
  public String getMessage() {
    return message;
  }

   /**
   * Identifier of the object for which feedback is requested.
   * @return objectId
  **/
  @Schema(description = "Identifier of the object for which feedback is requested.")
  public String getObjectId() {
    return objectId;
  }

   /**
   * Data type of the items listed in acceptable values list.
   * @return acceptedValueType
  **/
  @Schema(description = "Data type of the items listed in acceptable values list.")
  public String getAcceptedValueType() {
    return acceptedValueType;
  }

   /**
   * Name of this object in the source NSX endpoint.
   * @return vObjectName
  **/
  @Schema(description = "Name of this object in the source NSX endpoint.")
  public String getVObjectName() {
    return vObjectName;
  }

   /**
   * Indicates if multiple values can be selected as response from the list of acceptable value.
   * @return multiValue
  **/
  @Schema(description = "Indicates if multiple values can be selected as response from the list of acceptable value.")
  public Boolean isMultiValue() {
    return multiValue;
  }

  public MigrationFeedbackRequest acceptedValues(List<String> acceptedValues) {
    this.acceptedValues = acceptedValues;
    return this;
  }

  public MigrationFeedbackRequest addAcceptedValuesItem(String acceptedValuesItem) {
    if (this.acceptedValues == null) {
      this.acceptedValues = new ArrayList<String>();
    }
    this.acceptedValues.add(acceptedValuesItem);
    return this;
  }

   /**
   * List of acceptable values for this feedback request.
   * @return acceptedValues
  **/
  @Schema(description = "List of acceptable values for this feedback request.")
  public List<String> getAcceptedValues() {
    return acceptedValues;
  }

  public void setAcceptedValues(List<String> acceptedValues) {
    this.acceptedValues = acceptedValues;
  }

   /**
   * Identifier of the feedback request.
   * @return id
  **/
  @Schema(description = "Identifier of the feedback request.")
  public String getId() {
    return id;
  }

   /**
   * The suggested action to resolve this feedback request.
   * @return suggestedAction
  **/
  @Schema(description = "The suggested action to resolve this feedback request.")
  public String getSuggestedAction() {
    return suggestedAction;
  }

   /**
   * Functional sub-area that this query falls into.
   * @return subVertical
  **/
  @Schema(description = "Functional sub-area that this query falls into.")
  public String getSubVertical() {
    return subVertical;
  }

   /**
   * If the feedback request was resolved earlier, provides details about the previous resolution.
   * @return resolution
  **/
  @Schema(description = "If the feedback request was resolved earlier, provides details about the previous resolution.")
  public String getResolution() {
    return resolution;
  }

   /**
   * Indicates if previous response was invalid. Please provide a valid response.
   * @return rejected
  **/
  @Schema(description = "Indicates if previous response was invalid. Please provide a valid response.")
  public Boolean isRejected() {
    return rejected;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MigrationFeedbackRequest migrationFeedbackRequest = (MigrationFeedbackRequest) o;
    return Objects.equals(this.resolved, migrationFeedbackRequest.resolved) &&
        Objects.equals(this.acceptedActions, migrationFeedbackRequest.acceptedActions) &&
        Objects.equals(this.hash, migrationFeedbackRequest.hash) &&
        Objects.equals(this.vertical, migrationFeedbackRequest.vertical) &&
        Objects.equals(this.vObjectId, migrationFeedbackRequest.vObjectId) &&
        Objects.equals(this.suggestedValue, migrationFeedbackRequest.suggestedValue) &&
        Objects.equals(this.message, migrationFeedbackRequest.message) &&
        Objects.equals(this.objectId, migrationFeedbackRequest.objectId) &&
        Objects.equals(this.acceptedValueType, migrationFeedbackRequest.acceptedValueType) &&
        Objects.equals(this.vObjectName, migrationFeedbackRequest.vObjectName) &&
        Objects.equals(this.multiValue, migrationFeedbackRequest.multiValue) &&
        Objects.equals(this.acceptedValues, migrationFeedbackRequest.acceptedValues) &&
        Objects.equals(this.id, migrationFeedbackRequest.id) &&
        Objects.equals(this.suggestedAction, migrationFeedbackRequest.suggestedAction) &&
        Objects.equals(this.subVertical, migrationFeedbackRequest.subVertical) &&
        Objects.equals(this.resolution, migrationFeedbackRequest.resolution) &&
        Objects.equals(this.rejected, migrationFeedbackRequest.rejected);
  }

  @Override
  public int hashCode() {
    return Objects.hash(resolved, acceptedActions, hash, vertical, vObjectId, suggestedValue, message, objectId, acceptedValueType, vObjectName, multiValue, acceptedValues, id, suggestedAction, subVertical, resolution, rejected);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MigrationFeedbackRequest {\n");
    
    sb.append("    resolved: ").append(toIndentedString(resolved)).append("\n");
    sb.append("    acceptedActions: ").append(toIndentedString(acceptedActions)).append("\n");
    sb.append("    hash: ").append(toIndentedString(hash)).append("\n");
    sb.append("    vertical: ").append(toIndentedString(vertical)).append("\n");
    sb.append("    vObjectId: ").append(toIndentedString(vObjectId)).append("\n");
    sb.append("    suggestedValue: ").append(toIndentedString(suggestedValue)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    objectId: ").append(toIndentedString(objectId)).append("\n");
    sb.append("    acceptedValueType: ").append(toIndentedString(acceptedValueType)).append("\n");
    sb.append("    vObjectName: ").append(toIndentedString(vObjectName)).append("\n");
    sb.append("    multiValue: ").append(toIndentedString(multiValue)).append("\n");
    sb.append("    acceptedValues: ").append(toIndentedString(acceptedValues)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    suggestedAction: ").append(toIndentedString(suggestedAction)).append("\n");
    sb.append("    subVertical: ").append(toIndentedString(subVertical)).append("\n");
    sb.append("    resolution: ").append(toIndentedString(resolution)).append("\n");
    sb.append("    rejected: ").append(toIndentedString(rejected)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
