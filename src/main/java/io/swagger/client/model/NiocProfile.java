/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.BaseHostSwitchProfile;
import io.swagger.client.model.ResourceAllocation;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * This profile is created for Network I/O Control(NIOC). 
 */
@Schema(description = "This profile is created for Network I/O Control(NIOC). ")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class NiocProfile extends BaseHostSwitchProfile {
  @SerializedName("host_infra_traffic_res")
  private List<ResourceAllocation> hostInfraTrafficRes = null;

  @SerializedName("enabled")
  private Boolean enabled = true;

  public NiocProfile hostInfraTrafficRes(List<ResourceAllocation> hostInfraTrafficRes) {
    this.hostInfraTrafficRes = hostInfraTrafficRes;
    return this;
  }

  public NiocProfile addHostInfraTrafficResItem(ResourceAllocation hostInfraTrafficResItem) {
    if (this.hostInfraTrafficRes == null) {
      this.hostInfraTrafficRes = new ArrayList<ResourceAllocation>();
    }
    this.hostInfraTrafficRes.add(hostInfraTrafficResItem);
    return this;
  }

   /**
   * host_infra_traffic_res specifies bandwidth allocation for various traffic resources. 
   * @return hostInfraTrafficRes
  **/
  @Schema(description = "host_infra_traffic_res specifies bandwidth allocation for various traffic resources. ")
  public List<ResourceAllocation> getHostInfraTrafficRes() {
    return hostInfraTrafficRes;
  }

  public void setHostInfraTrafficRes(List<ResourceAllocation> hostInfraTrafficRes) {
    this.hostInfraTrafficRes = hostInfraTrafficRes;
  }

  public NiocProfile enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

   /**
   * The enabled property specifies the status of NIOC feature. When enabled is set to true, NIOC feature is turned on and the bandwidth allocations specified for the traffic resources are enforced. When enabled is set to false, NIOC feature is turned off and no bandwidth allocation is guaranteed. By default, enabled will be set to true. 
   * @return enabled
  **/
  @Schema(description = "The enabled property specifies the status of NIOC feature. When enabled is set to true, NIOC feature is turned on and the bandwidth allocations specified for the traffic resources are enforced. When enabled is set to false, NIOC feature is turned off and no bandwidth allocation is guaranteed. By default, enabled will be set to true. ")
  public Boolean isEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NiocProfile niocProfile = (NiocProfile) o;
    return Objects.equals(this.hostInfraTrafficRes, niocProfile.hostInfraTrafficRes) &&
        Objects.equals(this.enabled, niocProfile.enabled) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(hostInfraTrafficRes, enabled, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NiocProfile {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    hostInfraTrafficRes: ").append(toIndentedString(hostInfraTrafficRes)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
