/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.DiscoveredResource;
import io.swagger.client.model.KeyValuePair;
import io.swagger.client.model.Tag;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * DiscoveredNode
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class DiscoveredNode extends DiscoveredResource {
  @SerializedName("stateless")
  private Boolean stateless = null;

  @SerializedName("parent_compute_collection")
  private String parentComputeCollection = null;

  @SerializedName("certificate")
  private String certificate = null;

  @SerializedName("origin_id")
  private String originId = null;

  @SerializedName("ip_addresses")
  private List<String> ipAddresses = null;

  @SerializedName("hardware_id")
  private String hardwareId = null;

  @SerializedName("os_version")
  private String osVersion = null;

  @SerializedName("node_type")
  private String nodeType = null;

  @SerializedName("os_type")
  private String osType = null;

  @SerializedName("origin_properties")
  private List<KeyValuePair> originProperties = null;

  @SerializedName("external_id")
  private String externalId = null;

  @SerializedName("cm_local_id")
  private String cmLocalId = null;

   /**
   * The stateless property describes whether host persists its state across reboot or not. If state persists, value is set as false otherwise true.
   * @return stateless
  **/
  @Schema(description = "The stateless property describes whether host persists its state across reboot or not. If state persists, value is set as false otherwise true.")
  public Boolean isStateless() {
    return stateless;
  }

   /**
   * External id of the compute collection to which this node belongs
   * @return parentComputeCollection
  **/
  @Schema(description = "External id of the compute collection to which this node belongs")
  public String getParentComputeCollection() {
    return parentComputeCollection;
  }

  public DiscoveredNode certificate(String certificate) {
    this.certificate = certificate;
    return this;
  }

   /**
   * Certificate of the discovered node
   * @return certificate
  **/
  @Schema(description = "Certificate of the discovered node")
  public String getCertificate() {
    return certificate;
  }

  public void setCertificate(String certificate) {
    this.certificate = certificate;
  }

   /**
   * Id of the compute manager from where this node was discovered
   * @return originId
  **/
  @Schema(description = "Id of the compute manager from where this node was discovered")
  public String getOriginId() {
    return originId;
  }

   /**
   * IP Addresses of the the discovered node.
   * @return ipAddresses
  **/
  @Schema(description = "IP Addresses of the the discovered node.")
  public List<String> getIpAddresses() {
    return ipAddresses;
  }

   /**
   * Hardware Id is generated using system hardware info. It is used to retrieve fabric node of the esx.
   * @return hardwareId
  **/
  @Schema(description = "Hardware Id is generated using system hardware info. It is used to retrieve fabric node of the esx.")
  public String getHardwareId() {
    return hardwareId;
  }

   /**
   * OS version of the discovered node
   * @return osVersion
  **/
  @Schema(description = "OS version of the discovered node")
  public String getOsVersion() {
    return osVersion;
  }

   /**
   * Discovered Node type like Host
   * @return nodeType
  **/
  @Schema(description = "Discovered Node type like Host")
  public String getNodeType() {
    return nodeType;
  }

   /**
   * OS type of the discovered node
   * @return osType
  **/
  @Schema(description = "OS type of the discovered node")
  public String getOsType() {
    return osType;
  }

   /**
   * Key-Value map of additional specific properties of discovered node in the Compute Manager 
   * @return originProperties
  **/
  @Schema(description = "Key-Value map of additional specific properties of discovered node in the Compute Manager ")
  public List<KeyValuePair> getOriginProperties() {
    return originProperties;
  }

   /**
   * External id of the discovered node, ex. a mo-ref from VC
   * @return externalId
  **/
  @Schema(description = "External id of the discovered node, ex. a mo-ref from VC")
  public String getExternalId() {
    return externalId;
  }

   /**
   * Local Id of the discovered node in the Compute Manager
   * @return cmLocalId
  **/
  @Schema(description = "Local Id of the discovered node in the Compute Manager")
  public String getCmLocalId() {
    return cmLocalId;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DiscoveredNode discoveredNode = (DiscoveredNode) o;
    return Objects.equals(this.stateless, discoveredNode.stateless) &&
        Objects.equals(this.parentComputeCollection, discoveredNode.parentComputeCollection) &&
        Objects.equals(this.certificate, discoveredNode.certificate) &&
        Objects.equals(this.originId, discoveredNode.originId) &&
        Objects.equals(this.ipAddresses, discoveredNode.ipAddresses) &&
        Objects.equals(this.hardwareId, discoveredNode.hardwareId) &&
        Objects.equals(this.osVersion, discoveredNode.osVersion) &&
        Objects.equals(this.nodeType, discoveredNode.nodeType) &&
        Objects.equals(this.osType, discoveredNode.osType) &&
        Objects.equals(this.originProperties, discoveredNode.originProperties) &&
        Objects.equals(this.externalId, discoveredNode.externalId) &&
        Objects.equals(this.cmLocalId, discoveredNode.cmLocalId) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(stateless, parentComputeCollection, certificate, originId, ipAddresses, hardwareId, osVersion, nodeType, osType, originProperties, externalId, cmLocalId, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DiscoveredNode {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    stateless: ").append(toIndentedString(stateless)).append("\n");
    sb.append("    parentComputeCollection: ").append(toIndentedString(parentComputeCollection)).append("\n");
    sb.append("    certificate: ").append(toIndentedString(certificate)).append("\n");
    sb.append("    originId: ").append(toIndentedString(originId)).append("\n");
    sb.append("    ipAddresses: ").append(toIndentedString(ipAddresses)).append("\n");
    sb.append("    hardwareId: ").append(toIndentedString(hardwareId)).append("\n");
    sb.append("    osVersion: ").append(toIndentedString(osVersion)).append("\n");
    sb.append("    nodeType: ").append(toIndentedString(nodeType)).append("\n");
    sb.append("    osType: ").append(toIndentedString(osType)).append("\n");
    sb.append("    originProperties: ").append(toIndentedString(originProperties)).append("\n");
    sb.append("    externalId: ").append(toIndentedString(externalId)).append("\n");
    sb.append("    cmLocalId: ").append(toIndentedString(cmLocalId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
