/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.NSServiceElement;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * A NSService that represents IPv4 or IPv6 ICMP protocol
 */
@Schema(description = "A NSService that represents IPv4 or IPv6 ICMP protocol")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class ICMPTypeNSService extends NSServiceElement {
  @SerializedName("icmp_code")
  private Long icmpCode = null;

  @SerializedName("icmp_type")
  private Long icmpType = null;

  /**
   * ICMP protocol type
   */
  @JsonAdapter(ProtocolEnum.Adapter.class)
  public enum ProtocolEnum {
    ICMPV4("ICMPv4"),
    ICMPV6("ICMPv6");

    private String value;

    ProtocolEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ProtocolEnum fromValue(String text) {
      for (ProtocolEnum b : ProtocolEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ProtocolEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProtocolEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProtocolEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ProtocolEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("protocol")
  private ProtocolEnum protocol = null;

  public ICMPTypeNSService icmpCode(Long icmpCode) {
    this.icmpCode = icmpCode;
    return this;
  }

   /**
   * ICMP message code
   * @return icmpCode
  **/
  @Schema(description = "ICMP message code")
  public Long getIcmpCode() {
    return icmpCode;
  }

  public void setIcmpCode(Long icmpCode) {
    this.icmpCode = icmpCode;
  }

  public ICMPTypeNSService icmpType(Long icmpType) {
    this.icmpType = icmpType;
    return this;
  }

   /**
   * ICMP message type
   * @return icmpType
  **/
  @Schema(description = "ICMP message type")
  public Long getIcmpType() {
    return icmpType;
  }

  public void setIcmpType(Long icmpType) {
    this.icmpType = icmpType;
  }

  public ICMPTypeNSService protocol(ProtocolEnum protocol) {
    this.protocol = protocol;
    return this;
  }

   /**
   * ICMP protocol type
   * @return protocol
  **/
  @Schema(required = true, description = "ICMP protocol type")
  public ProtocolEnum getProtocol() {
    return protocol;
  }

  public void setProtocol(ProtocolEnum protocol) {
    this.protocol = protocol;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ICMPTypeNSService icMPTypeNSService = (ICMPTypeNSService) o;
    return Objects.equals(this.icmpCode, icMPTypeNSService.icmpCode) &&
        Objects.equals(this.icmpType, icMPTypeNSService.icmpType) &&
        Objects.equals(this.protocol, icMPTypeNSService.protocol) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(icmpCode, icmpType, protocol, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ICMPTypeNSService {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    icmpCode: ").append(toIndentedString(icmpCode)).append("\n");
    sb.append("    icmpType: ").append(toIndentedString(icmpType)).append("\n");
    sb.append("    protocol: ").append(toIndentedString(protocol)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
