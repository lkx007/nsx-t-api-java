/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.ManagedResource;
import io.swagger.client.model.Tag;
import io.swagger.client.model.WidgetItem;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * Describes the configuration of a view to be displayed on the dashboard.
 */
@Schema(description = "Describes the configuration of a view to be displayed on the dashboard.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class View extends ManagedResource {
  @SerializedName("include_roles")
  private String includeRoles = null;

  @SerializedName("display_name")
  private String displayName = null;

  @SerializedName("exclude_roles")
  private String excludeRoles = null;

  @SerializedName("weight")
  private Integer weight = 10000;

  @SerializedName("widgets")
  private List<WidgetItem> widgets = new ArrayList<WidgetItem>();

  @SerializedName("shared")
  private Boolean shared = false;

  public View includeRoles(String includeRoles) {
    this.includeRoles = includeRoles;
    return this;
  }

   /**
   * Comma separated list of roles to which the shared view is visible. Allows user to specify the visibility of a shared view to the specified roles. User defined roles can also be specified in the list. The roles can be obtained via GET /api/v1/aaa/roles. Please visit API documentation for details about roles.
   * @return includeRoles
  **/
  @Schema(description = "Comma separated list of roles to which the shared view is visible. Allows user to specify the visibility of a shared view to the specified roles. User defined roles can also be specified in the list. The roles can be obtained via GET /api/v1/aaa/roles. Please visit API documentation for details about roles.")
  public String getIncludeRoles() {
    return includeRoles;
  }

  public void setIncludeRoles(String includeRoles) {
    this.includeRoles = includeRoles;
  }

  public View displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

   /**
   * Title of the widget.
   * @return displayName
  **/
  @Schema(required = true, description = "Title of the widget.")
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }

  public View excludeRoles(String excludeRoles) {
    this.excludeRoles = excludeRoles;
    return this;
  }

   /**
   * Comma separated list of roles to which the shared view is not visible. Allows user to prevent the visibility of a shared view to the specified roles. User defined roles can also be specified in the list. The roles can be obtained via GET /api/v1/aaa/roles. Please visit API documentation for details about roles. If include_roles is specified then exclude_roles cannot be specified.
   * @return excludeRoles
  **/
  @Schema(description = "Comma separated list of roles to which the shared view is not visible. Allows user to prevent the visibility of a shared view to the specified roles. User defined roles can also be specified in the list. The roles can be obtained via GET /api/v1/aaa/roles. Please visit API documentation for details about roles. If include_roles is specified then exclude_roles cannot be specified.")
  public String getExcludeRoles() {
    return excludeRoles;
  }

  public void setExcludeRoles(String excludeRoles) {
    this.excludeRoles = excludeRoles;
  }

  public View weight(Integer weight) {
    this.weight = weight;
    return this;
  }

   /**
   * Determines placement of view relative to other views. The lower the weight, the higher it is in the placement order.
   * @return weight
  **/
  @Schema(description = "Determines placement of view relative to other views. The lower the weight, the higher it is in the placement order.")
  public Integer getWeight() {
    return weight;
  }

  public void setWeight(Integer weight) {
    this.weight = weight;
  }

  public View widgets(List<WidgetItem> widgets) {
    this.widgets = widgets;
    return this;
  }

  public View addWidgetsItem(WidgetItem widgetsItem) {
    this.widgets.add(widgetsItem);
    return this;
  }

   /**
   * Array of widgets that are part of the view.
   * @return widgets
  **/
  @Schema(required = true, description = "Array of widgets that are part of the view.")
  public List<WidgetItem> getWidgets() {
    return widgets;
  }

  public void setWidgets(List<WidgetItem> widgets) {
    this.widgets = widgets;
  }

  public View shared(Boolean shared) {
    this.shared = shared;
    return this;
  }

   /**
   * Defaults to false. Set to true to publish the view to other users. The widgets of a shared view are visible to other users.
   * @return shared
  **/
  @Schema(description = "Defaults to false. Set to true to publish the view to other users. The widgets of a shared view are visible to other users.")
  public Boolean isShared() {
    return shared;
  }

  public void setShared(Boolean shared) {
    this.shared = shared;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    View view = (View) o;
    return Objects.equals(this.includeRoles, view.includeRoles) &&
        Objects.equals(this.displayName, view.displayName) &&
        Objects.equals(this.excludeRoles, view.excludeRoles) &&
        Objects.equals(this.weight, view.weight) &&
        Objects.equals(this.widgets, view.widgets) &&
        Objects.equals(this.shared, view.shared) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(includeRoles, displayName, excludeRoles, weight, widgets, shared, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class View {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    includeRoles: ").append(toIndentedString(includeRoles)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    excludeRoles: ").append(toIndentedString(excludeRoles)).append("\n");
    sb.append("    weight: ").append(toIndentedString(weight)).append("\n");
    sb.append("    widgets: ").append(toIndentedString(widgets)).append("\n");
    sb.append("    shared: ").append(toIndentedString(shared)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
