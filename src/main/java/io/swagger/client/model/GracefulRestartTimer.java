/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * BGP Graceful Restart timers configuration
 */
@Schema(description = "BGP Graceful Restart timers configuration")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class GracefulRestartTimer {
  @SerializedName("restart_timer")
  private Long restartTimer = 180l;

  @SerializedName("stale_timer")
  private Long staleTimer = 600l;

  public GracefulRestartTimer restartTimer(Long restartTimer) {
    this.restartTimer = restartTimer;
    return this;
  }

   /**
   * Maximum time BGP speaker will take for the BGP session to be re-established after a restart. Ranges from 1 sec to 3600 sec. This can be used to speed up routing convergence by its peer in case that the BGP speaker does not come back after a restart. If the session does not get re-established within the \&quot;Restart Time\&quot; that the Restarting Speaker advertised previously, the Receiving Speaker will delete all the stale routes from that peer. 
   * minimum: 1
   * maximum: 3600
   * @return restartTimer
  **/
  @Schema(description = "Maximum time BGP speaker will take for the BGP session to be re-established after a restart. Ranges from 1 sec to 3600 sec. This can be used to speed up routing convergence by its peer in case that the BGP speaker does not come back after a restart. If the session does not get re-established within the \"Restart Time\" that the Restarting Speaker advertised previously, the Receiving Speaker will delete all the stale routes from that peer. ")
  public Long getRestartTimer() {
    return restartTimer;
  }

  public void setRestartTimer(Long restartTimer) {
    this.restartTimer = restartTimer;
  }

  public GracefulRestartTimer staleTimer(Long staleTimer) {
    this.staleTimer = staleTimer;
    return this;
  }

   /**
   * Maximum time before stale routes are removed from the RIB when the local BGP process restarts. Ranges from 1 sec to 3600 sec. 
   * minimum: 1
   * maximum: 3600
   * @return staleTimer
  **/
  @Schema(description = "Maximum time before stale routes are removed from the RIB when the local BGP process restarts. Ranges from 1 sec to 3600 sec. ")
  public Long getStaleTimer() {
    return staleTimer;
  }

  public void setStaleTimer(Long staleTimer) {
    this.staleTimer = staleTimer;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GracefulRestartTimer gracefulRestartTimer = (GracefulRestartTimer) o;
    return Objects.equals(this.restartTimer, gracefulRestartTimer.restartTimer) &&
        Objects.equals(this.staleTimer, gracefulRestartTimer.staleTimer);
  }

  @Override
  public int hashCode() {
    return Objects.hash(restartTimer, staleTimer);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GracefulRestartTimer {\n");
    
    sb.append("    restartTimer: ").append(toIndentedString(restartTimer)).append("\n");
    sb.append("    staleTimer: ").append(toIndentedString(staleTimer)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
