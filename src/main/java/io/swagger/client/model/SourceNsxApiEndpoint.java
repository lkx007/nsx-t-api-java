/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * Details about an existing NSX manager to be migrated
 */
@Schema(description = "Details about an existing NSX manager to be migrated")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class SourceNsxApiEndpoint {
  @SerializedName("vc_port")
  private Integer vcPort = 443;

  @SerializedName("vc_username")
  private String vcUsername = null;

  @SerializedName("vc_ip")
  private String vcIp = null;

  @SerializedName("ip")
  private String ip = null;

  @SerializedName("auth_token")
  private String authToken = null;

  @SerializedName("nsx_syncrole")
  private String nsxSyncrole = null;

  @SerializedName("vc_version")
  private String vcVersion = null;

  @SerializedName("nsx_username")
  private String nsxUsername = null;

  @SerializedName("nsx_version")
  private String nsxVersion = null;

  @SerializedName("nsx_password")
  private String nsxPassword = null;

  @SerializedName("vc_password")
  private String vcPassword = null;

  public SourceNsxApiEndpoint vcPort(Integer vcPort) {
    this.vcPort = vcPort;
    return this;
  }

   /**
   * VC port that will be used to fetch details.
   * @return vcPort
  **/
  @Schema(description = "VC port that will be used to fetch details.")
  public Integer getVcPort() {
    return vcPort;
  }

  public void setVcPort(Integer vcPort) {
    this.vcPort = vcPort;
  }

  public SourceNsxApiEndpoint vcUsername(String vcUsername) {
    this.vcUsername = vcUsername;
    return this;
  }

   /**
   * Username for connecting to VC.
   * @return vcUsername
  **/
  @Schema(required = true, description = "Username for connecting to VC.")
  public String getVcUsername() {
    return vcUsername;
  }

  public void setVcUsername(String vcUsername) {
    this.vcUsername = vcUsername;
  }

  public SourceNsxApiEndpoint vcIp(String vcIp) {
    this.vcIp = vcIp;
    return this;
  }

   /**
   * IP address or host name of VC.
   * @return vcIp
  **/
  @Schema(required = true, description = "IP address or host name of VC.")
  public String getVcIp() {
    return vcIp;
  }

  public void setVcIp(String vcIp) {
    this.vcIp = vcIp;
  }

  public SourceNsxApiEndpoint ip(String ip) {
    this.ip = ip;
    return this;
  }

   /**
   * IP address or hostname of a source NSX API endpoint. This field is not applicable in case of vSphere network migration.
   * @return ip
  **/
  @Schema(description = "IP address or hostname of a source NSX API endpoint. This field is not applicable in case of vSphere network migration.")
  public String getIp() {
    return ip;
  }

  public void setIp(String ip) {
    this.ip = ip;
  }

  public SourceNsxApiEndpoint authToken(String authToken) {
    this.authToken = authToken;
    return this;
  }

   /**
   * Auth token used to make REST calls to source NSX API endpoint. This field is not applicable in case of vSphere network migration.
   * @return authToken
  **/
  @Schema(description = "Auth token used to make REST calls to source NSX API endpoint. This field is not applicable in case of vSphere network migration.")
  public String getAuthToken() {
    return authToken;
  }

  public void setAuthToken(String authToken) {
    this.authToken = authToken;
  }

   /**
   * Signifies Universal Sync role status (STANDALONE, PRIMARY, SECONDARY) of a source NSX API endpoint.
   * @return nsxSyncrole
  **/
  @Schema(description = "Signifies Universal Sync role status (STANDALONE, PRIMARY, SECONDARY) of a source NSX API endpoint.")
  public String getNsxSyncrole() {
    return nsxSyncrole;
  }

   /**
   * Build version of VC.
   * @return vcVersion
  **/
  @Schema(description = "Build version of VC.")
  public String getVcVersion() {
    return vcVersion;
  }

  public SourceNsxApiEndpoint nsxUsername(String nsxUsername) {
    this.nsxUsername = nsxUsername;
    return this;
  }

   /**
   * Username for connecting to NSX manager. This field is not applicable in case of vSphere network migration.
   * @return nsxUsername
  **/
  @Schema(description = "Username for connecting to NSX manager. This field is not applicable in case of vSphere network migration.")
  public String getNsxUsername() {
    return nsxUsername;
  }

  public void setNsxUsername(String nsxUsername) {
    this.nsxUsername = nsxUsername;
  }

   /**
   * Build version (major, minor, patch) of a source NSX API endpoint.
   * @return nsxVersion
  **/
  @Schema(description = "Build version (major, minor, patch) of a source NSX API endpoint.")
  public String getNsxVersion() {
    return nsxVersion;
  }

  public SourceNsxApiEndpoint nsxPassword(String nsxPassword) {
    this.nsxPassword = nsxPassword;
    return this;
  }

   /**
   * Password for connecting to NSX manager. This field is not applicable in case of vSphere network migration.
   * @return nsxPassword
  **/
  @Schema(description = "Password for connecting to NSX manager. This field is not applicable in case of vSphere network migration.")
  public String getNsxPassword() {
    return nsxPassword;
  }

  public void setNsxPassword(String nsxPassword) {
    this.nsxPassword = nsxPassword;
  }

  public SourceNsxApiEndpoint vcPassword(String vcPassword) {
    this.vcPassword = vcPassword;
    return this;
  }

   /**
   * Password for connecting to VC.
   * @return vcPassword
  **/
  @Schema(description = "Password for connecting to VC.")
  public String getVcPassword() {
    return vcPassword;
  }

  public void setVcPassword(String vcPassword) {
    this.vcPassword = vcPassword;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SourceNsxApiEndpoint sourceNsxApiEndpoint = (SourceNsxApiEndpoint) o;
    return Objects.equals(this.vcPort, sourceNsxApiEndpoint.vcPort) &&
        Objects.equals(this.vcUsername, sourceNsxApiEndpoint.vcUsername) &&
        Objects.equals(this.vcIp, sourceNsxApiEndpoint.vcIp) &&
        Objects.equals(this.ip, sourceNsxApiEndpoint.ip) &&
        Objects.equals(this.authToken, sourceNsxApiEndpoint.authToken) &&
        Objects.equals(this.nsxSyncrole, sourceNsxApiEndpoint.nsxSyncrole) &&
        Objects.equals(this.vcVersion, sourceNsxApiEndpoint.vcVersion) &&
        Objects.equals(this.nsxUsername, sourceNsxApiEndpoint.nsxUsername) &&
        Objects.equals(this.nsxVersion, sourceNsxApiEndpoint.nsxVersion) &&
        Objects.equals(this.nsxPassword, sourceNsxApiEndpoint.nsxPassword) &&
        Objects.equals(this.vcPassword, sourceNsxApiEndpoint.vcPassword);
  }

  @Override
  public int hashCode() {
    return Objects.hash(vcPort, vcUsername, vcIp, ip, authToken, nsxSyncrole, vcVersion, nsxUsername, nsxVersion, nsxPassword, vcPassword);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SourceNsxApiEndpoint {\n");
    
    sb.append("    vcPort: ").append(toIndentedString(vcPort)).append("\n");
    sb.append("    vcUsername: ").append(toIndentedString(vcUsername)).append("\n");
    sb.append("    vcIp: ").append(toIndentedString(vcIp)).append("\n");
    sb.append("    ip: ").append(toIndentedString(ip)).append("\n");
    sb.append("    authToken: ").append(toIndentedString(authToken)).append("\n");
    sb.append("    nsxSyncrole: ").append(toIndentedString(nsxSyncrole)).append("\n");
    sb.append("    vcVersion: ").append(toIndentedString(vcVersion)).append("\n");
    sb.append("    nsxUsername: ").append(toIndentedString(nsxUsername)).append("\n");
    sb.append("    nsxVersion: ").append(toIndentedString(nsxVersion)).append("\n");
    sb.append("    nsxPassword: ").append(toIndentedString(nsxPassword)).append("\n");
    sb.append("    vcPassword: ").append(toIndentedString(vcPassword)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
