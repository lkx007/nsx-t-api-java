/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.ConfigurationState;
import io.swagger.client.model.ConfigurationStateElement;
import io.swagger.client.model.HostSwitchState;
import io.swagger.client.model.TransportNodeDeploymentProgressState;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * Transport Node State
 */
@Schema(description = "Transport Node State")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class TransportNodeState extends ConfigurationState {
  @SerializedName("deployment_progress_state")
  private TransportNodeDeploymentProgressState deploymentProgressState = null;

  @SerializedName("node_deployment_state")
  private ConfigurationState nodeDeploymentState = null;

  @SerializedName("host_switch_states")
  private List<HostSwitchState> hostSwitchStates = null;

  /**
   * the present realized maintenance mode state
   */
  @JsonAdapter(MaintenanceModeStateEnum.Adapter.class)
  public enum MaintenanceModeStateEnum {
    ENTERING("ENTERING"),
    ENABLED("ENABLED"),
    EXITING("EXITING"),
    DISABLED("DISABLED");

    private String value;

    MaintenanceModeStateEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static MaintenanceModeStateEnum fromValue(String text) {
      for (MaintenanceModeStateEnum b : MaintenanceModeStateEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<MaintenanceModeStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MaintenanceModeStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MaintenanceModeStateEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return MaintenanceModeStateEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("maintenance_mode_state")
  private MaintenanceModeStateEnum maintenanceModeState = null;

  @SerializedName("transport_node_id")
  private String transportNodeId = null;

  public TransportNodeState deploymentProgressState(TransportNodeDeploymentProgressState deploymentProgressState) {
    this.deploymentProgressState = deploymentProgressState;
    return this;
  }

   /**
   * Get deploymentProgressState
   * @return deploymentProgressState
  **/
  @Schema(description = "")
  public TransportNodeDeploymentProgressState getDeploymentProgressState() {
    return deploymentProgressState;
  }

  public void setDeploymentProgressState(TransportNodeDeploymentProgressState deploymentProgressState) {
    this.deploymentProgressState = deploymentProgressState;
  }

  public TransportNodeState nodeDeploymentState(ConfigurationState nodeDeploymentState) {
    this.nodeDeploymentState = nodeDeploymentState;
    return this;
  }

   /**
   * Get nodeDeploymentState
   * @return nodeDeploymentState
  **/
  @Schema(description = "")
  public ConfigurationState getNodeDeploymentState() {
    return nodeDeploymentState;
  }

  public void setNodeDeploymentState(ConfigurationState nodeDeploymentState) {
    this.nodeDeploymentState = nodeDeploymentState;
  }

   /**
   * States of HostSwitches on the host
   * @return hostSwitchStates
  **/
  @Schema(description = "States of HostSwitches on the host")
  public List<HostSwitchState> getHostSwitchStates() {
    return hostSwitchStates;
  }

   /**
   * the present realized maintenance mode state
   * @return maintenanceModeState
  **/
  @Schema(description = "the present realized maintenance mode state")
  public MaintenanceModeStateEnum getMaintenanceModeState() {
    return maintenanceModeState;
  }

   /**
   * Unique Id of the TransportNode
   * @return transportNodeId
  **/
  @Schema(description = "Unique Id of the TransportNode")
  public String getTransportNodeId() {
    return transportNodeId;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransportNodeState transportNodeState = (TransportNodeState) o;
    return Objects.equals(this.deploymentProgressState, transportNodeState.deploymentProgressState) &&
        Objects.equals(this.nodeDeploymentState, transportNodeState.nodeDeploymentState) &&
        Objects.equals(this.hostSwitchStates, transportNodeState.hostSwitchStates) &&
        Objects.equals(this.maintenanceModeState, transportNodeState.maintenanceModeState) &&
        Objects.equals(this.transportNodeId, transportNodeState.transportNodeId) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deploymentProgressState, nodeDeploymentState, hostSwitchStates, maintenanceModeState, transportNodeId, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransportNodeState {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    deploymentProgressState: ").append(toIndentedString(deploymentProgressState)).append("\n");
    sb.append("    nodeDeploymentState: ").append(toIndentedString(nodeDeploymentState)).append("\n");
    sb.append("    hostSwitchStates: ").append(toIndentedString(hostSwitchStates)).append("\n");
    sb.append("    maintenanceModeState: ").append(toIndentedString(maintenanceModeState)).append("\n");
    sb.append("    transportNodeId: ").append(toIndentedString(transportNodeId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
