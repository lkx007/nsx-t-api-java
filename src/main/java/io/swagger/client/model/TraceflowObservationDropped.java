/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.TraceflowObservation;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * TraceflowObservationDropped
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class TraceflowObservationDropped extends TraceflowObservation {
  @SerializedName("nat_rule_id")
  private Long natRuleId = null;

  /**
   * The reason traceflow packet was dropped
   */
  @JsonAdapter(ReasonEnum.Adapter.class)
  public enum ReasonEnum {
    ARP_FAIL("ARP_FAIL"),
    BFD("BFD"),
    DHCP("DHCP"),
    FW_RULE("FW_RULE"),
    GENEVE("GENEVE"),
    GRE("GRE"),
    IFACE("IFACE"),
    IP("IP"),
    IP_REASS("IP_REASS"),
    IPSEC("IPSEC"),
    IPSEC_VTI("IPSEC_VTI"),
    L2VPN("L2VPN"),
    L4PORT("L4PORT"),
    LB("LB"),
    LROUTER("LROUTER"),
    LSERVICE("LSERVICE"),
    LSWITCH("LSWITCH"),
    MD_PROXY("MD_PROXY"),
    NAT("NAT"),
    ND_NS_FAIL("ND_NS_FAIL"),
    NEIGH("NEIGH"),
    NO_EIP_FOUND("NO_EIP_FOUND"),
    NO_EIP_ASSOCIATION("NO_EIP_ASSOCIATION"),
    NO_ENI_FOR_IP("NO_ENI_FOR_IP"),
    NO_ENI_FOR_LIF("NO_ENI_FOR_LIF"),
    NO_ROUTE("NO_ROUTE"),
    NO_ROUTE_TABLE_FOUND("NO_ROUTE_TABLE_FOUND"),
    NO_UNDERLAY_ROUTE_FOUND("NO_UNDERLAY_ROUTE_FOUND"),
    NOT_VDR_DOWNLINK_("NOT_VDR_DOWNLINK,"),
    NO_VDR_FOUND("NO_VDR_FOUND"),
    NO_VDR_ON_HOST("NO_VDR_ON_HOST"),
    NOT_VDR_UPLINK_("NOT_VDR_UPLINK,"),
    SERVICE_INSERT("SERVICE_INSERT"),
    TTL_ZERO("TTL_ZERO"),
    TUNNEL("TUNNEL"),
    VXLAN("VXLAN"),
    VXSTT("VXSTT"),
    VMC_NO_RESPONSE("VMC_NO_RESPONSE"),
    WRONG_UPLINK("WRONG_UPLINK"),
    UNKNOWN("UNKNOWN");

    private String value;

    ReasonEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ReasonEnum fromValue(String text) {
      for (ReasonEnum b : ReasonEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ReasonEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ReasonEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ReasonEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ReasonEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("reason")
  private ReasonEnum reason = null;

  @SerializedName("lport_id")
  private String lportId = null;

  @SerializedName("lport_name")
  private String lportName = null;

  @SerializedName("acl_rule_id")
  private Long aclRuleId = null;

  /**
   * This field specifies the ARP fails reason ARP_TIMEOUT - ARP failure due to query control plane timeout ARP_CPFAIL - ARP failure due post ARP query message to control plane failure ARP_FROMCP - ARP failure due to deleting ARP entry from control plane ARP_PORTDESTROY - ARP failure due to port destruction ARP_TABLEDESTROY - ARP failure due to ARP table destruction ARP_NETDESTROY - ARP failure due to overlay network destruction
   */
  @JsonAdapter(ArpFailReasonEnum.Adapter.class)
  public enum ArpFailReasonEnum {
    UNKNOWN("ARP_UNKNOWN"),
    TIMEOUT("ARP_TIMEOUT"),
    CPFAIL("ARP_CPFAIL"),
    FROMCP("ARP_FROMCP"),
    PORTDESTROY("ARP_PORTDESTROY"),
    TABLEDESTROY("ARP_TABLEDESTROY"),
    NETDESTROY("ARP_NETDESTROY");

    private String value;

    ArpFailReasonEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ArpFailReasonEnum fromValue(String text) {
      for (ArpFailReasonEnum b : ArpFailReasonEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ArpFailReasonEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ArpFailReasonEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ArpFailReasonEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ArpFailReasonEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("arp_fail_reason")
  private ArpFailReasonEnum arpFailReason = null;

   /**
   * The ID of the NAT rule that was applied to forward the traceflow packet
   * @return natRuleId
  **/
  @Schema(description = "The ID of the NAT rule that was applied to forward the traceflow packet")
  public Long getNatRuleId() {
    return natRuleId;
  }

   /**
   * The reason traceflow packet was dropped
   * @return reason
  **/
  @Schema(description = "The reason traceflow packet was dropped")
  public ReasonEnum getReason() {
    return reason;
  }

   /**
   * The id of the logical port at which the traceflow packet was dropped
   * @return lportId
  **/
  @Schema(description = "The id of the logical port at which the traceflow packet was dropped")
  public String getLportId() {
    return lportId;
  }

   /**
   * The name of the logical port at which the traceflow packet was dropped
   * @return lportName
  **/
  @Schema(description = "The name of the logical port at which the traceflow packet was dropped")
  public String getLportName() {
    return lportName;
  }

   /**
   * The id of the acl rule that was applied to drop the traceflow packet
   * @return aclRuleId
  **/
  @Schema(description = "The id of the acl rule that was applied to drop the traceflow packet")
  public Long getAclRuleId() {
    return aclRuleId;
  }

   /**
   * This field specifies the ARP fails reason ARP_TIMEOUT - ARP failure due to query control plane timeout ARP_CPFAIL - ARP failure due post ARP query message to control plane failure ARP_FROMCP - ARP failure due to deleting ARP entry from control plane ARP_PORTDESTROY - ARP failure due to port destruction ARP_TABLEDESTROY - ARP failure due to ARP table destruction ARP_NETDESTROY - ARP failure due to overlay network destruction
   * @return arpFailReason
  **/
  @Schema(description = "This field specifies the ARP fails reason ARP_TIMEOUT - ARP failure due to query control plane timeout ARP_CPFAIL - ARP failure due post ARP query message to control plane failure ARP_FROMCP - ARP failure due to deleting ARP entry from control plane ARP_PORTDESTROY - ARP failure due to port destruction ARP_TABLEDESTROY - ARP failure due to ARP table destruction ARP_NETDESTROY - ARP failure due to overlay network destruction")
  public ArpFailReasonEnum getArpFailReason() {
    return arpFailReason;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TraceflowObservationDropped traceflowObservationDropped = (TraceflowObservationDropped) o;
    return Objects.equals(this.natRuleId, traceflowObservationDropped.natRuleId) &&
        Objects.equals(this.reason, traceflowObservationDropped.reason) &&
        Objects.equals(this.lportId, traceflowObservationDropped.lportId) &&
        Objects.equals(this.lportName, traceflowObservationDropped.lportName) &&
        Objects.equals(this.aclRuleId, traceflowObservationDropped.aclRuleId) &&
        Objects.equals(this.arpFailReason, traceflowObservationDropped.arpFailReason) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(natRuleId, reason, lportId, lportName, aclRuleId, arpFailReason, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TraceflowObservationDropped {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    natRuleId: ").append(toIndentedString(natRuleId)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("    lportId: ").append(toIndentedString(lportId)).append("\n");
    sb.append("    lportName: ").append(toIndentedString(lportName)).append("\n");
    sb.append("    aclRuleId: ").append(toIndentedString(aclRuleId)).append("\n");
    sb.append("    arpFailReason: ").append(toIndentedString(arpFailReason)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
