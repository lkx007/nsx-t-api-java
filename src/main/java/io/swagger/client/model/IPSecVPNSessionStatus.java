/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.IPSecVPNIKESessionStatus;
import io.swagger.client.model.IPSecVPNTrafficCounters;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * IKE session traffic summary provides IKE session status and aggregate of traffic across all tunnel.
 */
@Schema(description = "IKE session traffic summary provides IKE session status and aggregate of traffic across all tunnel.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class IPSecVPNSessionStatus {
  @SerializedName("ipsec_vpn_session_id")
  private String ipsecVpnSessionId = null;

  @SerializedName("display_name")
  private String displayName = null;

  @SerializedName("failed_tunnels")
  private Long failedTunnels = null;

  @SerializedName("negotiated_tunnels")
  private Long negotiatedTunnels = null;

  /**
   * Gives session status consolidated using IKE status and tunnel status. It can be UP, DOWN, DEGRADED. If IKE and all tunnels are UP status will be UP, if all down it will be DOWN, otherwise it will be DEGRADED.
   */
  @JsonAdapter(SessionStatusEnum.Adapter.class)
  public enum SessionStatusEnum {
    UP("UP"),
    DOWN("DOWN"),
    DEGRADED("DEGRADED");

    private String value;

    SessionStatusEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static SessionStatusEnum fromValue(String text) {
      for (SessionStatusEnum b : SessionStatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<SessionStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SessionStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SessionStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return SessionStatusEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("session_status")
  private SessionStatusEnum sessionStatus = null;

  @SerializedName("last_update_timestamp")
  private Long lastUpdateTimestamp = null;

  @SerializedName("aggregate_traffic_counters")
  private IPSecVPNTrafficCounters aggregateTrafficCounters = null;

  @SerializedName("ike_status")
  private IPSecVPNIKESessionStatus ikeStatus = null;

  @SerializedName("total_tunnels")
  private Long totalTunnels = null;

   /**
   * UUID of vpn session.
   * @return ipsecVpnSessionId
  **/
  @Schema(description = "UUID of vpn session.")
  public String getIpsecVpnSessionId() {
    return ipsecVpnSessionId;
  }

   /**
   * Display name of vpn session.
   * @return displayName
  **/
  @Schema(description = "Display name of vpn session.")
  public String getDisplayName() {
    return displayName;
  }

   /**
   * Number of failed tunnels.
   * @return failedTunnels
  **/
  @Schema(description = "Number of failed tunnels.")
  public Long getFailedTunnels() {
    return failedTunnels;
  }

   /**
   * Number of negotiated tunnels.
   * @return negotiatedTunnels
  **/
  @Schema(description = "Number of negotiated tunnels.")
  public Long getNegotiatedTunnels() {
    return negotiatedTunnels;
  }

   /**
   * Gives session status consolidated using IKE status and tunnel status. It can be UP, DOWN, DEGRADED. If IKE and all tunnels are UP status will be UP, if all down it will be DOWN, otherwise it will be DEGRADED.
   * @return sessionStatus
  **/
  @Schema(description = "Gives session status consolidated using IKE status and tunnel status. It can be UP, DOWN, DEGRADED. If IKE and all tunnels are UP status will be UP, if all down it will be DOWN, otherwise it will be DEGRADED.")
  public SessionStatusEnum getSessionStatus() {
    return sessionStatus;
  }

   /**
   * Timestamp when the data was last updated.
   * @return lastUpdateTimestamp
  **/
  @Schema(description = "Timestamp when the data was last updated.")
  public Long getLastUpdateTimestamp() {
    return lastUpdateTimestamp;
  }

  public IPSecVPNSessionStatus aggregateTrafficCounters(IPSecVPNTrafficCounters aggregateTrafficCounters) {
    this.aggregateTrafficCounters = aggregateTrafficCounters;
    return this;
  }

   /**
   * Get aggregateTrafficCounters
   * @return aggregateTrafficCounters
  **/
  @Schema(description = "")
  public IPSecVPNTrafficCounters getAggregateTrafficCounters() {
    return aggregateTrafficCounters;
  }

  public void setAggregateTrafficCounters(IPSecVPNTrafficCounters aggregateTrafficCounters) {
    this.aggregateTrafficCounters = aggregateTrafficCounters;
  }

  public IPSecVPNSessionStatus ikeStatus(IPSecVPNIKESessionStatus ikeStatus) {
    this.ikeStatus = ikeStatus;
    return this;
  }

   /**
   * Get ikeStatus
   * @return ikeStatus
  **/
  @Schema(description = "")
  public IPSecVPNIKESessionStatus getIkeStatus() {
    return ikeStatus;
  }

  public void setIkeStatus(IPSecVPNIKESessionStatus ikeStatus) {
    this.ikeStatus = ikeStatus;
  }

   /**
   * Total number of tunnels.
   * @return totalTunnels
  **/
  @Schema(description = "Total number of tunnels.")
  public Long getTotalTunnels() {
    return totalTunnels;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IPSecVPNSessionStatus ipSecVPNSessionStatus = (IPSecVPNSessionStatus) o;
    return Objects.equals(this.ipsecVpnSessionId, ipSecVPNSessionStatus.ipsecVpnSessionId) &&
        Objects.equals(this.displayName, ipSecVPNSessionStatus.displayName) &&
        Objects.equals(this.failedTunnels, ipSecVPNSessionStatus.failedTunnels) &&
        Objects.equals(this.negotiatedTunnels, ipSecVPNSessionStatus.negotiatedTunnels) &&
        Objects.equals(this.sessionStatus, ipSecVPNSessionStatus.sessionStatus) &&
        Objects.equals(this.lastUpdateTimestamp, ipSecVPNSessionStatus.lastUpdateTimestamp) &&
        Objects.equals(this.aggregateTrafficCounters, ipSecVPNSessionStatus.aggregateTrafficCounters) &&
        Objects.equals(this.ikeStatus, ipSecVPNSessionStatus.ikeStatus) &&
        Objects.equals(this.totalTunnels, ipSecVPNSessionStatus.totalTunnels);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ipsecVpnSessionId, displayName, failedTunnels, negotiatedTunnels, sessionStatus, lastUpdateTimestamp, aggregateTrafficCounters, ikeStatus, totalTunnels);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IPSecVPNSessionStatus {\n");
    
    sb.append("    ipsecVpnSessionId: ").append(toIndentedString(ipsecVpnSessionId)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    failedTunnels: ").append(toIndentedString(failedTunnels)).append("\n");
    sb.append("    negotiatedTunnels: ").append(toIndentedString(negotiatedTunnels)).append("\n");
    sb.append("    sessionStatus: ").append(toIndentedString(sessionStatus)).append("\n");
    sb.append("    lastUpdateTimestamp: ").append(toIndentedString(lastUpdateTimestamp)).append("\n");
    sb.append("    aggregateTrafficCounters: ").append(toIndentedString(aggregateTrafficCounters)).append("\n");
    sb.append("    ikeStatus: ").append(toIndentedString(ikeStatus)).append("\n");
    sb.append("    totalTunnels: ").append(toIndentedString(totalTunnels)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
