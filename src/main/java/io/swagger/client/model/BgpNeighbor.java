/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.BfdConfigParameters;
import io.swagger.client.model.BgpNeighborAddressFamily;
import io.swagger.client.model.ManagedResource;
import io.swagger.client.model.Tag;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * BgpNeighbor
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class BgpNeighbor extends ManagedResource {
  /**
   * BGP Graceful Restart mode. If specified, then it will take precedence over global Graceful Restart mode configured in logical router BgpConfig otherwise BgpConfig level Graceful Restart mode will be applicable for peer. 
   */
  @JsonAdapter(GracefulRestartModeEnum.Adapter.class)
  public enum GracefulRestartModeEnum {
    DISABLE("DISABLE"),
    HELPER_ONLY("HELPER_ONLY"),
    GR_AND_HELPER("GR_AND_HELPER");

    private String value;

    GracefulRestartModeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static GracefulRestartModeEnum fromValue(String text) {
      for (GracefulRestartModeEnum b : GracefulRestartModeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<GracefulRestartModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final GracefulRestartModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public GracefulRestartModeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return GracefulRestartModeEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("graceful_restart_mode")
  private GracefulRestartModeEnum gracefulRestartMode = null;

  @SerializedName("remote_as")
  private Long remoteAs = null;

  @SerializedName("filter_out_ipprefixlist_id")
  private String filterOutIpprefixlistId = null;

  @SerializedName("hold_down_timer")
  private Long holdDownTimer = 180l;

  @SerializedName("source_addresses")
  private List<String> sourceAddresses = null;

  @SerializedName("maximum_hop_limit")
  private Integer maximumHopLimit = 1;

  @SerializedName("enabled")
  private Boolean enabled = true;

  @SerializedName("remote_as_num")
  private String remoteAsNum = null;

  @SerializedName("address_families")
  private List<BgpNeighborAddressFamily> addressFamilies = null;

  @SerializedName("bfd_config")
  private BfdConfigParameters bfdConfig = null;

  @SerializedName("logical_router_id")
  private String logicalRouterId = null;

  @SerializedName("filter_in_ipprefixlist_id")
  private String filterInIpprefixlistId = null;

  @SerializedName("filter_out_routemap_id")
  private String filterOutRoutemapId = null;

  @SerializedName("filter_in_routemap_id")
  private String filterInRoutemapId = null;

  @SerializedName("keep_alive_timer")
  private Long keepAliveTimer = 60l;

  @SerializedName("password")
  private String password = null;

  @SerializedName("source_address")
  private String sourceAddress = null;

  @SerializedName("allow_as_in")
  private Boolean allowAsIn = false;

  @SerializedName("enable_bfd")
  private Boolean enableBfd = false;

  @SerializedName("neighbor_address")
  private String neighborAddress = null;

  public BgpNeighbor gracefulRestartMode(GracefulRestartModeEnum gracefulRestartMode) {
    this.gracefulRestartMode = gracefulRestartMode;
    return this;
  }

   /**
   * BGP Graceful Restart mode. If specified, then it will take precedence over global Graceful Restart mode configured in logical router BgpConfig otherwise BgpConfig level Graceful Restart mode will be applicable for peer. 
   * @return gracefulRestartMode
  **/
  @Schema(description = "BGP Graceful Restart mode. If specified, then it will take precedence over global Graceful Restart mode configured in logical router BgpConfig otherwise BgpConfig level Graceful Restart mode will be applicable for peer. ")
  public GracefulRestartModeEnum getGracefulRestartMode() {
    return gracefulRestartMode;
  }

  public void setGracefulRestartMode(GracefulRestartModeEnum gracefulRestartMode) {
    this.gracefulRestartMode = gracefulRestartMode;
  }

  public BgpNeighbor remoteAs(Long remoteAs) {
    this.remoteAs = remoteAs;
    return this;
  }

   /**
   * This is a deprecated property, Please use &#x27;remote_as_num&#x27; instead.
   * minimum: 1
   * maximum: 4294967296
   * @return remoteAs
  **/
  @Schema(description = "This is a deprecated property, Please use 'remote_as_num' instead.")
  public Long getRemoteAs() {
    return remoteAs;
  }

  public void setRemoteAs(Long remoteAs) {
    this.remoteAs = remoteAs;
  }

  public BgpNeighbor filterOutIpprefixlistId(String filterOutIpprefixlistId) {
    this.filterOutIpprefixlistId = filterOutIpprefixlistId;
    return this;
  }

   /**
   * This is a deprecated property, Please use &#x27;address_family&#x27; instead.
   * @return filterOutIpprefixlistId
  **/
  @Schema(description = "This is a deprecated property, Please use 'address_family' instead.")
  public String getFilterOutIpprefixlistId() {
    return filterOutIpprefixlistId;
  }

  public void setFilterOutIpprefixlistId(String filterOutIpprefixlistId) {
    this.filterOutIpprefixlistId = filterOutIpprefixlistId;
  }

  public BgpNeighbor holdDownTimer(Long holdDownTimer) {
    this.holdDownTimer = holdDownTimer;
    return this;
  }

   /**
   * Wait period (seconds) before declaring peer dead
   * minimum: 1
   * maximum: 65535
   * @return holdDownTimer
  **/
  @Schema(description = "Wait period (seconds) before declaring peer dead")
  public Long getHoldDownTimer() {
    return holdDownTimer;
  }

  public void setHoldDownTimer(Long holdDownTimer) {
    this.holdDownTimer = holdDownTimer;
  }

  public BgpNeighbor sourceAddresses(List<String> sourceAddresses) {
    this.sourceAddresses = sourceAddresses;
    return this;
  }

  public BgpNeighbor addSourceAddressesItem(String sourceAddressesItem) {
    if (this.sourceAddresses == null) {
      this.sourceAddresses = new ArrayList<String>();
    }
    this.sourceAddresses.add(sourceAddressesItem);
    return this;
  }

   /**
   * BGP neighborship will be formed from all these source addresses to this neighbour.
   * @return sourceAddresses
  **/
  @Schema(description = "BGP neighborship will be formed from all these source addresses to this neighbour.")
  public List<String> getSourceAddresses() {
    return sourceAddresses;
  }

  public void setSourceAddresses(List<String> sourceAddresses) {
    this.sourceAddresses = sourceAddresses;
  }

  public BgpNeighbor maximumHopLimit(Integer maximumHopLimit) {
    this.maximumHopLimit = maximumHopLimit;
    return this;
  }

   /**
   * This value is set on TTL(time to live) of BGP header. When router receives the BGP packet, it decrements the TTL. The default value of TTL is one when BPG request is initiated.So in the case of a BGP peer multiple hops away and and value of TTL is one, then  next router in the path will decrement the TTL to 0, realize it cant forward the packet and will drop it. If the hop count value to reach neighbor is equal to or less than the maximum_hop_limit value then intermediate router decrements the TTL count by one and forwards the request to BGP neighour. If the hop count value is greater than the maximum_hop_limit value then intermediate router discards the request when TTL becomes 0. 
   * minimum: 1
   * maximum: 255
   * @return maximumHopLimit
  **/
  @Schema(description = "This value is set on TTL(time to live) of BGP header. When router receives the BGP packet, it decrements the TTL. The default value of TTL is one when BPG request is initiated.So in the case of a BGP peer multiple hops away and and value of TTL is one, then  next router in the path will decrement the TTL to 0, realize it cant forward the packet and will drop it. If the hop count value to reach neighbor is equal to or less than the maximum_hop_limit value then intermediate router decrements the TTL count by one and forwards the request to BGP neighour. If the hop count value is greater than the maximum_hop_limit value then intermediate router discards the request when TTL becomes 0. ")
  public Integer getMaximumHopLimit() {
    return maximumHopLimit;
  }

  public void setMaximumHopLimit(Integer maximumHopLimit) {
    this.maximumHopLimit = maximumHopLimit;
  }

  public BgpNeighbor enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

   /**
   * Flag to enable this BGP Neighbor
   * @return enabled
  **/
  @Schema(description = "Flag to enable this BGP Neighbor")
  public Boolean isEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }

  public BgpNeighbor remoteAsNum(String remoteAsNum) {
    this.remoteAsNum = remoteAsNum;
    return this;
  }

   /**
   * 4 Byte ASN of the neighbor in ASPLAIN/ASDOT Format
   * @return remoteAsNum
  **/
  @Schema(description = "4 Byte ASN of the neighbor in ASPLAIN/ASDOT Format")
  public String getRemoteAsNum() {
    return remoteAsNum;
  }

  public void setRemoteAsNum(String remoteAsNum) {
    this.remoteAsNum = remoteAsNum;
  }

  public BgpNeighbor addressFamilies(List<BgpNeighborAddressFamily> addressFamilies) {
    this.addressFamilies = addressFamilies;
    return this;
  }

  public BgpNeighbor addAddressFamiliesItem(BgpNeighborAddressFamily addressFamiliesItem) {
    if (this.addressFamilies == null) {
      this.addressFamilies = new ArrayList<BgpNeighborAddressFamily>();
    }
    this.addressFamilies.add(addressFamiliesItem);
    return this;
  }

   /**
   * User can enable the neighbor for the specific address families and also define filters per address family. When the neighbor is created, it is default enabled for IPV4_UNICAST address family for backward compatibility reasons. User can change that if required, by defining the address family configuration. 
   * @return addressFamilies
  **/
  @Schema(description = "User can enable the neighbor for the specific address families and also define filters per address family. When the neighbor is created, it is default enabled for IPV4_UNICAST address family for backward compatibility reasons. User can change that if required, by defining the address family configuration. ")
  public List<BgpNeighborAddressFamily> getAddressFamilies() {
    return addressFamilies;
  }

  public void setAddressFamilies(List<BgpNeighborAddressFamily> addressFamilies) {
    this.addressFamilies = addressFamilies;
  }

  public BgpNeighbor bfdConfig(BfdConfigParameters bfdConfig) {
    this.bfdConfig = bfdConfig;
    return this;
  }

   /**
   * Get bfdConfig
   * @return bfdConfig
  **/
  @Schema(description = "")
  public BfdConfigParameters getBfdConfig() {
    return bfdConfig;
  }

  public void setBfdConfig(BfdConfigParameters bfdConfig) {
    this.bfdConfig = bfdConfig;
  }

   /**
   * Logical router id
   * @return logicalRouterId
  **/
  @Schema(description = "Logical router id")
  public String getLogicalRouterId() {
    return logicalRouterId;
  }

  public BgpNeighbor filterInIpprefixlistId(String filterInIpprefixlistId) {
    this.filterInIpprefixlistId = filterInIpprefixlistId;
    return this;
  }

   /**
   * This is a deprecated property, Please  use &#x27;address_family&#x27; instead.
   * @return filterInIpprefixlistId
  **/
  @Schema(description = "This is a deprecated property, Please  use 'address_family' instead.")
  public String getFilterInIpprefixlistId() {
    return filterInIpprefixlistId;
  }

  public void setFilterInIpprefixlistId(String filterInIpprefixlistId) {
    this.filterInIpprefixlistId = filterInIpprefixlistId;
  }

  public BgpNeighbor filterOutRoutemapId(String filterOutRoutemapId) {
    this.filterOutRoutemapId = filterOutRoutemapId;
    return this;
  }

   /**
   * This is a deprecated property, Please use &#x27;address_family&#x27; instead.
   * @return filterOutRoutemapId
  **/
  @Schema(description = "This is a deprecated property, Please use 'address_family' instead.")
  public String getFilterOutRoutemapId() {
    return filterOutRoutemapId;
  }

  public void setFilterOutRoutemapId(String filterOutRoutemapId) {
    this.filterOutRoutemapId = filterOutRoutemapId;
  }

  public BgpNeighbor filterInRoutemapId(String filterInRoutemapId) {
    this.filterInRoutemapId = filterInRoutemapId;
    return this;
  }

   /**
   * This is a deprecated property, Please use &#x27;address_family&#x27; instead.
   * @return filterInRoutemapId
  **/
  @Schema(description = "This is a deprecated property, Please use 'address_family' instead.")
  public String getFilterInRoutemapId() {
    return filterInRoutemapId;
  }

  public void setFilterInRoutemapId(String filterInRoutemapId) {
    this.filterInRoutemapId = filterInRoutemapId;
  }

  public BgpNeighbor keepAliveTimer(Long keepAliveTimer) {
    this.keepAliveTimer = keepAliveTimer;
    return this;
  }

   /**
   * Frequency (seconds) with which keep alive messages are sent to peers
   * minimum: 1
   * maximum: 65535
   * @return keepAliveTimer
  **/
  @Schema(description = "Frequency (seconds) with which keep alive messages are sent to peers")
  public Long getKeepAliveTimer() {
    return keepAliveTimer;
  }

  public void setKeepAliveTimer(Long keepAliveTimer) {
    this.keepAliveTimer = keepAliveTimer;
  }

  public BgpNeighbor password(String password) {
    this.password = password;
    return this;
  }

   /**
   * User can create (POST) the neighbor with or without the password. The view (GET) on the neighbor, would never reveal if the password is set or not. The password can be set later using edit neighbor workFlow (PUT) On the edit neighbor (PUT), if the user does not specify the password property, the older value is retained. Maximum length of this field is 20 characters. 
   * @return password
  **/
  @Schema(description = "User can create (POST) the neighbor with or without the password. The view (GET) on the neighbor, would never reveal if the password is set or not. The password can be set later using edit neighbor workFlow (PUT) On the edit neighbor (PUT), if the user does not specify the password property, the older value is retained. Maximum length of this field is 20 characters. ")
  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }

  public BgpNeighbor sourceAddress(String sourceAddress) {
    this.sourceAddress = sourceAddress;
    return this;
  }

   /**
   * Deprecated - do not provide a value for this field. Use source_addresses instead.
   * @return sourceAddress
  **/
  @Schema(description = "Deprecated - do not provide a value for this field. Use source_addresses instead.")
  public String getSourceAddress() {
    return sourceAddress;
  }

  public void setSourceAddress(String sourceAddress) {
    this.sourceAddress = sourceAddress;
  }

  public BgpNeighbor allowAsIn(Boolean allowAsIn) {
    this.allowAsIn = allowAsIn;
    return this;
  }

   /**
   * Flag to enable allowas_in option for BGP neighbor
   * @return allowAsIn
  **/
  @Schema(description = "Flag to enable allowas_in option for BGP neighbor")
  public Boolean isAllowAsIn() {
    return allowAsIn;
  }

  public void setAllowAsIn(Boolean allowAsIn) {
    this.allowAsIn = allowAsIn;
  }

  public BgpNeighbor enableBfd(Boolean enableBfd) {
    this.enableBfd = enableBfd;
    return this;
  }

   /**
   * Flag to enable BFD for this BGP Neighbor. Enable this if the neighbor supports BFD as this will lead to faster convergence.
   * @return enableBfd
  **/
  @Schema(description = "Flag to enable BFD for this BGP Neighbor. Enable this if the neighbor supports BFD as this will lead to faster convergence.")
  public Boolean isEnableBfd() {
    return enableBfd;
  }

  public void setEnableBfd(Boolean enableBfd) {
    this.enableBfd = enableBfd;
  }

  public BgpNeighbor neighborAddress(String neighborAddress) {
    this.neighborAddress = neighborAddress;
    return this;
  }

   /**
   * Neighbor IP Address
   * @return neighborAddress
  **/
  @Schema(required = true, description = "Neighbor IP Address")
  public String getNeighborAddress() {
    return neighborAddress;
  }

  public void setNeighborAddress(String neighborAddress) {
    this.neighborAddress = neighborAddress;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BgpNeighbor bgpNeighbor = (BgpNeighbor) o;
    return Objects.equals(this.gracefulRestartMode, bgpNeighbor.gracefulRestartMode) &&
        Objects.equals(this.remoteAs, bgpNeighbor.remoteAs) &&
        Objects.equals(this.filterOutIpprefixlistId, bgpNeighbor.filterOutIpprefixlistId) &&
        Objects.equals(this.holdDownTimer, bgpNeighbor.holdDownTimer) &&
        Objects.equals(this.sourceAddresses, bgpNeighbor.sourceAddresses) &&
        Objects.equals(this.maximumHopLimit, bgpNeighbor.maximumHopLimit) &&
        Objects.equals(this.enabled, bgpNeighbor.enabled) &&
        Objects.equals(this.remoteAsNum, bgpNeighbor.remoteAsNum) &&
        Objects.equals(this.addressFamilies, bgpNeighbor.addressFamilies) &&
        Objects.equals(this.bfdConfig, bgpNeighbor.bfdConfig) &&
        Objects.equals(this.logicalRouterId, bgpNeighbor.logicalRouterId) &&
        Objects.equals(this.filterInIpprefixlistId, bgpNeighbor.filterInIpprefixlistId) &&
        Objects.equals(this.filterOutRoutemapId, bgpNeighbor.filterOutRoutemapId) &&
        Objects.equals(this.filterInRoutemapId, bgpNeighbor.filterInRoutemapId) &&
        Objects.equals(this.keepAliveTimer, bgpNeighbor.keepAliveTimer) &&
        Objects.equals(this.password, bgpNeighbor.password) &&
        Objects.equals(this.sourceAddress, bgpNeighbor.sourceAddress) &&
        Objects.equals(this.allowAsIn, bgpNeighbor.allowAsIn) &&
        Objects.equals(this.enableBfd, bgpNeighbor.enableBfd) &&
        Objects.equals(this.neighborAddress, bgpNeighbor.neighborAddress) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(gracefulRestartMode, remoteAs, filterOutIpprefixlistId, holdDownTimer, sourceAddresses, maximumHopLimit, enabled, remoteAsNum, addressFamilies, bfdConfig, logicalRouterId, filterInIpprefixlistId, filterOutRoutemapId, filterInRoutemapId, keepAliveTimer, password, sourceAddress, allowAsIn, enableBfd, neighborAddress, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BgpNeighbor {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    gracefulRestartMode: ").append(toIndentedString(gracefulRestartMode)).append("\n");
    sb.append("    remoteAs: ").append(toIndentedString(remoteAs)).append("\n");
    sb.append("    filterOutIpprefixlistId: ").append(toIndentedString(filterOutIpprefixlistId)).append("\n");
    sb.append("    holdDownTimer: ").append(toIndentedString(holdDownTimer)).append("\n");
    sb.append("    sourceAddresses: ").append(toIndentedString(sourceAddresses)).append("\n");
    sb.append("    maximumHopLimit: ").append(toIndentedString(maximumHopLimit)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    remoteAsNum: ").append(toIndentedString(remoteAsNum)).append("\n");
    sb.append("    addressFamilies: ").append(toIndentedString(addressFamilies)).append("\n");
    sb.append("    bfdConfig: ").append(toIndentedString(bfdConfig)).append("\n");
    sb.append("    logicalRouterId: ").append(toIndentedString(logicalRouterId)).append("\n");
    sb.append("    filterInIpprefixlistId: ").append(toIndentedString(filterInIpprefixlistId)).append("\n");
    sb.append("    filterOutRoutemapId: ").append(toIndentedString(filterOutRoutemapId)).append("\n");
    sb.append("    filterInRoutemapId: ").append(toIndentedString(filterInRoutemapId)).append("\n");
    sb.append("    keepAliveTimer: ").append(toIndentedString(keepAliveTimer)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    sourceAddress: ").append(toIndentedString(sourceAddress)).append("\n");
    sb.append("    allowAsIn: ").append(toIndentedString(allowAsIn)).append("\n");
    sb.append("    enableBfd: ").append(toIndentedString(enableBfd)).append("\n");
    sb.append("    neighborAddress: ").append(toIndentedString(neighborAddress)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
