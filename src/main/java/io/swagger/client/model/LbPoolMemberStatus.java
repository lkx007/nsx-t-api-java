/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * LbPoolMemberStatus
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class LbPoolMemberStatus {
  /**
   * UP means that pool member is enabled and monitors have marked the pool member as UP. If the pool member has no monitor configured, it would be treated as UP. DOWN means that pool member is enabled and monitors have marked the pool member as DOWN. DISABLED means that admin state of pool member is set to DISABLED. GRACEFUL_DISABLED means that admin state of pool member is set to GRACEFUL_DISABLED. UNUSED means that the pool member is not used when the IP list size of member group exceeds the maximum setting. The remaining IP addresses would not be used as available backend servers, hence mark the status as UNUSED. 
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    UP("UP"),
    DOWN("DOWN"),
    DISABLED("DISABLED"),
    GRACEFUL_DISABLED("GRACEFUL_DISABLED"),
    UNUSED("UNUSED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static StatusEnum fromValue(String text) {
      for (StatusEnum b : StatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StatusEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("status")
  private StatusEnum status = null;

  @SerializedName("failure_cause")
  private String failureCause = null;

  @SerializedName("last_check_time")
  private Long lastCheckTime = null;

  @SerializedName("ip_address")
  private String ipAddress = null;

  @SerializedName("last_state_change_time")
  private Long lastStateChangeTime = null;

  @SerializedName("port")
  private String port = null;

  public LbPoolMemberStatus status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * UP means that pool member is enabled and monitors have marked the pool member as UP. If the pool member has no monitor configured, it would be treated as UP. DOWN means that pool member is enabled and monitors have marked the pool member as DOWN. DISABLED means that admin state of pool member is set to DISABLED. GRACEFUL_DISABLED means that admin state of pool member is set to GRACEFUL_DISABLED. UNUSED means that the pool member is not used when the IP list size of member group exceeds the maximum setting. The remaining IP addresses would not be used as available backend servers, hence mark the status as UNUSED. 
   * @return status
  **/
  @Schema(required = true, description = "UP means that pool member is enabled and monitors have marked the pool member as UP. If the pool member has no monitor configured, it would be treated as UP. DOWN means that pool member is enabled and monitors have marked the pool member as DOWN. DISABLED means that admin state of pool member is set to DISABLED. GRACEFUL_DISABLED means that admin state of pool member is set to GRACEFUL_DISABLED. UNUSED means that the pool member is not used when the IP list size of member group exceeds the maximum setting. The remaining IP addresses would not be used as available backend servers, hence mark the status as UNUSED. ")
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }

  public LbPoolMemberStatus failureCause(String failureCause) {
    this.failureCause = failureCause;
    return this;
  }

   /**
   * The healthcheck failure cause when status is DOWN
   * @return failureCause
  **/
  @Schema(description = "The healthcheck failure cause when status is DOWN")
  public String getFailureCause() {
    return failureCause;
  }

  public void setFailureCause(String failureCause) {
    this.failureCause = failureCause;
  }

  public LbPoolMemberStatus lastCheckTime(Long lastCheckTime) {
    this.lastCheckTime = lastCheckTime;
    return this;
  }

   /**
   * Timestamp in milliseconds since epoch
   * @return lastCheckTime
  **/
  @Schema(description = "Timestamp in milliseconds since epoch")
  public Long getLastCheckTime() {
    return lastCheckTime;
  }

  public void setLastCheckTime(Long lastCheckTime) {
    this.lastCheckTime = lastCheckTime;
  }

  public LbPoolMemberStatus ipAddress(String ipAddress) {
    this.ipAddress = ipAddress;
    return this;
  }

   /**
   * Pool member IP address
   * @return ipAddress
  **/
  @Schema(required = true, description = "Pool member IP address")
  public String getIpAddress() {
    return ipAddress;
  }

  public void setIpAddress(String ipAddress) {
    this.ipAddress = ipAddress;
  }

  public LbPoolMemberStatus lastStateChangeTime(Long lastStateChangeTime) {
    this.lastStateChangeTime = lastStateChangeTime;
    return this;
  }

   /**
   * Timestamp in milliseconds since epoch
   * @return lastStateChangeTime
  **/
  @Schema(description = "Timestamp in milliseconds since epoch")
  public Long getLastStateChangeTime() {
    return lastStateChangeTime;
  }

  public void setLastStateChangeTime(Long lastStateChangeTime) {
    this.lastStateChangeTime = lastStateChangeTime;
  }

  public LbPoolMemberStatus port(String port) {
    this.port = port;
    return this;
  }

   /**
   * The port is configured in pool member. For virtual server port range case, pool member port must be null. 
   * @return port
  **/
  @Schema(description = "The port is configured in pool member. For virtual server port range case, pool member port must be null. ")
  public String getPort() {
    return port;
  }

  public void setPort(String port) {
    this.port = port;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LbPoolMemberStatus lbPoolMemberStatus = (LbPoolMemberStatus) o;
    return Objects.equals(this.status, lbPoolMemberStatus.status) &&
        Objects.equals(this.failureCause, lbPoolMemberStatus.failureCause) &&
        Objects.equals(this.lastCheckTime, lbPoolMemberStatus.lastCheckTime) &&
        Objects.equals(this.ipAddress, lbPoolMemberStatus.ipAddress) &&
        Objects.equals(this.lastStateChangeTime, lbPoolMemberStatus.lastStateChangeTime) &&
        Objects.equals(this.port, lbPoolMemberStatus.port);
  }

  @Override
  public int hashCode() {
    return Objects.hash(status, failureCause, lastCheckTime, ipAddress, lastStateChangeTime, port);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LbPoolMemberStatus {\n");
    
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    failureCause: ").append(toIndentedString(failureCause)).append("\n");
    sb.append("    lastCheckTime: ").append(toIndentedString(lastCheckTime)).append("\n");
    sb.append("    ipAddress: ").append(toIndentedString(ipAddress)).append("\n");
    sb.append("    lastStateChangeTime: ").append(toIndentedString(lastStateChangeTime)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
