/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * Backup operation status
 */
@Schema(description = "Backup operation status")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class BackupOperationStatus {
  @SerializedName("backup_id")
  private String backupId = null;

  @SerializedName("end_time")
  private Long endTime = null;

  @SerializedName("success")
  private Boolean success = null;

  @SerializedName("start_time")
  private Long startTime = null;

  @SerializedName("error_message")
  private String errorMessage = null;

  /**
   * Error code
   */
  @JsonAdapter(ErrorCodeEnum.Adapter.class)
  public enum ErrorCodeEnum {
    NOT_RUN_ON_MASTER("BACKUP_NOT_RUN_ON_MASTER"),
    SERVER_UNREACHABLE("BACKUP_SERVER_UNREACHABLE"),
    AUTHENTICATION_FAILURE("BACKUP_AUTHENTICATION_FAILURE"),
    PERMISSION_ERROR("BACKUP_PERMISSION_ERROR"),
    TIMEOUT("BACKUP_TIMEOUT"),
    BAD_FINGERPRINT("BACKUP_BAD_FINGERPRINT"),
    GENERIC_ERROR("BACKUP_GENERIC_ERROR");

    private String value;

    ErrorCodeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ErrorCodeEnum fromValue(String text) {
      for (ErrorCodeEnum b : ErrorCodeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ErrorCodeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ErrorCodeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ErrorCodeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ErrorCodeEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("error_code")
  private ErrorCodeEnum errorCode = null;

  public BackupOperationStatus backupId(String backupId) {
    this.backupId = backupId;
    return this;
  }

   /**
   * Unique identifier of a backup
   * @return backupId
  **/
  @Schema(required = true, description = "Unique identifier of a backup")
  public String getBackupId() {
    return backupId;
  }

  public void setBackupId(String backupId) {
    this.backupId = backupId;
  }

  public BackupOperationStatus endTime(Long endTime) {
    this.endTime = endTime;
    return this;
  }

   /**
   * Time when operation was ended
   * @return endTime
  **/
  @Schema(description = "Time when operation was ended")
  public Long getEndTime() {
    return endTime;
  }

  public void setEndTime(Long endTime) {
    this.endTime = endTime;
  }

  public BackupOperationStatus success(Boolean success) {
    this.success = success;
    return this;
  }

   /**
   * True if backup is successfully completed, else false
   * @return success
  **/
  @Schema(required = true, description = "True if backup is successfully completed, else false")
  public Boolean isSuccess() {
    return success;
  }

  public void setSuccess(Boolean success) {
    this.success = success;
  }

  public BackupOperationStatus startTime(Long startTime) {
    this.startTime = startTime;
    return this;
  }

   /**
   * Time when operation was started
   * @return startTime
  **/
  @Schema(description = "Time when operation was started")
  public Long getStartTime() {
    return startTime;
  }

  public void setStartTime(Long startTime) {
    this.startTime = startTime;
  }

  public BackupOperationStatus errorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
    return this;
  }

   /**
   * Error code details
   * @return errorMessage
  **/
  @Schema(description = "Error code details")
  public String getErrorMessage() {
    return errorMessage;
  }

  public void setErrorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
  }

  public BackupOperationStatus errorCode(ErrorCodeEnum errorCode) {
    this.errorCode = errorCode;
    return this;
  }

   /**
   * Error code
   * @return errorCode
  **/
  @Schema(description = "Error code")
  public ErrorCodeEnum getErrorCode() {
    return errorCode;
  }

  public void setErrorCode(ErrorCodeEnum errorCode) {
    this.errorCode = errorCode;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BackupOperationStatus backupOperationStatus = (BackupOperationStatus) o;
    return Objects.equals(this.backupId, backupOperationStatus.backupId) &&
        Objects.equals(this.endTime, backupOperationStatus.endTime) &&
        Objects.equals(this.success, backupOperationStatus.success) &&
        Objects.equals(this.startTime, backupOperationStatus.startTime) &&
        Objects.equals(this.errorMessage, backupOperationStatus.errorMessage) &&
        Objects.equals(this.errorCode, backupOperationStatus.errorCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(backupId, endTime, success, startTime, errorMessage, errorCode);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BackupOperationStatus {\n");
    
    sb.append("    backupId: ").append(toIndentedString(backupId)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    success: ").append(toIndentedString(success)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    errorMessage: ").append(toIndentedString(errorMessage)).append("\n");
    sb.append("    errorCode: ").append(toIndentedString(errorCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
