/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.IpPoolRange;
import io.swagger.client.model.Resource;
import io.swagger.client.model.ResourceLink;
import io.swagger.client.model.SelfResourceLink;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * A set of IPv4 or IPv6 addresses defined by a network CIDR.
 */
@Schema(description = "A set of IPv4 or IPv6 addresses defined by a network CIDR.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class IpPoolSubnet extends Resource {
  @SerializedName("dns_nameservers")
  private List<String> dnsNameservers = null;

  @SerializedName("cidr")
  private String cidr = null;

  @SerializedName("gateway_ip")
  private String gatewayIp = null;

  @SerializedName("allocation_ranges")
  private List<IpPoolRange> allocationRanges = new ArrayList<IpPoolRange>();

  @SerializedName("dns_suffix")
  private String dnsSuffix = null;

  public IpPoolSubnet dnsNameservers(List<String> dnsNameservers) {
    this.dnsNameservers = dnsNameservers;
    return this;
  }

  public IpPoolSubnet addDnsNameserversItem(String dnsNameserversItem) {
    if (this.dnsNameservers == null) {
      this.dnsNameservers = new ArrayList<String>();
    }
    this.dnsNameservers.add(dnsNameserversItem);
    return this;
  }

   /**
   * The collection of upto 3 DNS servers for the subnet.
   * @return dnsNameservers
  **/
  @Schema(description = "The collection of upto 3 DNS servers for the subnet.")
  public List<String> getDnsNameservers() {
    return dnsNameservers;
  }

  public void setDnsNameservers(List<String> dnsNameservers) {
    this.dnsNameservers = dnsNameservers;
  }

  public IpPoolSubnet cidr(String cidr) {
    this.cidr = cidr;
    return this;
  }

   /**
   * Represents network address and the prefix length which will be associated with a layer-2 broadcast domain
   * @return cidr
  **/
  @Schema(required = true, description = "Represents network address and the prefix length which will be associated with a layer-2 broadcast domain")
  public String getCidr() {
    return cidr;
  }

  public void setCidr(String cidr) {
    this.cidr = cidr;
  }

  public IpPoolSubnet gatewayIp(String gatewayIp) {
    this.gatewayIp = gatewayIp;
    return this;
  }

   /**
   * The default gateway address on a layer-3 router.
   * @return gatewayIp
  **/
  @Schema(description = "The default gateway address on a layer-3 router.")
  public String getGatewayIp() {
    return gatewayIp;
  }

  public void setGatewayIp(String gatewayIp) {
    this.gatewayIp = gatewayIp;
  }

  public IpPoolSubnet allocationRanges(List<IpPoolRange> allocationRanges) {
    this.allocationRanges = allocationRanges;
    return this;
  }

  public IpPoolSubnet addAllocationRangesItem(IpPoolRange allocationRangesItem) {
    this.allocationRanges.add(allocationRangesItem);
    return this;
  }

   /**
   * A collection of IPv4 or IPv6 IP Pool Ranges.
   * @return allocationRanges
  **/
  @Schema(required = true, description = "A collection of IPv4 or IPv6 IP Pool Ranges.")
  public List<IpPoolRange> getAllocationRanges() {
    return allocationRanges;
  }

  public void setAllocationRanges(List<IpPoolRange> allocationRanges) {
    this.allocationRanges = allocationRanges;
  }

  public IpPoolSubnet dnsSuffix(String dnsSuffix) {
    this.dnsSuffix = dnsSuffix;
    return this;
  }

   /**
   * The DNS suffix for the DNS server.
   * @return dnsSuffix
  **/
  @Schema(description = "The DNS suffix for the DNS server.")
  public String getDnsSuffix() {
    return dnsSuffix;
  }

  public void setDnsSuffix(String dnsSuffix) {
    this.dnsSuffix = dnsSuffix;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IpPoolSubnet ipPoolSubnet = (IpPoolSubnet) o;
    return Objects.equals(this.dnsNameservers, ipPoolSubnet.dnsNameservers) &&
        Objects.equals(this.cidr, ipPoolSubnet.cidr) &&
        Objects.equals(this.gatewayIp, ipPoolSubnet.gatewayIp) &&
        Objects.equals(this.allocationRanges, ipPoolSubnet.allocationRanges) &&
        Objects.equals(this.dnsSuffix, ipPoolSubnet.dnsSuffix) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dnsNameservers, cidr, gatewayIp, allocationRanges, dnsSuffix, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IpPoolSubnet {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    dnsNameservers: ").append(toIndentedString(dnsNameservers)).append("\n");
    sb.append("    cidr: ").append(toIndentedString(cidr)).append("\n");
    sb.append("    gatewayIp: ").append(toIndentedString(gatewayIp)).append("\n");
    sb.append("    allocationRanges: ").append(toIndentedString(allocationRanges)).append("\n");
    sb.append("    dnsSuffix: ").append(toIndentedString(dnsSuffix)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
