/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.ServiceDeploymentIssue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * ServiceDeploymentStatus
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class ServiceDeploymentStatus {
  @SerializedName("deployment_issues")
  private List<ServiceDeploymentIssue> deploymentIssues = null;

  @SerializedName("last_update_timestamp")
  private Long lastUpdateTimestamp = null;

  /**
   * Deployment status of NXGI Partner Service-VM on a compute collection. It shows the latest status during the process of deployment, redeploy, upgrade, and un-deployment on a compute collection such as VC cluster.
   */
  @JsonAdapter(DeploymentStatusEnum.Adapter.class)
  public enum DeploymentStatusEnum {
    UPGRADE_IN_PROGRESS("UPGRADE_IN_PROGRESS"),
    UPGRADE_FAILED("UPGRADE_FAILED"),
    DEPLOYMENT_QUEUED("DEPLOYMENT_QUEUED"),
    DEPLOYMENT_IN_PROGRESS("DEPLOYMENT_IN_PROGRESS"),
    DEPLOYMENT_FAILED("DEPLOYMENT_FAILED"),
    DEPLOYMENT_SUCCESSFUL("DEPLOYMENT_SUCCESSFUL"),
    UNDEPLOYMENT_QUEUED("UNDEPLOYMENT_QUEUED"),
    UNDEPLOYMENT_IN_PROGRESS("UNDEPLOYMENT_IN_PROGRESS"),
    UNDEPLOYMENT_FAILED("UNDEPLOYMENT_FAILED"),
    UNDEPLOYMENT_SUCCESSFUL("UNDEPLOYMENT_SUCCESSFUL"),
    UPGRADE_QUEUED("UPGRADE_QUEUED");

    private String value;

    DeploymentStatusEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static DeploymentStatusEnum fromValue(String text) {
      for (DeploymentStatusEnum b : DeploymentStatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<DeploymentStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DeploymentStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DeploymentStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return DeploymentStatusEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("deployment_status")
  private DeploymentStatusEnum deploymentStatus = null;

  @SerializedName("sva_current_version")
  private String svaCurrentVersion = null;

  @SerializedName("service_deployment_id")
  private String serviceDeploymentId = null;

  @SerializedName("sva_max_available_version")
  private String svaMaxAvailableVersion = null;

   /**
   * List of issue and detailed description of the issue in case of deployment failure.
   * @return deploymentIssues
  **/
  @Schema(description = "List of issue and detailed description of the issue in case of deployment failure.")
  public List<ServiceDeploymentIssue> getDeploymentIssues() {
    return deploymentIssues;
  }

   /**
   * Timestamp when the data was last updated; unset if data source has never updated the data.
   * @return lastUpdateTimestamp
  **/
  @Schema(description = "Timestamp when the data was last updated; unset if data source has never updated the data.")
  public Long getLastUpdateTimestamp() {
    return lastUpdateTimestamp;
  }

   /**
   * Deployment status of NXGI Partner Service-VM on a compute collection. It shows the latest status during the process of deployment, redeploy, upgrade, and un-deployment on a compute collection such as VC cluster.
   * @return deploymentStatus
  **/
  @Schema(description = "Deployment status of NXGI Partner Service-VM on a compute collection. It shows the latest status during the process of deployment, redeploy, upgrade, and un-deployment on a compute collection such as VC cluster.")
  public DeploymentStatusEnum getDeploymentStatus() {
    return deploymentStatus;
  }

  public ServiceDeploymentStatus svaCurrentVersion(String svaCurrentVersion) {
    this.svaCurrentVersion = svaCurrentVersion;
    return this;
  }

   /**
   * Currently deployed Service Virtual Appliance version.
   * @return svaCurrentVersion
  **/
  @Schema(description = "Currently deployed Service Virtual Appliance version.")
  public String getSvaCurrentVersion() {
    return svaCurrentVersion;
  }

  public void setSvaCurrentVersion(String svaCurrentVersion) {
    this.svaCurrentVersion = svaCurrentVersion;
  }

   /**
   * Id of service deployment.
   * @return serviceDeploymentId
  **/
  @Schema(description = "Id of service deployment.")
  public String getServiceDeploymentId() {
    return serviceDeploymentId;
  }

  public ServiceDeploymentStatus svaMaxAvailableVersion(String svaMaxAvailableVersion) {
    this.svaMaxAvailableVersion = svaMaxAvailableVersion;
    return this;
  }

   /**
   * Max available SVA version for upgrade
   * @return svaMaxAvailableVersion
  **/
  @Schema(description = "Max available SVA version for upgrade")
  public String getSvaMaxAvailableVersion() {
    return svaMaxAvailableVersion;
  }

  public void setSvaMaxAvailableVersion(String svaMaxAvailableVersion) {
    this.svaMaxAvailableVersion = svaMaxAvailableVersion;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServiceDeploymentStatus serviceDeploymentStatus = (ServiceDeploymentStatus) o;
    return Objects.equals(this.deploymentIssues, serviceDeploymentStatus.deploymentIssues) &&
        Objects.equals(this.lastUpdateTimestamp, serviceDeploymentStatus.lastUpdateTimestamp) &&
        Objects.equals(this.deploymentStatus, serviceDeploymentStatus.deploymentStatus) &&
        Objects.equals(this.svaCurrentVersion, serviceDeploymentStatus.svaCurrentVersion) &&
        Objects.equals(this.serviceDeploymentId, serviceDeploymentStatus.serviceDeploymentId) &&
        Objects.equals(this.svaMaxAvailableVersion, serviceDeploymentStatus.svaMaxAvailableVersion);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deploymentIssues, lastUpdateTimestamp, deploymentStatus, svaCurrentVersion, serviceDeploymentId, svaMaxAvailableVersion);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServiceDeploymentStatus {\n");
    
    sb.append("    deploymentIssues: ").append(toIndentedString(deploymentIssues)).append("\n");
    sb.append("    lastUpdateTimestamp: ").append(toIndentedString(lastUpdateTimestamp)).append("\n");
    sb.append("    deploymentStatus: ").append(toIndentedString(deploymentStatus)).append("\n");
    sb.append("    svaCurrentVersion: ").append(toIndentedString(svaCurrentVersion)).append("\n");
    sb.append("    serviceDeploymentId: ").append(toIndentedString(serviceDeploymentId)).append("\n");
    sb.append("    svaMaxAvailableVersion: ").append(toIndentedString(svaMaxAvailableVersion)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
