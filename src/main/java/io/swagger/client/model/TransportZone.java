/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.ManagedResource;
import io.swagger.client.model.Tag;
import io.swagger.client.model.TransportZoneProfileTypeIdEntry;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * TransportZone
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class TransportZone extends ManagedResource {
  @SerializedName("is_default")
  private Boolean isDefault = false;

  /**
   * The transport type of this transport zone.
   */
  @JsonAdapter(TransportTypeEnum.Adapter.class)
  public enum TransportTypeEnum {
    OVERLAY("OVERLAY"),
    VLAN("VLAN");

    private String value;

    TransportTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static TransportTypeEnum fromValue(String text) {
      for (TransportTypeEnum b : TransportTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<TransportTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TransportTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TransportTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TransportTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("transport_type")
  private TransportTypeEnum transportType = null;

  @SerializedName("host_switch_id")
  private String hostSwitchId = null;

  @SerializedName("host_switch_name")
  private String hostSwitchName = "nsxDefaultHostSwitch";

  /**
   * STANDARD mode applies to all the hypervisors. ENS mode stands for Enhanced Networking Stack. This feature is only available for ESX hypervisor. It is not available on KVM, EDGE and Public Cloud Gateway etc. When a Transport Zone mode is set to ENS, only Transport Nodes of type ESX can participate in such a Transport Zone.
   */
  @JsonAdapter(HostSwitchModeEnum.Adapter.class)
  public enum HostSwitchModeEnum {
    STANDARD("STANDARD"),
    ENS("ENS");

    private String value;

    HostSwitchModeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static HostSwitchModeEnum fromValue(String text) {
      for (HostSwitchModeEnum b : HostSwitchModeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<HostSwitchModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final HostSwitchModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public HostSwitchModeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return HostSwitchModeEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("host_switch_mode")
  private HostSwitchModeEnum hostSwitchMode = HostSwitchModeEnum.STANDARD;

  @SerializedName("nested_nsx")
  private Boolean nestedNsx = false;

  @SerializedName("uplink_teaming_policy_names")
  private List<String> uplinkTeamingPolicyNames = null;

  @SerializedName("transport_zone_profile_ids")
  private List<TransportZoneProfileTypeIdEntry> transportZoneProfileIds = null;

  public TransportZone isDefault(Boolean isDefault) {
    this.isDefault = isDefault;
    return this;
  }

   /**
   * Only one transport zone can be the default one for a given transport zone type. APIs that need transport zone can choose to use the default transport zone if a transport zone is not given by the user.
   * @return isDefault
  **/
  @Schema(description = "Only one transport zone can be the default one for a given transport zone type. APIs that need transport zone can choose to use the default transport zone if a transport zone is not given by the user.")
  public Boolean isIsDefault() {
    return isDefault;
  }

  public void setIsDefault(Boolean isDefault) {
    this.isDefault = isDefault;
  }

  public TransportZone transportType(TransportTypeEnum transportType) {
    this.transportType = transportType;
    return this;
  }

   /**
   * The transport type of this transport zone.
   * @return transportType
  **/
  @Schema(required = true, description = "The transport type of this transport zone.")
  public TransportTypeEnum getTransportType() {
    return transportType;
  }

  public void setTransportType(TransportTypeEnum transportType) {
    this.transportType = transportType;
  }

   /**
   * the host switch id generated by the system.
   * @return hostSwitchId
  **/
  @Schema(description = "the host switch id generated by the system.")
  public String getHostSwitchId() {
    return hostSwitchId;
  }

  public TransportZone hostSwitchName(String hostSwitchName) {
    this.hostSwitchName = hostSwitchName;
    return this;
  }

   /**
   * If this name is unset or empty then the default host switch name will be used.
   * @return hostSwitchName
  **/
  @Schema(description = "If this name is unset or empty then the default host switch name will be used.")
  public String getHostSwitchName() {
    return hostSwitchName;
  }

  public void setHostSwitchName(String hostSwitchName) {
    this.hostSwitchName = hostSwitchName;
  }

  public TransportZone hostSwitchMode(HostSwitchModeEnum hostSwitchMode) {
    this.hostSwitchMode = hostSwitchMode;
    return this;
  }

   /**
   * STANDARD mode applies to all the hypervisors. ENS mode stands for Enhanced Networking Stack. This feature is only available for ESX hypervisor. It is not available on KVM, EDGE and Public Cloud Gateway etc. When a Transport Zone mode is set to ENS, only Transport Nodes of type ESX can participate in such a Transport Zone.
   * @return hostSwitchMode
  **/
  @Schema(description = "STANDARD mode applies to all the hypervisors. ENS mode stands for Enhanced Networking Stack. This feature is only available for ESX hypervisor. It is not available on KVM, EDGE and Public Cloud Gateway etc. When a Transport Zone mode is set to ENS, only Transport Nodes of type ESX can participate in such a Transport Zone.")
  public HostSwitchModeEnum getHostSwitchMode() {
    return hostSwitchMode;
  }

  public void setHostSwitchMode(HostSwitchModeEnum hostSwitchMode) {
    this.hostSwitchMode = hostSwitchMode;
  }

  public TransportZone nestedNsx(Boolean nestedNsx) {
    this.nestedNsx = nestedNsx;
    return this;
  }

   /**
   * The flag only need to be set in nested NSX environment.
   * @return nestedNsx
  **/
  @Schema(description = "The flag only need to be set in nested NSX environment.")
  public Boolean isNestedNsx() {
    return nestedNsx;
  }

  public void setNestedNsx(Boolean nestedNsx) {
    this.nestedNsx = nestedNsx;
  }

  public TransportZone uplinkTeamingPolicyNames(List<String> uplinkTeamingPolicyNames) {
    this.uplinkTeamingPolicyNames = uplinkTeamingPolicyNames;
    return this;
  }

  public TransportZone addUplinkTeamingPolicyNamesItem(String uplinkTeamingPolicyNamesItem) {
    if (this.uplinkTeamingPolicyNames == null) {
      this.uplinkTeamingPolicyNames = new ArrayList<String>();
    }
    this.uplinkTeamingPolicyNames.add(uplinkTeamingPolicyNamesItem);
    return this;
  }

   /**
   * The names of switching uplink teaming policies that all transport nodes in this transport zone must support. An exception will be thrown if a transport node within the transport zone does not support a named teaming policy. The user will need to first ensure all trasnport nodes support the desired named teaming policy before assigning it to the transport zone. If the field is not specified, the host switch&#x27;s default teaming policy will be used.
   * @return uplinkTeamingPolicyNames
  **/
  @Schema(description = "The names of switching uplink teaming policies that all transport nodes in this transport zone must support. An exception will be thrown if a transport node within the transport zone does not support a named teaming policy. The user will need to first ensure all trasnport nodes support the desired named teaming policy before assigning it to the transport zone. If the field is not specified, the host switch's default teaming policy will be used.")
  public List<String> getUplinkTeamingPolicyNames() {
    return uplinkTeamingPolicyNames;
  }

  public void setUplinkTeamingPolicyNames(List<String> uplinkTeamingPolicyNames) {
    this.uplinkTeamingPolicyNames = uplinkTeamingPolicyNames;
  }

  public TransportZone transportZoneProfileIds(List<TransportZoneProfileTypeIdEntry> transportZoneProfileIds) {
    this.transportZoneProfileIds = transportZoneProfileIds;
    return this;
  }

  public TransportZone addTransportZoneProfileIdsItem(TransportZoneProfileTypeIdEntry transportZoneProfileIdsItem) {
    if (this.transportZoneProfileIds == null) {
      this.transportZoneProfileIds = new ArrayList<TransportZoneProfileTypeIdEntry>();
    }
    this.transportZoneProfileIds.add(transportZoneProfileIdsItem);
    return this;
  }

   /**
   * Identifiers of the transport zone profiles associated with this TransportZone.
   * @return transportZoneProfileIds
  **/
  @Schema(description = "Identifiers of the transport zone profiles associated with this TransportZone.")
  public List<TransportZoneProfileTypeIdEntry> getTransportZoneProfileIds() {
    return transportZoneProfileIds;
  }

  public void setTransportZoneProfileIds(List<TransportZoneProfileTypeIdEntry> transportZoneProfileIds) {
    this.transportZoneProfileIds = transportZoneProfileIds;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransportZone transportZone = (TransportZone) o;
    return Objects.equals(this.isDefault, transportZone.isDefault) &&
        Objects.equals(this.transportType, transportZone.transportType) &&
        Objects.equals(this.hostSwitchId, transportZone.hostSwitchId) &&
        Objects.equals(this.hostSwitchName, transportZone.hostSwitchName) &&
        Objects.equals(this.hostSwitchMode, transportZone.hostSwitchMode) &&
        Objects.equals(this.nestedNsx, transportZone.nestedNsx) &&
        Objects.equals(this.uplinkTeamingPolicyNames, transportZone.uplinkTeamingPolicyNames) &&
        Objects.equals(this.transportZoneProfileIds, transportZone.transportZoneProfileIds) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(isDefault, transportType, hostSwitchId, hostSwitchName, hostSwitchMode, nestedNsx, uplinkTeamingPolicyNames, transportZoneProfileIds, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransportZone {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    isDefault: ").append(toIndentedString(isDefault)).append("\n");
    sb.append("    transportType: ").append(toIndentedString(transportType)).append("\n");
    sb.append("    hostSwitchId: ").append(toIndentedString(hostSwitchId)).append("\n");
    sb.append("    hostSwitchName: ").append(toIndentedString(hostSwitchName)).append("\n");
    sb.append("    hostSwitchMode: ").append(toIndentedString(hostSwitchMode)).append("\n");
    sb.append("    nestedNsx: ").append(toIndentedString(nestedNsx)).append("\n");
    sb.append("    uplinkTeamingPolicyNames: ").append(toIndentedString(uplinkTeamingPolicyNames)).append("\n");
    sb.append("    transportZoneProfileIds: ").append(toIndentedString(transportZoneProfileIds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
