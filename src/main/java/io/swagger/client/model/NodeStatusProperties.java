/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.CpuUsage;
import io.swagger.client.model.NodeFileSystemProperties;
import io.swagger.client.model.Resource;
import io.swagger.client.model.ResourceLink;
import io.swagger.client.model.SelfResourceLink;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
/**
 * Node status properties
 */
@Schema(description = "Node status properties")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class NodeStatusProperties extends Resource {
  @SerializedName("load_average")
  private List<BigDecimal> loadAverage = null;

  @SerializedName("swap_used")
  private Long swapUsed = null;

  @SerializedName("cpu_usage")
  private CpuUsage cpuUsage = null;

  @SerializedName("non_dpdk_cpu_cores")
  private Long nonDpdkCpuCores = null;

  @SerializedName("swap_total")
  private Long swapTotal = null;

  @SerializedName("system_time")
  private Long systemTime = null;

  @SerializedName("cpu_cores")
  private Long cpuCores = null;

  @SerializedName("uptime")
  private Long uptime = null;

  @SerializedName("mem_cache")
  private Long memCache = null;

  @SerializedName("mem_total")
  private Long memTotal = null;

  @SerializedName("mem_used")
  private Long memUsed = null;

  @SerializedName("dpdk_cpu_cores")
  private Long dpdkCpuCores = null;

  @SerializedName("file_systems")
  private List<NodeFileSystemProperties> fileSystems = null;

  /**
   * Source of status data.
   */
  @JsonAdapter(SourceEnum.Adapter.class)
  public enum SourceEnum {
    REALTIME("realtime"),
    CACHED("cached");

    private String value;

    SourceEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static SourceEnum fromValue(String text) {
      for (SourceEnum b : SourceEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<SourceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SourceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SourceEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return SourceEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("source")
  private SourceEnum source = null;

   /**
   * One, five, and fifteen minute load averages for the system
   * @return loadAverage
  **/
  @Schema(description = "One, five, and fifteen minute load averages for the system")
  public List<BigDecimal> getLoadAverage() {
    return loadAverage;
  }

   /**
   * Amount of swap disk in use, in kilobytes
   * @return swapUsed
  **/
  @Schema(description = "Amount of swap disk in use, in kilobytes")
  public Long getSwapUsed() {
    return swapUsed;
  }

  public NodeStatusProperties cpuUsage(CpuUsage cpuUsage) {
    this.cpuUsage = cpuUsage;
    return this;
  }

   /**
   * Get cpuUsage
   * @return cpuUsage
  **/
  @Schema(description = "")
  public CpuUsage getCpuUsage() {
    return cpuUsage;
  }

  public void setCpuUsage(CpuUsage cpuUsage) {
    this.cpuUsage = cpuUsage;
  }

   /**
   * Number of non-DPDK cores on Edge Node.
   * @return nonDpdkCpuCores
  **/
  @Schema(description = "Number of non-DPDK cores on Edge Node.")
  public Long getNonDpdkCpuCores() {
    return nonDpdkCpuCores;
  }

   /**
   * Amount of disk available for swap, in kilobytes
   * @return swapTotal
  **/
  @Schema(description = "Amount of disk available for swap, in kilobytes")
  public Long getSwapTotal() {
    return swapTotal;
  }

   /**
   * Current time expressed in milliseconds since epoch
   * @return systemTime
  **/
  @Schema(description = "Current time expressed in milliseconds since epoch")
  public Long getSystemTime() {
    return systemTime;
  }

   /**
   * Number of CPU cores on the system
   * @return cpuCores
  **/
  @Schema(description = "Number of CPU cores on the system")
  public Long getCpuCores() {
    return cpuCores;
  }

   /**
   * Milliseconds since system start
   * @return uptime
  **/
  @Schema(description = "Milliseconds since system start")
  public Long getUptime() {
    return uptime;
  }

   /**
   * Amount of RAM on the system that can be flushed out to disk, in kilobytes
   * @return memCache
  **/
  @Schema(description = "Amount of RAM on the system that can be flushed out to disk, in kilobytes")
  public Long getMemCache() {
    return memCache;
  }

   /**
   * Amount of RAM allocated to the system, in kilobytes
   * @return memTotal
  **/
  @Schema(description = "Amount of RAM allocated to the system, in kilobytes")
  public Long getMemTotal() {
    return memTotal;
  }

   /**
   * Amount of RAM in use on the system, in kilobytes
   * @return memUsed
  **/
  @Schema(description = "Amount of RAM in use on the system, in kilobytes")
  public Long getMemUsed() {
    return memUsed;
  }

   /**
   * Number of DPDK cores on Edge Node which are used for packet IO processing.
   * @return dpdkCpuCores
  **/
  @Schema(description = "Number of DPDK cores on Edge Node which are used for packet IO processing.")
  public Long getDpdkCpuCores() {
    return dpdkCpuCores;
  }

   /**
   * File systems configured on the system
   * @return fileSystems
  **/
  @Schema(description = "File systems configured on the system")
  public List<NodeFileSystemProperties> getFileSystems() {
    return fileSystems;
  }

   /**
   * Source of status data.
   * @return source
  **/
  @Schema(description = "Source of status data.")
  public SourceEnum getSource() {
    return source;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NodeStatusProperties nodeStatusProperties = (NodeStatusProperties) o;
    return Objects.equals(this.loadAverage, nodeStatusProperties.loadAverage) &&
        Objects.equals(this.swapUsed, nodeStatusProperties.swapUsed) &&
        Objects.equals(this.cpuUsage, nodeStatusProperties.cpuUsage) &&
        Objects.equals(this.nonDpdkCpuCores, nodeStatusProperties.nonDpdkCpuCores) &&
        Objects.equals(this.swapTotal, nodeStatusProperties.swapTotal) &&
        Objects.equals(this.systemTime, nodeStatusProperties.systemTime) &&
        Objects.equals(this.cpuCores, nodeStatusProperties.cpuCores) &&
        Objects.equals(this.uptime, nodeStatusProperties.uptime) &&
        Objects.equals(this.memCache, nodeStatusProperties.memCache) &&
        Objects.equals(this.memTotal, nodeStatusProperties.memTotal) &&
        Objects.equals(this.memUsed, nodeStatusProperties.memUsed) &&
        Objects.equals(this.dpdkCpuCores, nodeStatusProperties.dpdkCpuCores) &&
        Objects.equals(this.fileSystems, nodeStatusProperties.fileSystems) &&
        Objects.equals(this.source, nodeStatusProperties.source) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(loadAverage, swapUsed, cpuUsage, nonDpdkCpuCores, swapTotal, systemTime, cpuCores, uptime, memCache, memTotal, memUsed, dpdkCpuCores, fileSystems, source, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NodeStatusProperties {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    loadAverage: ").append(toIndentedString(loadAverage)).append("\n");
    sb.append("    swapUsed: ").append(toIndentedString(swapUsed)).append("\n");
    sb.append("    cpuUsage: ").append(toIndentedString(cpuUsage)).append("\n");
    sb.append("    nonDpdkCpuCores: ").append(toIndentedString(nonDpdkCpuCores)).append("\n");
    sb.append("    swapTotal: ").append(toIndentedString(swapTotal)).append("\n");
    sb.append("    systemTime: ").append(toIndentedString(systemTime)).append("\n");
    sb.append("    cpuCores: ").append(toIndentedString(cpuCores)).append("\n");
    sb.append("    uptime: ").append(toIndentedString(uptime)).append("\n");
    sb.append("    memCache: ").append(toIndentedString(memCache)).append("\n");
    sb.append("    memTotal: ").append(toIndentedString(memTotal)).append("\n");
    sb.append("    memUsed: ").append(toIndentedString(memUsed)).append("\n");
    sb.append("    dpdkCpuCores: ").append(toIndentedString(dpdkCpuCores)).append("\n");
    sb.append("    fileSystems: ").append(toIndentedString(fileSystems)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
