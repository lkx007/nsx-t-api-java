/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.ConfigurationStateElement;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * Describes status of configuration of an entity
 */
@Schema(description = "Describes status of configuration of an entity")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class ConfigurationState {
  /**
   * Gives details of state of desired configuration. Additional enums with more details on progress/success/error states are sent for edge node. The success states are NODE_READY and TRANSPORT_NODE_READY, pending states are {VM_DEPLOYMENT_QUEUED, VM_DEPLOYMENT_IN_PROGRESS, REGISTRATION_PENDING} and other values indicate failures. \&quot;in_sync\&quot; state indicates that the desired configuration has been received by the host to which it applies, but is not yet in effect. When the configuration is actually in effect, the state will change to \&quot;success\&quot;. Please note, failed state is deprecated. 
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    PENDING("pending"),
    IN_PROGRESS("in_progress"),
    SUCCESS("success"),
    FAILED("failed"),
    PARTIAL_SUCCESS("partial_success"),
    ORPHANED("orphaned"),
    UNKNOWN("unknown"),
    ERROR("error"),
    IN_SYNC("in_sync"),
    NOT_AVAILABLE("NOT_AVAILABLE"),
    VM_DEPLOYMENT_QUEUED("VM_DEPLOYMENT_QUEUED"),
    VM_DEPLOYMENT_IN_PROGRESS("VM_DEPLOYMENT_IN_PROGRESS"),
    VM_DEPLOYMENT_FAILED("VM_DEPLOYMENT_FAILED"),
    VM_POWER_ON_IN_PROGRESS("VM_POWER_ON_IN_PROGRESS"),
    VM_POWER_ON_FAILED("VM_POWER_ON_FAILED"),
    REGISTRATION_PENDING("REGISTRATION_PENDING"),
    NODE_NOT_READY("NODE_NOT_READY"),
    NODE_READY("NODE_READY"),
    VM_POWER_OFF_IN_PROGRESS("VM_POWER_OFF_IN_PROGRESS"),
    VM_POWER_OFF_FAILED("VM_POWER_OFF_FAILED"),
    VM_UNDEPLOY_IN_PROGRESS("VM_UNDEPLOY_IN_PROGRESS"),
    VM_UNDEPLOY_FAILED("VM_UNDEPLOY_FAILED"),
    VM_UNDEPLOY_SUCCESSFUL("VM_UNDEPLOY_SUCCESSFUL"),
    EDGE_CONFIG_ERROR("EDGE_CONFIG_ERROR"),
    VM_DEPLOYMENT_RESTARTED("VM_DEPLOYMENT_RESTARTED"),
    REGISTRATION_FAILED("REGISTRATION_FAILED"),
    TRANSPORT_NODE_SYNC_PENDING("TRANSPORT_NODE_SYNC_PENDING"),
    TRANSPORT_NODE_CONFIGURATION_MISSING("TRANSPORT_NODE_CONFIGURATION_MISSING"),
    EDGE_HARDWARE_NOT_SUPPORTED("EDGE_HARDWARE_NOT_SUPPORTED"),
    MULTIPLE_OVERLAY_TZS_NOT_SUPPORTED("MULTIPLE_OVERLAY_TZS_NOT_SUPPORTED"),
    TN_OVERLAY_TZ_IN_USE_BY_EDGE_CLUSTER("TN_OVERLAY_TZ_IN_USE_BY_EDGE_CLUSTER"),
    TZ_ENDPOINTS_NOT_SPECIFIED("TZ_ENDPOINTS_NOT_SPECIFIED"),
    NO_PNIC_PREPARED_IN_EDGE("NO_PNIC_PREPARED_IN_EDGE"),
    APPLIANCE_INTERNAL_ERROR("APPLIANCE_INTERNAL_ERROR"),
    VTEP_DHCP_NOT_SUPPORTED("VTEP_DHCP_NOT_SUPPORTED"),
    UNSUPPORTED_HOST_SWITCH_PROFILE("UNSUPPORTED_HOST_SWITCH_PROFILE"),
    UPLINK_HOST_SWITCH_PROFILE_NOT_SPECIFIED("UPLINK_HOST_SWITCH_PROFILE_NOT_SPECIFIED"),
    HOSTSWITCH_PROFILE_NOT_FOUND("HOSTSWITCH_PROFILE_NOT_FOUND"),
    LLDP_SEND_ENABLED_NOT_SUPPORTED("LLDP_SEND_ENABLED_NOT_SUPPORTED"),
    UNSUPPORTED_NAMED_TEAMING_POLICY("UNSUPPORTED_NAMED_TEAMING_POLICY"),
    LBSRCID_NOT_SUPPORTED_FOR_EDGE_VM("LBSRCID_NOT_SUPPORTED_FOR_EDGE_VM"),
    LACP_NOT_SUPPORTED_FOR_EDGE_VM("LACP_NOT_SUPPORTED_FOR_EDGE_VM"),
    STANDBY_UPLINKS_NOT_SUPPORTED_FOR_EDGE_VM("STANDBY_UPLINKS_NOT_SUPPORTED_FOR_EDGE_VM"),
    MULTIPLE_ACTIVE_UPLINKS_NOT_SUPPORTED_FOR_EDGE("MULTIPLE_ACTIVE_UPLINKS_NOT_SUPPORTED_FOR_EDGE"),
    UNSUPPORTED_LACP_LB_ALGO_FOR_NODE("UNSUPPORTED_LACP_LB_ALGO_FOR_NODE"),
    EDGE_NODE_VERSION_NOT_SUPPORTED("EDGE_NODE_VERSION_NOT_SUPPORTED"),
    NO_PNIC_SPECIFIED_IN_TN("NO_PNIC_SPECIFIED_IN_TN"),
    INVALID_PNIC_DEVICE_NAME("INVALID_PNIC_DEVICE_NAME"),
    TRANSPORT_NODE_READY("TRANSPORT_NODE_READY"),
    VM_NETWORK_EDIT_PENDING("VM_NETWORK_EDIT_PENDING"),
    UNSUPPORTED_DEFAULT_TEAMING_POLICY("UNSUPPORTED_DEFAULT_TEAMING_POLICY"),
    MPA_DISCONNECTED("MPA_DISCONNECTED"),
    VM_RENAME_PENDING("VM_RENAME_PENDING"),
    VM_CONFIG_EDIT_PENDING("VM_CONFIG_EDIT_PENDING"),
    VM_NETWORK_EDIT_FAILED("VM_NETWORK_EDIT_FAILED"),
    VM_RENAME_FAILED("VM_RENAME_FAILED"),
    VM_CONFIG_EDIT_FAILED("VM_CONFIG_EDIT_FAILED"),
    VM_CONFIG_DISCREPANCY("VM_CONFIG_DISCREPANCY"),
    VM_NODE_REFRESH_FAILED("VM_NODE_REFRESH_FAILED"),
    VM_PLACEMENT_REFRESH_FAILED("VM_PLACEMENT_REFRESH_FAILED");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static StateEnum fromValue(String text) {
      for (StateEnum b : StateEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StateEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("state")
  private StateEnum state = null;

  @SerializedName("details")
  private List<ConfigurationStateElement> details = null;

  @SerializedName("failure_code")
  private Long failureCode = null;

  @SerializedName("failure_message")
  private String failureMessage = null;

   /**
   * Gives details of state of desired configuration. Additional enums with more details on progress/success/error states are sent for edge node. The success states are NODE_READY and TRANSPORT_NODE_READY, pending states are {VM_DEPLOYMENT_QUEUED, VM_DEPLOYMENT_IN_PROGRESS, REGISTRATION_PENDING} and other values indicate failures. \&quot;in_sync\&quot; state indicates that the desired configuration has been received by the host to which it applies, but is not yet in effect. When the configuration is actually in effect, the state will change to \&quot;success\&quot;. Please note, failed state is deprecated. 
   * @return state
  **/
  @Schema(description = "Gives details of state of desired configuration. Additional enums with more details on progress/success/error states are sent for edge node. The success states are NODE_READY and TRANSPORT_NODE_READY, pending states are {VM_DEPLOYMENT_QUEUED, VM_DEPLOYMENT_IN_PROGRESS, REGISTRATION_PENDING} and other values indicate failures. \"in_sync\" state indicates that the desired configuration has been received by the host to which it applies, but is not yet in effect. When the configuration is actually in effect, the state will change to \"success\". Please note, failed state is deprecated. ")
  public StateEnum getState() {
    return state;
  }

   /**
   * Array of configuration state of various sub systems
   * @return details
  **/
  @Schema(description = "Array of configuration state of various sub systems")
  public List<ConfigurationStateElement> getDetails() {
    return details;
  }

   /**
   * Error code
   * @return failureCode
  **/
  @Schema(description = "Error code")
  public Long getFailureCode() {
    return failureCode;
  }

   /**
   * Error message in case of failure
   * @return failureMessage
  **/
  @Schema(description = "Error message in case of failure")
  public String getFailureMessage() {
    return failureMessage;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConfigurationState configurationState = (ConfigurationState) o;
    return Objects.equals(this.state, configurationState.state) &&
        Objects.equals(this.details, configurationState.details) &&
        Objects.equals(this.failureCode, configurationState.failureCode) &&
        Objects.equals(this.failureMessage, configurationState.failureMessage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(state, details, failureCode, failureMessage);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConfigurationState {\n");
    
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    details: ").append(toIndentedString(details)).append("\n");
    sb.append("    failureCode: ").append(toIndentedString(failureCode)).append("\n");
    sb.append("    failureMessage: ").append(toIndentedString(failureMessage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
