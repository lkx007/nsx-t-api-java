/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.ManagedResource;
import io.swagger.client.model.Tag;
import io.swagger.client.model.VmNicInfo;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.List;
/**
 * A Service Runtime is the runtime entity associated with ever Service-VM deployed.
 */
@Schema(description = "A Service Runtime is the runtime entity associated with ever Service-VM deployed.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class InstanceRuntime extends ManagedResource {
  @SerializedName("service_vm_id")
  private String serviceVmId = null;

  /**
   * Service-Instance Runtime deployment status of the Service-VM. It shows the latest status during the process of deployment, redeploy, upgrade, and un-deployment of VM.
   */
  @JsonAdapter(DeploymentStatusEnum.Adapter.class)
  public enum DeploymentStatusEnum {
    DEPLOYMENT_IN_PROGRESS("DEPLOYMENT_IN_PROGRESS"),
    DEPLOYMENT_FAILED("DEPLOYMENT_FAILED"),
    DEPLOYMENT_SUCCESSFUL("DEPLOYMENT_SUCCESSFUL"),
    UPGRADE_IN_PROGRESS("UPGRADE_IN_PROGRESS"),
    UPGRADE_FAILED("UPGRADE_FAILED"),
    UNDEPLOYMENT_IN_PROGRESS("UNDEPLOYMENT_IN_PROGRESS"),
    UNDEPLOYMENT_FAILED("UNDEPLOYMENT_FAILED"),
    UNDEPLOYMENT_SUCCESSFUL("UNDEPLOYMENT_SUCCESSFUL"),
    UNKNOWN("UNKNOWN");

    private String value;

    DeploymentStatusEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static DeploymentStatusEnum fromValue(String text) {
      for (DeploymentStatusEnum b : DeploymentStatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<DeploymentStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DeploymentStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DeploymentStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return DeploymentStatusEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("deployment_status")
  private DeploymentStatusEnum deploymentStatus = null;

  @SerializedName("vm_nic_info")
  private VmNicInfo vmNicInfo = null;

  /**
   * The maintenance mode indicates whether the corresponding service VM is in maintenance mode. The service VM will not be used to service new requests if it is in maintenance mode. 
   */
  @JsonAdapter(MaintenanceModeEnum.Adapter.class)
  public enum MaintenanceModeEnum {
    OFF("OFF"),
    ENTERING("ENTERING"),
    ON("ON"),
    EXITING("EXITING");

    private String value;

    MaintenanceModeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static MaintenanceModeEnum fromValue(String text) {
      for (MaintenanceModeEnum b : MaintenanceModeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<MaintenanceModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MaintenanceModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MaintenanceModeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return MaintenanceModeEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("maintenance_mode")
  private MaintenanceModeEnum maintenanceMode = null;

  /**
   * Service-Instance Runtime status of the deployed Service-VM.
   */
  @JsonAdapter(RuntimeStatusEnum.Adapter.class)
  public enum RuntimeStatusEnum {
    IN_SERVICE("IN_SERVICE"),
    OUT_OF_SERVICE("OUT_OF_SERVICE"),
    NEEDS_ATTENTION("NEEDS_ATTENTION"),
    NOT_AVAILABLE("NOT_AVAILABLE");

    private String value;

    RuntimeStatusEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static RuntimeStatusEnum fromValue(String text) {
      for (RuntimeStatusEnum b : RuntimeStatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<RuntimeStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RuntimeStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RuntimeStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return RuntimeStatusEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("runtime_status")
  private RuntimeStatusEnum runtimeStatus = null;

  @SerializedName("error_message")
  private String errorMessage = null;

  @SerializedName("service_instance_id")
  private String serviceInstanceId = null;

  /**
   * Service-Instance runtime health status set by partner to indicate whether the service is running properly or not. 
   */
  @JsonAdapter(RuntimeHealthStatusByPartnerEnum.Adapter.class)
  public enum RuntimeHealthStatusByPartnerEnum {
    HEALTHY("HEALTHY"),
    STOPPED("STOPPED"),
    NOT_RESPONDING("NOT_RESPONDING");

    private String value;

    RuntimeHealthStatusByPartnerEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static RuntimeHealthStatusByPartnerEnum fromValue(String text) {
      for (RuntimeHealthStatusByPartnerEnum b : RuntimeHealthStatusByPartnerEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<RuntimeHealthStatusByPartnerEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RuntimeHealthStatusByPartnerEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RuntimeHealthStatusByPartnerEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return RuntimeHealthStatusByPartnerEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("runtime_health_status_by_partner")
  private RuntimeHealthStatusByPartnerEnum runtimeHealthStatusByPartner = null;

  @SerializedName("unhealthy_reason")
  private String unhealthyReason = null;

   /**
   * Service-VM/SVM id of deployed virtual-machine.
   * @return serviceVmId
  **/
  @Schema(description = "Service-VM/SVM id of deployed virtual-machine.")
  public String getServiceVmId() {
    return serviceVmId;
  }

   /**
   * Service-Instance Runtime deployment status of the Service-VM. It shows the latest status during the process of deployment, redeploy, upgrade, and un-deployment of VM.
   * @return deploymentStatus
  **/
  @Schema(description = "Service-Instance Runtime deployment status of the Service-VM. It shows the latest status during the process of deployment, redeploy, upgrade, and un-deployment of VM.")
  public DeploymentStatusEnum getDeploymentStatus() {
    return deploymentStatus;
  }

  public InstanceRuntime vmNicInfo(VmNicInfo vmNicInfo) {
    this.vmNicInfo = vmNicInfo;
    return this;
  }

   /**
   * Get vmNicInfo
   * @return vmNicInfo
  **/
  @Schema(description = "")
  public VmNicInfo getVmNicInfo() {
    return vmNicInfo;
  }

  public void setVmNicInfo(VmNicInfo vmNicInfo) {
    this.vmNicInfo = vmNicInfo;
  }

   /**
   * The maintenance mode indicates whether the corresponding service VM is in maintenance mode. The service VM will not be used to service new requests if it is in maintenance mode. 
   * @return maintenanceMode
  **/
  @Schema(description = "The maintenance mode indicates whether the corresponding service VM is in maintenance mode. The service VM will not be used to service new requests if it is in maintenance mode. ")
  public MaintenanceModeEnum getMaintenanceMode() {
    return maintenanceMode;
  }

   /**
   * Service-Instance Runtime status of the deployed Service-VM.
   * @return runtimeStatus
  **/
  @Schema(description = "Service-Instance Runtime status of the deployed Service-VM.")
  public RuntimeStatusEnum getRuntimeStatus() {
    return runtimeStatus;
  }

   /**
   * Error message for the Service Instance Runtime if any.
   * @return errorMessage
  **/
  @Schema(description = "Error message for the Service Instance Runtime if any.")
  public String getErrorMessage() {
    return errorMessage;
  }

   /**
   * Id of an instantiation of a registered service.
   * @return serviceInstanceId
  **/
  @Schema(description = "Id of an instantiation of a registered service.")
  public String getServiceInstanceId() {
    return serviceInstanceId;
  }

   /**
   * Service-Instance runtime health status set by partner to indicate whether the service is running properly or not. 
   * @return runtimeHealthStatusByPartner
  **/
  @Schema(description = "Service-Instance runtime health status set by partner to indicate whether the service is running properly or not. ")
  public RuntimeHealthStatusByPartnerEnum getRuntimeHealthStatusByPartner() {
    return runtimeHealthStatusByPartner;
  }

   /**
   * Reason provided by partner for the service being unhealthy. This could be due to various reasons such as connectivity lost as an example. 
   * @return unhealthyReason
  **/
  @Schema(description = "Reason provided by partner for the service being unhealthy. This could be due to various reasons such as connectivity lost as an example. ")
  public String getUnhealthyReason() {
    return unhealthyReason;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InstanceRuntime instanceRuntime = (InstanceRuntime) o;
    return Objects.equals(this.serviceVmId, instanceRuntime.serviceVmId) &&
        Objects.equals(this.deploymentStatus, instanceRuntime.deploymentStatus) &&
        Objects.equals(this.vmNicInfo, instanceRuntime.vmNicInfo) &&
        Objects.equals(this.maintenanceMode, instanceRuntime.maintenanceMode) &&
        Objects.equals(this.runtimeStatus, instanceRuntime.runtimeStatus) &&
        Objects.equals(this.errorMessage, instanceRuntime.errorMessage) &&
        Objects.equals(this.serviceInstanceId, instanceRuntime.serviceInstanceId) &&
        Objects.equals(this.runtimeHealthStatusByPartner, instanceRuntime.runtimeHealthStatusByPartner) &&
        Objects.equals(this.unhealthyReason, instanceRuntime.unhealthyReason) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(serviceVmId, deploymentStatus, vmNicInfo, maintenanceMode, runtimeStatus, errorMessage, serviceInstanceId, runtimeHealthStatusByPartner, unhealthyReason, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InstanceRuntime {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    serviceVmId: ").append(toIndentedString(serviceVmId)).append("\n");
    sb.append("    deploymentStatus: ").append(toIndentedString(deploymentStatus)).append("\n");
    sb.append("    vmNicInfo: ").append(toIndentedString(vmNicInfo)).append("\n");
    sb.append("    maintenanceMode: ").append(toIndentedString(maintenanceMode)).append("\n");
    sb.append("    runtimeStatus: ").append(toIndentedString(runtimeStatus)).append("\n");
    sb.append("    errorMessage: ").append(toIndentedString(errorMessage)).append("\n");
    sb.append("    serviceInstanceId: ").append(toIndentedString(serviceInstanceId)).append("\n");
    sb.append("    runtimeHealthStatusByPartner: ").append(toIndentedString(runtimeHealthStatusByPartner)).append("\n");
    sb.append("    unhealthyReason: ").append(toIndentedString(unhealthyReason)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
