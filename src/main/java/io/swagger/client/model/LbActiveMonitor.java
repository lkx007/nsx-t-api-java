/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.LbMonitor;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * LbActiveMonitor
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class LbActiveMonitor extends LbMonitor {
  @SerializedName("monitor_port")
  private String monitorPort = null;

  @SerializedName("fall_count")
  private Long fallCount = 3l;

  @SerializedName("interval")
  private Long interval = 5l;

  @SerializedName("rise_count")
  private Long riseCount = 3l;

  @SerializedName("timeout")
  private Long timeout = 15l;

  public LbActiveMonitor monitorPort(String monitorPort) {
    this.monitorPort = monitorPort;
    return this;
  }

   /**
   * If the monitor port is specified, it would override pool member port setting for healthcheck. A port range is not supported. For ICMP monitor, monitor_port is not required. 
   * @return monitorPort
  **/
  @Schema(description = "If the monitor port is specified, it would override pool member port setting for healthcheck. A port range is not supported. For ICMP monitor, monitor_port is not required. ")
  public String getMonitorPort() {
    return monitorPort;
  }

  public void setMonitorPort(String monitorPort) {
    this.monitorPort = monitorPort;
  }

  public LbActiveMonitor fallCount(Long fallCount) {
    this.fallCount = fallCount;
    return this;
  }

   /**
   * num of consecutive checks must fail before marking it down
   * minimum: 1
   * maximum: 2147483647
   * @return fallCount
  **/
  @Schema(description = "num of consecutive checks must fail before marking it down")
  public Long getFallCount() {
    return fallCount;
  }

  public void setFallCount(Long fallCount) {
    this.fallCount = fallCount;
  }

  public LbActiveMonitor interval(Long interval) {
    this.interval = interval;
    return this;
  }

   /**
   * the frequency at which the system issues the monitor check (in second)
   * minimum: 1
   * maximum: 2147483647
   * @return interval
  **/
  @Schema(description = "the frequency at which the system issues the monitor check (in second)")
  public Long getInterval() {
    return interval;
  }

  public void setInterval(Long interval) {
    this.interval = interval;
  }

  public LbActiveMonitor riseCount(Long riseCount) {
    this.riseCount = riseCount;
    return this;
  }

   /**
   * num of consecutive checks must pass before marking it up
   * minimum: 1
   * maximum: 2147483647
   * @return riseCount
  **/
  @Schema(description = "num of consecutive checks must pass before marking it up")
  public Long getRiseCount() {
    return riseCount;
  }

  public void setRiseCount(Long riseCount) {
    this.riseCount = riseCount;
  }

  public LbActiveMonitor timeout(Long timeout) {
    this.timeout = timeout;
    return this;
  }

   /**
   * the number of seconds the target has in which to respond to the monitor request 
   * minimum: 1
   * maximum: 2147483647
   * @return timeout
  **/
  @Schema(description = "the number of seconds the target has in which to respond to the monitor request ")
  public Long getTimeout() {
    return timeout;
  }

  public void setTimeout(Long timeout) {
    this.timeout = timeout;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LbActiveMonitor lbActiveMonitor = (LbActiveMonitor) o;
    return Objects.equals(this.monitorPort, lbActiveMonitor.monitorPort) &&
        Objects.equals(this.fallCount, lbActiveMonitor.fallCount) &&
        Objects.equals(this.interval, lbActiveMonitor.interval) &&
        Objects.equals(this.riseCount, lbActiveMonitor.riseCount) &&
        Objects.equals(this.timeout, lbActiveMonitor.timeout) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(monitorPort, fallCount, interval, riseCount, timeout, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LbActiveMonitor {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    monitorPort: ").append(toIndentedString(monitorPort)).append("\n");
    sb.append("    fallCount: ").append(toIndentedString(fallCount)).append("\n");
    sb.append("    interval: ").append(toIndentedString(interval)).append("\n");
    sb.append("    riseCount: ").append(toIndentedString(riseCount)).append("\n");
    sb.append("    timeout: ").append(toIndentedString(timeout)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
