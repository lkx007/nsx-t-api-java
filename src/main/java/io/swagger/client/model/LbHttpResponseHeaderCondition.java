/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.LbRuleCondition;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * This condition is used to match HTTP response messages from backend servers by HTTP header fields. HTTP header fields are components of the header section of HTTP request and response messages. They define the operating parameters of an HTTP transaction. For example, Cookie, Authorization, User-Agent, etc. One condition can be used to match one header field, to match multiple header fields, multiple conditions must be specified. The match_type field defines how header_value field is used to match HTTP responses. The header_name field does not support match types. 
 */
@Schema(description = "This condition is used to match HTTP response messages from backend servers by HTTP header fields. HTTP header fields are components of the header section of HTTP request and response messages. They define the operating parameters of an HTTP transaction. For example, Cookie, Authorization, User-Agent, etc. One condition can be used to match one header field, to match multiple header fields, multiple conditions must be specified. The match_type field defines how header_value field is used to match HTTP responses. The header_name field does not support match types. ")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class LbHttpResponseHeaderCondition extends LbRuleCondition {
  @SerializedName("header_value")
  private String headerValue = null;

  @SerializedName("case_sensitive")
  private Boolean caseSensitive = true;

  /**
   * Match type of HTTP header value
   */
  @JsonAdapter(MatchTypeEnum.Adapter.class)
  public enum MatchTypeEnum {
    STARTS_WITH("STARTS_WITH"),
    ENDS_WITH("ENDS_WITH"),
    EQUALS("EQUALS"),
    CONTAINS("CONTAINS"),
    REGEX("REGEX");

    private String value;

    MatchTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static MatchTypeEnum fromValue(String text) {
      for (MatchTypeEnum b : MatchTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<MatchTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MatchTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MatchTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return MatchTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("match_type")
  private MatchTypeEnum matchType = MatchTypeEnum.REGEX;

  @SerializedName("header_name")
  private String headerName = null;

  public LbHttpResponseHeaderCondition headerValue(String headerValue) {
    this.headerValue = headerValue;
    return this;
  }

   /**
   * Value of HTTP header field
   * @return headerValue
  **/
  @Schema(required = true, description = "Value of HTTP header field")
  public String getHeaderValue() {
    return headerValue;
  }

  public void setHeaderValue(String headerValue) {
    this.headerValue = headerValue;
  }

  public LbHttpResponseHeaderCondition caseSensitive(Boolean caseSensitive) {
    this.caseSensitive = caseSensitive;
    return this;
  }

   /**
   * If true, case is significant when comparing HTTP header value. 
   * @return caseSensitive
  **/
  @Schema(description = "If true, case is significant when comparing HTTP header value. ")
  public Boolean isCaseSensitive() {
    return caseSensitive;
  }

  public void setCaseSensitive(Boolean caseSensitive) {
    this.caseSensitive = caseSensitive;
  }

  public LbHttpResponseHeaderCondition matchType(MatchTypeEnum matchType) {
    this.matchType = matchType;
    return this;
  }

   /**
   * Match type of HTTP header value
   * @return matchType
  **/
  @Schema(description = "Match type of HTTP header value")
  public MatchTypeEnum getMatchType() {
    return matchType;
  }

  public void setMatchType(MatchTypeEnum matchType) {
    this.matchType = matchType;
  }

  public LbHttpResponseHeaderCondition headerName(String headerName) {
    this.headerName = headerName;
    return this;
  }

   /**
   * Name of HTTP header field
   * @return headerName
  **/
  @Schema(required = true, description = "Name of HTTP header field")
  public String getHeaderName() {
    return headerName;
  }

  public void setHeaderName(String headerName) {
    this.headerName = headerName;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LbHttpResponseHeaderCondition lbHttpResponseHeaderCondition = (LbHttpResponseHeaderCondition) o;
    return Objects.equals(this.headerValue, lbHttpResponseHeaderCondition.headerValue) &&
        Objects.equals(this.caseSensitive, lbHttpResponseHeaderCondition.caseSensitive) &&
        Objects.equals(this.matchType, lbHttpResponseHeaderCondition.matchType) &&
        Objects.equals(this.headerName, lbHttpResponseHeaderCondition.headerName) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(headerValue, caseSensitive, matchType, headerName, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LbHttpResponseHeaderCondition {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    headerValue: ").append(toIndentedString(headerValue)).append("\n");
    sb.append("    caseSensitive: ").append(toIndentedString(caseSensitive)).append("\n");
    sb.append("    matchType: ").append(toIndentedString(matchType)).append("\n");
    sb.append("    headerName: ").append(toIndentedString(headerName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
