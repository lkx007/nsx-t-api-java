/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * PoolMember
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-19T07:44:41.574+08:00[Asia/Shanghai]")
public class PoolMember {
  @SerializedName("max_concurrent_connections")
  private Long maxConcurrentConnections = null;

  /**
   * member admin state
   */
  @JsonAdapter(AdminStateEnum.Adapter.class)
  public enum AdminStateEnum {
    ENABLED("ENABLED"),
    DISABLED("DISABLED"),
    GRACEFUL_DISABLED("GRACEFUL_DISABLED");

    private String value;

    AdminStateEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static AdminStateEnum fromValue(String text) {
      for (AdminStateEnum b : AdminStateEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<AdminStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AdminStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AdminStateEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return AdminStateEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("admin_state")
  private AdminStateEnum adminState = AdminStateEnum.ENABLED;

  @SerializedName("backup_member")
  private Boolean backupMember = false;

  @SerializedName("weight")
  private Long weight = 1l;

  @SerializedName("display_name")
  private String displayName = null;

  @SerializedName("ip_address")
  private String ipAddress = null;

  @SerializedName("port")
  private String port = null;

  public PoolMember maxConcurrentConnections(Long maxConcurrentConnections) {
    this.maxConcurrentConnections = maxConcurrentConnections;
    return this;
  }

   /**
   * To ensure members are not overloaded, connections to a member can be capped by the load balancer. When a member reaches this limit, it is skipped during server selection. If it is not specified, it means that connections are unlimited. 
   * minimum: 1
   * maximum: 2147483647
   * @return maxConcurrentConnections
  **/
  @Schema(description = "To ensure members are not overloaded, connections to a member can be capped by the load balancer. When a member reaches this limit, it is skipped during server selection. If it is not specified, it means that connections are unlimited. ")
  public Long getMaxConcurrentConnections() {
    return maxConcurrentConnections;
  }

  public void setMaxConcurrentConnections(Long maxConcurrentConnections) {
    this.maxConcurrentConnections = maxConcurrentConnections;
  }

  public PoolMember adminState(AdminStateEnum adminState) {
    this.adminState = adminState;
    return this;
  }

   /**
   * member admin state
   * @return adminState
  **/
  @Schema(description = "member admin state")
  public AdminStateEnum getAdminState() {
    return adminState;
  }

  public void setAdminState(AdminStateEnum adminState) {
    this.adminState = adminState;
  }

  public PoolMember backupMember(Boolean backupMember) {
    this.backupMember = backupMember;
    return this;
  }

   /**
   * Backup servers are typically configured with a sorry page indicating to the user that the application is currently unavailable. While the pool is active (a specified minimum number of pool members are active) BACKUP members are skipped during server selection. When the pool is inactive, incoming connections are sent to only the BACKUP member(s). 
   * @return backupMember
  **/
  @Schema(description = "Backup servers are typically configured with a sorry page indicating to the user that the application is currently unavailable. While the pool is active (a specified minimum number of pool members are active) BACKUP members are skipped during server selection. When the pool is inactive, incoming connections are sent to only the BACKUP member(s). ")
  public Boolean isBackupMember() {
    return backupMember;
  }

  public void setBackupMember(Boolean backupMember) {
    this.backupMember = backupMember;
  }

  public PoolMember weight(Long weight) {
    this.weight = weight;
    return this;
  }

   /**
   * Pool member weight is used for WEIGHTED_ROUND_ROBIN balancing algorithm. The weight value would be ignored in other algorithms. 
   * minimum: 1
   * maximum: 256
   * @return weight
  **/
  @Schema(description = "Pool member weight is used for WEIGHTED_ROUND_ROBIN balancing algorithm. The weight value would be ignored in other algorithms. ")
  public Long getWeight() {
    return weight;
  }

  public void setWeight(Long weight) {
    this.weight = weight;
  }

  public PoolMember displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

   /**
   * pool member name
   * @return displayName
  **/
  @Schema(description = "pool member name")
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }

  public PoolMember ipAddress(String ipAddress) {
    this.ipAddress = ipAddress;
    return this;
  }

   /**
   * pool member IP address
   * @return ipAddress
  **/
  @Schema(required = true, description = "pool member IP address")
  public String getIpAddress() {
    return ipAddress;
  }

  public void setIpAddress(String ipAddress) {
    this.ipAddress = ipAddress;
  }

  public PoolMember port(String port) {
    this.port = port;
    return this;
  }

   /**
   * If port is specified, all connections will be sent to this port. Only single port is supported. If unset, the same port the client connected to will be used, it could be overrode by default_pool_member_port setting in virtual server. The port should not specified for port range case. 
   * @return port
  **/
  @Schema(description = "If port is specified, all connections will be sent to this port. Only single port is supported. If unset, the same port the client connected to will be used, it could be overrode by default_pool_member_port setting in virtual server. The port should not specified for port range case. ")
  public String getPort() {
    return port;
  }

  public void setPort(String port) {
    this.port = port;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PoolMember poolMember = (PoolMember) o;
    return Objects.equals(this.maxConcurrentConnections, poolMember.maxConcurrentConnections) &&
        Objects.equals(this.adminState, poolMember.adminState) &&
        Objects.equals(this.backupMember, poolMember.backupMember) &&
        Objects.equals(this.weight, poolMember.weight) &&
        Objects.equals(this.displayName, poolMember.displayName) &&
        Objects.equals(this.ipAddress, poolMember.ipAddress) &&
        Objects.equals(this.port, poolMember.port);
  }

  @Override
  public int hashCode() {
    return Objects.hash(maxConcurrentConnections, adminState, backupMember, weight, displayName, ipAddress, port);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PoolMember {\n");
    
    sb.append("    maxConcurrentConnections: ").append(toIndentedString(maxConcurrentConnections)).append("\n");
    sb.append("    adminState: ").append(toIndentedString(adminState)).append("\n");
    sb.append("    backupMember: ").append(toIndentedString(backupMember)).append("\n");
    sb.append("    weight: ").append(toIndentedString(weight)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    ipAddress: ").append(toIndentedString(ipAddress)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
