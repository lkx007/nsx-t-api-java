/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ApiError;
import io.swagger.client.model.View;
import io.swagger.client.model.ViewList;
import io.swagger.client.model.WidgetConfiguration;
import io.swagger.client.model.WidgetConfigurationList;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ManagementPlaneApiDashboardApi {
    private ApiClient apiClient;

    public ManagementPlaneApiDashboardApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ManagementPlaneApiDashboardApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createView
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createViewCall(View body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/ui-views";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createViewValidateBeforeCall(View body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createView(Async)");
        }
        
        com.squareup.okhttp.Call call = createViewCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Creates a new View.
     * Creates a new View.
     * @param body  (required)
     * @return View
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public View createView(View body) throws ApiException {
        ApiResponse<View> resp = createViewWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Creates a new View.
     * Creates a new View.
     * @param body  (required)
     * @return ApiResponse&lt;View&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<View> createViewWithHttpInfo(View body) throws ApiException {
        com.squareup.okhttp.Call call = createViewValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<View>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates a new View. (asynchronously)
     * Creates a new View.
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createViewAsync(View body, final ApiCallback<View> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createViewValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<View>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createWidgetConfiguration
     * @param body  (required)
     * @param viewId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createWidgetConfigurationCall(WidgetConfiguration body, String viewId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/ui-views/{view-id}/widgetconfigurations"
            .replaceAll("\\{" + "view-id" + "\\}", apiClient.escapeString(viewId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createWidgetConfigurationValidateBeforeCall(WidgetConfiguration body, String viewId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createWidgetConfiguration(Async)");
        }
        // verify the required parameter 'viewId' is set
        if (viewId == null) {
            throw new ApiException("Missing the required parameter 'viewId' when calling createWidgetConfiguration(Async)");
        }
        
        com.squareup.okhttp.Call call = createWidgetConfigurationCall(body, viewId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Creates a new Widget Configuration.
     * Creates a new Widget Configuration and adds it to the specified view. Supported resource_types are LabelValueConfiguration, DonutConfiguration, GridConfiguration, StatsConfiguration, MultiWidgetConfiguration, GraphConfiguration and ContainerConfiguration.  Note: Expressions should be given in a single line. If an expression spans   multiple lines, then form the expression in a single line. For label-value pairs, expressions are evaluated as follows:   a. First, render configurations are evaluated in their order of      appearance in the widget config. The &#x27;field&#x27; is evaluated at the end.   b. Second, when render configuration is provided then the order of      evaluation is      1. If expressions provided in &#x27;condition&#x27; and &#x27;display value&#x27; are         well-formed and free of runtime-errors such as &#x27;null pointers&#x27; and         evaluates to &#x27;true&#x27;; Then remaining render configurations are not         evaluated, and the current render configuration&#x27;s &#x27;display value&#x27;         is taken as the final value.      2. If expression provided in &#x27;condition&#x27; of render configuration is         false, then next render configuration is evaluated.      3. Finally, &#x27;field&#x27; is evaluated only when every render configuration         evaluates to false and no error occurs during steps 1 and 2 above.  If an error occurs during evaluation of render configuration, then an   error message is shown. The display value corresponding to that label is   not shown and evaluation of the remaining render configurations continues   to collect and show all the error messages (marked with the &#x27;Label&#x27; for   identification) as &#x27;Error_Messages: {}&#x27;.  If during evaluation of expressions for any label-value pair an error   occurs, then it is marked with error. The errors are shown in the report,   along with the label value pairs that are error-free.  Important: For elements that take expressions, strings should be provided   by escaping them with a back-slash. These elements are - condition, field,   tooltip text and render_configuration&#x27;s display_value. 
     * @param body  (required)
     * @param viewId  (required)
     * @return WidgetConfiguration
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public WidgetConfiguration createWidgetConfiguration(WidgetConfiguration body, String viewId) throws ApiException {
        ApiResponse<WidgetConfiguration> resp = createWidgetConfigurationWithHttpInfo(body, viewId);
        return resp.getData();
    }

    /**
     * Creates a new Widget Configuration.
     * Creates a new Widget Configuration and adds it to the specified view. Supported resource_types are LabelValueConfiguration, DonutConfiguration, GridConfiguration, StatsConfiguration, MultiWidgetConfiguration, GraphConfiguration and ContainerConfiguration.  Note: Expressions should be given in a single line. If an expression spans   multiple lines, then form the expression in a single line. For label-value pairs, expressions are evaluated as follows:   a. First, render configurations are evaluated in their order of      appearance in the widget config. The &#x27;field&#x27; is evaluated at the end.   b. Second, when render configuration is provided then the order of      evaluation is      1. If expressions provided in &#x27;condition&#x27; and &#x27;display value&#x27; are         well-formed and free of runtime-errors such as &#x27;null pointers&#x27; and         evaluates to &#x27;true&#x27;; Then remaining render configurations are not         evaluated, and the current render configuration&#x27;s &#x27;display value&#x27;         is taken as the final value.      2. If expression provided in &#x27;condition&#x27; of render configuration is         false, then next render configuration is evaluated.      3. Finally, &#x27;field&#x27; is evaluated only when every render configuration         evaluates to false and no error occurs during steps 1 and 2 above.  If an error occurs during evaluation of render configuration, then an   error message is shown. The display value corresponding to that label is   not shown and evaluation of the remaining render configurations continues   to collect and show all the error messages (marked with the &#x27;Label&#x27; for   identification) as &#x27;Error_Messages: {}&#x27;.  If during evaluation of expressions for any label-value pair an error   occurs, then it is marked with error. The errors are shown in the report,   along with the label value pairs that are error-free.  Important: For elements that take expressions, strings should be provided   by escaping them with a back-slash. These elements are - condition, field,   tooltip text and render_configuration&#x27;s display_value. 
     * @param body  (required)
     * @param viewId  (required)
     * @return ApiResponse&lt;WidgetConfiguration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<WidgetConfiguration> createWidgetConfigurationWithHttpInfo(WidgetConfiguration body, String viewId) throws ApiException {
        com.squareup.okhttp.Call call = createWidgetConfigurationValidateBeforeCall(body, viewId, null, null);
        Type localVarReturnType = new TypeToken<WidgetConfiguration>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates a new Widget Configuration. (asynchronously)
     * Creates a new Widget Configuration and adds it to the specified view. Supported resource_types are LabelValueConfiguration, DonutConfiguration, GridConfiguration, StatsConfiguration, MultiWidgetConfiguration, GraphConfiguration and ContainerConfiguration.  Note: Expressions should be given in a single line. If an expression spans   multiple lines, then form the expression in a single line. For label-value pairs, expressions are evaluated as follows:   a. First, render configurations are evaluated in their order of      appearance in the widget config. The &#x27;field&#x27; is evaluated at the end.   b. Second, when render configuration is provided then the order of      evaluation is      1. If expressions provided in &#x27;condition&#x27; and &#x27;display value&#x27; are         well-formed and free of runtime-errors such as &#x27;null pointers&#x27; and         evaluates to &#x27;true&#x27;; Then remaining render configurations are not         evaluated, and the current render configuration&#x27;s &#x27;display value&#x27;         is taken as the final value.      2. If expression provided in &#x27;condition&#x27; of render configuration is         false, then next render configuration is evaluated.      3. Finally, &#x27;field&#x27; is evaluated only when every render configuration         evaluates to false and no error occurs during steps 1 and 2 above.  If an error occurs during evaluation of render configuration, then an   error message is shown. The display value corresponding to that label is   not shown and evaluation of the remaining render configurations continues   to collect and show all the error messages (marked with the &#x27;Label&#x27; for   identification) as &#x27;Error_Messages: {}&#x27;.  If during evaluation of expressions for any label-value pair an error   occurs, then it is marked with error. The errors are shown in the report,   along with the label value pairs that are error-free.  Important: For elements that take expressions, strings should be provided   by escaping them with a back-slash. These elements are - condition, field,   tooltip text and render_configuration&#x27;s display_value. 
     * @param body  (required)
     * @param viewId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createWidgetConfigurationAsync(WidgetConfiguration body, String viewId, final ApiCallback<WidgetConfiguration> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createWidgetConfigurationValidateBeforeCall(body, viewId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<WidgetConfiguration>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deletView
     * @param viewId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deletViewCall(String viewId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ui-views/{view-id}"
            .replaceAll("\\{" + "view-id" + "\\}", apiClient.escapeString(viewId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deletViewValidateBeforeCall(String viewId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'viewId' is set
        if (viewId == null) {
            throw new ApiException("Missing the required parameter 'viewId' when calling deletView(Async)");
        }
        
        com.squareup.okhttp.Call call = deletViewCall(viewId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete View
     * Delete View
     * @param viewId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deletView(String viewId) throws ApiException {
        deletViewWithHttpInfo(viewId);
    }

    /**
     * Delete View
     * Delete View
     * @param viewId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deletViewWithHttpInfo(String viewId) throws ApiException {
        com.squareup.okhttp.Call call = deletViewValidateBeforeCall(viewId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete View (asynchronously)
     * Delete View
     * @param viewId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deletViewAsync(String viewId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deletViewValidateBeforeCall(viewId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteWidgetConfiguration
     * @param viewId  (required)
     * @param widgetconfigurationId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteWidgetConfigurationCall(String viewId, String widgetconfigurationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ui-views/{view-id}/widgetconfigurations/{widgetconfiguration-id}"
            .replaceAll("\\{" + "view-id" + "\\}", apiClient.escapeString(viewId.toString()))
            .replaceAll("\\{" + "widgetconfiguration-id" + "\\}", apiClient.escapeString(widgetconfigurationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteWidgetConfigurationValidateBeforeCall(String viewId, String widgetconfigurationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'viewId' is set
        if (viewId == null) {
            throw new ApiException("Missing the required parameter 'viewId' when calling deleteWidgetConfiguration(Async)");
        }
        // verify the required parameter 'widgetconfigurationId' is set
        if (widgetconfigurationId == null) {
            throw new ApiException("Missing the required parameter 'widgetconfigurationId' when calling deleteWidgetConfiguration(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteWidgetConfigurationCall(viewId, widgetconfigurationId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete Widget Configuration
     * Detaches widget from a given view. If the widget is no longer part of any view, then it will be purged. 
     * @param viewId  (required)
     * @param widgetconfigurationId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteWidgetConfiguration(String viewId, String widgetconfigurationId) throws ApiException {
        deleteWidgetConfigurationWithHttpInfo(viewId, widgetconfigurationId);
    }

    /**
     * Delete Widget Configuration
     * Detaches widget from a given view. If the widget is no longer part of any view, then it will be purged. 
     * @param viewId  (required)
     * @param widgetconfigurationId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteWidgetConfigurationWithHttpInfo(String viewId, String widgetconfigurationId) throws ApiException {
        com.squareup.okhttp.Call call = deleteWidgetConfigurationValidateBeforeCall(viewId, widgetconfigurationId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete Widget Configuration (asynchronously)
     * Detaches widget from a given view. If the widget is no longer part of any view, then it will be purged. 
     * @param viewId  (required)
     * @param widgetconfigurationId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteWidgetConfigurationAsync(String viewId, String widgetconfigurationId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteWidgetConfigurationValidateBeforeCall(viewId, widgetconfigurationId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getView
     * @param viewId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getViewCall(String viewId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ui-views/{view-id}"
            .replaceAll("\\{" + "view-id" + "\\}", apiClient.escapeString(viewId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getViewValidateBeforeCall(String viewId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'viewId' is set
        if (viewId == null) {
            throw new ApiException("Missing the required parameter 'viewId' when calling getView(Async)");
        }
        
        com.squareup.okhttp.Call call = getViewCall(viewId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Returns View Information
     * Returns Information about a specific View. 
     * @param viewId  (required)
     * @return View
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public View getView(String viewId) throws ApiException {
        ApiResponse<View> resp = getViewWithHttpInfo(viewId);
        return resp.getData();
    }

    /**
     * Returns View Information
     * Returns Information about a specific View. 
     * @param viewId  (required)
     * @return ApiResponse&lt;View&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<View> getViewWithHttpInfo(String viewId) throws ApiException {
        com.squareup.okhttp.Call call = getViewValidateBeforeCall(viewId, null, null);
        Type localVarReturnType = new TypeToken<View>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns View Information (asynchronously)
     * Returns Information about a specific View. 
     * @param viewId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getViewAsync(String viewId, final ApiCallback<View> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getViewValidateBeforeCall(viewId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<View>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getWidgetConfiguration
     * @param viewId  (required)
     * @param widgetconfigurationId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getWidgetConfigurationCall(String viewId, String widgetconfigurationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ui-views/{view-id}/widgetconfigurations/{widgetconfiguration-id}"
            .replaceAll("\\{" + "view-id" + "\\}", apiClient.escapeString(viewId.toString()))
            .replaceAll("\\{" + "widgetconfiguration-id" + "\\}", apiClient.escapeString(widgetconfigurationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getWidgetConfigurationValidateBeforeCall(String viewId, String widgetconfigurationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'viewId' is set
        if (viewId == null) {
            throw new ApiException("Missing the required parameter 'viewId' when calling getWidgetConfiguration(Async)");
        }
        // verify the required parameter 'widgetconfigurationId' is set
        if (widgetconfigurationId == null) {
            throw new ApiException("Missing the required parameter 'widgetconfigurationId' when calling getWidgetConfiguration(Async)");
        }
        
        com.squareup.okhttp.Call call = getWidgetConfigurationCall(viewId, widgetconfigurationId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Returns Widget Configuration Information
     * Returns Information about a specific Widget Configuration. 
     * @param viewId  (required)
     * @param widgetconfigurationId  (required)
     * @return WidgetConfiguration
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public WidgetConfiguration getWidgetConfiguration(String viewId, String widgetconfigurationId) throws ApiException {
        ApiResponse<WidgetConfiguration> resp = getWidgetConfigurationWithHttpInfo(viewId, widgetconfigurationId);
        return resp.getData();
    }

    /**
     * Returns Widget Configuration Information
     * Returns Information about a specific Widget Configuration. 
     * @param viewId  (required)
     * @param widgetconfigurationId  (required)
     * @return ApiResponse&lt;WidgetConfiguration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<WidgetConfiguration> getWidgetConfigurationWithHttpInfo(String viewId, String widgetconfigurationId) throws ApiException {
        com.squareup.okhttp.Call call = getWidgetConfigurationValidateBeforeCall(viewId, widgetconfigurationId, null, null);
        Type localVarReturnType = new TypeToken<WidgetConfiguration>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns Widget Configuration Information (asynchronously)
     * Returns Information about a specific Widget Configuration. 
     * @param viewId  (required)
     * @param widgetconfigurationId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getWidgetConfigurationAsync(String viewId, String widgetconfigurationId, final ApiCallback<WidgetConfiguration> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getWidgetConfigurationValidateBeforeCall(viewId, widgetconfigurationId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<WidgetConfiguration>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listViews
     * @param tag The tag for which associated views to be queried. (optional)
     * @param viewIds Ids of the Views (optional)
     * @param widgetId Id of widget configuration (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listViewsCall(String tag, String viewIds, String widgetId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ui-views";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (tag != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("tag", tag));
        if (viewIds != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("view_ids", viewIds));
        if (widgetId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("widget_id", widgetId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listViewsValidateBeforeCall(String tag, String viewIds, String widgetId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listViewsCall(tag, viewIds, widgetId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Returns the Views based on query criteria defined in ViewQueryParameters.
     * If no query params are specified then all the views entitled for the user are returned. The views to which a user is entitled to include the views created by the user and the shared views. 
     * @param tag The tag for which associated views to be queried. (optional)
     * @param viewIds Ids of the Views (optional)
     * @param widgetId Id of widget configuration (optional)
     * @return ViewList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ViewList listViews(String tag, String viewIds, String widgetId) throws ApiException {
        ApiResponse<ViewList> resp = listViewsWithHttpInfo(tag, viewIds, widgetId);
        return resp.getData();
    }

    /**
     * Returns the Views based on query criteria defined in ViewQueryParameters.
     * If no query params are specified then all the views entitled for the user are returned. The views to which a user is entitled to include the views created by the user and the shared views. 
     * @param tag The tag for which associated views to be queried. (optional)
     * @param viewIds Ids of the Views (optional)
     * @param widgetId Id of widget configuration (optional)
     * @return ApiResponse&lt;ViewList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ViewList> listViewsWithHttpInfo(String tag, String viewIds, String widgetId) throws ApiException {
        com.squareup.okhttp.Call call = listViewsValidateBeforeCall(tag, viewIds, widgetId, null, null);
        Type localVarReturnType = new TypeToken<ViewList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns the Views based on query criteria defined in ViewQueryParameters. (asynchronously)
     * If no query params are specified then all the views entitled for the user are returned. The views to which a user is entitled to include the views created by the user and the shared views. 
     * @param tag The tag for which associated views to be queried. (optional)
     * @param viewIds Ids of the Views (optional)
     * @param widgetId Id of widget configuration (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listViewsAsync(String tag, String viewIds, String widgetId, final ApiCallback<ViewList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listViewsValidateBeforeCall(tag, viewIds, widgetId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ViewList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listWidgetConfigurations
     * @param viewId  (required)
     * @param container Id of the container (optional)
     * @param widgetIds Ids of the WidgetConfigurations (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listWidgetConfigurationsCall(String viewId, String container, String widgetIds, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ui-views/{view-id}/widgetconfigurations"
            .replaceAll("\\{" + "view-id" + "\\}", apiClient.escapeString(viewId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (container != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("container", container));
        if (widgetIds != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("widget_ids", widgetIds));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listWidgetConfigurationsValidateBeforeCall(String viewId, String container, String widgetIds, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'viewId' is set
        if (viewId == null) {
            throw new ApiException("Missing the required parameter 'viewId' when calling listWidgetConfigurations(Async)");
        }
        
        com.squareup.okhttp.Call call = listWidgetConfigurationsCall(viewId, container, widgetIds, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Returns the Widget Configurations based on query criteria defined in WidgetQueryParameters.
     * If no query params are specified then all the Widget Configurations of the specified view are returned. 
     * @param viewId  (required)
     * @param container Id of the container (optional)
     * @param widgetIds Ids of the WidgetConfigurations (optional)
     * @return WidgetConfigurationList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public WidgetConfigurationList listWidgetConfigurations(String viewId, String container, String widgetIds) throws ApiException {
        ApiResponse<WidgetConfigurationList> resp = listWidgetConfigurationsWithHttpInfo(viewId, container, widgetIds);
        return resp.getData();
    }

    /**
     * Returns the Widget Configurations based on query criteria defined in WidgetQueryParameters.
     * If no query params are specified then all the Widget Configurations of the specified view are returned. 
     * @param viewId  (required)
     * @param container Id of the container (optional)
     * @param widgetIds Ids of the WidgetConfigurations (optional)
     * @return ApiResponse&lt;WidgetConfigurationList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<WidgetConfigurationList> listWidgetConfigurationsWithHttpInfo(String viewId, String container, String widgetIds) throws ApiException {
        com.squareup.okhttp.Call call = listWidgetConfigurationsValidateBeforeCall(viewId, container, widgetIds, null, null);
        Type localVarReturnType = new TypeToken<WidgetConfigurationList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns the Widget Configurations based on query criteria defined in WidgetQueryParameters. (asynchronously)
     * If no query params are specified then all the Widget Configurations of the specified view are returned. 
     * @param viewId  (required)
     * @param container Id of the container (optional)
     * @param widgetIds Ids of the WidgetConfigurations (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listWidgetConfigurationsAsync(String viewId, String container, String widgetIds, final ApiCallback<WidgetConfigurationList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listWidgetConfigurationsValidateBeforeCall(viewId, container, widgetIds, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<WidgetConfigurationList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateView
     * @param body  (required)
     * @param viewId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateViewCall(View body, String viewId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/ui-views/{view-id}"
            .replaceAll("\\{" + "view-id" + "\\}", apiClient.escapeString(viewId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateViewValidateBeforeCall(View body, String viewId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateView(Async)");
        }
        // verify the required parameter 'viewId' is set
        if (viewId == null) {
            throw new ApiException("Missing the required parameter 'viewId' when calling updateView(Async)");
        }
        
        com.squareup.okhttp.Call call = updateViewCall(body, viewId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update View
     * Update View
     * @param body  (required)
     * @param viewId  (required)
     * @return View
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public View updateView(View body, String viewId) throws ApiException {
        ApiResponse<View> resp = updateViewWithHttpInfo(body, viewId);
        return resp.getData();
    }

    /**
     * Update View
     * Update View
     * @param body  (required)
     * @param viewId  (required)
     * @return ApiResponse&lt;View&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<View> updateViewWithHttpInfo(View body, String viewId) throws ApiException {
        com.squareup.okhttp.Call call = updateViewValidateBeforeCall(body, viewId, null, null);
        Type localVarReturnType = new TypeToken<View>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update View (asynchronously)
     * Update View
     * @param body  (required)
     * @param viewId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateViewAsync(View body, String viewId, final ApiCallback<View> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateViewValidateBeforeCall(body, viewId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<View>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateWidgetConfiguration
     * @param body  (required)
     * @param viewId  (required)
     * @param widgetconfigurationId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateWidgetConfigurationCall(WidgetConfiguration body, String viewId, String widgetconfigurationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/ui-views/{view-id}/widgetconfigurations/{widgetconfiguration-id}"
            .replaceAll("\\{" + "view-id" + "\\}", apiClient.escapeString(viewId.toString()))
            .replaceAll("\\{" + "widgetconfiguration-id" + "\\}", apiClient.escapeString(widgetconfigurationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateWidgetConfigurationValidateBeforeCall(WidgetConfiguration body, String viewId, String widgetconfigurationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateWidgetConfiguration(Async)");
        }
        // verify the required parameter 'viewId' is set
        if (viewId == null) {
            throw new ApiException("Missing the required parameter 'viewId' when calling updateWidgetConfiguration(Async)");
        }
        // verify the required parameter 'widgetconfigurationId' is set
        if (widgetconfigurationId == null) {
            throw new ApiException("Missing the required parameter 'widgetconfigurationId' when calling updateWidgetConfiguration(Async)");
        }
        
        com.squareup.okhttp.Call call = updateWidgetConfigurationCall(body, viewId, widgetconfigurationId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update Widget Configuration
     * Updates the widget at the given view. If the widget is referenced by other views, then the widget will be updated in all the views that it is part of. 
     * @param body  (required)
     * @param viewId  (required)
     * @param widgetconfigurationId  (required)
     * @return WidgetConfiguration
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public WidgetConfiguration updateWidgetConfiguration(WidgetConfiguration body, String viewId, String widgetconfigurationId) throws ApiException {
        ApiResponse<WidgetConfiguration> resp = updateWidgetConfigurationWithHttpInfo(body, viewId, widgetconfigurationId);
        return resp.getData();
    }

    /**
     * Update Widget Configuration
     * Updates the widget at the given view. If the widget is referenced by other views, then the widget will be updated in all the views that it is part of. 
     * @param body  (required)
     * @param viewId  (required)
     * @param widgetconfigurationId  (required)
     * @return ApiResponse&lt;WidgetConfiguration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<WidgetConfiguration> updateWidgetConfigurationWithHttpInfo(WidgetConfiguration body, String viewId, String widgetconfigurationId) throws ApiException {
        com.squareup.okhttp.Call call = updateWidgetConfigurationValidateBeforeCall(body, viewId, widgetconfigurationId, null, null);
        Type localVarReturnType = new TypeToken<WidgetConfiguration>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update Widget Configuration (asynchronously)
     * Updates the widget at the given view. If the widget is referenced by other views, then the widget will be updated in all the views that it is part of. 
     * @param body  (required)
     * @param viewId  (required)
     * @param widgetconfigurationId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateWidgetConfigurationAsync(WidgetConfiguration body, String viewId, String widgetconfigurationId, final ApiCallback<WidgetConfiguration> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateWidgetConfigurationValidateBeforeCall(body, viewId, widgetconfigurationId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<WidgetConfiguration>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
