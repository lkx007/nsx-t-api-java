/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.AddIntelligenceClusterNodeVMInfo;
import io.swagger.client.model.ApiError;
import io.swagger.client.model.IntelligenceClusterNodeVMDeploymentRequest;
import io.swagger.client.model.IntelligenceClusterNodeVMDeploymentRequestList;
import io.swagger.client.model.IntelligenceClusterNodeVMDeploymentStatusReport;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class NsxIntelligenceDeploymentsApi {
    private ApiClient apiClient;

    public NsxIntelligenceDeploymentsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public NsxIntelligenceDeploymentsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addPaceClusterNodeVM
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addPaceClusterNodeVMCall(AddIntelligenceClusterNodeVMInfo body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/intelligence/nodes/deployments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addPaceClusterNodeVMValidateBeforeCall(AddIntelligenceClusterNodeVMInfo body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addPaceClusterNodeVM(Async)");
        }
        
        com.squareup.okhttp.Call call = addPaceClusterNodeVMCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Deploy and register a Intelligence cluster node VM
     * Deploys a Intelligence cluster node VM as specified by the deployment config. 
     * @param body  (required)
     * @return IntelligenceClusterNodeVMDeploymentRequestList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public IntelligenceClusterNodeVMDeploymentRequestList addPaceClusterNodeVM(AddIntelligenceClusterNodeVMInfo body) throws ApiException {
        ApiResponse<IntelligenceClusterNodeVMDeploymentRequestList> resp = addPaceClusterNodeVMWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Deploy and register a Intelligence cluster node VM
     * Deploys a Intelligence cluster node VM as specified by the deployment config. 
     * @param body  (required)
     * @return ApiResponse&lt;IntelligenceClusterNodeVMDeploymentRequestList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<IntelligenceClusterNodeVMDeploymentRequestList> addPaceClusterNodeVMWithHttpInfo(AddIntelligenceClusterNodeVMInfo body) throws ApiException {
        com.squareup.okhttp.Call call = addPaceClusterNodeVMValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<IntelligenceClusterNodeVMDeploymentRequestList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Deploy and register a Intelligence cluster node VM (asynchronously)
     * Deploys a Intelligence cluster node VM as specified by the deployment config. 
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addPaceClusterNodeVMAsync(AddIntelligenceClusterNodeVMInfo body, final ApiCallback<IntelligenceClusterNodeVMDeploymentRequestList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addPaceClusterNodeVMValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<IntelligenceClusterNodeVMDeploymentRequestList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteAutoDeployedPaceClusterNodeVMDelete
     * @param nodeId  (required)
     * @param forceDelete Delete by force (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteAutoDeployedPaceClusterNodeVMDeleteCall(String nodeId, Boolean forceDelete, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/intelligence/nodes/deployments/{node-id}?action=delete"
            .replaceAll("\\{" + "node-id" + "\\}", apiClient.escapeString(nodeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (forceDelete != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("force_delete", forceDelete));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteAutoDeployedPaceClusterNodeVMDeleteValidateBeforeCall(String nodeId, Boolean forceDelete, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'nodeId' is set
        if (nodeId == null) {
            throw new ApiException("Missing the required parameter 'nodeId' when calling deleteAutoDeployedPaceClusterNodeVMDelete(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteAutoDeployedPaceClusterNodeVMDeleteCall(nodeId, forceDelete, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Attempt to delete an auto-deployed cluster node VM
     * Attempts to unregister and undeploy a specified auto-deployed cluster node VM. If it is a member of a cluster, then the VM will be automatically detached from the cluster before being unregistered and undeployed. Alternatively, if the original deployment attempt failed or the VM is not found, cleans up the deployment information associated with the deployment attempt. Note: If a VM has been successfully auto-deployed, then the associated deployment information will not be deleted unless and until the VM is successfully deleted. 
     * @param nodeId  (required)
     * @param forceDelete Delete by force (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteAutoDeployedPaceClusterNodeVMDelete(String nodeId, Boolean forceDelete) throws ApiException {
        deleteAutoDeployedPaceClusterNodeVMDeleteWithHttpInfo(nodeId, forceDelete);
    }

    /**
     * Attempt to delete an auto-deployed cluster node VM
     * Attempts to unregister and undeploy a specified auto-deployed cluster node VM. If it is a member of a cluster, then the VM will be automatically detached from the cluster before being unregistered and undeployed. Alternatively, if the original deployment attempt failed or the VM is not found, cleans up the deployment information associated with the deployment attempt. Note: If a VM has been successfully auto-deployed, then the associated deployment information will not be deleted unless and until the VM is successfully deleted. 
     * @param nodeId  (required)
     * @param forceDelete Delete by force (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteAutoDeployedPaceClusterNodeVMDeleteWithHttpInfo(String nodeId, Boolean forceDelete) throws ApiException {
        com.squareup.okhttp.Call call = deleteAutoDeployedPaceClusterNodeVMDeleteValidateBeforeCall(nodeId, forceDelete, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attempt to delete an auto-deployed cluster node VM (asynchronously)
     * Attempts to unregister and undeploy a specified auto-deployed cluster node VM. If it is a member of a cluster, then the VM will be automatically detached from the cluster before being unregistered and undeployed. Alternatively, if the original deployment attempt failed or the VM is not found, cleans up the deployment information associated with the deployment attempt. Note: If a VM has been successfully auto-deployed, then the associated deployment information will not be deleted unless and until the VM is successfully deleted. 
     * @param nodeId  (required)
     * @param forceDelete Delete by force (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteAutoDeployedPaceClusterNodeVMDeleteAsync(String nodeId, Boolean forceDelete, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteAutoDeployedPaceClusterNodeVMDeleteValidateBeforeCall(nodeId, forceDelete, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for listPaceClusterNodeVMDeploymentRequests
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listPaceClusterNodeVMDeploymentRequestsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/intelligence/nodes/deployments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listPaceClusterNodeVMDeploymentRequestsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listPaceClusterNodeVMDeploymentRequestsCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Returns info for all cluster node VM auto-deployment attempts
     * Returns request information for every attempted deployment of a cluster node VM. 
     * @return IntelligenceClusterNodeVMDeploymentRequestList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public IntelligenceClusterNodeVMDeploymentRequestList listPaceClusterNodeVMDeploymentRequests() throws ApiException {
        ApiResponse<IntelligenceClusterNodeVMDeploymentRequestList> resp = listPaceClusterNodeVMDeploymentRequestsWithHttpInfo();
        return resp.getData();
    }

    /**
     * Returns info for all cluster node VM auto-deployment attempts
     * Returns request information for every attempted deployment of a cluster node VM. 
     * @return ApiResponse&lt;IntelligenceClusterNodeVMDeploymentRequestList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<IntelligenceClusterNodeVMDeploymentRequestList> listPaceClusterNodeVMDeploymentRequestsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = listPaceClusterNodeVMDeploymentRequestsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<IntelligenceClusterNodeVMDeploymentRequestList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns info for all cluster node VM auto-deployment attempts (asynchronously)
     * Returns request information for every attempted deployment of a cluster node VM. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listPaceClusterNodeVMDeploymentRequestsAsync(final ApiCallback<IntelligenceClusterNodeVMDeploymentRequestList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listPaceClusterNodeVMDeploymentRequestsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<IntelligenceClusterNodeVMDeploymentRequestList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for readPaceClusterNodeVMDeploymentRequest
     * @param nodeId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call readPaceClusterNodeVMDeploymentRequestCall(String nodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/intelligence/nodes/deployments/{node-id}"
            .replaceAll("\\{" + "node-id" + "\\}", apiClient.escapeString(nodeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call readPaceClusterNodeVMDeploymentRequestValidateBeforeCall(String nodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'nodeId' is set
        if (nodeId == null) {
            throw new ApiException("Missing the required parameter 'nodeId' when calling readPaceClusterNodeVMDeploymentRequest(Async)");
        }
        
        com.squareup.okhttp.Call call = readPaceClusterNodeVMDeploymentRequestCall(nodeId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Returns info for a Intelligence cluster node VM auto-deployment attempt
     * Returns deployment request information for a specific attempted deployment of a cluster node VM. 
     * @param nodeId  (required)
     * @return IntelligenceClusterNodeVMDeploymentRequest
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public IntelligenceClusterNodeVMDeploymentRequest readPaceClusterNodeVMDeploymentRequest(String nodeId) throws ApiException {
        ApiResponse<IntelligenceClusterNodeVMDeploymentRequest> resp = readPaceClusterNodeVMDeploymentRequestWithHttpInfo(nodeId);
        return resp.getData();
    }

    /**
     * Returns info for a Intelligence cluster node VM auto-deployment attempt
     * Returns deployment request information for a specific attempted deployment of a cluster node VM. 
     * @param nodeId  (required)
     * @return ApiResponse&lt;IntelligenceClusterNodeVMDeploymentRequest&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<IntelligenceClusterNodeVMDeploymentRequest> readPaceClusterNodeVMDeploymentRequestWithHttpInfo(String nodeId) throws ApiException {
        com.squareup.okhttp.Call call = readPaceClusterNodeVMDeploymentRequestValidateBeforeCall(nodeId, null, null);
        Type localVarReturnType = new TypeToken<IntelligenceClusterNodeVMDeploymentRequest>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns info for a Intelligence cluster node VM auto-deployment attempt (asynchronously)
     * Returns deployment request information for a specific attempted deployment of a cluster node VM. 
     * @param nodeId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call readPaceClusterNodeVMDeploymentRequestAsync(String nodeId, final ApiCallback<IntelligenceClusterNodeVMDeploymentRequest> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = readPaceClusterNodeVMDeploymentRequestValidateBeforeCall(nodeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<IntelligenceClusterNodeVMDeploymentRequest>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for readPaceClusterNodeVMDeploymentStatus
     * @param nodeId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call readPaceClusterNodeVMDeploymentStatusCall(String nodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/intelligence/nodes/deployments/{node-id}/status"
            .replaceAll("\\{" + "node-id" + "\\}", apiClient.escapeString(nodeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call readPaceClusterNodeVMDeploymentStatusValidateBeforeCall(String nodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'nodeId' is set
        if (nodeId == null) {
            throw new ApiException("Missing the required parameter 'nodeId' when calling readPaceClusterNodeVMDeploymentStatus(Async)");
        }
        
        com.squareup.okhttp.Call call = readPaceClusterNodeVMDeploymentStatusCall(nodeId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Returns the status of the VM creation/deletion
     * Returns the current deployment or undeployment status for a VM along with any other relevant current information, such as error messages. 
     * @param nodeId  (required)
     * @return IntelligenceClusterNodeVMDeploymentStatusReport
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public IntelligenceClusterNodeVMDeploymentStatusReport readPaceClusterNodeVMDeploymentStatus(String nodeId) throws ApiException {
        ApiResponse<IntelligenceClusterNodeVMDeploymentStatusReport> resp = readPaceClusterNodeVMDeploymentStatusWithHttpInfo(nodeId);
        return resp.getData();
    }

    /**
     * Returns the status of the VM creation/deletion
     * Returns the current deployment or undeployment status for a VM along with any other relevant current information, such as error messages. 
     * @param nodeId  (required)
     * @return ApiResponse&lt;IntelligenceClusterNodeVMDeploymentStatusReport&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<IntelligenceClusterNodeVMDeploymentStatusReport> readPaceClusterNodeVMDeploymentStatusWithHttpInfo(String nodeId) throws ApiException {
        com.squareup.okhttp.Call call = readPaceClusterNodeVMDeploymentStatusValidateBeforeCall(nodeId, null, null);
        Type localVarReturnType = new TypeToken<IntelligenceClusterNodeVMDeploymentStatusReport>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns the status of the VM creation/deletion (asynchronously)
     * Returns the current deployment or undeployment status for a VM along with any other relevant current information, such as error messages. 
     * @param nodeId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call readPaceClusterNodeVMDeploymentStatusAsync(String nodeId, final ApiCallback<IntelligenceClusterNodeVMDeploymentStatusReport> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = readPaceClusterNodeVMDeploymentStatusValidateBeforeCall(nodeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<IntelligenceClusterNodeVMDeploymentStatusReport>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
