/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ApiError;
import io.swagger.client.model.BaseHostSwitchProfile;
import io.swagger.client.model.HostSwitchProfilesListResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ManagementPlaneApiNetworkTransportHostswitchProfilesApi {
    private ApiClient apiClient;

    public ManagementPlaneApiNetworkTransportHostswitchProfilesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ManagementPlaneApiNetworkTransportHostswitchProfilesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createHostSwitchProfile
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createHostSwitchProfileCall(BaseHostSwitchProfile body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/host-switch-profiles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createHostSwitchProfileValidateBeforeCall(BaseHostSwitchProfile body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createHostSwitchProfile(Async)");
        }
        
        com.squareup.okhttp.Call call = createHostSwitchProfileCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create a Hostswitch Profile
     * Creates a hostswitch profile. The resource_type is required. For uplink profiles, the teaming and policy parameters are required. By default, the mtu is 1600 and the transport_vlan is 0. The supported MTU range is 1280 through (uplink_mtu_threshold). (uplink_mtu_threshold) is 9000 by default. Range can be extended by modifying (uplink_mtu_threshold) in SwitchingGlobalConfig to the required upper threshold. 
     * @param body  (required)
     * @return BaseHostSwitchProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BaseHostSwitchProfile createHostSwitchProfile(BaseHostSwitchProfile body) throws ApiException {
        ApiResponse<BaseHostSwitchProfile> resp = createHostSwitchProfileWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create a Hostswitch Profile
     * Creates a hostswitch profile. The resource_type is required. For uplink profiles, the teaming and policy parameters are required. By default, the mtu is 1600 and the transport_vlan is 0. The supported MTU range is 1280 through (uplink_mtu_threshold). (uplink_mtu_threshold) is 9000 by default. Range can be extended by modifying (uplink_mtu_threshold) in SwitchingGlobalConfig to the required upper threshold. 
     * @param body  (required)
     * @return ApiResponse&lt;BaseHostSwitchProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BaseHostSwitchProfile> createHostSwitchProfileWithHttpInfo(BaseHostSwitchProfile body) throws ApiException {
        com.squareup.okhttp.Call call = createHostSwitchProfileValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<BaseHostSwitchProfile>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a Hostswitch Profile (asynchronously)
     * Creates a hostswitch profile. The resource_type is required. For uplink profiles, the teaming and policy parameters are required. By default, the mtu is 1600 and the transport_vlan is 0. The supported MTU range is 1280 through (uplink_mtu_threshold). (uplink_mtu_threshold) is 9000 by default. Range can be extended by modifying (uplink_mtu_threshold) in SwitchingGlobalConfig to the required upper threshold. 
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createHostSwitchProfileAsync(BaseHostSwitchProfile body, final ApiCallback<BaseHostSwitchProfile> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createHostSwitchProfileValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BaseHostSwitchProfile>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteHostSwitchProfile
     * @param hostSwitchProfileId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteHostSwitchProfileCall(String hostSwitchProfileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/host-switch-profiles/{host-switch-profile-id}"
            .replaceAll("\\{" + "host-switch-profile-id" + "\\}", apiClient.escapeString(hostSwitchProfileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteHostSwitchProfileValidateBeforeCall(String hostSwitchProfileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'hostSwitchProfileId' is set
        if (hostSwitchProfileId == null) {
            throw new ApiException("Missing the required parameter 'hostSwitchProfileId' when calling deleteHostSwitchProfile(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteHostSwitchProfileCall(hostSwitchProfileId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete a Hostswitch Profile
     * Deletes a specified hostswitch profile.
     * @param hostSwitchProfileId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteHostSwitchProfile(String hostSwitchProfileId) throws ApiException {
        deleteHostSwitchProfileWithHttpInfo(hostSwitchProfileId);
    }

    /**
     * Delete a Hostswitch Profile
     * Deletes a specified hostswitch profile.
     * @param hostSwitchProfileId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteHostSwitchProfileWithHttpInfo(String hostSwitchProfileId) throws ApiException {
        com.squareup.okhttp.Call call = deleteHostSwitchProfileValidateBeforeCall(hostSwitchProfileId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a Hostswitch Profile (asynchronously)
     * Deletes a specified hostswitch profile.
     * @param hostSwitchProfileId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteHostSwitchProfileAsync(String hostSwitchProfileId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteHostSwitchProfileValidateBeforeCall(hostSwitchProfileId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getHostSwitchProfile
     * @param hostSwitchProfileId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getHostSwitchProfileCall(String hostSwitchProfileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/host-switch-profiles/{host-switch-profile-id}"
            .replaceAll("\\{" + "host-switch-profile-id" + "\\}", apiClient.escapeString(hostSwitchProfileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getHostSwitchProfileValidateBeforeCall(String hostSwitchProfileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'hostSwitchProfileId' is set
        if (hostSwitchProfileId == null) {
            throw new ApiException("Missing the required parameter 'hostSwitchProfileId' when calling getHostSwitchProfile(Async)");
        }
        
        com.squareup.okhttp.Call call = getHostSwitchProfileCall(hostSwitchProfileId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get a Hostswitch Profile by ID
     * Returns information about a specified hostswitch profile.
     * @param hostSwitchProfileId  (required)
     * @return BaseHostSwitchProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BaseHostSwitchProfile getHostSwitchProfile(String hostSwitchProfileId) throws ApiException {
        ApiResponse<BaseHostSwitchProfile> resp = getHostSwitchProfileWithHttpInfo(hostSwitchProfileId);
        return resp.getData();
    }

    /**
     * Get a Hostswitch Profile by ID
     * Returns information about a specified hostswitch profile.
     * @param hostSwitchProfileId  (required)
     * @return ApiResponse&lt;BaseHostSwitchProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BaseHostSwitchProfile> getHostSwitchProfileWithHttpInfo(String hostSwitchProfileId) throws ApiException {
        com.squareup.okhttp.Call call = getHostSwitchProfileValidateBeforeCall(hostSwitchProfileId, null, null);
        Type localVarReturnType = new TypeToken<BaseHostSwitchProfile>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a Hostswitch Profile by ID (asynchronously)
     * Returns information about a specified hostswitch profile.
     * @param hostSwitchProfileId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getHostSwitchProfileAsync(String hostSwitchProfileId, final ApiCallback<BaseHostSwitchProfile> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getHostSwitchProfileValidateBeforeCall(hostSwitchProfileId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BaseHostSwitchProfile>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listHostSwitchProfiles
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param hostswitchProfileType Supported HostSwitch profiles. (optional)
     * @param includeSystemOwned Whether the list result contains system resources (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param uplinkTeamingPolicyName The host switch profile&#x27;s uplink teaming policy name (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listHostSwitchProfilesCall(String cursor, String hostswitchProfileType, Boolean includeSystemOwned, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, String uplinkTeamingPolicyName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/host-switch-profiles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (hostswitchProfileType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("hostswitch_profile_type", hostswitchProfileType));
        if (includeSystemOwned != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("include_system_owned", includeSystemOwned));
        if (includedFields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("included_fields", includedFields));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page_size", pageSize));
        if (sortAscending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_ascending", sortAscending));
        if (sortBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_by", sortBy));
        if (uplinkTeamingPolicyName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("uplink_teaming_policy_name", uplinkTeamingPolicyName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listHostSwitchProfilesValidateBeforeCall(String cursor, String hostswitchProfileType, Boolean includeSystemOwned, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, String uplinkTeamingPolicyName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listHostSwitchProfilesCall(cursor, hostswitchProfileType, includeSystemOwned, includedFields, pageSize, sortAscending, sortBy, uplinkTeamingPolicyName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List Hostswitch Profiles
     * Returns information about the configured hostswitch profiles. Hostswitch profiles define networking policies for hostswitches (sometimes referred to as bridges in OVS). Currently, only uplink teaming is supported. Uplink teaming allows NSX to load balance traffic across different physical NICs (PNICs) on the hypervisor hosts. Multiple teaming policies are supported, including LACP active, LACP passive, load balancing based on source ID, and failover order. 
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param hostswitchProfileType Supported HostSwitch profiles. (optional)
     * @param includeSystemOwned Whether the list result contains system resources (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param uplinkTeamingPolicyName The host switch profile&#x27;s uplink teaming policy name (optional)
     * @return HostSwitchProfilesListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HostSwitchProfilesListResult listHostSwitchProfiles(String cursor, String hostswitchProfileType, Boolean includeSystemOwned, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, String uplinkTeamingPolicyName) throws ApiException {
        ApiResponse<HostSwitchProfilesListResult> resp = listHostSwitchProfilesWithHttpInfo(cursor, hostswitchProfileType, includeSystemOwned, includedFields, pageSize, sortAscending, sortBy, uplinkTeamingPolicyName);
        return resp.getData();
    }

    /**
     * List Hostswitch Profiles
     * Returns information about the configured hostswitch profiles. Hostswitch profiles define networking policies for hostswitches (sometimes referred to as bridges in OVS). Currently, only uplink teaming is supported. Uplink teaming allows NSX to load balance traffic across different physical NICs (PNICs) on the hypervisor hosts. Multiple teaming policies are supported, including LACP active, LACP passive, load balancing based on source ID, and failover order. 
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param hostswitchProfileType Supported HostSwitch profiles. (optional)
     * @param includeSystemOwned Whether the list result contains system resources (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param uplinkTeamingPolicyName The host switch profile&#x27;s uplink teaming policy name (optional)
     * @return ApiResponse&lt;HostSwitchProfilesListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HostSwitchProfilesListResult> listHostSwitchProfilesWithHttpInfo(String cursor, String hostswitchProfileType, Boolean includeSystemOwned, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, String uplinkTeamingPolicyName) throws ApiException {
        com.squareup.okhttp.Call call = listHostSwitchProfilesValidateBeforeCall(cursor, hostswitchProfileType, includeSystemOwned, includedFields, pageSize, sortAscending, sortBy, uplinkTeamingPolicyName, null, null);
        Type localVarReturnType = new TypeToken<HostSwitchProfilesListResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List Hostswitch Profiles (asynchronously)
     * Returns information about the configured hostswitch profiles. Hostswitch profiles define networking policies for hostswitches (sometimes referred to as bridges in OVS). Currently, only uplink teaming is supported. Uplink teaming allows NSX to load balance traffic across different physical NICs (PNICs) on the hypervisor hosts. Multiple teaming policies are supported, including LACP active, LACP passive, load balancing based on source ID, and failover order. 
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param hostswitchProfileType Supported HostSwitch profiles. (optional)
     * @param includeSystemOwned Whether the list result contains system resources (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param uplinkTeamingPolicyName The host switch profile&#x27;s uplink teaming policy name (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listHostSwitchProfilesAsync(String cursor, String hostswitchProfileType, Boolean includeSystemOwned, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, String uplinkTeamingPolicyName, final ApiCallback<HostSwitchProfilesListResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listHostSwitchProfilesValidateBeforeCall(cursor, hostswitchProfileType, includeSystemOwned, includedFields, pageSize, sortAscending, sortBy, uplinkTeamingPolicyName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HostSwitchProfilesListResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateHostSwitchProfile
     * @param body  (required)
     * @param hostSwitchProfileId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateHostSwitchProfileCall(BaseHostSwitchProfile body, String hostSwitchProfileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/host-switch-profiles/{host-switch-profile-id}"
            .replaceAll("\\{" + "host-switch-profile-id" + "\\}", apiClient.escapeString(hostSwitchProfileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateHostSwitchProfileValidateBeforeCall(BaseHostSwitchProfile body, String hostSwitchProfileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateHostSwitchProfile(Async)");
        }
        // verify the required parameter 'hostSwitchProfileId' is set
        if (hostSwitchProfileId == null) {
            throw new ApiException("Missing the required parameter 'hostSwitchProfileId' when calling updateHostSwitchProfile(Async)");
        }
        
        com.squareup.okhttp.Call call = updateHostSwitchProfileCall(body, hostSwitchProfileId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update a Hostswitch Profile
     * Modifies a specified hostswitch profile. The body of the PUT request must include the resource_type. For uplink profiles, the put request must also include teaming parameters. Modifiable attributes include display_name, mtu, and transport_vlan. For uplink teaming policies, uplink_name and policy are also modifiable. 
     * @param body  (required)
     * @param hostSwitchProfileId  (required)
     * @return BaseHostSwitchProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BaseHostSwitchProfile updateHostSwitchProfile(BaseHostSwitchProfile body, String hostSwitchProfileId) throws ApiException {
        ApiResponse<BaseHostSwitchProfile> resp = updateHostSwitchProfileWithHttpInfo(body, hostSwitchProfileId);
        return resp.getData();
    }

    /**
     * Update a Hostswitch Profile
     * Modifies a specified hostswitch profile. The body of the PUT request must include the resource_type. For uplink profiles, the put request must also include teaming parameters. Modifiable attributes include display_name, mtu, and transport_vlan. For uplink teaming policies, uplink_name and policy are also modifiable. 
     * @param body  (required)
     * @param hostSwitchProfileId  (required)
     * @return ApiResponse&lt;BaseHostSwitchProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BaseHostSwitchProfile> updateHostSwitchProfileWithHttpInfo(BaseHostSwitchProfile body, String hostSwitchProfileId) throws ApiException {
        com.squareup.okhttp.Call call = updateHostSwitchProfileValidateBeforeCall(body, hostSwitchProfileId, null, null);
        Type localVarReturnType = new TypeToken<BaseHostSwitchProfile>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a Hostswitch Profile (asynchronously)
     * Modifies a specified hostswitch profile. The body of the PUT request must include the resource_type. For uplink profiles, the put request must also include teaming parameters. Modifiable attributes include display_name, mtu, and transport_vlan. For uplink teaming policies, uplink_name and policy are also modifiable. 
     * @param body  (required)
     * @param hostSwitchProfileId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateHostSwitchProfileAsync(BaseHostSwitchProfile body, String hostSwitchProfileId, final ApiCallback<BaseHostSwitchProfile> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateHostSwitchProfileValidateBeforeCall(body, hostSwitchProfileId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BaseHostSwitchProfile>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
