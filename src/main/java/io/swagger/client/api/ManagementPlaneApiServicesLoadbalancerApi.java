/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ApiError;
import io.swagger.client.model.LbAppProfile;
import io.swagger.client.model.LbAppProfileListResult;
import io.swagger.client.model.LbClientSslProfile;
import io.swagger.client.model.LbClientSslProfileListResult;
import io.swagger.client.model.LbMonitor;
import io.swagger.client.model.LbMonitorListResult;
import io.swagger.client.model.LbNodeUsage;
import io.swagger.client.model.LbNodeUsageSummary;
import io.swagger.client.model.LbPersistenceProfile;
import io.swagger.client.model.LbPersistenceProfileListResult;
import io.swagger.client.model.LbPool;
import io.swagger.client.model.LbPoolListResult;
import io.swagger.client.model.LbPoolStatistics;
import io.swagger.client.model.LbPoolStatisticsListResult;
import io.swagger.client.model.LbPoolStatus;
import io.swagger.client.model.LbPoolStatusListResult;
import io.swagger.client.model.LbRule;
import io.swagger.client.model.LbRuleListResult;
import io.swagger.client.model.LbServerSslProfile;
import io.swagger.client.model.LbServerSslProfileListResult;
import io.swagger.client.model.LbService;
import io.swagger.client.model.LbServiceDebugInfo;
import io.swagger.client.model.LbServiceListResult;
import io.swagger.client.model.LbServiceStatistics;
import io.swagger.client.model.LbServiceStatus;
import io.swagger.client.model.LbServiceUsage;
import io.swagger.client.model.LbSslCipherAndProtocolListResult;
import io.swagger.client.model.LbTcpProfile;
import io.swagger.client.model.LbTcpProfileListResult;
import io.swagger.client.model.LbVirtualServer;
import io.swagger.client.model.LbVirtualServerListResult;
import io.swagger.client.model.LbVirtualServerStatistics;
import io.swagger.client.model.LbVirtualServerStatisticsListResult;
import io.swagger.client.model.LbVirtualServerStatus;
import io.swagger.client.model.LbVirtualServerStatusListResult;
import io.swagger.client.model.LbVirtualServerWithRule;
import io.swagger.client.model.PoolMemberSettingList;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ManagementPlaneApiServicesLoadbalancerApi {
    private ApiClient apiClient;

    public ManagementPlaneApiServicesLoadbalancerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ManagementPlaneApiServicesLoadbalancerApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createLoadBalancerApplicationProfile
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createLoadBalancerApplicationProfileCall(LbAppProfile body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/loadbalancer/application-profiles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createLoadBalancerApplicationProfileValidateBeforeCall(LbAppProfile body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createLoadBalancerApplicationProfile(Async)");
        }
        
        com.squareup.okhttp.Call call = createLoadBalancerApplicationProfileCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create a load balancer application profile
     * Create a load balancer application profile. 
     * @param body  (required)
     * @return LbAppProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LbAppProfile createLoadBalancerApplicationProfile(LbAppProfile body) throws ApiException {
        ApiResponse<LbAppProfile> resp = createLoadBalancerApplicationProfileWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create a load balancer application profile
     * Create a load balancer application profile. 
     * @param body  (required)
     * @return ApiResponse&lt;LbAppProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LbAppProfile> createLoadBalancerApplicationProfileWithHttpInfo(LbAppProfile body) throws ApiException {
        com.squareup.okhttp.Call call = createLoadBalancerApplicationProfileValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<LbAppProfile>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a load balancer application profile (asynchronously)
     * Create a load balancer application profile. 
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createLoadBalancerApplicationProfileAsync(LbAppProfile body, final ApiCallback<LbAppProfile> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createLoadBalancerApplicationProfileValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LbAppProfile>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createLoadBalancerClientSslProfile
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createLoadBalancerClientSslProfileCall(LbClientSslProfile body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/loadbalancer/client-ssl-profiles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createLoadBalancerClientSslProfileValidateBeforeCall(LbClientSslProfile body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createLoadBalancerClientSslProfile(Async)");
        }
        
        com.squareup.okhttp.Call call = createLoadBalancerClientSslProfileCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create a load balancer client-ssl profile
     * Create a load balancer client-ssl profile. 
     * @param body  (required)
     * @return LbClientSslProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LbClientSslProfile createLoadBalancerClientSslProfile(LbClientSslProfile body) throws ApiException {
        ApiResponse<LbClientSslProfile> resp = createLoadBalancerClientSslProfileWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create a load balancer client-ssl profile
     * Create a load balancer client-ssl profile. 
     * @param body  (required)
     * @return ApiResponse&lt;LbClientSslProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LbClientSslProfile> createLoadBalancerClientSslProfileWithHttpInfo(LbClientSslProfile body) throws ApiException {
        com.squareup.okhttp.Call call = createLoadBalancerClientSslProfileValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<LbClientSslProfile>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a load balancer client-ssl profile (asynchronously)
     * Create a load balancer client-ssl profile. 
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createLoadBalancerClientSslProfileAsync(LbClientSslProfile body, final ApiCallback<LbClientSslProfile> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createLoadBalancerClientSslProfileValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LbClientSslProfile>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createLoadBalancerMonitor
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createLoadBalancerMonitorCall(LbMonitor body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/loadbalancer/monitors";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createLoadBalancerMonitorValidateBeforeCall(LbMonitor body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createLoadBalancerMonitor(Async)");
        }
        
        com.squareup.okhttp.Call call = createLoadBalancerMonitorCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create a load balancer monitor
     * Create a load balancer monitor. 
     * @param body  (required)
     * @return LbMonitor
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LbMonitor createLoadBalancerMonitor(LbMonitor body) throws ApiException {
        ApiResponse<LbMonitor> resp = createLoadBalancerMonitorWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create a load balancer monitor
     * Create a load balancer monitor. 
     * @param body  (required)
     * @return ApiResponse&lt;LbMonitor&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LbMonitor> createLoadBalancerMonitorWithHttpInfo(LbMonitor body) throws ApiException {
        com.squareup.okhttp.Call call = createLoadBalancerMonitorValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<LbMonitor>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a load balancer monitor (asynchronously)
     * Create a load balancer monitor. 
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createLoadBalancerMonitorAsync(LbMonitor body, final ApiCallback<LbMonitor> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createLoadBalancerMonitorValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LbMonitor>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createLoadBalancerPersistenceProfile
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createLoadBalancerPersistenceProfileCall(LbPersistenceProfile body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/loadbalancer/persistence-profiles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createLoadBalancerPersistenceProfileValidateBeforeCall(LbPersistenceProfile body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createLoadBalancerPersistenceProfile(Async)");
        }
        
        com.squareup.okhttp.Call call = createLoadBalancerPersistenceProfileCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create a load balancer persistence profile
     * Create a load balancer persistence profile. 
     * @param body  (required)
     * @return LbPersistenceProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LbPersistenceProfile createLoadBalancerPersistenceProfile(LbPersistenceProfile body) throws ApiException {
        ApiResponse<LbPersistenceProfile> resp = createLoadBalancerPersistenceProfileWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create a load balancer persistence profile
     * Create a load balancer persistence profile. 
     * @param body  (required)
     * @return ApiResponse&lt;LbPersistenceProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LbPersistenceProfile> createLoadBalancerPersistenceProfileWithHttpInfo(LbPersistenceProfile body) throws ApiException {
        com.squareup.okhttp.Call call = createLoadBalancerPersistenceProfileValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<LbPersistenceProfile>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a load balancer persistence profile (asynchronously)
     * Create a load balancer persistence profile. 
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createLoadBalancerPersistenceProfileAsync(LbPersistenceProfile body, final ApiCallback<LbPersistenceProfile> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createLoadBalancerPersistenceProfileValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LbPersistenceProfile>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createLoadBalancerPool
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createLoadBalancerPoolCall(LbPool body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/loadbalancer/pools";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createLoadBalancerPoolValidateBeforeCall(LbPool body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createLoadBalancerPool(Async)");
        }
        
        com.squareup.okhttp.Call call = createLoadBalancerPoolCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create a load balancer pool
     * Create a load balancer pool. 
     * @param body  (required)
     * @return LbPool
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LbPool createLoadBalancerPool(LbPool body) throws ApiException {
        ApiResponse<LbPool> resp = createLoadBalancerPoolWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create a load balancer pool
     * Create a load balancer pool. 
     * @param body  (required)
     * @return ApiResponse&lt;LbPool&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LbPool> createLoadBalancerPoolWithHttpInfo(LbPool body) throws ApiException {
        com.squareup.okhttp.Call call = createLoadBalancerPoolValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<LbPool>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a load balancer pool (asynchronously)
     * Create a load balancer pool. 
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createLoadBalancerPoolAsync(LbPool body, final ApiCallback<LbPool> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createLoadBalancerPoolValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LbPool>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createLoadBalancerRule
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createLoadBalancerRuleCall(LbRule body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/loadbalancer/rules";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createLoadBalancerRuleValidateBeforeCall(LbRule body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createLoadBalancerRule(Async)");
        }
        
        com.squareup.okhttp.Call call = createLoadBalancerRuleCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create a load balancer rule
     * Create a load balancer rule. 
     * @param body  (required)
     * @return LbRule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LbRule createLoadBalancerRule(LbRule body) throws ApiException {
        ApiResponse<LbRule> resp = createLoadBalancerRuleWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create a load balancer rule
     * Create a load balancer rule. 
     * @param body  (required)
     * @return ApiResponse&lt;LbRule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LbRule> createLoadBalancerRuleWithHttpInfo(LbRule body) throws ApiException {
        com.squareup.okhttp.Call call = createLoadBalancerRuleValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<LbRule>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a load balancer rule (asynchronously)
     * Create a load balancer rule. 
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createLoadBalancerRuleAsync(LbRule body, final ApiCallback<LbRule> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createLoadBalancerRuleValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LbRule>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createLoadBalancerServerSslProfile
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createLoadBalancerServerSslProfileCall(LbServerSslProfile body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/loadbalancer/server-ssl-profiles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createLoadBalancerServerSslProfileValidateBeforeCall(LbServerSslProfile body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createLoadBalancerServerSslProfile(Async)");
        }
        
        com.squareup.okhttp.Call call = createLoadBalancerServerSslProfileCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create a load balancer server-ssl profile
     * Create a load balancer server-ssl profile. 
     * @param body  (required)
     * @return LbServerSslProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LbServerSslProfile createLoadBalancerServerSslProfile(LbServerSslProfile body) throws ApiException {
        ApiResponse<LbServerSslProfile> resp = createLoadBalancerServerSslProfileWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create a load balancer server-ssl profile
     * Create a load balancer server-ssl profile. 
     * @param body  (required)
     * @return ApiResponse&lt;LbServerSslProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LbServerSslProfile> createLoadBalancerServerSslProfileWithHttpInfo(LbServerSslProfile body) throws ApiException {
        com.squareup.okhttp.Call call = createLoadBalancerServerSslProfileValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<LbServerSslProfile>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a load balancer server-ssl profile (asynchronously)
     * Create a load balancer server-ssl profile. 
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createLoadBalancerServerSslProfileAsync(LbServerSslProfile body, final ApiCallback<LbServerSslProfile> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createLoadBalancerServerSslProfileValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LbServerSslProfile>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createLoadBalancerService
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createLoadBalancerServiceCall(LbService body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/loadbalancer/services";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createLoadBalancerServiceValidateBeforeCall(LbService body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createLoadBalancerService(Async)");
        }
        
        com.squareup.okhttp.Call call = createLoadBalancerServiceCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create a load balancer service
     * Create a load balancer service. 
     * @param body  (required)
     * @return LbService
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LbService createLoadBalancerService(LbService body) throws ApiException {
        ApiResponse<LbService> resp = createLoadBalancerServiceWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create a load balancer service
     * Create a load balancer service. 
     * @param body  (required)
     * @return ApiResponse&lt;LbService&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LbService> createLoadBalancerServiceWithHttpInfo(LbService body) throws ApiException {
        com.squareup.okhttp.Call call = createLoadBalancerServiceValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<LbService>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a load balancer service (asynchronously)
     * Create a load balancer service. 
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createLoadBalancerServiceAsync(LbService body, final ApiCallback<LbService> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createLoadBalancerServiceValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LbService>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createLoadBalancerTcpProfile
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createLoadBalancerTcpProfileCall(LbTcpProfile body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/loadbalancer/tcp-profiles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createLoadBalancerTcpProfileValidateBeforeCall(LbTcpProfile body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createLoadBalancerTcpProfile(Async)");
        }
        
        com.squareup.okhttp.Call call = createLoadBalancerTcpProfileCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create a load balancer TCP profile
     * Create a load balancer TCP profile. 
     * @param body  (required)
     * @return LbTcpProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LbTcpProfile createLoadBalancerTcpProfile(LbTcpProfile body) throws ApiException {
        ApiResponse<LbTcpProfile> resp = createLoadBalancerTcpProfileWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create a load balancer TCP profile
     * Create a load balancer TCP profile. 
     * @param body  (required)
     * @return ApiResponse&lt;LbTcpProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LbTcpProfile> createLoadBalancerTcpProfileWithHttpInfo(LbTcpProfile body) throws ApiException {
        com.squareup.okhttp.Call call = createLoadBalancerTcpProfileValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<LbTcpProfile>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a load balancer TCP profile (asynchronously)
     * Create a load balancer TCP profile. 
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createLoadBalancerTcpProfileAsync(LbTcpProfile body, final ApiCallback<LbTcpProfile> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createLoadBalancerTcpProfileValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LbTcpProfile>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createLoadBalancerVirtualServer
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createLoadBalancerVirtualServerCall(LbVirtualServer body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/loadbalancer/virtual-servers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createLoadBalancerVirtualServerValidateBeforeCall(LbVirtualServer body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createLoadBalancerVirtualServer(Async)");
        }
        
        com.squareup.okhttp.Call call = createLoadBalancerVirtualServerCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create a load balancer virtual server
     * Create a load balancer virtual server. 
     * @param body  (required)
     * @return LbVirtualServer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LbVirtualServer createLoadBalancerVirtualServer(LbVirtualServer body) throws ApiException {
        ApiResponse<LbVirtualServer> resp = createLoadBalancerVirtualServerWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create a load balancer virtual server
     * Create a load balancer virtual server. 
     * @param body  (required)
     * @return ApiResponse&lt;LbVirtualServer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LbVirtualServer> createLoadBalancerVirtualServerWithHttpInfo(LbVirtualServer body) throws ApiException {
        com.squareup.okhttp.Call call = createLoadBalancerVirtualServerValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<LbVirtualServer>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a load balancer virtual server (asynchronously)
     * Create a load balancer virtual server. 
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createLoadBalancerVirtualServerAsync(LbVirtualServer body, final ApiCallback<LbVirtualServer> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createLoadBalancerVirtualServerValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LbVirtualServer>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createLoadBalancerVirtualServerWithRulesCreateWithRules
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createLoadBalancerVirtualServerWithRulesCreateWithRulesCall(LbVirtualServerWithRule body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/loadbalancer/virtual-servers?action=create_with_rules";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createLoadBalancerVirtualServerWithRulesCreateWithRulesValidateBeforeCall(LbVirtualServerWithRule body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createLoadBalancerVirtualServerWithRulesCreateWithRules(Async)");
        }
        
        com.squareup.okhttp.Call call = createLoadBalancerVirtualServerWithRulesCreateWithRulesCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create a load balancer virtual server with rules
     * It is used to create virtual servers, the associated rules and bind the rules to the virtual server. To add new rules, make sure the rules which have no identifier specified, the new rules are automatically generated and associated to the virtual server. If the virtual server need to consume some existed rules without change, those rules should not be specified in this array, otherwise, the rules are updated. 
     * @param body  (required)
     * @return LbVirtualServerWithRule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LbVirtualServerWithRule createLoadBalancerVirtualServerWithRulesCreateWithRules(LbVirtualServerWithRule body) throws ApiException {
        ApiResponse<LbVirtualServerWithRule> resp = createLoadBalancerVirtualServerWithRulesCreateWithRulesWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create a load balancer virtual server with rules
     * It is used to create virtual servers, the associated rules and bind the rules to the virtual server. To add new rules, make sure the rules which have no identifier specified, the new rules are automatically generated and associated to the virtual server. If the virtual server need to consume some existed rules without change, those rules should not be specified in this array, otherwise, the rules are updated. 
     * @param body  (required)
     * @return ApiResponse&lt;LbVirtualServerWithRule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LbVirtualServerWithRule> createLoadBalancerVirtualServerWithRulesCreateWithRulesWithHttpInfo(LbVirtualServerWithRule body) throws ApiException {
        com.squareup.okhttp.Call call = createLoadBalancerVirtualServerWithRulesCreateWithRulesValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<LbVirtualServerWithRule>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a load balancer virtual server with rules (asynchronously)
     * It is used to create virtual servers, the associated rules and bind the rules to the virtual server. To add new rules, make sure the rules which have no identifier specified, the new rules are automatically generated and associated to the virtual server. If the virtual server need to consume some existed rules without change, those rules should not be specified in this array, otherwise, the rules are updated. 
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createLoadBalancerVirtualServerWithRulesCreateWithRulesAsync(LbVirtualServerWithRule body, final ApiCallback<LbVirtualServerWithRule> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createLoadBalancerVirtualServerWithRulesCreateWithRulesValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LbVirtualServerWithRule>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteLoadBalancerApplicationProfile
     * @param applicationProfileId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteLoadBalancerApplicationProfileCall(String applicationProfileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/loadbalancer/application-profiles/{application-profile-id}"
            .replaceAll("\\{" + "application-profile-id" + "\\}", apiClient.escapeString(applicationProfileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteLoadBalancerApplicationProfileValidateBeforeCall(String applicationProfileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'applicationProfileId' is set
        if (applicationProfileId == null) {
            throw new ApiException("Missing the required parameter 'applicationProfileId' when calling deleteLoadBalancerApplicationProfile(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteLoadBalancerApplicationProfileCall(applicationProfileId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete a load balancer application profile
     * Delete a load balancer application profile. 
     * @param applicationProfileId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteLoadBalancerApplicationProfile(String applicationProfileId) throws ApiException {
        deleteLoadBalancerApplicationProfileWithHttpInfo(applicationProfileId);
    }

    /**
     * Delete a load balancer application profile
     * Delete a load balancer application profile. 
     * @param applicationProfileId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteLoadBalancerApplicationProfileWithHttpInfo(String applicationProfileId) throws ApiException {
        com.squareup.okhttp.Call call = deleteLoadBalancerApplicationProfileValidateBeforeCall(applicationProfileId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a load balancer application profile (asynchronously)
     * Delete a load balancer application profile. 
     * @param applicationProfileId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteLoadBalancerApplicationProfileAsync(String applicationProfileId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteLoadBalancerApplicationProfileValidateBeforeCall(applicationProfileId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteLoadBalancerClientSslProfile
     * @param clientSslProfileId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteLoadBalancerClientSslProfileCall(String clientSslProfileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/loadbalancer/client-ssl-profiles/{client-ssl-profile-id}"
            .replaceAll("\\{" + "client-ssl-profile-id" + "\\}", apiClient.escapeString(clientSslProfileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteLoadBalancerClientSslProfileValidateBeforeCall(String clientSslProfileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'clientSslProfileId' is set
        if (clientSslProfileId == null) {
            throw new ApiException("Missing the required parameter 'clientSslProfileId' when calling deleteLoadBalancerClientSslProfile(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteLoadBalancerClientSslProfileCall(clientSslProfileId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete a load balancer client-ssl profile
     * Delete a load balancer client-ssl profile. 
     * @param clientSslProfileId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteLoadBalancerClientSslProfile(String clientSslProfileId) throws ApiException {
        deleteLoadBalancerClientSslProfileWithHttpInfo(clientSslProfileId);
    }

    /**
     * Delete a load balancer client-ssl profile
     * Delete a load balancer client-ssl profile. 
     * @param clientSslProfileId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteLoadBalancerClientSslProfileWithHttpInfo(String clientSslProfileId) throws ApiException {
        com.squareup.okhttp.Call call = deleteLoadBalancerClientSslProfileValidateBeforeCall(clientSslProfileId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a load balancer client-ssl profile (asynchronously)
     * Delete a load balancer client-ssl profile. 
     * @param clientSslProfileId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteLoadBalancerClientSslProfileAsync(String clientSslProfileId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteLoadBalancerClientSslProfileValidateBeforeCall(clientSslProfileId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteLoadBalancerMonitor
     * @param monitorId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteLoadBalancerMonitorCall(String monitorId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/loadbalancer/monitors/{monitor-id}"
            .replaceAll("\\{" + "monitor-id" + "\\}", apiClient.escapeString(monitorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteLoadBalancerMonitorValidateBeforeCall(String monitorId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'monitorId' is set
        if (monitorId == null) {
            throw new ApiException("Missing the required parameter 'monitorId' when calling deleteLoadBalancerMonitor(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteLoadBalancerMonitorCall(monitorId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete a load balancer monitor
     * Delete a load balancer monitor. 
     * @param monitorId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteLoadBalancerMonitor(String monitorId) throws ApiException {
        deleteLoadBalancerMonitorWithHttpInfo(monitorId);
    }

    /**
     * Delete a load balancer monitor
     * Delete a load balancer monitor. 
     * @param monitorId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteLoadBalancerMonitorWithHttpInfo(String monitorId) throws ApiException {
        com.squareup.okhttp.Call call = deleteLoadBalancerMonitorValidateBeforeCall(monitorId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a load balancer monitor (asynchronously)
     * Delete a load balancer monitor. 
     * @param monitorId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteLoadBalancerMonitorAsync(String monitorId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteLoadBalancerMonitorValidateBeforeCall(monitorId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteLoadBalancerPersistenceProfile
     * @param persistenceProfileId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteLoadBalancerPersistenceProfileCall(String persistenceProfileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/loadbalancer/persistence-profiles/{persistence-profile-id}"
            .replaceAll("\\{" + "persistence-profile-id" + "\\}", apiClient.escapeString(persistenceProfileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteLoadBalancerPersistenceProfileValidateBeforeCall(String persistenceProfileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'persistenceProfileId' is set
        if (persistenceProfileId == null) {
            throw new ApiException("Missing the required parameter 'persistenceProfileId' when calling deleteLoadBalancerPersistenceProfile(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteLoadBalancerPersistenceProfileCall(persistenceProfileId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete a load balancer persistence profile
     * Delete a load balancer persistence profile. 
     * @param persistenceProfileId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteLoadBalancerPersistenceProfile(String persistenceProfileId) throws ApiException {
        deleteLoadBalancerPersistenceProfileWithHttpInfo(persistenceProfileId);
    }

    /**
     * Delete a load balancer persistence profile
     * Delete a load balancer persistence profile. 
     * @param persistenceProfileId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteLoadBalancerPersistenceProfileWithHttpInfo(String persistenceProfileId) throws ApiException {
        com.squareup.okhttp.Call call = deleteLoadBalancerPersistenceProfileValidateBeforeCall(persistenceProfileId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a load balancer persistence profile (asynchronously)
     * Delete a load balancer persistence profile. 
     * @param persistenceProfileId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteLoadBalancerPersistenceProfileAsync(String persistenceProfileId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteLoadBalancerPersistenceProfileValidateBeforeCall(persistenceProfileId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteLoadBalancerPool
     * @param poolId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteLoadBalancerPoolCall(String poolId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/loadbalancer/pools/{pool-id}"
            .replaceAll("\\{" + "pool-id" + "\\}", apiClient.escapeString(poolId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteLoadBalancerPoolValidateBeforeCall(String poolId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'poolId' is set
        if (poolId == null) {
            throw new ApiException("Missing the required parameter 'poolId' when calling deleteLoadBalancerPool(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteLoadBalancerPoolCall(poolId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete a load balancer pool
     * Delete a load balancer pool. 
     * @param poolId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteLoadBalancerPool(String poolId) throws ApiException {
        deleteLoadBalancerPoolWithHttpInfo(poolId);
    }

    /**
     * Delete a load balancer pool
     * Delete a load balancer pool. 
     * @param poolId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteLoadBalancerPoolWithHttpInfo(String poolId) throws ApiException {
        com.squareup.okhttp.Call call = deleteLoadBalancerPoolValidateBeforeCall(poolId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a load balancer pool (asynchronously)
     * Delete a load balancer pool. 
     * @param poolId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteLoadBalancerPoolAsync(String poolId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteLoadBalancerPoolValidateBeforeCall(poolId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteLoadBalancerRule
     * @param ruleId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteLoadBalancerRuleCall(String ruleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/loadbalancer/rules/{rule-id}"
            .replaceAll("\\{" + "rule-id" + "\\}", apiClient.escapeString(ruleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteLoadBalancerRuleValidateBeforeCall(String ruleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'ruleId' is set
        if (ruleId == null) {
            throw new ApiException("Missing the required parameter 'ruleId' when calling deleteLoadBalancerRule(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteLoadBalancerRuleCall(ruleId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete a load balancer rule
     * Delete a load balancer rule. 
     * @param ruleId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteLoadBalancerRule(String ruleId) throws ApiException {
        deleteLoadBalancerRuleWithHttpInfo(ruleId);
    }

    /**
     * Delete a load balancer rule
     * Delete a load balancer rule. 
     * @param ruleId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteLoadBalancerRuleWithHttpInfo(String ruleId) throws ApiException {
        com.squareup.okhttp.Call call = deleteLoadBalancerRuleValidateBeforeCall(ruleId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a load balancer rule (asynchronously)
     * Delete a load balancer rule. 
     * @param ruleId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteLoadBalancerRuleAsync(String ruleId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteLoadBalancerRuleValidateBeforeCall(ruleId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteLoadBalancerServerSslProfile
     * @param serverSslProfileId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteLoadBalancerServerSslProfileCall(String serverSslProfileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/loadbalancer/server-ssl-profiles/{server-ssl-profile-id}"
            .replaceAll("\\{" + "server-ssl-profile-id" + "\\}", apiClient.escapeString(serverSslProfileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteLoadBalancerServerSslProfileValidateBeforeCall(String serverSslProfileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'serverSslProfileId' is set
        if (serverSslProfileId == null) {
            throw new ApiException("Missing the required parameter 'serverSslProfileId' when calling deleteLoadBalancerServerSslProfile(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteLoadBalancerServerSslProfileCall(serverSslProfileId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete a load balancer server-ssl profile
     * Delete a load balancer server-ssl profile. 
     * @param serverSslProfileId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteLoadBalancerServerSslProfile(String serverSslProfileId) throws ApiException {
        deleteLoadBalancerServerSslProfileWithHttpInfo(serverSslProfileId);
    }

    /**
     * Delete a load balancer server-ssl profile
     * Delete a load balancer server-ssl profile. 
     * @param serverSslProfileId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteLoadBalancerServerSslProfileWithHttpInfo(String serverSslProfileId) throws ApiException {
        com.squareup.okhttp.Call call = deleteLoadBalancerServerSslProfileValidateBeforeCall(serverSslProfileId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a load balancer server-ssl profile (asynchronously)
     * Delete a load balancer server-ssl profile. 
     * @param serverSslProfileId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteLoadBalancerServerSslProfileAsync(String serverSslProfileId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteLoadBalancerServerSslProfileValidateBeforeCall(serverSslProfileId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteLoadBalancerService
     * @param serviceId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteLoadBalancerServiceCall(String serviceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/loadbalancer/services/{service-id}"
            .replaceAll("\\{" + "service-id" + "\\}", apiClient.escapeString(serviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteLoadBalancerServiceValidateBeforeCall(String serviceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'serviceId' is set
        if (serviceId == null) {
            throw new ApiException("Missing the required parameter 'serviceId' when calling deleteLoadBalancerService(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteLoadBalancerServiceCall(serviceId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete a load balancer service
     * Delete a load balancer service. 
     * @param serviceId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteLoadBalancerService(String serviceId) throws ApiException {
        deleteLoadBalancerServiceWithHttpInfo(serviceId);
    }

    /**
     * Delete a load balancer service
     * Delete a load balancer service. 
     * @param serviceId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteLoadBalancerServiceWithHttpInfo(String serviceId) throws ApiException {
        com.squareup.okhttp.Call call = deleteLoadBalancerServiceValidateBeforeCall(serviceId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a load balancer service (asynchronously)
     * Delete a load balancer service. 
     * @param serviceId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteLoadBalancerServiceAsync(String serviceId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteLoadBalancerServiceValidateBeforeCall(serviceId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteLoadBalancerTcpProfile
     * @param tcpProfileId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteLoadBalancerTcpProfileCall(String tcpProfileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/loadbalancer/tcp-profiles/{tcp-profile-id}"
            .replaceAll("\\{" + "tcp-profile-id" + "\\}", apiClient.escapeString(tcpProfileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteLoadBalancerTcpProfileValidateBeforeCall(String tcpProfileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'tcpProfileId' is set
        if (tcpProfileId == null) {
            throw new ApiException("Missing the required parameter 'tcpProfileId' when calling deleteLoadBalancerTcpProfile(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteLoadBalancerTcpProfileCall(tcpProfileId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete a load balancer TCP profile
     * Delete a load balancer TCP profile. 
     * @param tcpProfileId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteLoadBalancerTcpProfile(String tcpProfileId) throws ApiException {
        deleteLoadBalancerTcpProfileWithHttpInfo(tcpProfileId);
    }

    /**
     * Delete a load balancer TCP profile
     * Delete a load balancer TCP profile. 
     * @param tcpProfileId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteLoadBalancerTcpProfileWithHttpInfo(String tcpProfileId) throws ApiException {
        com.squareup.okhttp.Call call = deleteLoadBalancerTcpProfileValidateBeforeCall(tcpProfileId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a load balancer TCP profile (asynchronously)
     * Delete a load balancer TCP profile. 
     * @param tcpProfileId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteLoadBalancerTcpProfileAsync(String tcpProfileId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteLoadBalancerTcpProfileValidateBeforeCall(tcpProfileId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteLoadBalancerVirtualServer
     * @param virtualServerId  (required)
     * @param deleteAssociatedRules Delete associated rules (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteLoadBalancerVirtualServerCall(String virtualServerId, Boolean deleteAssociatedRules, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/loadbalancer/virtual-servers/{virtual-server-id}"
            .replaceAll("\\{" + "virtual-server-id" + "\\}", apiClient.escapeString(virtualServerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (deleteAssociatedRules != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("delete_associated_rules", deleteAssociatedRules));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteLoadBalancerVirtualServerValidateBeforeCall(String virtualServerId, Boolean deleteAssociatedRules, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'virtualServerId' is set
        if (virtualServerId == null) {
            throw new ApiException("Missing the required parameter 'virtualServerId' when calling deleteLoadBalancerVirtualServer(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteLoadBalancerVirtualServerCall(virtualServerId, deleteAssociatedRules, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete a load balancer virtual server
     * Delete a load balancer virtual server. 
     * @param virtualServerId  (required)
     * @param deleteAssociatedRules Delete associated rules (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteLoadBalancerVirtualServer(String virtualServerId, Boolean deleteAssociatedRules) throws ApiException {
        deleteLoadBalancerVirtualServerWithHttpInfo(virtualServerId, deleteAssociatedRules);
    }

    /**
     * Delete a load balancer virtual server
     * Delete a load balancer virtual server. 
     * @param virtualServerId  (required)
     * @param deleteAssociatedRules Delete associated rules (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteLoadBalancerVirtualServerWithHttpInfo(String virtualServerId, Boolean deleteAssociatedRules) throws ApiException {
        com.squareup.okhttp.Call call = deleteLoadBalancerVirtualServerValidateBeforeCall(virtualServerId, deleteAssociatedRules, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a load balancer virtual server (asynchronously)
     * Delete a load balancer virtual server. 
     * @param virtualServerId  (required)
     * @param deleteAssociatedRules Delete associated rules (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteLoadBalancerVirtualServerAsync(String virtualServerId, Boolean deleteAssociatedRules, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteLoadBalancerVirtualServerValidateBeforeCall(virtualServerId, deleteAssociatedRules, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getLoadBalancerPoolStatistics
     * @param serviceId  (required)
     * @param poolId  (required)
     * @param source Data source type. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getLoadBalancerPoolStatisticsCall(String serviceId, String poolId, String source, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/loadbalancer/services/{service-id}/pools/{pool-id}/statistics"
            .replaceAll("\\{" + "service-id" + "\\}", apiClient.escapeString(serviceId.toString()))
            .replaceAll("\\{" + "pool-id" + "\\}", apiClient.escapeString(poolId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (source != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("source", source));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getLoadBalancerPoolStatisticsValidateBeforeCall(String serviceId, String poolId, String source, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'serviceId' is set
        if (serviceId == null) {
            throw new ApiException("Missing the required parameter 'serviceId' when calling getLoadBalancerPoolStatistics(Async)");
        }
        // verify the required parameter 'poolId' is set
        if (poolId == null) {
            throw new ApiException("Missing the required parameter 'poolId' when calling getLoadBalancerPoolStatistics(Async)");
        }
        
        com.squareup.okhttp.Call call = getLoadBalancerPoolStatisticsCall(serviceId, poolId, source, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the statistics of load balancer pool
     * Returns the statistics of the given load balancer pool by given load balancer serives id and load balancer pool id. Currently, only realtime mode is supported. 
     * @param serviceId  (required)
     * @param poolId  (required)
     * @param source Data source type. (optional)
     * @return LbPoolStatistics
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LbPoolStatistics getLoadBalancerPoolStatistics(String serviceId, String poolId, String source) throws ApiException {
        ApiResponse<LbPoolStatistics> resp = getLoadBalancerPoolStatisticsWithHttpInfo(serviceId, poolId, source);
        return resp.getData();
    }

    /**
     * Get the statistics of load balancer pool
     * Returns the statistics of the given load balancer pool by given load balancer serives id and load balancer pool id. Currently, only realtime mode is supported. 
     * @param serviceId  (required)
     * @param poolId  (required)
     * @param source Data source type. (optional)
     * @return ApiResponse&lt;LbPoolStatistics&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LbPoolStatistics> getLoadBalancerPoolStatisticsWithHttpInfo(String serviceId, String poolId, String source) throws ApiException {
        com.squareup.okhttp.Call call = getLoadBalancerPoolStatisticsValidateBeforeCall(serviceId, poolId, source, null, null);
        Type localVarReturnType = new TypeToken<LbPoolStatistics>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the statistics of load balancer pool (asynchronously)
     * Returns the statistics of the given load balancer pool by given load balancer serives id and load balancer pool id. Currently, only realtime mode is supported. 
     * @param serviceId  (required)
     * @param poolId  (required)
     * @param source Data source type. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getLoadBalancerPoolStatisticsAsync(String serviceId, String poolId, String source, final ApiCallback<LbPoolStatistics> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getLoadBalancerPoolStatisticsValidateBeforeCall(serviceId, poolId, source, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LbPoolStatistics>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getLoadBalancerPoolStatus
     * @param serviceId  (required)
     * @param poolId  (required)
     * @param source Data source type. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getLoadBalancerPoolStatusCall(String serviceId, String poolId, String source, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/loadbalancer/services/{service-id}/pools/{pool-id}/status"
            .replaceAll("\\{" + "service-id" + "\\}", apiClient.escapeString(serviceId.toString()))
            .replaceAll("\\{" + "pool-id" + "\\}", apiClient.escapeString(poolId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (source != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("source", source));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getLoadBalancerPoolStatusValidateBeforeCall(String serviceId, String poolId, String source, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'serviceId' is set
        if (serviceId == null) {
            throw new ApiException("Missing the required parameter 'serviceId' when calling getLoadBalancerPoolStatus(Async)");
        }
        // verify the required parameter 'poolId' is set
        if (poolId == null) {
            throw new ApiException("Missing the required parameter 'poolId' when calling getLoadBalancerPoolStatus(Async)");
        }
        
        com.squareup.okhttp.Call call = getLoadBalancerPoolStatusCall(serviceId, poolId, source, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the status of load balancer pool
     * Returns the status of the given load balancer pool by given load balancer serives id and load balancer pool id. 
     * @param serviceId  (required)
     * @param poolId  (required)
     * @param source Data source type. (optional)
     * @return LbPoolStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LbPoolStatus getLoadBalancerPoolStatus(String serviceId, String poolId, String source) throws ApiException {
        ApiResponse<LbPoolStatus> resp = getLoadBalancerPoolStatusWithHttpInfo(serviceId, poolId, source);
        return resp.getData();
    }

    /**
     * Get the status of load balancer pool
     * Returns the status of the given load balancer pool by given load balancer serives id and load balancer pool id. 
     * @param serviceId  (required)
     * @param poolId  (required)
     * @param source Data source type. (optional)
     * @return ApiResponse&lt;LbPoolStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LbPoolStatus> getLoadBalancerPoolStatusWithHttpInfo(String serviceId, String poolId, String source) throws ApiException {
        com.squareup.okhttp.Call call = getLoadBalancerPoolStatusValidateBeforeCall(serviceId, poolId, source, null, null);
        Type localVarReturnType = new TypeToken<LbPoolStatus>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the status of load balancer pool (asynchronously)
     * Returns the status of the given load balancer pool by given load balancer serives id and load balancer pool id. 
     * @param serviceId  (required)
     * @param poolId  (required)
     * @param source Data source type. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getLoadBalancerPoolStatusAsync(String serviceId, String poolId, String source, final ApiCallback<LbPoolStatus> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getLoadBalancerPoolStatusValidateBeforeCall(serviceId, poolId, source, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LbPoolStatus>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getLoadBalancerServiceStatistics
     * @param serviceId  (required)
     * @param source Data source type. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getLoadBalancerServiceStatisticsCall(String serviceId, String source, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/loadbalancer/services/{service-id}/statistics"
            .replaceAll("\\{" + "service-id" + "\\}", apiClient.escapeString(serviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (source != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("source", source));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getLoadBalancerServiceStatisticsValidateBeforeCall(String serviceId, String source, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'serviceId' is set
        if (serviceId == null) {
            throw new ApiException("Missing the required parameter 'serviceId' when calling getLoadBalancerServiceStatistics(Async)");
        }
        
        com.squareup.okhttp.Call call = getLoadBalancerServiceStatisticsCall(serviceId, source, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the statistics of load balancer service
     * Returns the statistics of the given load balancer service. 
     * @param serviceId  (required)
     * @param source Data source type. (optional)
     * @return LbServiceStatistics
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LbServiceStatistics getLoadBalancerServiceStatistics(String serviceId, String source) throws ApiException {
        ApiResponse<LbServiceStatistics> resp = getLoadBalancerServiceStatisticsWithHttpInfo(serviceId, source);
        return resp.getData();
    }

    /**
     * Get the statistics of load balancer service
     * Returns the statistics of the given load balancer service. 
     * @param serviceId  (required)
     * @param source Data source type. (optional)
     * @return ApiResponse&lt;LbServiceStatistics&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LbServiceStatistics> getLoadBalancerServiceStatisticsWithHttpInfo(String serviceId, String source) throws ApiException {
        com.squareup.okhttp.Call call = getLoadBalancerServiceStatisticsValidateBeforeCall(serviceId, source, null, null);
        Type localVarReturnType = new TypeToken<LbServiceStatistics>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the statistics of load balancer service (asynchronously)
     * Returns the statistics of the given load balancer service. 
     * @param serviceId  (required)
     * @param source Data source type. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getLoadBalancerServiceStatisticsAsync(String serviceId, String source, final ApiCallback<LbServiceStatistics> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getLoadBalancerServiceStatisticsValidateBeforeCall(serviceId, source, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LbServiceStatistics>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getLoadBalancerServiceStatus
     * @param serviceId  (required)
     * @param source Data source type. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getLoadBalancerServiceStatusCall(String serviceId, String source, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/loadbalancer/services/{service-id}/status"
            .replaceAll("\\{" + "service-id" + "\\}", apiClient.escapeString(serviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (source != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("source", source));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getLoadBalancerServiceStatusValidateBeforeCall(String serviceId, String source, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'serviceId' is set
        if (serviceId == null) {
            throw new ApiException("Missing the required parameter 'serviceId' when calling getLoadBalancerServiceStatus(Async)");
        }
        
        com.squareup.okhttp.Call call = getLoadBalancerServiceStatusCall(serviceId, source, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the status of the given load balancer service
     * Returns the status of the given load balancer service. 
     * @param serviceId  (required)
     * @param source Data source type. (optional)
     * @return LbServiceStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LbServiceStatus getLoadBalancerServiceStatus(String serviceId, String source) throws ApiException {
        ApiResponse<LbServiceStatus> resp = getLoadBalancerServiceStatusWithHttpInfo(serviceId, source);
        return resp.getData();
    }

    /**
     * Get the status of the given load balancer service
     * Returns the status of the given load balancer service. 
     * @param serviceId  (required)
     * @param source Data source type. (optional)
     * @return ApiResponse&lt;LbServiceStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LbServiceStatus> getLoadBalancerServiceStatusWithHttpInfo(String serviceId, String source) throws ApiException {
        com.squareup.okhttp.Call call = getLoadBalancerServiceStatusValidateBeforeCall(serviceId, source, null, null);
        Type localVarReturnType = new TypeToken<LbServiceStatus>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the status of the given load balancer service (asynchronously)
     * Returns the status of the given load balancer service. 
     * @param serviceId  (required)
     * @param source Data source type. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getLoadBalancerServiceStatusAsync(String serviceId, String source, final ApiCallback<LbServiceStatus> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getLoadBalancerServiceStatusValidateBeforeCall(serviceId, source, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LbServiceStatus>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getLoadBalancerVirtualServerStatistics
     * @param serviceId  (required)
     * @param virtualServerId  (required)
     * @param source Data source type. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getLoadBalancerVirtualServerStatisticsCall(String serviceId, String virtualServerId, String source, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/loadbalancer/services/{service-id}/virtual-servers/{virtual-server-id}/statistics"
            .replaceAll("\\{" + "service-id" + "\\}", apiClient.escapeString(serviceId.toString()))
            .replaceAll("\\{" + "virtual-server-id" + "\\}", apiClient.escapeString(virtualServerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (source != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("source", source));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getLoadBalancerVirtualServerStatisticsValidateBeforeCall(String serviceId, String virtualServerId, String source, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'serviceId' is set
        if (serviceId == null) {
            throw new ApiException("Missing the required parameter 'serviceId' when calling getLoadBalancerVirtualServerStatistics(Async)");
        }
        // verify the required parameter 'virtualServerId' is set
        if (virtualServerId == null) {
            throw new ApiException("Missing the required parameter 'virtualServerId' when calling getLoadBalancerVirtualServerStatistics(Async)");
        }
        
        com.squareup.okhttp.Call call = getLoadBalancerVirtualServerStatisticsCall(serviceId, virtualServerId, source, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the statistics of the given load balancer virtual server
     * Returns the statistics of the load balancer virtual server by given load  balancer serives id and load balancer virtual server id. 
     * @param serviceId  (required)
     * @param virtualServerId  (required)
     * @param source Data source type. (optional)
     * @return LbVirtualServerStatistics
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LbVirtualServerStatistics getLoadBalancerVirtualServerStatistics(String serviceId, String virtualServerId, String source) throws ApiException {
        ApiResponse<LbVirtualServerStatistics> resp = getLoadBalancerVirtualServerStatisticsWithHttpInfo(serviceId, virtualServerId, source);
        return resp.getData();
    }

    /**
     * Get the statistics of the given load balancer virtual server
     * Returns the statistics of the load balancer virtual server by given load  balancer serives id and load balancer virtual server id. 
     * @param serviceId  (required)
     * @param virtualServerId  (required)
     * @param source Data source type. (optional)
     * @return ApiResponse&lt;LbVirtualServerStatistics&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LbVirtualServerStatistics> getLoadBalancerVirtualServerStatisticsWithHttpInfo(String serviceId, String virtualServerId, String source) throws ApiException {
        com.squareup.okhttp.Call call = getLoadBalancerVirtualServerStatisticsValidateBeforeCall(serviceId, virtualServerId, source, null, null);
        Type localVarReturnType = new TypeToken<LbVirtualServerStatistics>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the statistics of the given load balancer virtual server (asynchronously)
     * Returns the statistics of the load balancer virtual server by given load  balancer serives id and load balancer virtual server id. 
     * @param serviceId  (required)
     * @param virtualServerId  (required)
     * @param source Data source type. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getLoadBalancerVirtualServerStatisticsAsync(String serviceId, String virtualServerId, String source, final ApiCallback<LbVirtualServerStatistics> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getLoadBalancerVirtualServerStatisticsValidateBeforeCall(serviceId, virtualServerId, source, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LbVirtualServerStatistics>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getLoadBalancerVirtualServerStatus
     * @param serviceId  (required)
     * @param virtualServerId  (required)
     * @param source Data source type. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getLoadBalancerVirtualServerStatusCall(String serviceId, String virtualServerId, String source, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/loadbalancer/services/{service-id}/virtual-servers/{virtual-server-id}/status"
            .replaceAll("\\{" + "service-id" + "\\}", apiClient.escapeString(serviceId.toString()))
            .replaceAll("\\{" + "virtual-server-id" + "\\}", apiClient.escapeString(virtualServerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (source != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("source", source));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getLoadBalancerVirtualServerStatusValidateBeforeCall(String serviceId, String virtualServerId, String source, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'serviceId' is set
        if (serviceId == null) {
            throw new ApiException("Missing the required parameter 'serviceId' when calling getLoadBalancerVirtualServerStatus(Async)");
        }
        // verify the required parameter 'virtualServerId' is set
        if (virtualServerId == null) {
            throw new ApiException("Missing the required parameter 'virtualServerId' when calling getLoadBalancerVirtualServerStatus(Async)");
        }
        
        com.squareup.okhttp.Call call = getLoadBalancerVirtualServerStatusCall(serviceId, virtualServerId, source, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the status of the load balancer virtual server
     * Returns the status of the virtual server by given load balancer serives id and load balancer virtual server id. 
     * @param serviceId  (required)
     * @param virtualServerId  (required)
     * @param source Data source type. (optional)
     * @return LbVirtualServerStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LbVirtualServerStatus getLoadBalancerVirtualServerStatus(String serviceId, String virtualServerId, String source) throws ApiException {
        ApiResponse<LbVirtualServerStatus> resp = getLoadBalancerVirtualServerStatusWithHttpInfo(serviceId, virtualServerId, source);
        return resp.getData();
    }

    /**
     * Get the status of the load balancer virtual server
     * Returns the status of the virtual server by given load balancer serives id and load balancer virtual server id. 
     * @param serviceId  (required)
     * @param virtualServerId  (required)
     * @param source Data source type. (optional)
     * @return ApiResponse&lt;LbVirtualServerStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LbVirtualServerStatus> getLoadBalancerVirtualServerStatusWithHttpInfo(String serviceId, String virtualServerId, String source) throws ApiException {
        com.squareup.okhttp.Call call = getLoadBalancerVirtualServerStatusValidateBeforeCall(serviceId, virtualServerId, source, null, null);
        Type localVarReturnType = new TypeToken<LbVirtualServerStatus>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the status of the load balancer virtual server (asynchronously)
     * Returns the status of the virtual server by given load balancer serives id and load balancer virtual server id. 
     * @param serviceId  (required)
     * @param virtualServerId  (required)
     * @param source Data source type. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getLoadBalancerVirtualServerStatusAsync(String serviceId, String virtualServerId, String source, final ApiCallback<LbVirtualServerStatus> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getLoadBalancerVirtualServerStatusValidateBeforeCall(serviceId, virtualServerId, source, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LbVirtualServerStatus>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listLoadBalancerApplicationProfiles
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param type application profile type (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listLoadBalancerApplicationProfilesCall(String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, String type, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/loadbalancer/application-profiles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (includedFields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("included_fields", includedFields));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page_size", pageSize));
        if (sortAscending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_ascending", sortAscending));
        if (sortBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_by", sortBy));
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("type", type));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listLoadBalancerApplicationProfilesValidateBeforeCall(String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, String type, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listLoadBalancerApplicationProfilesCall(cursor, includedFields, pageSize, sortAscending, sortBy, type, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieve a paginated list of load balancer application profiles
     * Retrieve a paginated list of load balancer application profiles. 
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param type application profile type (optional)
     * @return LbAppProfileListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LbAppProfileListResult listLoadBalancerApplicationProfiles(String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, String type) throws ApiException {
        ApiResponse<LbAppProfileListResult> resp = listLoadBalancerApplicationProfilesWithHttpInfo(cursor, includedFields, pageSize, sortAscending, sortBy, type);
        return resp.getData();
    }

    /**
     * Retrieve a paginated list of load balancer application profiles
     * Retrieve a paginated list of load balancer application profiles. 
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param type application profile type (optional)
     * @return ApiResponse&lt;LbAppProfileListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LbAppProfileListResult> listLoadBalancerApplicationProfilesWithHttpInfo(String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, String type) throws ApiException {
        com.squareup.okhttp.Call call = listLoadBalancerApplicationProfilesValidateBeforeCall(cursor, includedFields, pageSize, sortAscending, sortBy, type, null, null);
        Type localVarReturnType = new TypeToken<LbAppProfileListResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a paginated list of load balancer application profiles (asynchronously)
     * Retrieve a paginated list of load balancer application profiles. 
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param type application profile type (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listLoadBalancerApplicationProfilesAsync(String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, String type, final ApiCallback<LbAppProfileListResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listLoadBalancerApplicationProfilesValidateBeforeCall(cursor, includedFields, pageSize, sortAscending, sortBy, type, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LbAppProfileListResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listLoadBalancerClientSslProfiles
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listLoadBalancerClientSslProfilesCall(String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/loadbalancer/client-ssl-profiles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (includedFields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("included_fields", includedFields));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page_size", pageSize));
        if (sortAscending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_ascending", sortAscending));
        if (sortBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_by", sortBy));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listLoadBalancerClientSslProfilesValidateBeforeCall(String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listLoadBalancerClientSslProfilesCall(cursor, includedFields, pageSize, sortAscending, sortBy, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieve a paginated list of load balancer client-ssl profiles
     * Retrieve a paginated list of load balancer client-ssl profiles. 
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @return LbClientSslProfileListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LbClientSslProfileListResult listLoadBalancerClientSslProfiles(String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy) throws ApiException {
        ApiResponse<LbClientSslProfileListResult> resp = listLoadBalancerClientSslProfilesWithHttpInfo(cursor, includedFields, pageSize, sortAscending, sortBy);
        return resp.getData();
    }

    /**
     * Retrieve a paginated list of load balancer client-ssl profiles
     * Retrieve a paginated list of load balancer client-ssl profiles. 
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @return ApiResponse&lt;LbClientSslProfileListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LbClientSslProfileListResult> listLoadBalancerClientSslProfilesWithHttpInfo(String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy) throws ApiException {
        com.squareup.okhttp.Call call = listLoadBalancerClientSslProfilesValidateBeforeCall(cursor, includedFields, pageSize, sortAscending, sortBy, null, null);
        Type localVarReturnType = new TypeToken<LbClientSslProfileListResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a paginated list of load balancer client-ssl profiles (asynchronously)
     * Retrieve a paginated list of load balancer client-ssl profiles. 
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listLoadBalancerClientSslProfilesAsync(String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, final ApiCallback<LbClientSslProfileListResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listLoadBalancerClientSslProfilesValidateBeforeCall(cursor, includedFields, pageSize, sortAscending, sortBy, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LbClientSslProfileListResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listLoadBalancerMonitors
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param type monitor query type (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listLoadBalancerMonitorsCall(String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, String type, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/loadbalancer/monitors";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (includedFields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("included_fields", includedFields));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page_size", pageSize));
        if (sortAscending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_ascending", sortAscending));
        if (sortBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_by", sortBy));
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("type", type));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listLoadBalancerMonitorsValidateBeforeCall(String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, String type, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listLoadBalancerMonitorsCall(cursor, includedFields, pageSize, sortAscending, sortBy, type, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieve a paginated list of load balancer monitors
     * Retrieve a paginated list of load balancer monitors. 
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param type monitor query type (optional)
     * @return LbMonitorListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LbMonitorListResult listLoadBalancerMonitors(String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, String type) throws ApiException {
        ApiResponse<LbMonitorListResult> resp = listLoadBalancerMonitorsWithHttpInfo(cursor, includedFields, pageSize, sortAscending, sortBy, type);
        return resp.getData();
    }

    /**
     * Retrieve a paginated list of load balancer monitors
     * Retrieve a paginated list of load balancer monitors. 
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param type monitor query type (optional)
     * @return ApiResponse&lt;LbMonitorListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LbMonitorListResult> listLoadBalancerMonitorsWithHttpInfo(String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, String type) throws ApiException {
        com.squareup.okhttp.Call call = listLoadBalancerMonitorsValidateBeforeCall(cursor, includedFields, pageSize, sortAscending, sortBy, type, null, null);
        Type localVarReturnType = new TypeToken<LbMonitorListResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a paginated list of load balancer monitors (asynchronously)
     * Retrieve a paginated list of load balancer monitors. 
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param type monitor query type (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listLoadBalancerMonitorsAsync(String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, String type, final ApiCallback<LbMonitorListResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listLoadBalancerMonitorsValidateBeforeCall(cursor, includedFields, pageSize, sortAscending, sortBy, type, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LbMonitorListResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listLoadBalancerPersistenceProfiles
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param type persistence profile type (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listLoadBalancerPersistenceProfilesCall(String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, String type, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/loadbalancer/persistence-profiles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (includedFields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("included_fields", includedFields));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page_size", pageSize));
        if (sortAscending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_ascending", sortAscending));
        if (sortBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_by", sortBy));
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("type", type));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listLoadBalancerPersistenceProfilesValidateBeforeCall(String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, String type, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listLoadBalancerPersistenceProfilesCall(cursor, includedFields, pageSize, sortAscending, sortBy, type, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieve a paginated list of load balancer persistence profiles
     * Retrieve a paginated list of load balancer persistence profiles. 
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param type persistence profile type (optional)
     * @return LbPersistenceProfileListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LbPersistenceProfileListResult listLoadBalancerPersistenceProfiles(String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, String type) throws ApiException {
        ApiResponse<LbPersistenceProfileListResult> resp = listLoadBalancerPersistenceProfilesWithHttpInfo(cursor, includedFields, pageSize, sortAscending, sortBy, type);
        return resp.getData();
    }

    /**
     * Retrieve a paginated list of load balancer persistence profiles
     * Retrieve a paginated list of load balancer persistence profiles. 
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param type persistence profile type (optional)
     * @return ApiResponse&lt;LbPersistenceProfileListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LbPersistenceProfileListResult> listLoadBalancerPersistenceProfilesWithHttpInfo(String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, String type) throws ApiException {
        com.squareup.okhttp.Call call = listLoadBalancerPersistenceProfilesValidateBeforeCall(cursor, includedFields, pageSize, sortAscending, sortBy, type, null, null);
        Type localVarReturnType = new TypeToken<LbPersistenceProfileListResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a paginated list of load balancer persistence profiles (asynchronously)
     * Retrieve a paginated list of load balancer persistence profiles. 
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param type persistence profile type (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listLoadBalancerPersistenceProfilesAsync(String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, String type, final ApiCallback<LbPersistenceProfileListResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listLoadBalancerPersistenceProfilesValidateBeforeCall(cursor, includedFields, pageSize, sortAscending, sortBy, type, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LbPersistenceProfileListResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listLoadBalancerPoolStatistics
     * @param serviceId  (required)
     * @param source Data source type. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listLoadBalancerPoolStatisticsCall(String serviceId, String source, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/loadbalancer/services/{service-id}/pools/statistics"
            .replaceAll("\\{" + "service-id" + "\\}", apiClient.escapeString(serviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (source != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("source", source));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listLoadBalancerPoolStatisticsValidateBeforeCall(String serviceId, String source, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'serviceId' is set
        if (serviceId == null) {
            throw new ApiException("Missing the required parameter 'serviceId' when calling listLoadBalancerPoolStatistics(Async)");
        }
        
        com.squareup.okhttp.Call call = listLoadBalancerPoolStatisticsCall(serviceId, source, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the statistics list of load balancer pools
     * Returns the statistics list of load balancer pools in given load balancer service. Currently, only realtime mode is supported. 
     * @param serviceId  (required)
     * @param source Data source type. (optional)
     * @return LbPoolStatisticsListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LbPoolStatisticsListResult listLoadBalancerPoolStatistics(String serviceId, String source) throws ApiException {
        ApiResponse<LbPoolStatisticsListResult> resp = listLoadBalancerPoolStatisticsWithHttpInfo(serviceId, source);
        return resp.getData();
    }

    /**
     * Get the statistics list of load balancer pools
     * Returns the statistics list of load balancer pools in given load balancer service. Currently, only realtime mode is supported. 
     * @param serviceId  (required)
     * @param source Data source type. (optional)
     * @return ApiResponse&lt;LbPoolStatisticsListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LbPoolStatisticsListResult> listLoadBalancerPoolStatisticsWithHttpInfo(String serviceId, String source) throws ApiException {
        com.squareup.okhttp.Call call = listLoadBalancerPoolStatisticsValidateBeforeCall(serviceId, source, null, null);
        Type localVarReturnType = new TypeToken<LbPoolStatisticsListResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the statistics list of load balancer pools (asynchronously)
     * Returns the statistics list of load balancer pools in given load balancer service. Currently, only realtime mode is supported. 
     * @param serviceId  (required)
     * @param source Data source type. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listLoadBalancerPoolStatisticsAsync(String serviceId, String source, final ApiCallback<LbPoolStatisticsListResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listLoadBalancerPoolStatisticsValidateBeforeCall(serviceId, source, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LbPoolStatisticsListResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listLoadBalancerPoolStatuses
     * @param serviceId  (required)
     * @param source Data source type. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listLoadBalancerPoolStatusesCall(String serviceId, String source, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/loadbalancer/services/{service-id}/pools/status"
            .replaceAll("\\{" + "service-id" + "\\}", apiClient.escapeString(serviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (source != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("source", source));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listLoadBalancerPoolStatusesValidateBeforeCall(String serviceId, String source, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'serviceId' is set
        if (serviceId == null) {
            throw new ApiException("Missing the required parameter 'serviceId' when calling listLoadBalancerPoolStatuses(Async)");
        }
        
        com.squareup.okhttp.Call call = listLoadBalancerPoolStatusesCall(serviceId, source, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the status list of load balancer pools
     * Returns the status list of load balancer pools in given load balancer service. 
     * @param serviceId  (required)
     * @param source Data source type. (optional)
     * @return LbPoolStatusListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LbPoolStatusListResult listLoadBalancerPoolStatuses(String serviceId, String source) throws ApiException {
        ApiResponse<LbPoolStatusListResult> resp = listLoadBalancerPoolStatusesWithHttpInfo(serviceId, source);
        return resp.getData();
    }

    /**
     * Get the status list of load balancer pools
     * Returns the status list of load balancer pools in given load balancer service. 
     * @param serviceId  (required)
     * @param source Data source type. (optional)
     * @return ApiResponse&lt;LbPoolStatusListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LbPoolStatusListResult> listLoadBalancerPoolStatusesWithHttpInfo(String serviceId, String source) throws ApiException {
        com.squareup.okhttp.Call call = listLoadBalancerPoolStatusesValidateBeforeCall(serviceId, source, null, null);
        Type localVarReturnType = new TypeToken<LbPoolStatusListResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the status list of load balancer pools (asynchronously)
     * Returns the status list of load balancer pools in given load balancer service. 
     * @param serviceId  (required)
     * @param source Data source type. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listLoadBalancerPoolStatusesAsync(String serviceId, String source, final ApiCallback<LbPoolStatusListResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listLoadBalancerPoolStatusesValidateBeforeCall(serviceId, source, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LbPoolStatusListResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listLoadBalancerPools
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listLoadBalancerPoolsCall(String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/loadbalancer/pools";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (includedFields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("included_fields", includedFields));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page_size", pageSize));
        if (sortAscending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_ascending", sortAscending));
        if (sortBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_by", sortBy));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listLoadBalancerPoolsValidateBeforeCall(String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listLoadBalancerPoolsCall(cursor, includedFields, pageSize, sortAscending, sortBy, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieve a paginated list of load balancer pools
     * Retrieve a paginated list of load balancer pools. 
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @return LbPoolListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LbPoolListResult listLoadBalancerPools(String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy) throws ApiException {
        ApiResponse<LbPoolListResult> resp = listLoadBalancerPoolsWithHttpInfo(cursor, includedFields, pageSize, sortAscending, sortBy);
        return resp.getData();
    }

    /**
     * Retrieve a paginated list of load balancer pools
     * Retrieve a paginated list of load balancer pools. 
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @return ApiResponse&lt;LbPoolListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LbPoolListResult> listLoadBalancerPoolsWithHttpInfo(String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy) throws ApiException {
        com.squareup.okhttp.Call call = listLoadBalancerPoolsValidateBeforeCall(cursor, includedFields, pageSize, sortAscending, sortBy, null, null);
        Type localVarReturnType = new TypeToken<LbPoolListResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a paginated list of load balancer pools (asynchronously)
     * Retrieve a paginated list of load balancer pools. 
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listLoadBalancerPoolsAsync(String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, final ApiCallback<LbPoolListResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listLoadBalancerPoolsValidateBeforeCall(cursor, includedFields, pageSize, sortAscending, sortBy, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LbPoolListResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listLoadBalancerRules
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listLoadBalancerRulesCall(String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/loadbalancer/rules";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (includedFields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("included_fields", includedFields));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page_size", pageSize));
        if (sortAscending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_ascending", sortAscending));
        if (sortBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_by", sortBy));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listLoadBalancerRulesValidateBeforeCall(String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listLoadBalancerRulesCall(cursor, includedFields, pageSize, sortAscending, sortBy, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieve a paginated list of load balancer rules
     * Retrieve a paginated list of load balancer rules. 
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @return LbRuleListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LbRuleListResult listLoadBalancerRules(String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy) throws ApiException {
        ApiResponse<LbRuleListResult> resp = listLoadBalancerRulesWithHttpInfo(cursor, includedFields, pageSize, sortAscending, sortBy);
        return resp.getData();
    }

    /**
     * Retrieve a paginated list of load balancer rules
     * Retrieve a paginated list of load balancer rules. 
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @return ApiResponse&lt;LbRuleListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LbRuleListResult> listLoadBalancerRulesWithHttpInfo(String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy) throws ApiException {
        com.squareup.okhttp.Call call = listLoadBalancerRulesValidateBeforeCall(cursor, includedFields, pageSize, sortAscending, sortBy, null, null);
        Type localVarReturnType = new TypeToken<LbRuleListResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a paginated list of load balancer rules (asynchronously)
     * Retrieve a paginated list of load balancer rules. 
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listLoadBalancerRulesAsync(String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, final ApiCallback<LbRuleListResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listLoadBalancerRulesValidateBeforeCall(cursor, includedFields, pageSize, sortAscending, sortBy, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LbRuleListResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listLoadBalancerServerSslProfiles
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listLoadBalancerServerSslProfilesCall(String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/loadbalancer/server-ssl-profiles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (includedFields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("included_fields", includedFields));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page_size", pageSize));
        if (sortAscending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_ascending", sortAscending));
        if (sortBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_by", sortBy));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listLoadBalancerServerSslProfilesValidateBeforeCall(String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listLoadBalancerServerSslProfilesCall(cursor, includedFields, pageSize, sortAscending, sortBy, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieve a paginated list of load balancer server-ssl profiles
     * Retrieve a paginated list of load balancer server-ssl profiles. 
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @return LbServerSslProfileListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LbServerSslProfileListResult listLoadBalancerServerSslProfiles(String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy) throws ApiException {
        ApiResponse<LbServerSslProfileListResult> resp = listLoadBalancerServerSslProfilesWithHttpInfo(cursor, includedFields, pageSize, sortAscending, sortBy);
        return resp.getData();
    }

    /**
     * Retrieve a paginated list of load balancer server-ssl profiles
     * Retrieve a paginated list of load balancer server-ssl profiles. 
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @return ApiResponse&lt;LbServerSslProfileListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LbServerSslProfileListResult> listLoadBalancerServerSslProfilesWithHttpInfo(String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy) throws ApiException {
        com.squareup.okhttp.Call call = listLoadBalancerServerSslProfilesValidateBeforeCall(cursor, includedFields, pageSize, sortAscending, sortBy, null, null);
        Type localVarReturnType = new TypeToken<LbServerSslProfileListResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a paginated list of load balancer server-ssl profiles (asynchronously)
     * Retrieve a paginated list of load balancer server-ssl profiles. 
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listLoadBalancerServerSslProfilesAsync(String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, final ApiCallback<LbServerSslProfileListResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listLoadBalancerServerSslProfilesValidateBeforeCall(cursor, includedFields, pageSize, sortAscending, sortBy, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LbServerSslProfileListResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listLoadBalancerServices
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param logicalRouterId Logical router identifier (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listLoadBalancerServicesCall(String cursor, String includedFields, String logicalRouterId, Long pageSize, Boolean sortAscending, String sortBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/loadbalancer/services";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (includedFields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("included_fields", includedFields));
        if (logicalRouterId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("logical_router_id", logicalRouterId));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page_size", pageSize));
        if (sortAscending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_ascending", sortAscending));
        if (sortBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_by", sortBy));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listLoadBalancerServicesValidateBeforeCall(String cursor, String includedFields, String logicalRouterId, Long pageSize, Boolean sortAscending, String sortBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listLoadBalancerServicesCall(cursor, includedFields, logicalRouterId, pageSize, sortAscending, sortBy, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieve a paginated list of load balancer services
     * Retrieve a paginated list of load balancer services. When logical_router_id is specified in request parameters, the associated load balancer services which are related to the given logical router returned. 
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param logicalRouterId Logical router identifier (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @return LbServiceListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LbServiceListResult listLoadBalancerServices(String cursor, String includedFields, String logicalRouterId, Long pageSize, Boolean sortAscending, String sortBy) throws ApiException {
        ApiResponse<LbServiceListResult> resp = listLoadBalancerServicesWithHttpInfo(cursor, includedFields, logicalRouterId, pageSize, sortAscending, sortBy);
        return resp.getData();
    }

    /**
     * Retrieve a paginated list of load balancer services
     * Retrieve a paginated list of load balancer services. When logical_router_id is specified in request parameters, the associated load balancer services which are related to the given logical router returned. 
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param logicalRouterId Logical router identifier (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @return ApiResponse&lt;LbServiceListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LbServiceListResult> listLoadBalancerServicesWithHttpInfo(String cursor, String includedFields, String logicalRouterId, Long pageSize, Boolean sortAscending, String sortBy) throws ApiException {
        com.squareup.okhttp.Call call = listLoadBalancerServicesValidateBeforeCall(cursor, includedFields, logicalRouterId, pageSize, sortAscending, sortBy, null, null);
        Type localVarReturnType = new TypeToken<LbServiceListResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a paginated list of load balancer services (asynchronously)
     * Retrieve a paginated list of load balancer services. When logical_router_id is specified in request parameters, the associated load balancer services which are related to the given logical router returned. 
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param logicalRouterId Logical router identifier (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listLoadBalancerServicesAsync(String cursor, String includedFields, String logicalRouterId, Long pageSize, Boolean sortAscending, String sortBy, final ApiCallback<LbServiceListResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listLoadBalancerServicesValidateBeforeCall(cursor, includedFields, logicalRouterId, pageSize, sortAscending, sortBy, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LbServiceListResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listLoadBalancerSslCiphersAndProtocols
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listLoadBalancerSslCiphersAndProtocolsCall(String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/loadbalancer/ssl/ciphers-and-protocols";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (includedFields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("included_fields", includedFields));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page_size", pageSize));
        if (sortAscending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_ascending", sortAscending));
        if (sortBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_by", sortBy));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listLoadBalancerSslCiphersAndProtocolsValidateBeforeCall(String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listLoadBalancerSslCiphersAndProtocolsCall(cursor, includedFields, pageSize, sortAscending, sortBy, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieve a list of supported SSL ciphers and protocols
     * Retrieve a list of supported SSL ciphers and protocols. 
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @return LbSslCipherAndProtocolListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LbSslCipherAndProtocolListResult listLoadBalancerSslCiphersAndProtocols(String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy) throws ApiException {
        ApiResponse<LbSslCipherAndProtocolListResult> resp = listLoadBalancerSslCiphersAndProtocolsWithHttpInfo(cursor, includedFields, pageSize, sortAscending, sortBy);
        return resp.getData();
    }

    /**
     * Retrieve a list of supported SSL ciphers and protocols
     * Retrieve a list of supported SSL ciphers and protocols. 
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @return ApiResponse&lt;LbSslCipherAndProtocolListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LbSslCipherAndProtocolListResult> listLoadBalancerSslCiphersAndProtocolsWithHttpInfo(String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy) throws ApiException {
        com.squareup.okhttp.Call call = listLoadBalancerSslCiphersAndProtocolsValidateBeforeCall(cursor, includedFields, pageSize, sortAscending, sortBy, null, null);
        Type localVarReturnType = new TypeToken<LbSslCipherAndProtocolListResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a list of supported SSL ciphers and protocols (asynchronously)
     * Retrieve a list of supported SSL ciphers and protocols. 
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listLoadBalancerSslCiphersAndProtocolsAsync(String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, final ApiCallback<LbSslCipherAndProtocolListResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listLoadBalancerSslCiphersAndProtocolsValidateBeforeCall(cursor, includedFields, pageSize, sortAscending, sortBy, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LbSslCipherAndProtocolListResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listLoadBalancerTcpProfiles
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listLoadBalancerTcpProfilesCall(String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/loadbalancer/tcp-profiles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (includedFields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("included_fields", includedFields));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page_size", pageSize));
        if (sortAscending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_ascending", sortAscending));
        if (sortBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_by", sortBy));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listLoadBalancerTcpProfilesValidateBeforeCall(String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listLoadBalancerTcpProfilesCall(cursor, includedFields, pageSize, sortAscending, sortBy, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieve a paginated list of load balancer TCP profiles
     * Retrieve a paginated list of load balancer TCP profiles. 
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @return LbTcpProfileListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LbTcpProfileListResult listLoadBalancerTcpProfiles(String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy) throws ApiException {
        ApiResponse<LbTcpProfileListResult> resp = listLoadBalancerTcpProfilesWithHttpInfo(cursor, includedFields, pageSize, sortAscending, sortBy);
        return resp.getData();
    }

    /**
     * Retrieve a paginated list of load balancer TCP profiles
     * Retrieve a paginated list of load balancer TCP profiles. 
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @return ApiResponse&lt;LbTcpProfileListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LbTcpProfileListResult> listLoadBalancerTcpProfilesWithHttpInfo(String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy) throws ApiException {
        com.squareup.okhttp.Call call = listLoadBalancerTcpProfilesValidateBeforeCall(cursor, includedFields, pageSize, sortAscending, sortBy, null, null);
        Type localVarReturnType = new TypeToken<LbTcpProfileListResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a paginated list of load balancer TCP profiles (asynchronously)
     * Retrieve a paginated list of load balancer TCP profiles. 
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listLoadBalancerTcpProfilesAsync(String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, final ApiCallback<LbTcpProfileListResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listLoadBalancerTcpProfilesValidateBeforeCall(cursor, includedFields, pageSize, sortAscending, sortBy, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LbTcpProfileListResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listLoadBalancerVirtualServerStatuses
     * @param serviceId  (required)
     * @param source Data source type. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listLoadBalancerVirtualServerStatusesCall(String serviceId, String source, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/loadbalancer/services/{service-id}/virtual-servers/status"
            .replaceAll("\\{" + "service-id" + "\\}", apiClient.escapeString(serviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (source != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("source", source));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listLoadBalancerVirtualServerStatusesValidateBeforeCall(String serviceId, String source, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'serviceId' is set
        if (serviceId == null) {
            throw new ApiException("Missing the required parameter 'serviceId' when calling listLoadBalancerVirtualServerStatuses(Async)");
        }
        
        com.squareup.okhttp.Call call = listLoadBalancerVirtualServerStatusesCall(serviceId, source, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the status list of virtual servers in given load balancer service
     * Returns the status list of virtual servers in given load balancer service. 
     * @param serviceId  (required)
     * @param source Data source type. (optional)
     * @return LbVirtualServerStatusListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LbVirtualServerStatusListResult listLoadBalancerVirtualServerStatuses(String serviceId, String source) throws ApiException {
        ApiResponse<LbVirtualServerStatusListResult> resp = listLoadBalancerVirtualServerStatusesWithHttpInfo(serviceId, source);
        return resp.getData();
    }

    /**
     * Get the status list of virtual servers in given load balancer service
     * Returns the status list of virtual servers in given load balancer service. 
     * @param serviceId  (required)
     * @param source Data source type. (optional)
     * @return ApiResponse&lt;LbVirtualServerStatusListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LbVirtualServerStatusListResult> listLoadBalancerVirtualServerStatusesWithHttpInfo(String serviceId, String source) throws ApiException {
        com.squareup.okhttp.Call call = listLoadBalancerVirtualServerStatusesValidateBeforeCall(serviceId, source, null, null);
        Type localVarReturnType = new TypeToken<LbVirtualServerStatusListResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the status list of virtual servers in given load balancer service (asynchronously)
     * Returns the status list of virtual servers in given load balancer service. 
     * @param serviceId  (required)
     * @param source Data source type. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listLoadBalancerVirtualServerStatusesAsync(String serviceId, String source, final ApiCallback<LbVirtualServerStatusListResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listLoadBalancerVirtualServerStatusesValidateBeforeCall(serviceId, source, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LbVirtualServerStatusListResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listLoadBalancerVirtualServers
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listLoadBalancerVirtualServersCall(String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/loadbalancer/virtual-servers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (includedFields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("included_fields", includedFields));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page_size", pageSize));
        if (sortAscending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_ascending", sortAscending));
        if (sortBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_by", sortBy));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listLoadBalancerVirtualServersValidateBeforeCall(String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listLoadBalancerVirtualServersCall(cursor, includedFields, pageSize, sortAscending, sortBy, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieve a paginated list of load balancer virtual servers
     * Retrieve a paginated list of load balancer virtual servers. 
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @return LbVirtualServerListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LbVirtualServerListResult listLoadBalancerVirtualServers(String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy) throws ApiException {
        ApiResponse<LbVirtualServerListResult> resp = listLoadBalancerVirtualServersWithHttpInfo(cursor, includedFields, pageSize, sortAscending, sortBy);
        return resp.getData();
    }

    /**
     * Retrieve a paginated list of load balancer virtual servers
     * Retrieve a paginated list of load balancer virtual servers. 
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @return ApiResponse&lt;LbVirtualServerListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LbVirtualServerListResult> listLoadBalancerVirtualServersWithHttpInfo(String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy) throws ApiException {
        com.squareup.okhttp.Call call = listLoadBalancerVirtualServersValidateBeforeCall(cursor, includedFields, pageSize, sortAscending, sortBy, null, null);
        Type localVarReturnType = new TypeToken<LbVirtualServerListResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a paginated list of load balancer virtual servers (asynchronously)
     * Retrieve a paginated list of load balancer virtual servers. 
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listLoadBalancerVirtualServersAsync(String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, final ApiCallback<LbVirtualServerListResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listLoadBalancerVirtualServersValidateBeforeCall(cursor, includedFields, pageSize, sortAscending, sortBy, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LbVirtualServerListResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listLoadBalancerVirtualServersStatistics
     * @param serviceId  (required)
     * @param source Data source type. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listLoadBalancerVirtualServersStatisticsCall(String serviceId, String source, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/loadbalancer/services/{service-id}/virtual-servers/statistics"
            .replaceAll("\\{" + "service-id" + "\\}", apiClient.escapeString(serviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (source != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("source", source));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listLoadBalancerVirtualServersStatisticsValidateBeforeCall(String serviceId, String source, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'serviceId' is set
        if (serviceId == null) {
            throw new ApiException("Missing the required parameter 'serviceId' when calling listLoadBalancerVirtualServersStatistics(Async)");
        }
        
        com.squareup.okhttp.Call call = listLoadBalancerVirtualServersStatisticsCall(serviceId, source, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the statistics list of virtual servers
     * Returns the statistics list of virtual servers in given load balancer service. Currently, only realtime mode is supported. 
     * @param serviceId  (required)
     * @param source Data source type. (optional)
     * @return LbVirtualServerStatisticsListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LbVirtualServerStatisticsListResult listLoadBalancerVirtualServersStatistics(String serviceId, String source) throws ApiException {
        ApiResponse<LbVirtualServerStatisticsListResult> resp = listLoadBalancerVirtualServersStatisticsWithHttpInfo(serviceId, source);
        return resp.getData();
    }

    /**
     * Get the statistics list of virtual servers
     * Returns the statistics list of virtual servers in given load balancer service. Currently, only realtime mode is supported. 
     * @param serviceId  (required)
     * @param source Data source type. (optional)
     * @return ApiResponse&lt;LbVirtualServerStatisticsListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LbVirtualServerStatisticsListResult> listLoadBalancerVirtualServersStatisticsWithHttpInfo(String serviceId, String source) throws ApiException {
        com.squareup.okhttp.Call call = listLoadBalancerVirtualServersStatisticsValidateBeforeCall(serviceId, source, null, null);
        Type localVarReturnType = new TypeToken<LbVirtualServerStatisticsListResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the statistics list of virtual servers (asynchronously)
     * Returns the statistics list of virtual servers in given load balancer service. Currently, only realtime mode is supported. 
     * @param serviceId  (required)
     * @param source Data source type. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listLoadBalancerVirtualServersStatisticsAsync(String serviceId, String source, final ApiCallback<LbVirtualServerStatisticsListResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listLoadBalancerVirtualServersStatisticsValidateBeforeCall(serviceId, source, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LbVirtualServerStatisticsListResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for performPoolMemberAction
     * @param body  (required)
     * @param action Specifies addition, removal and modification action (required)
     * @param poolId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call performPoolMemberActionCall(PoolMemberSettingList body, String action, String poolId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/loadbalancer/pools/{pool-id}"
            .replaceAll("\\{" + "pool-id" + "\\}", apiClient.escapeString(poolId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (action != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("action", action));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call performPoolMemberActionValidateBeforeCall(PoolMemberSettingList body, String action, String poolId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling performPoolMemberAction(Async)");
        }
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling performPoolMemberAction(Async)");
        }
        // verify the required parameter 'poolId' is set
        if (poolId == null) {
            throw new ApiException("Missing the required parameter 'poolId' when calling performPoolMemberAction(Async)");
        }
        
        com.squareup.okhttp.Call call = performPoolMemberActionCall(body, action, poolId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add, remove, or modify load balancer pool members
     * For ADD_MEMBERS, pool members will be created and added to load balancer pool. This action is only valid for static pool members. For REMOVE_MEMBERS, pool members will be removed from load balancer pool via IP and port in pool member settings. This action is only valid for static pool members. For UPDATE_MEMBERS, pool members admin state will be updated. This action is valid for both static pool members and dynamic pool members. For dynamic pool members, this update will be stored in customized_members field in load balancer pool member group. 
     * @param body  (required)
     * @param action Specifies addition, removal and modification action (required)
     * @param poolId  (required)
     * @return LbPool
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LbPool performPoolMemberAction(PoolMemberSettingList body, String action, String poolId) throws ApiException {
        ApiResponse<LbPool> resp = performPoolMemberActionWithHttpInfo(body, action, poolId);
        return resp.getData();
    }

    /**
     * Add, remove, or modify load balancer pool members
     * For ADD_MEMBERS, pool members will be created and added to load balancer pool. This action is only valid for static pool members. For REMOVE_MEMBERS, pool members will be removed from load balancer pool via IP and port in pool member settings. This action is only valid for static pool members. For UPDATE_MEMBERS, pool members admin state will be updated. This action is valid for both static pool members and dynamic pool members. For dynamic pool members, this update will be stored in customized_members field in load balancer pool member group. 
     * @param body  (required)
     * @param action Specifies addition, removal and modification action (required)
     * @param poolId  (required)
     * @return ApiResponse&lt;LbPool&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LbPool> performPoolMemberActionWithHttpInfo(PoolMemberSettingList body, String action, String poolId) throws ApiException {
        com.squareup.okhttp.Call call = performPoolMemberActionValidateBeforeCall(body, action, poolId, null, null);
        Type localVarReturnType = new TypeToken<LbPool>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add, remove, or modify load balancer pool members (asynchronously)
     * For ADD_MEMBERS, pool members will be created and added to load balancer pool. This action is only valid for static pool members. For REMOVE_MEMBERS, pool members will be removed from load balancer pool via IP and port in pool member settings. This action is only valid for static pool members. For UPDATE_MEMBERS, pool members admin state will be updated. This action is valid for both static pool members and dynamic pool members. For dynamic pool members, this update will be stored in customized_members field in load balancer pool member group. 
     * @param body  (required)
     * @param action Specifies addition, removal and modification action (required)
     * @param poolId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call performPoolMemberActionAsync(PoolMemberSettingList body, String action, String poolId, final ApiCallback<LbPool> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = performPoolMemberActionValidateBeforeCall(body, action, poolId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LbPool>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for readLoadBalancerApplicationProfile
     * @param applicationProfileId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call readLoadBalancerApplicationProfileCall(String applicationProfileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/loadbalancer/application-profiles/{application-profile-id}"
            .replaceAll("\\{" + "application-profile-id" + "\\}", apiClient.escapeString(applicationProfileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call readLoadBalancerApplicationProfileValidateBeforeCall(String applicationProfileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'applicationProfileId' is set
        if (applicationProfileId == null) {
            throw new ApiException("Missing the required parameter 'applicationProfileId' when calling readLoadBalancerApplicationProfile(Async)");
        }
        
        com.squareup.okhttp.Call call = readLoadBalancerApplicationProfileCall(applicationProfileId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieve a load balancer application profile
     * Retrieve a load balancer application profile. 
     * @param applicationProfileId  (required)
     * @return LbAppProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LbAppProfile readLoadBalancerApplicationProfile(String applicationProfileId) throws ApiException {
        ApiResponse<LbAppProfile> resp = readLoadBalancerApplicationProfileWithHttpInfo(applicationProfileId);
        return resp.getData();
    }

    /**
     * Retrieve a load balancer application profile
     * Retrieve a load balancer application profile. 
     * @param applicationProfileId  (required)
     * @return ApiResponse&lt;LbAppProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LbAppProfile> readLoadBalancerApplicationProfileWithHttpInfo(String applicationProfileId) throws ApiException {
        com.squareup.okhttp.Call call = readLoadBalancerApplicationProfileValidateBeforeCall(applicationProfileId, null, null);
        Type localVarReturnType = new TypeToken<LbAppProfile>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a load balancer application profile (asynchronously)
     * Retrieve a load balancer application profile. 
     * @param applicationProfileId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call readLoadBalancerApplicationProfileAsync(String applicationProfileId, final ApiCallback<LbAppProfile> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = readLoadBalancerApplicationProfileValidateBeforeCall(applicationProfileId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LbAppProfile>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for readLoadBalancerClientSslProfile
     * @param clientSslProfileId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call readLoadBalancerClientSslProfileCall(String clientSslProfileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/loadbalancer/client-ssl-profiles/{client-ssl-profile-id}"
            .replaceAll("\\{" + "client-ssl-profile-id" + "\\}", apiClient.escapeString(clientSslProfileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call readLoadBalancerClientSslProfileValidateBeforeCall(String clientSslProfileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'clientSslProfileId' is set
        if (clientSslProfileId == null) {
            throw new ApiException("Missing the required parameter 'clientSslProfileId' when calling readLoadBalancerClientSslProfile(Async)");
        }
        
        com.squareup.okhttp.Call call = readLoadBalancerClientSslProfileCall(clientSslProfileId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieve a load balancer client-ssl profile
     * Retrieve a load balancer client-ssl profile. 
     * @param clientSslProfileId  (required)
     * @return LbClientSslProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LbClientSslProfile readLoadBalancerClientSslProfile(String clientSslProfileId) throws ApiException {
        ApiResponse<LbClientSslProfile> resp = readLoadBalancerClientSslProfileWithHttpInfo(clientSslProfileId);
        return resp.getData();
    }

    /**
     * Retrieve a load balancer client-ssl profile
     * Retrieve a load balancer client-ssl profile. 
     * @param clientSslProfileId  (required)
     * @return ApiResponse&lt;LbClientSslProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LbClientSslProfile> readLoadBalancerClientSslProfileWithHttpInfo(String clientSslProfileId) throws ApiException {
        com.squareup.okhttp.Call call = readLoadBalancerClientSslProfileValidateBeforeCall(clientSslProfileId, null, null);
        Type localVarReturnType = new TypeToken<LbClientSslProfile>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a load balancer client-ssl profile (asynchronously)
     * Retrieve a load balancer client-ssl profile. 
     * @param clientSslProfileId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call readLoadBalancerClientSslProfileAsync(String clientSslProfileId, final ApiCallback<LbClientSslProfile> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = readLoadBalancerClientSslProfileValidateBeforeCall(clientSslProfileId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LbClientSslProfile>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for readLoadBalancerMonitor
     * @param monitorId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call readLoadBalancerMonitorCall(String monitorId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/loadbalancer/monitors/{monitor-id}"
            .replaceAll("\\{" + "monitor-id" + "\\}", apiClient.escapeString(monitorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call readLoadBalancerMonitorValidateBeforeCall(String monitorId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'monitorId' is set
        if (monitorId == null) {
            throw new ApiException("Missing the required parameter 'monitorId' when calling readLoadBalancerMonitor(Async)");
        }
        
        com.squareup.okhttp.Call call = readLoadBalancerMonitorCall(monitorId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieve a load balancer monitor
     * Retrieve a load balancer monitor. 
     * @param monitorId  (required)
     * @return LbMonitor
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LbMonitor readLoadBalancerMonitor(String monitorId) throws ApiException {
        ApiResponse<LbMonitor> resp = readLoadBalancerMonitorWithHttpInfo(monitorId);
        return resp.getData();
    }

    /**
     * Retrieve a load balancer monitor
     * Retrieve a load balancer monitor. 
     * @param monitorId  (required)
     * @return ApiResponse&lt;LbMonitor&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LbMonitor> readLoadBalancerMonitorWithHttpInfo(String monitorId) throws ApiException {
        com.squareup.okhttp.Call call = readLoadBalancerMonitorValidateBeforeCall(monitorId, null, null);
        Type localVarReturnType = new TypeToken<LbMonitor>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a load balancer monitor (asynchronously)
     * Retrieve a load balancer monitor. 
     * @param monitorId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call readLoadBalancerMonitorAsync(String monitorId, final ApiCallback<LbMonitor> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = readLoadBalancerMonitorValidateBeforeCall(monitorId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LbMonitor>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for readLoadBalancerNodeUsage
     * @param nodeId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call readLoadBalancerNodeUsageCall(String nodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/loadbalancer/usage-per-node/{node-id}"
            .replaceAll("\\{" + "node-id" + "\\}", apiClient.escapeString(nodeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call readLoadBalancerNodeUsageValidateBeforeCall(String nodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'nodeId' is set
        if (nodeId == null) {
            throw new ApiException("Missing the required parameter 'nodeId' when calling readLoadBalancerNodeUsage(Async)");
        }
        
        com.squareup.okhttp.Call call = readLoadBalancerNodeUsageCall(nodeId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read load balancer usage for the given node
     * API is used to retrieve the usage of load balancer entities which include current number and remaining number of credits, virtual Servers, pools, pool Members and different size of LB services from the given node. Currently only Edge node is supported. 
     * @param nodeId  (required)
     * @return LbNodeUsage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LbNodeUsage readLoadBalancerNodeUsage(String nodeId) throws ApiException {
        ApiResponse<LbNodeUsage> resp = readLoadBalancerNodeUsageWithHttpInfo(nodeId);
        return resp.getData();
    }

    /**
     * Read load balancer usage for the given node
     * API is used to retrieve the usage of load balancer entities which include current number and remaining number of credits, virtual Servers, pools, pool Members and different size of LB services from the given node. Currently only Edge node is supported. 
     * @param nodeId  (required)
     * @return ApiResponse&lt;LbNodeUsage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LbNodeUsage> readLoadBalancerNodeUsageWithHttpInfo(String nodeId) throws ApiException {
        com.squareup.okhttp.Call call = readLoadBalancerNodeUsageValidateBeforeCall(nodeId, null, null);
        Type localVarReturnType = new TypeToken<LbNodeUsage>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read load balancer usage for the given node (asynchronously)
     * API is used to retrieve the usage of load balancer entities which include current number and remaining number of credits, virtual Servers, pools, pool Members and different size of LB services from the given node. Currently only Edge node is supported. 
     * @param nodeId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call readLoadBalancerNodeUsageAsync(String nodeId, final ApiCallback<LbNodeUsage> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = readLoadBalancerNodeUsageValidateBeforeCall(nodeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LbNodeUsage>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for readLoadBalancerNodeUsageSummary
     * @param includeUsages Whether to include node usages (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call readLoadBalancerNodeUsageSummaryCall(Boolean includeUsages, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/loadbalancer/node-usage-summary";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (includeUsages != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("include_usages", includeUsages));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call readLoadBalancerNodeUsageSummaryValidateBeforeCall(Boolean includeUsages, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = readLoadBalancerNodeUsageSummaryCall(includeUsages, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read load balancer node usage summary
     * API is used to retrieve the load balancer node usage summary for all nodes. 
     * @param includeUsages Whether to include node usages (optional)
     * @return LbNodeUsageSummary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LbNodeUsageSummary readLoadBalancerNodeUsageSummary(Boolean includeUsages) throws ApiException {
        ApiResponse<LbNodeUsageSummary> resp = readLoadBalancerNodeUsageSummaryWithHttpInfo(includeUsages);
        return resp.getData();
    }

    /**
     * Read load balancer node usage summary
     * API is used to retrieve the load balancer node usage summary for all nodes. 
     * @param includeUsages Whether to include node usages (optional)
     * @return ApiResponse&lt;LbNodeUsageSummary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LbNodeUsageSummary> readLoadBalancerNodeUsageSummaryWithHttpInfo(Boolean includeUsages) throws ApiException {
        com.squareup.okhttp.Call call = readLoadBalancerNodeUsageSummaryValidateBeforeCall(includeUsages, null, null);
        Type localVarReturnType = new TypeToken<LbNodeUsageSummary>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read load balancer node usage summary (asynchronously)
     * API is used to retrieve the load balancer node usage summary for all nodes. 
     * @param includeUsages Whether to include node usages (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call readLoadBalancerNodeUsageSummaryAsync(Boolean includeUsages, final ApiCallback<LbNodeUsageSummary> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = readLoadBalancerNodeUsageSummaryValidateBeforeCall(includeUsages, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LbNodeUsageSummary>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for readLoadBalancerPersistenceProfile
     * @param persistenceProfileId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call readLoadBalancerPersistenceProfileCall(String persistenceProfileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/loadbalancer/persistence-profiles/{persistence-profile-id}"
            .replaceAll("\\{" + "persistence-profile-id" + "\\}", apiClient.escapeString(persistenceProfileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call readLoadBalancerPersistenceProfileValidateBeforeCall(String persistenceProfileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'persistenceProfileId' is set
        if (persistenceProfileId == null) {
            throw new ApiException("Missing the required parameter 'persistenceProfileId' when calling readLoadBalancerPersistenceProfile(Async)");
        }
        
        com.squareup.okhttp.Call call = readLoadBalancerPersistenceProfileCall(persistenceProfileId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieve a load balancer persistence profile
     * Retrieve a load balancer persistence profile. 
     * @param persistenceProfileId  (required)
     * @return LbPersistenceProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LbPersistenceProfile readLoadBalancerPersistenceProfile(String persistenceProfileId) throws ApiException {
        ApiResponse<LbPersistenceProfile> resp = readLoadBalancerPersistenceProfileWithHttpInfo(persistenceProfileId);
        return resp.getData();
    }

    /**
     * Retrieve a load balancer persistence profile
     * Retrieve a load balancer persistence profile. 
     * @param persistenceProfileId  (required)
     * @return ApiResponse&lt;LbPersistenceProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LbPersistenceProfile> readLoadBalancerPersistenceProfileWithHttpInfo(String persistenceProfileId) throws ApiException {
        com.squareup.okhttp.Call call = readLoadBalancerPersistenceProfileValidateBeforeCall(persistenceProfileId, null, null);
        Type localVarReturnType = new TypeToken<LbPersistenceProfile>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a load balancer persistence profile (asynchronously)
     * Retrieve a load balancer persistence profile. 
     * @param persistenceProfileId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call readLoadBalancerPersistenceProfileAsync(String persistenceProfileId, final ApiCallback<LbPersistenceProfile> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = readLoadBalancerPersistenceProfileValidateBeforeCall(persistenceProfileId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LbPersistenceProfile>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for readLoadBalancerPool
     * @param poolId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call readLoadBalancerPoolCall(String poolId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/loadbalancer/pools/{pool-id}"
            .replaceAll("\\{" + "pool-id" + "\\}", apiClient.escapeString(poolId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call readLoadBalancerPoolValidateBeforeCall(String poolId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'poolId' is set
        if (poolId == null) {
            throw new ApiException("Missing the required parameter 'poolId' when calling readLoadBalancerPool(Async)");
        }
        
        com.squareup.okhttp.Call call = readLoadBalancerPoolCall(poolId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieve a load balancer pool
     * Retrieve a load balancer pool. 
     * @param poolId  (required)
     * @return LbPool
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LbPool readLoadBalancerPool(String poolId) throws ApiException {
        ApiResponse<LbPool> resp = readLoadBalancerPoolWithHttpInfo(poolId);
        return resp.getData();
    }

    /**
     * Retrieve a load balancer pool
     * Retrieve a load balancer pool. 
     * @param poolId  (required)
     * @return ApiResponse&lt;LbPool&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LbPool> readLoadBalancerPoolWithHttpInfo(String poolId) throws ApiException {
        com.squareup.okhttp.Call call = readLoadBalancerPoolValidateBeforeCall(poolId, null, null);
        Type localVarReturnType = new TypeToken<LbPool>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a load balancer pool (asynchronously)
     * Retrieve a load balancer pool. 
     * @param poolId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call readLoadBalancerPoolAsync(String poolId, final ApiCallback<LbPool> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = readLoadBalancerPoolValidateBeforeCall(poolId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LbPool>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for readLoadBalancerRule
     * @param ruleId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call readLoadBalancerRuleCall(String ruleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/loadbalancer/rules/{rule-id}"
            .replaceAll("\\{" + "rule-id" + "\\}", apiClient.escapeString(ruleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call readLoadBalancerRuleValidateBeforeCall(String ruleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'ruleId' is set
        if (ruleId == null) {
            throw new ApiException("Missing the required parameter 'ruleId' when calling readLoadBalancerRule(Async)");
        }
        
        com.squareup.okhttp.Call call = readLoadBalancerRuleCall(ruleId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieve a load balancer rule
     * Retrieve a load balancer rule. 
     * @param ruleId  (required)
     * @return LbRule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LbRule readLoadBalancerRule(String ruleId) throws ApiException {
        ApiResponse<LbRule> resp = readLoadBalancerRuleWithHttpInfo(ruleId);
        return resp.getData();
    }

    /**
     * Retrieve a load balancer rule
     * Retrieve a load balancer rule. 
     * @param ruleId  (required)
     * @return ApiResponse&lt;LbRule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LbRule> readLoadBalancerRuleWithHttpInfo(String ruleId) throws ApiException {
        com.squareup.okhttp.Call call = readLoadBalancerRuleValidateBeforeCall(ruleId, null, null);
        Type localVarReturnType = new TypeToken<LbRule>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a load balancer rule (asynchronously)
     * Retrieve a load balancer rule. 
     * @param ruleId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call readLoadBalancerRuleAsync(String ruleId, final ApiCallback<LbRule> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = readLoadBalancerRuleValidateBeforeCall(ruleId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LbRule>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for readLoadBalancerServerSslProfile
     * @param serverSslProfileId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call readLoadBalancerServerSslProfileCall(String serverSslProfileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/loadbalancer/server-ssl-profiles/{server-ssl-profile-id}"
            .replaceAll("\\{" + "server-ssl-profile-id" + "\\}", apiClient.escapeString(serverSslProfileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call readLoadBalancerServerSslProfileValidateBeforeCall(String serverSslProfileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'serverSslProfileId' is set
        if (serverSslProfileId == null) {
            throw new ApiException("Missing the required parameter 'serverSslProfileId' when calling readLoadBalancerServerSslProfile(Async)");
        }
        
        com.squareup.okhttp.Call call = readLoadBalancerServerSslProfileCall(serverSslProfileId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieve a load balancer server-ssl profile
     * Retrieve a load balancer server-ssl profile. 
     * @param serverSslProfileId  (required)
     * @return LbServerSslProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LbServerSslProfile readLoadBalancerServerSslProfile(String serverSslProfileId) throws ApiException {
        ApiResponse<LbServerSslProfile> resp = readLoadBalancerServerSslProfileWithHttpInfo(serverSslProfileId);
        return resp.getData();
    }

    /**
     * Retrieve a load balancer server-ssl profile
     * Retrieve a load balancer server-ssl profile. 
     * @param serverSslProfileId  (required)
     * @return ApiResponse&lt;LbServerSslProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LbServerSslProfile> readLoadBalancerServerSslProfileWithHttpInfo(String serverSslProfileId) throws ApiException {
        com.squareup.okhttp.Call call = readLoadBalancerServerSslProfileValidateBeforeCall(serverSslProfileId, null, null);
        Type localVarReturnType = new TypeToken<LbServerSslProfile>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a load balancer server-ssl profile (asynchronously)
     * Retrieve a load balancer server-ssl profile. 
     * @param serverSslProfileId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call readLoadBalancerServerSslProfileAsync(String serverSslProfileId, final ApiCallback<LbServerSslProfile> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = readLoadBalancerServerSslProfileValidateBeforeCall(serverSslProfileId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LbServerSslProfile>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for readLoadBalancerService
     * @param serviceId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call readLoadBalancerServiceCall(String serviceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/loadbalancer/services/{service-id}"
            .replaceAll("\\{" + "service-id" + "\\}", apiClient.escapeString(serviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call readLoadBalancerServiceValidateBeforeCall(String serviceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'serviceId' is set
        if (serviceId == null) {
            throw new ApiException("Missing the required parameter 'serviceId' when calling readLoadBalancerService(Async)");
        }
        
        com.squareup.okhttp.Call call = readLoadBalancerServiceCall(serviceId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieve a load balancer service
     * Retrieve a load balancer service. 
     * @param serviceId  (required)
     * @return LbService
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LbService readLoadBalancerService(String serviceId) throws ApiException {
        ApiResponse<LbService> resp = readLoadBalancerServiceWithHttpInfo(serviceId);
        return resp.getData();
    }

    /**
     * Retrieve a load balancer service
     * Retrieve a load balancer service. 
     * @param serviceId  (required)
     * @return ApiResponse&lt;LbService&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LbService> readLoadBalancerServiceWithHttpInfo(String serviceId) throws ApiException {
        com.squareup.okhttp.Call call = readLoadBalancerServiceValidateBeforeCall(serviceId, null, null);
        Type localVarReturnType = new TypeToken<LbService>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a load balancer service (asynchronously)
     * Retrieve a load balancer service. 
     * @param serviceId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call readLoadBalancerServiceAsync(String serviceId, final ApiCallback<LbService> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = readLoadBalancerServiceValidateBeforeCall(serviceId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LbService>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for readLoadBalancerServiceDebugInfo
     * @param serviceId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call readLoadBalancerServiceDebugInfoCall(String serviceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/loadbalancer/services/{service-id}/debug-info"
            .replaceAll("\\{" + "service-id" + "\\}", apiClient.escapeString(serviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call readLoadBalancerServiceDebugInfoValidateBeforeCall(String serviceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'serviceId' is set
        if (serviceId == null) {
            throw new ApiException("Missing the required parameter 'serviceId' when calling readLoadBalancerServiceDebugInfo(Async)");
        }
        
        com.squareup.okhttp.Call call = readLoadBalancerServiceDebugInfoCall(serviceId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read the debug information of the load balancer service
     * API to download below information which will be used for debugging and troubleshooting. 1) Load balancer service 2) Load balancer associated virtual servers 3) Load balancer associated pools 4) Load balancer associated profiles such as persistence, SSL, application. 5) Load balancer associated monitors 6) Load balancer associated rules 
     * @param serviceId  (required)
     * @return LbServiceDebugInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LbServiceDebugInfo readLoadBalancerServiceDebugInfo(String serviceId) throws ApiException {
        ApiResponse<LbServiceDebugInfo> resp = readLoadBalancerServiceDebugInfoWithHttpInfo(serviceId);
        return resp.getData();
    }

    /**
     * Read the debug information of the load balancer service
     * API to download below information which will be used for debugging and troubleshooting. 1) Load balancer service 2) Load balancer associated virtual servers 3) Load balancer associated pools 4) Load balancer associated profiles such as persistence, SSL, application. 5) Load balancer associated monitors 6) Load balancer associated rules 
     * @param serviceId  (required)
     * @return ApiResponse&lt;LbServiceDebugInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LbServiceDebugInfo> readLoadBalancerServiceDebugInfoWithHttpInfo(String serviceId) throws ApiException {
        com.squareup.okhttp.Call call = readLoadBalancerServiceDebugInfoValidateBeforeCall(serviceId, null, null);
        Type localVarReturnType = new TypeToken<LbServiceDebugInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read the debug information of the load balancer service (asynchronously)
     * API to download below information which will be used for debugging and troubleshooting. 1) Load balancer service 2) Load balancer associated virtual servers 3) Load balancer associated pools 4) Load balancer associated profiles such as persistence, SSL, application. 5) Load balancer associated monitors 6) Load balancer associated rules 
     * @param serviceId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call readLoadBalancerServiceDebugInfoAsync(String serviceId, final ApiCallback<LbServiceDebugInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = readLoadBalancerServiceDebugInfoValidateBeforeCall(serviceId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LbServiceDebugInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for readLoadBalancerServiceUsage
     * @param serviceId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call readLoadBalancerServiceUsageCall(String serviceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/loadbalancer/services/{service-id}/usage"
            .replaceAll("\\{" + "service-id" + "\\}", apiClient.escapeString(serviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call readLoadBalancerServiceUsageValidateBeforeCall(String serviceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'serviceId' is set
        if (serviceId == null) {
            throw new ApiException("Missing the required parameter 'serviceId' when calling readLoadBalancerServiceUsage(Async)");
        }
        
        com.squareup.okhttp.Call call = readLoadBalancerServiceUsageCall(serviceId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read the usage information of the given load balancer service
     * API to fetch the capacity and current usage of the given load balancer service. 
     * @param serviceId  (required)
     * @return LbServiceUsage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LbServiceUsage readLoadBalancerServiceUsage(String serviceId) throws ApiException {
        ApiResponse<LbServiceUsage> resp = readLoadBalancerServiceUsageWithHttpInfo(serviceId);
        return resp.getData();
    }

    /**
     * Read the usage information of the given load balancer service
     * API to fetch the capacity and current usage of the given load balancer service. 
     * @param serviceId  (required)
     * @return ApiResponse&lt;LbServiceUsage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LbServiceUsage> readLoadBalancerServiceUsageWithHttpInfo(String serviceId) throws ApiException {
        com.squareup.okhttp.Call call = readLoadBalancerServiceUsageValidateBeforeCall(serviceId, null, null);
        Type localVarReturnType = new TypeToken<LbServiceUsage>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read the usage information of the given load balancer service (asynchronously)
     * API to fetch the capacity and current usage of the given load balancer service. 
     * @param serviceId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call readLoadBalancerServiceUsageAsync(String serviceId, final ApiCallback<LbServiceUsage> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = readLoadBalancerServiceUsageValidateBeforeCall(serviceId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LbServiceUsage>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for readLoadBalancerTcpProfile
     * @param tcpProfileId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call readLoadBalancerTcpProfileCall(String tcpProfileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/loadbalancer/tcp-profiles/{tcp-profile-id}"
            .replaceAll("\\{" + "tcp-profile-id" + "\\}", apiClient.escapeString(tcpProfileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call readLoadBalancerTcpProfileValidateBeforeCall(String tcpProfileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'tcpProfileId' is set
        if (tcpProfileId == null) {
            throw new ApiException("Missing the required parameter 'tcpProfileId' when calling readLoadBalancerTcpProfile(Async)");
        }
        
        com.squareup.okhttp.Call call = readLoadBalancerTcpProfileCall(tcpProfileId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieve a load balancer TCP profile
     * Retrieve a load balancer TCP profile. 
     * @param tcpProfileId  (required)
     * @return LbTcpProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LbTcpProfile readLoadBalancerTcpProfile(String tcpProfileId) throws ApiException {
        ApiResponse<LbTcpProfile> resp = readLoadBalancerTcpProfileWithHttpInfo(tcpProfileId);
        return resp.getData();
    }

    /**
     * Retrieve a load balancer TCP profile
     * Retrieve a load balancer TCP profile. 
     * @param tcpProfileId  (required)
     * @return ApiResponse&lt;LbTcpProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LbTcpProfile> readLoadBalancerTcpProfileWithHttpInfo(String tcpProfileId) throws ApiException {
        com.squareup.okhttp.Call call = readLoadBalancerTcpProfileValidateBeforeCall(tcpProfileId, null, null);
        Type localVarReturnType = new TypeToken<LbTcpProfile>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a load balancer TCP profile (asynchronously)
     * Retrieve a load balancer TCP profile. 
     * @param tcpProfileId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call readLoadBalancerTcpProfileAsync(String tcpProfileId, final ApiCallback<LbTcpProfile> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = readLoadBalancerTcpProfileValidateBeforeCall(tcpProfileId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LbTcpProfile>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for readLoadBalancerVirtualServer
     * @param virtualServerId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call readLoadBalancerVirtualServerCall(String virtualServerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/loadbalancer/virtual-servers/{virtual-server-id}"
            .replaceAll("\\{" + "virtual-server-id" + "\\}", apiClient.escapeString(virtualServerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call readLoadBalancerVirtualServerValidateBeforeCall(String virtualServerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'virtualServerId' is set
        if (virtualServerId == null) {
            throw new ApiException("Missing the required parameter 'virtualServerId' when calling readLoadBalancerVirtualServer(Async)");
        }
        
        com.squareup.okhttp.Call call = readLoadBalancerVirtualServerCall(virtualServerId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieve a load balancer virtual server
     * Retrieve a load balancer virtual server. 
     * @param virtualServerId  (required)
     * @return LbVirtualServer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LbVirtualServer readLoadBalancerVirtualServer(String virtualServerId) throws ApiException {
        ApiResponse<LbVirtualServer> resp = readLoadBalancerVirtualServerWithHttpInfo(virtualServerId);
        return resp.getData();
    }

    /**
     * Retrieve a load balancer virtual server
     * Retrieve a load balancer virtual server. 
     * @param virtualServerId  (required)
     * @return ApiResponse&lt;LbVirtualServer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LbVirtualServer> readLoadBalancerVirtualServerWithHttpInfo(String virtualServerId) throws ApiException {
        com.squareup.okhttp.Call call = readLoadBalancerVirtualServerValidateBeforeCall(virtualServerId, null, null);
        Type localVarReturnType = new TypeToken<LbVirtualServer>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a load balancer virtual server (asynchronously)
     * Retrieve a load balancer virtual server. 
     * @param virtualServerId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call readLoadBalancerVirtualServerAsync(String virtualServerId, final ApiCallback<LbVirtualServer> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = readLoadBalancerVirtualServerValidateBeforeCall(virtualServerId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LbVirtualServer>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateLoadBalancerApplicationProfile
     * @param body  (required)
     * @param applicationProfileId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateLoadBalancerApplicationProfileCall(LbAppProfile body, String applicationProfileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/loadbalancer/application-profiles/{application-profile-id}"
            .replaceAll("\\{" + "application-profile-id" + "\\}", apiClient.escapeString(applicationProfileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateLoadBalancerApplicationProfileValidateBeforeCall(LbAppProfile body, String applicationProfileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateLoadBalancerApplicationProfile(Async)");
        }
        // verify the required parameter 'applicationProfileId' is set
        if (applicationProfileId == null) {
            throw new ApiException("Missing the required parameter 'applicationProfileId' when calling updateLoadBalancerApplicationProfile(Async)");
        }
        
        com.squareup.okhttp.Call call = updateLoadBalancerApplicationProfileCall(body, applicationProfileId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update a load balancer application profile
     * Update a load balancer application profile. 
     * @param body  (required)
     * @param applicationProfileId  (required)
     * @return LbAppProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LbAppProfile updateLoadBalancerApplicationProfile(LbAppProfile body, String applicationProfileId) throws ApiException {
        ApiResponse<LbAppProfile> resp = updateLoadBalancerApplicationProfileWithHttpInfo(body, applicationProfileId);
        return resp.getData();
    }

    /**
     * Update a load balancer application profile
     * Update a load balancer application profile. 
     * @param body  (required)
     * @param applicationProfileId  (required)
     * @return ApiResponse&lt;LbAppProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LbAppProfile> updateLoadBalancerApplicationProfileWithHttpInfo(LbAppProfile body, String applicationProfileId) throws ApiException {
        com.squareup.okhttp.Call call = updateLoadBalancerApplicationProfileValidateBeforeCall(body, applicationProfileId, null, null);
        Type localVarReturnType = new TypeToken<LbAppProfile>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a load balancer application profile (asynchronously)
     * Update a load balancer application profile. 
     * @param body  (required)
     * @param applicationProfileId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateLoadBalancerApplicationProfileAsync(LbAppProfile body, String applicationProfileId, final ApiCallback<LbAppProfile> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateLoadBalancerApplicationProfileValidateBeforeCall(body, applicationProfileId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LbAppProfile>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateLoadBalancerClientSslProfile
     * @param body  (required)
     * @param clientSslProfileId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateLoadBalancerClientSslProfileCall(LbClientSslProfile body, String clientSslProfileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/loadbalancer/client-ssl-profiles/{client-ssl-profile-id}"
            .replaceAll("\\{" + "client-ssl-profile-id" + "\\}", apiClient.escapeString(clientSslProfileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateLoadBalancerClientSslProfileValidateBeforeCall(LbClientSslProfile body, String clientSslProfileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateLoadBalancerClientSslProfile(Async)");
        }
        // verify the required parameter 'clientSslProfileId' is set
        if (clientSslProfileId == null) {
            throw new ApiException("Missing the required parameter 'clientSslProfileId' when calling updateLoadBalancerClientSslProfile(Async)");
        }
        
        com.squareup.okhttp.Call call = updateLoadBalancerClientSslProfileCall(body, clientSslProfileId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update a load balancer client-ssl profile
     * Update a load balancer client-ssl profile. 
     * @param body  (required)
     * @param clientSslProfileId  (required)
     * @return LbClientSslProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LbClientSslProfile updateLoadBalancerClientSslProfile(LbClientSslProfile body, String clientSslProfileId) throws ApiException {
        ApiResponse<LbClientSslProfile> resp = updateLoadBalancerClientSslProfileWithHttpInfo(body, clientSslProfileId);
        return resp.getData();
    }

    /**
     * Update a load balancer client-ssl profile
     * Update a load balancer client-ssl profile. 
     * @param body  (required)
     * @param clientSslProfileId  (required)
     * @return ApiResponse&lt;LbClientSslProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LbClientSslProfile> updateLoadBalancerClientSslProfileWithHttpInfo(LbClientSslProfile body, String clientSslProfileId) throws ApiException {
        com.squareup.okhttp.Call call = updateLoadBalancerClientSslProfileValidateBeforeCall(body, clientSslProfileId, null, null);
        Type localVarReturnType = new TypeToken<LbClientSslProfile>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a load balancer client-ssl profile (asynchronously)
     * Update a load balancer client-ssl profile. 
     * @param body  (required)
     * @param clientSslProfileId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateLoadBalancerClientSslProfileAsync(LbClientSslProfile body, String clientSslProfileId, final ApiCallback<LbClientSslProfile> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateLoadBalancerClientSslProfileValidateBeforeCall(body, clientSslProfileId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LbClientSslProfile>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateLoadBalancerMonitor
     * @param body  (required)
     * @param monitorId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateLoadBalancerMonitorCall(LbMonitor body, String monitorId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/loadbalancer/monitors/{monitor-id}"
            .replaceAll("\\{" + "monitor-id" + "\\}", apiClient.escapeString(monitorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateLoadBalancerMonitorValidateBeforeCall(LbMonitor body, String monitorId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateLoadBalancerMonitor(Async)");
        }
        // verify the required parameter 'monitorId' is set
        if (monitorId == null) {
            throw new ApiException("Missing the required parameter 'monitorId' when calling updateLoadBalancerMonitor(Async)");
        }
        
        com.squareup.okhttp.Call call = updateLoadBalancerMonitorCall(body, monitorId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update a load balancer monitor
     * Update a load balancer monitor. 
     * @param body  (required)
     * @param monitorId  (required)
     * @return LbMonitor
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LbMonitor updateLoadBalancerMonitor(LbMonitor body, String monitorId) throws ApiException {
        ApiResponse<LbMonitor> resp = updateLoadBalancerMonitorWithHttpInfo(body, monitorId);
        return resp.getData();
    }

    /**
     * Update a load balancer monitor
     * Update a load balancer monitor. 
     * @param body  (required)
     * @param monitorId  (required)
     * @return ApiResponse&lt;LbMonitor&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LbMonitor> updateLoadBalancerMonitorWithHttpInfo(LbMonitor body, String monitorId) throws ApiException {
        com.squareup.okhttp.Call call = updateLoadBalancerMonitorValidateBeforeCall(body, monitorId, null, null);
        Type localVarReturnType = new TypeToken<LbMonitor>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a load balancer monitor (asynchronously)
     * Update a load balancer monitor. 
     * @param body  (required)
     * @param monitorId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateLoadBalancerMonitorAsync(LbMonitor body, String monitorId, final ApiCallback<LbMonitor> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateLoadBalancerMonitorValidateBeforeCall(body, monitorId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LbMonitor>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateLoadBalancerPersistenceProfile
     * @param body  (required)
     * @param persistenceProfileId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateLoadBalancerPersistenceProfileCall(LbPersistenceProfile body, String persistenceProfileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/loadbalancer/persistence-profiles/{persistence-profile-id}"
            .replaceAll("\\{" + "persistence-profile-id" + "\\}", apiClient.escapeString(persistenceProfileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateLoadBalancerPersistenceProfileValidateBeforeCall(LbPersistenceProfile body, String persistenceProfileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateLoadBalancerPersistenceProfile(Async)");
        }
        // verify the required parameter 'persistenceProfileId' is set
        if (persistenceProfileId == null) {
            throw new ApiException("Missing the required parameter 'persistenceProfileId' when calling updateLoadBalancerPersistenceProfile(Async)");
        }
        
        com.squareup.okhttp.Call call = updateLoadBalancerPersistenceProfileCall(body, persistenceProfileId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update a load balancer persistence profile
     * Update a load balancer persistence profile. 
     * @param body  (required)
     * @param persistenceProfileId  (required)
     * @return LbPersistenceProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LbPersistenceProfile updateLoadBalancerPersistenceProfile(LbPersistenceProfile body, String persistenceProfileId) throws ApiException {
        ApiResponse<LbPersistenceProfile> resp = updateLoadBalancerPersistenceProfileWithHttpInfo(body, persistenceProfileId);
        return resp.getData();
    }

    /**
     * Update a load balancer persistence profile
     * Update a load balancer persistence profile. 
     * @param body  (required)
     * @param persistenceProfileId  (required)
     * @return ApiResponse&lt;LbPersistenceProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LbPersistenceProfile> updateLoadBalancerPersistenceProfileWithHttpInfo(LbPersistenceProfile body, String persistenceProfileId) throws ApiException {
        com.squareup.okhttp.Call call = updateLoadBalancerPersistenceProfileValidateBeforeCall(body, persistenceProfileId, null, null);
        Type localVarReturnType = new TypeToken<LbPersistenceProfile>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a load balancer persistence profile (asynchronously)
     * Update a load balancer persistence profile. 
     * @param body  (required)
     * @param persistenceProfileId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateLoadBalancerPersistenceProfileAsync(LbPersistenceProfile body, String persistenceProfileId, final ApiCallback<LbPersistenceProfile> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateLoadBalancerPersistenceProfileValidateBeforeCall(body, persistenceProfileId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LbPersistenceProfile>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateLoadBalancerPool
     * @param body  (required)
     * @param poolId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateLoadBalancerPoolCall(LbPool body, String poolId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/loadbalancer/pools/{pool-id}"
            .replaceAll("\\{" + "pool-id" + "\\}", apiClient.escapeString(poolId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateLoadBalancerPoolValidateBeforeCall(LbPool body, String poolId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateLoadBalancerPool(Async)");
        }
        // verify the required parameter 'poolId' is set
        if (poolId == null) {
            throw new ApiException("Missing the required parameter 'poolId' when calling updateLoadBalancerPool(Async)");
        }
        
        com.squareup.okhttp.Call call = updateLoadBalancerPoolCall(body, poolId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update a load balancer pool
     * Update a load balancer pool. 
     * @param body  (required)
     * @param poolId  (required)
     * @return LbPool
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LbPool updateLoadBalancerPool(LbPool body, String poolId) throws ApiException {
        ApiResponse<LbPool> resp = updateLoadBalancerPoolWithHttpInfo(body, poolId);
        return resp.getData();
    }

    /**
     * Update a load balancer pool
     * Update a load balancer pool. 
     * @param body  (required)
     * @param poolId  (required)
     * @return ApiResponse&lt;LbPool&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LbPool> updateLoadBalancerPoolWithHttpInfo(LbPool body, String poolId) throws ApiException {
        com.squareup.okhttp.Call call = updateLoadBalancerPoolValidateBeforeCall(body, poolId, null, null);
        Type localVarReturnType = new TypeToken<LbPool>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a load balancer pool (asynchronously)
     * Update a load balancer pool. 
     * @param body  (required)
     * @param poolId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateLoadBalancerPoolAsync(LbPool body, String poolId, final ApiCallback<LbPool> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateLoadBalancerPoolValidateBeforeCall(body, poolId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LbPool>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateLoadBalancerRule
     * @param body  (required)
     * @param ruleId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateLoadBalancerRuleCall(LbRule body, String ruleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/loadbalancer/rules/{rule-id}"
            .replaceAll("\\{" + "rule-id" + "\\}", apiClient.escapeString(ruleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateLoadBalancerRuleValidateBeforeCall(LbRule body, String ruleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateLoadBalancerRule(Async)");
        }
        // verify the required parameter 'ruleId' is set
        if (ruleId == null) {
            throw new ApiException("Missing the required parameter 'ruleId' when calling updateLoadBalancerRule(Async)");
        }
        
        com.squareup.okhttp.Call call = updateLoadBalancerRuleCall(body, ruleId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update a load balancer rule
     * Update a load balancer rule. 
     * @param body  (required)
     * @param ruleId  (required)
     * @return LbRule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LbRule updateLoadBalancerRule(LbRule body, String ruleId) throws ApiException {
        ApiResponse<LbRule> resp = updateLoadBalancerRuleWithHttpInfo(body, ruleId);
        return resp.getData();
    }

    /**
     * Update a load balancer rule
     * Update a load balancer rule. 
     * @param body  (required)
     * @param ruleId  (required)
     * @return ApiResponse&lt;LbRule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LbRule> updateLoadBalancerRuleWithHttpInfo(LbRule body, String ruleId) throws ApiException {
        com.squareup.okhttp.Call call = updateLoadBalancerRuleValidateBeforeCall(body, ruleId, null, null);
        Type localVarReturnType = new TypeToken<LbRule>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a load balancer rule (asynchronously)
     * Update a load balancer rule. 
     * @param body  (required)
     * @param ruleId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateLoadBalancerRuleAsync(LbRule body, String ruleId, final ApiCallback<LbRule> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateLoadBalancerRuleValidateBeforeCall(body, ruleId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LbRule>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateLoadBalancerServerSslProfile
     * @param body  (required)
     * @param serverSslProfileId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateLoadBalancerServerSslProfileCall(LbServerSslProfile body, String serverSslProfileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/loadbalancer/server-ssl-profiles/{server-ssl-profile-id}"
            .replaceAll("\\{" + "server-ssl-profile-id" + "\\}", apiClient.escapeString(serverSslProfileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateLoadBalancerServerSslProfileValidateBeforeCall(LbServerSslProfile body, String serverSslProfileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateLoadBalancerServerSslProfile(Async)");
        }
        // verify the required parameter 'serverSslProfileId' is set
        if (serverSslProfileId == null) {
            throw new ApiException("Missing the required parameter 'serverSslProfileId' when calling updateLoadBalancerServerSslProfile(Async)");
        }
        
        com.squareup.okhttp.Call call = updateLoadBalancerServerSslProfileCall(body, serverSslProfileId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update a load balancer server-ssl profile
     * Update a load balancer server-ssl profile. 
     * @param body  (required)
     * @param serverSslProfileId  (required)
     * @return LbServerSslProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LbServerSslProfile updateLoadBalancerServerSslProfile(LbServerSslProfile body, String serverSslProfileId) throws ApiException {
        ApiResponse<LbServerSslProfile> resp = updateLoadBalancerServerSslProfileWithHttpInfo(body, serverSslProfileId);
        return resp.getData();
    }

    /**
     * Update a load balancer server-ssl profile
     * Update a load balancer server-ssl profile. 
     * @param body  (required)
     * @param serverSslProfileId  (required)
     * @return ApiResponse&lt;LbServerSslProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LbServerSslProfile> updateLoadBalancerServerSslProfileWithHttpInfo(LbServerSslProfile body, String serverSslProfileId) throws ApiException {
        com.squareup.okhttp.Call call = updateLoadBalancerServerSslProfileValidateBeforeCall(body, serverSslProfileId, null, null);
        Type localVarReturnType = new TypeToken<LbServerSslProfile>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a load balancer server-ssl profile (asynchronously)
     * Update a load balancer server-ssl profile. 
     * @param body  (required)
     * @param serverSslProfileId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateLoadBalancerServerSslProfileAsync(LbServerSslProfile body, String serverSslProfileId, final ApiCallback<LbServerSslProfile> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateLoadBalancerServerSslProfileValidateBeforeCall(body, serverSslProfileId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LbServerSslProfile>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateLoadBalancerService
     * @param body  (required)
     * @param serviceId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateLoadBalancerServiceCall(LbService body, String serviceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/loadbalancer/services/{service-id}"
            .replaceAll("\\{" + "service-id" + "\\}", apiClient.escapeString(serviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateLoadBalancerServiceValidateBeforeCall(LbService body, String serviceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateLoadBalancerService(Async)");
        }
        // verify the required parameter 'serviceId' is set
        if (serviceId == null) {
            throw new ApiException("Missing the required parameter 'serviceId' when calling updateLoadBalancerService(Async)");
        }
        
        com.squareup.okhttp.Call call = updateLoadBalancerServiceCall(body, serviceId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update a load balancer service
     * Update a load balancer service. 
     * @param body  (required)
     * @param serviceId  (required)
     * @return LbService
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LbService updateLoadBalancerService(LbService body, String serviceId) throws ApiException {
        ApiResponse<LbService> resp = updateLoadBalancerServiceWithHttpInfo(body, serviceId);
        return resp.getData();
    }

    /**
     * Update a load balancer service
     * Update a load balancer service. 
     * @param body  (required)
     * @param serviceId  (required)
     * @return ApiResponse&lt;LbService&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LbService> updateLoadBalancerServiceWithHttpInfo(LbService body, String serviceId) throws ApiException {
        com.squareup.okhttp.Call call = updateLoadBalancerServiceValidateBeforeCall(body, serviceId, null, null);
        Type localVarReturnType = new TypeToken<LbService>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a load balancer service (asynchronously)
     * Update a load balancer service. 
     * @param body  (required)
     * @param serviceId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateLoadBalancerServiceAsync(LbService body, String serviceId, final ApiCallback<LbService> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateLoadBalancerServiceValidateBeforeCall(body, serviceId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LbService>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateLoadBalancerTcpProfile
     * @param body  (required)
     * @param tcpProfileId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateLoadBalancerTcpProfileCall(LbTcpProfile body, String tcpProfileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/loadbalancer/tcp-profiles/{tcp-profile-id}"
            .replaceAll("\\{" + "tcp-profile-id" + "\\}", apiClient.escapeString(tcpProfileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateLoadBalancerTcpProfileValidateBeforeCall(LbTcpProfile body, String tcpProfileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateLoadBalancerTcpProfile(Async)");
        }
        // verify the required parameter 'tcpProfileId' is set
        if (tcpProfileId == null) {
            throw new ApiException("Missing the required parameter 'tcpProfileId' when calling updateLoadBalancerTcpProfile(Async)");
        }
        
        com.squareup.okhttp.Call call = updateLoadBalancerTcpProfileCall(body, tcpProfileId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update a load balancer TCP profile
     * Update a load balancer TCP profile. 
     * @param body  (required)
     * @param tcpProfileId  (required)
     * @return LbTcpProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LbTcpProfile updateLoadBalancerTcpProfile(LbTcpProfile body, String tcpProfileId) throws ApiException {
        ApiResponse<LbTcpProfile> resp = updateLoadBalancerTcpProfileWithHttpInfo(body, tcpProfileId);
        return resp.getData();
    }

    /**
     * Update a load balancer TCP profile
     * Update a load balancer TCP profile. 
     * @param body  (required)
     * @param tcpProfileId  (required)
     * @return ApiResponse&lt;LbTcpProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LbTcpProfile> updateLoadBalancerTcpProfileWithHttpInfo(LbTcpProfile body, String tcpProfileId) throws ApiException {
        com.squareup.okhttp.Call call = updateLoadBalancerTcpProfileValidateBeforeCall(body, tcpProfileId, null, null);
        Type localVarReturnType = new TypeToken<LbTcpProfile>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a load balancer TCP profile (asynchronously)
     * Update a load balancer TCP profile. 
     * @param body  (required)
     * @param tcpProfileId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateLoadBalancerTcpProfileAsync(LbTcpProfile body, String tcpProfileId, final ApiCallback<LbTcpProfile> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateLoadBalancerTcpProfileValidateBeforeCall(body, tcpProfileId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LbTcpProfile>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateLoadBalancerVirtualServer
     * @param body  (required)
     * @param virtualServerId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateLoadBalancerVirtualServerCall(LbVirtualServer body, String virtualServerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/loadbalancer/virtual-servers/{virtual-server-id}"
            .replaceAll("\\{" + "virtual-server-id" + "\\}", apiClient.escapeString(virtualServerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateLoadBalancerVirtualServerValidateBeforeCall(LbVirtualServer body, String virtualServerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateLoadBalancerVirtualServer(Async)");
        }
        // verify the required parameter 'virtualServerId' is set
        if (virtualServerId == null) {
            throw new ApiException("Missing the required parameter 'virtualServerId' when calling updateLoadBalancerVirtualServer(Async)");
        }
        
        com.squareup.okhttp.Call call = updateLoadBalancerVirtualServerCall(body, virtualServerId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update a load balancer virtual server
     * Update a load balancer virtual server. 
     * @param body  (required)
     * @param virtualServerId  (required)
     * @return LbVirtualServer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LbVirtualServer updateLoadBalancerVirtualServer(LbVirtualServer body, String virtualServerId) throws ApiException {
        ApiResponse<LbVirtualServer> resp = updateLoadBalancerVirtualServerWithHttpInfo(body, virtualServerId);
        return resp.getData();
    }

    /**
     * Update a load balancer virtual server
     * Update a load balancer virtual server. 
     * @param body  (required)
     * @param virtualServerId  (required)
     * @return ApiResponse&lt;LbVirtualServer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LbVirtualServer> updateLoadBalancerVirtualServerWithHttpInfo(LbVirtualServer body, String virtualServerId) throws ApiException {
        com.squareup.okhttp.Call call = updateLoadBalancerVirtualServerValidateBeforeCall(body, virtualServerId, null, null);
        Type localVarReturnType = new TypeToken<LbVirtualServer>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a load balancer virtual server (asynchronously)
     * Update a load balancer virtual server. 
     * @param body  (required)
     * @param virtualServerId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateLoadBalancerVirtualServerAsync(LbVirtualServer body, String virtualServerId, final ApiCallback<LbVirtualServer> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateLoadBalancerVirtualServerValidateBeforeCall(body, virtualServerId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LbVirtualServer>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateLoadBalancerVirtualServerWithRulesUpdateWithRules
     * @param body  (required)
     * @param virtualServerId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateLoadBalancerVirtualServerWithRulesUpdateWithRulesCall(LbVirtualServerWithRule body, String virtualServerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/loadbalancer/virtual-servers/{virtual-server-id}?action=update_with_rules"
            .replaceAll("\\{" + "virtual-server-id" + "\\}", apiClient.escapeString(virtualServerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateLoadBalancerVirtualServerWithRulesUpdateWithRulesValidateBeforeCall(LbVirtualServerWithRule body, String virtualServerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateLoadBalancerVirtualServerWithRulesUpdateWithRules(Async)");
        }
        // verify the required parameter 'virtualServerId' is set
        if (virtualServerId == null) {
            throw new ApiException("Missing the required parameter 'virtualServerId' when calling updateLoadBalancerVirtualServerWithRulesUpdateWithRules(Async)");
        }
        
        com.squareup.okhttp.Call call = updateLoadBalancerVirtualServerWithRulesUpdateWithRulesCall(body, virtualServerId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update a load balancer virtual server with rules
     * It is used to update virtual servers, the associated rules and update the binding of virtual server and rules. To add new rules, make sure the rules which have no identifier specified, the new rules are automatically generated and associated to the virtual server. To delete old rules, the rules should not be configured in new action, the UUID of deleted rules should be also removed from rule_ids. To update rules, the rules should be specified with new change and configured with identifier. If there are some rules which are not modified, those rule should not be specified in the rules list, the UUID list of rules should be specified in rule_ids of LbVirtualServer. 
     * @param body  (required)
     * @param virtualServerId  (required)
     * @return LbVirtualServerWithRule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LbVirtualServerWithRule updateLoadBalancerVirtualServerWithRulesUpdateWithRules(LbVirtualServerWithRule body, String virtualServerId) throws ApiException {
        ApiResponse<LbVirtualServerWithRule> resp = updateLoadBalancerVirtualServerWithRulesUpdateWithRulesWithHttpInfo(body, virtualServerId);
        return resp.getData();
    }

    /**
     * Update a load balancer virtual server with rules
     * It is used to update virtual servers, the associated rules and update the binding of virtual server and rules. To add new rules, make sure the rules which have no identifier specified, the new rules are automatically generated and associated to the virtual server. To delete old rules, the rules should not be configured in new action, the UUID of deleted rules should be also removed from rule_ids. To update rules, the rules should be specified with new change and configured with identifier. If there are some rules which are not modified, those rule should not be specified in the rules list, the UUID list of rules should be specified in rule_ids of LbVirtualServer. 
     * @param body  (required)
     * @param virtualServerId  (required)
     * @return ApiResponse&lt;LbVirtualServerWithRule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LbVirtualServerWithRule> updateLoadBalancerVirtualServerWithRulesUpdateWithRulesWithHttpInfo(LbVirtualServerWithRule body, String virtualServerId) throws ApiException {
        com.squareup.okhttp.Call call = updateLoadBalancerVirtualServerWithRulesUpdateWithRulesValidateBeforeCall(body, virtualServerId, null, null);
        Type localVarReturnType = new TypeToken<LbVirtualServerWithRule>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a load balancer virtual server with rules (asynchronously)
     * It is used to update virtual servers, the associated rules and update the binding of virtual server and rules. To add new rules, make sure the rules which have no identifier specified, the new rules are automatically generated and associated to the virtual server. To delete old rules, the rules should not be configured in new action, the UUID of deleted rules should be also removed from rule_ids. To update rules, the rules should be specified with new change and configured with identifier. If there are some rules which are not modified, those rule should not be specified in the rules list, the UUID list of rules should be specified in rule_ids of LbVirtualServer. 
     * @param body  (required)
     * @param virtualServerId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateLoadBalancerVirtualServerWithRulesUpdateWithRulesAsync(LbVirtualServerWithRule body, String virtualServerId, final ApiCallback<LbVirtualServerWithRule> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateLoadBalancerVirtualServerWithRulesUpdateWithRulesValidateBeforeCall(body, virtualServerId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LbVirtualServerWithRule>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
