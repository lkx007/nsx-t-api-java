/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ApiError;
import io.swagger.client.model.ComputeCollectionTransportNodeTemplate;
import io.swagger.client.model.ComputeCollectionTransportNodeTemplateStateList;
import io.swagger.client.model.HeatMapTransportNodesAggregateStatus;
import io.swagger.client.model.HeatMapTransportZoneStatus;
import io.swagger.client.model.InterfaceNeighborProperties;
import io.swagger.client.model.InterfaceNeighborPropertyListResult;
import io.swagger.client.model.NetworkMigrationSpec;
import io.swagger.client.model.NetworkMigrationSpecListResult;
import io.swagger.client.model.NodeCapabilitiesResult;
import io.swagger.client.model.NodeInterfaceProperties;
import io.swagger.client.model.NodeInterfacePropertiesListResult;
import io.swagger.client.model.NodeInterfaceStatisticsProperties;
import io.swagger.client.model.PnicBondStatusListResult;
import io.swagger.client.model.SoftwareModuleResult;
import io.swagger.client.model.TransportNode;
import io.swagger.client.model.TransportNodeListResult;
import io.swagger.client.model.TransportNodeState;
import io.swagger.client.model.TransportNodeStateListResult;
import io.swagger.client.model.TransportNodeStatus;
import io.swagger.client.model.TransportNodeStatusListResult;
import io.swagger.client.model.TransportNodeTemplateListResult;
import io.swagger.client.model.TunnelList;
import io.swagger.client.model.TunnelProperties;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ManagementPlaneApiNetworkTransportTransportNodesApi {
    private ApiClient apiClient;

    public ManagementPlaneApiNetworkTransportTransportNodesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ManagementPlaneApiNetworkTransportTransportNodesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createComputeCollectionTransportNodeTemplateAndTNCollection
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createComputeCollectionTransportNodeTemplateAndTNCollectionCall(ComputeCollectionTransportNodeTemplate body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/compute-collection-transport-node-templates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createComputeCollectionTransportNodeTemplateAndTNCollectionValidateBeforeCall(ComputeCollectionTransportNodeTemplate body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createComputeCollectionTransportNodeTemplateAndTNCollection(Async)");
        }
        
        com.squareup.okhttp.Call call = createComputeCollectionTransportNodeTemplateAndTNCollectionCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create transport node template for compute collection.
     * If automated transport node creation is configured on compute collection, this template will serve as the default setting for transport node creation. Note- transport node templates APIs are deprecated and user is recommended to use transport node profiles APIs instead.
     * @param body  (required)
     * @return ComputeCollectionTransportNodeTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ComputeCollectionTransportNodeTemplate createComputeCollectionTransportNodeTemplateAndTNCollection(ComputeCollectionTransportNodeTemplate body) throws ApiException {
        ApiResponse<ComputeCollectionTransportNodeTemplate> resp = createComputeCollectionTransportNodeTemplateAndTNCollectionWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create transport node template for compute collection.
     * If automated transport node creation is configured on compute collection, this template will serve as the default setting for transport node creation. Note- transport node templates APIs are deprecated and user is recommended to use transport node profiles APIs instead.
     * @param body  (required)
     * @return ApiResponse&lt;ComputeCollectionTransportNodeTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ComputeCollectionTransportNodeTemplate> createComputeCollectionTransportNodeTemplateAndTNCollectionWithHttpInfo(ComputeCollectionTransportNodeTemplate body) throws ApiException {
        com.squareup.okhttp.Call call = createComputeCollectionTransportNodeTemplateAndTNCollectionValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<ComputeCollectionTransportNodeTemplate>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create transport node template for compute collection. (asynchronously)
     * If automated transport node creation is configured on compute collection, this template will serve as the default setting for transport node creation. Note- transport node templates APIs are deprecated and user is recommended to use transport node profiles APIs instead.
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createComputeCollectionTransportNodeTemplateAndTNCollectionAsync(ComputeCollectionTransportNodeTemplate body, final ApiCallback<ComputeCollectionTransportNodeTemplate> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createComputeCollectionTransportNodeTemplateAndTNCollectionValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ComputeCollectionTransportNodeTemplate>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createNetworkMigrationSpec
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createNetworkMigrationSpecCall(NetworkMigrationSpec body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/network-migration-specs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createNetworkMigrationSpecValidateBeforeCall(NetworkMigrationSpec body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createNetworkMigrationSpec(Async)");
        }
        
        com.squareup.okhttp.Call call = createNetworkMigrationSpecCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create a template of network migration specification.
     * Network migration specification once created and can be used as a template to indicate associated component which networks should be migrated and where. Currently migration template can be associated with compute collections which are managed by vCenter host profiles, to trigger automatic migration of networks for Stateless ESX hosts. Currently we only support creation of HostProfileNetworkMigrationSpec type of specification. Note- transport node templates APIs are deprecated and user is recommended to use transport node profiles APIs instead.
     * @param body  (required)
     * @return NetworkMigrationSpec
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NetworkMigrationSpec createNetworkMigrationSpec(NetworkMigrationSpec body) throws ApiException {
        ApiResponse<NetworkMigrationSpec> resp = createNetworkMigrationSpecWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create a template of network migration specification.
     * Network migration specification once created and can be used as a template to indicate associated component which networks should be migrated and where. Currently migration template can be associated with compute collections which are managed by vCenter host profiles, to trigger automatic migration of networks for Stateless ESX hosts. Currently we only support creation of HostProfileNetworkMigrationSpec type of specification. Note- transport node templates APIs are deprecated and user is recommended to use transport node profiles APIs instead.
     * @param body  (required)
     * @return ApiResponse&lt;NetworkMigrationSpec&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NetworkMigrationSpec> createNetworkMigrationSpecWithHttpInfo(NetworkMigrationSpec body) throws ApiException {
        com.squareup.okhttp.Call call = createNetworkMigrationSpecValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<NetworkMigrationSpec>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a template of network migration specification. (asynchronously)
     * Network migration specification once created and can be used as a template to indicate associated component which networks should be migrated and where. Currently migration template can be associated with compute collections which are managed by vCenter host profiles, to trigger automatic migration of networks for Stateless ESX hosts. Currently we only support creation of HostProfileNetworkMigrationSpec type of specification. Note- transport node templates APIs are deprecated and user is recommended to use transport node profiles APIs instead.
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createNetworkMigrationSpecAsync(NetworkMigrationSpec body, final ApiCallback<NetworkMigrationSpec> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createNetworkMigrationSpecValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NetworkMigrationSpec>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createTransportNodeWithDeploymentInfo
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createTransportNodeWithDeploymentInfoCall(TransportNode body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/transport-nodes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createTransportNodeWithDeploymentInfoValidateBeforeCall(TransportNode body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createTransportNodeWithDeploymentInfo(Async)");
        }
        
        com.squareup.okhttp.Call call = createTransportNodeWithDeploymentInfoCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create a Transport Node
     * Transport nodes are hypervisor hosts and NSX Edges that will participate in an NSX-T overlay. For a hypervisor host, this means that it hosts VMs that will communicate over NSX-T logical switches. For NSX Edges, this means that it will have logical router uplinks and downlinks.  This API creates transport node for a host node (hypervisor) or edge node (router) in the transport network.  When you run this command for a host, NSX Manager attempts to install the NSX kernel modules, which are packaged as VIB, RPM, or DEB files. For the installation to succeed, you must provide the host login credentials and the host thumbprint.  To get the ESXi host thumbprint, SSH to the host and run the &lt;b&gt;openssl x509 -in /etc/vmware/ssl/rui.crt -fingerprint -sha256 -noout&lt;/b&gt; command.  To generate host key thumbprint using SHA-256 algorithm please follow the steps below.  Log into the host, making sure that the connection is not vulnerable to a man in the middle attack. Check whether a public key already exists. Host public key is generally located at &#x27;/etc/ssh/ssh_host_rsa_key.pub&#x27;. If the key is not present then generate a new key by running the following command and follow the instructions.  &lt;b&gt;ssh-keygen -t rsa&lt;/b&gt;  Now generate a SHA256 hash of the key using the following command. Please make sure to pass the appropriate file name if the public key is stored with a different file name other than the default &#x27;id_rsa.pub&#x27;.  &lt;b&gt;awk &#x27;{print $2}&#x27; id_rsa.pub | base64 -d | sha256sum -b | sed &#x27;s/ .*$//&#x27; | xxd -r -p | base64&lt;/b&gt; This api is deprecated as part of FN+TN unification. Please use Transport Node API to install NSX components on a node.  Additional documentation on creating a transport node can be found in the NSX-T Installation Guide.  In order for the transport node to forward packets, the host_switch_spec property must be specified.  Host switches (called bridges in OVS on KVM hypervisors) are the individual switches within the host virtual switch. Virtual machines are connected to the host switches.  When creating a transport node, you need to specify if the host switches are already manually preconfigured on the node, or if NSX should create and manage the host switches. You specify this choice by the type of host switches you pass in the host_switch_spec property of the TransportNode request payload.  For a KVM host, you can preconfigure the host switch, or you can have NSX Manager perform the configuration. For an ESXi host or NSX Edge node, NSX Manager always configures the host switch.  To preconfigure the host switches on a KVM host, pass an array of PreconfiguredHostSwitchSpec objects that describes those host switches. In the current NSX-T release, only one prefonfigured host switch can be specified.  See the PreconfiguredHostSwitchSpec schema definition for documentation on the properties that must be provided. Preconfigured host switches are only supported on KVM hosts, not on ESXi hosts or NSX Edge nodes.  To allow NSX to manage the host switch configuration on KVM hosts, ESXi hosts, or NSX Edge nodes, pass an array of StandardHostSwitchSpec objects in the host_switch_spec property, and NSX will automatically create host switches with the properties you provide. In the current NSX-T release, up to 5 host switches can be automatically managed. See the StandardHostSwitchSpec schema definition for documentation on the properties that must be provided.  Note: previous versions of NSX-T used a property named host_switches to specify the host switch configuration on the transport node. That property is deprecated, but still functions. You should configure new host switches using the host_switch_spec property.  The request should either provide node_deployement_info or node_id.  If the host node (hypervisor) or edge node (router) is already added in system then it can be converted to transport node by providing node_id in request.  If host node (hypervisor) or edge node (router) is not already present in system then information should be provided under node_deployment_info. 
     * @param body  (required)
     * @return TransportNode
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TransportNode createTransportNodeWithDeploymentInfo(TransportNode body) throws ApiException {
        ApiResponse<TransportNode> resp = createTransportNodeWithDeploymentInfoWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create a Transport Node
     * Transport nodes are hypervisor hosts and NSX Edges that will participate in an NSX-T overlay. For a hypervisor host, this means that it hosts VMs that will communicate over NSX-T logical switches. For NSX Edges, this means that it will have logical router uplinks and downlinks.  This API creates transport node for a host node (hypervisor) or edge node (router) in the transport network.  When you run this command for a host, NSX Manager attempts to install the NSX kernel modules, which are packaged as VIB, RPM, or DEB files. For the installation to succeed, you must provide the host login credentials and the host thumbprint.  To get the ESXi host thumbprint, SSH to the host and run the &lt;b&gt;openssl x509 -in /etc/vmware/ssl/rui.crt -fingerprint -sha256 -noout&lt;/b&gt; command.  To generate host key thumbprint using SHA-256 algorithm please follow the steps below.  Log into the host, making sure that the connection is not vulnerable to a man in the middle attack. Check whether a public key already exists. Host public key is generally located at &#x27;/etc/ssh/ssh_host_rsa_key.pub&#x27;. If the key is not present then generate a new key by running the following command and follow the instructions.  &lt;b&gt;ssh-keygen -t rsa&lt;/b&gt;  Now generate a SHA256 hash of the key using the following command. Please make sure to pass the appropriate file name if the public key is stored with a different file name other than the default &#x27;id_rsa.pub&#x27;.  &lt;b&gt;awk &#x27;{print $2}&#x27; id_rsa.pub | base64 -d | sha256sum -b | sed &#x27;s/ .*$//&#x27; | xxd -r -p | base64&lt;/b&gt; This api is deprecated as part of FN+TN unification. Please use Transport Node API to install NSX components on a node.  Additional documentation on creating a transport node can be found in the NSX-T Installation Guide.  In order for the transport node to forward packets, the host_switch_spec property must be specified.  Host switches (called bridges in OVS on KVM hypervisors) are the individual switches within the host virtual switch. Virtual machines are connected to the host switches.  When creating a transport node, you need to specify if the host switches are already manually preconfigured on the node, or if NSX should create and manage the host switches. You specify this choice by the type of host switches you pass in the host_switch_spec property of the TransportNode request payload.  For a KVM host, you can preconfigure the host switch, or you can have NSX Manager perform the configuration. For an ESXi host or NSX Edge node, NSX Manager always configures the host switch.  To preconfigure the host switches on a KVM host, pass an array of PreconfiguredHostSwitchSpec objects that describes those host switches. In the current NSX-T release, only one prefonfigured host switch can be specified.  See the PreconfiguredHostSwitchSpec schema definition for documentation on the properties that must be provided. Preconfigured host switches are only supported on KVM hosts, not on ESXi hosts or NSX Edge nodes.  To allow NSX to manage the host switch configuration on KVM hosts, ESXi hosts, or NSX Edge nodes, pass an array of StandardHostSwitchSpec objects in the host_switch_spec property, and NSX will automatically create host switches with the properties you provide. In the current NSX-T release, up to 5 host switches can be automatically managed. See the StandardHostSwitchSpec schema definition for documentation on the properties that must be provided.  Note: previous versions of NSX-T used a property named host_switches to specify the host switch configuration on the transport node. That property is deprecated, but still functions. You should configure new host switches using the host_switch_spec property.  The request should either provide node_deployement_info or node_id.  If the host node (hypervisor) or edge node (router) is already added in system then it can be converted to transport node by providing node_id in request.  If host node (hypervisor) or edge node (router) is not already present in system then information should be provided under node_deployment_info. 
     * @param body  (required)
     * @return ApiResponse&lt;TransportNode&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TransportNode> createTransportNodeWithDeploymentInfoWithHttpInfo(TransportNode body) throws ApiException {
        com.squareup.okhttp.Call call = createTransportNodeWithDeploymentInfoValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<TransportNode>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a Transport Node (asynchronously)
     * Transport nodes are hypervisor hosts and NSX Edges that will participate in an NSX-T overlay. For a hypervisor host, this means that it hosts VMs that will communicate over NSX-T logical switches. For NSX Edges, this means that it will have logical router uplinks and downlinks.  This API creates transport node for a host node (hypervisor) or edge node (router) in the transport network.  When you run this command for a host, NSX Manager attempts to install the NSX kernel modules, which are packaged as VIB, RPM, or DEB files. For the installation to succeed, you must provide the host login credentials and the host thumbprint.  To get the ESXi host thumbprint, SSH to the host and run the &lt;b&gt;openssl x509 -in /etc/vmware/ssl/rui.crt -fingerprint -sha256 -noout&lt;/b&gt; command.  To generate host key thumbprint using SHA-256 algorithm please follow the steps below.  Log into the host, making sure that the connection is not vulnerable to a man in the middle attack. Check whether a public key already exists. Host public key is generally located at &#x27;/etc/ssh/ssh_host_rsa_key.pub&#x27;. If the key is not present then generate a new key by running the following command and follow the instructions.  &lt;b&gt;ssh-keygen -t rsa&lt;/b&gt;  Now generate a SHA256 hash of the key using the following command. Please make sure to pass the appropriate file name if the public key is stored with a different file name other than the default &#x27;id_rsa.pub&#x27;.  &lt;b&gt;awk &#x27;{print $2}&#x27; id_rsa.pub | base64 -d | sha256sum -b | sed &#x27;s/ .*$//&#x27; | xxd -r -p | base64&lt;/b&gt; This api is deprecated as part of FN+TN unification. Please use Transport Node API to install NSX components on a node.  Additional documentation on creating a transport node can be found in the NSX-T Installation Guide.  In order for the transport node to forward packets, the host_switch_spec property must be specified.  Host switches (called bridges in OVS on KVM hypervisors) are the individual switches within the host virtual switch. Virtual machines are connected to the host switches.  When creating a transport node, you need to specify if the host switches are already manually preconfigured on the node, or if NSX should create and manage the host switches. You specify this choice by the type of host switches you pass in the host_switch_spec property of the TransportNode request payload.  For a KVM host, you can preconfigure the host switch, or you can have NSX Manager perform the configuration. For an ESXi host or NSX Edge node, NSX Manager always configures the host switch.  To preconfigure the host switches on a KVM host, pass an array of PreconfiguredHostSwitchSpec objects that describes those host switches. In the current NSX-T release, only one prefonfigured host switch can be specified.  See the PreconfiguredHostSwitchSpec schema definition for documentation on the properties that must be provided. Preconfigured host switches are only supported on KVM hosts, not on ESXi hosts or NSX Edge nodes.  To allow NSX to manage the host switch configuration on KVM hosts, ESXi hosts, or NSX Edge nodes, pass an array of StandardHostSwitchSpec objects in the host_switch_spec property, and NSX will automatically create host switches with the properties you provide. In the current NSX-T release, up to 5 host switches can be automatically managed. See the StandardHostSwitchSpec schema definition for documentation on the properties that must be provided.  Note: previous versions of NSX-T used a property named host_switches to specify the host switch configuration on the transport node. That property is deprecated, but still functions. You should configure new host switches using the host_switch_spec property.  The request should either provide node_deployement_info or node_id.  If the host node (hypervisor) or edge node (router) is already added in system then it can be converted to transport node by providing node_id in request.  If host node (hypervisor) or edge node (router) is not already present in system then information should be provided under node_deployment_info. 
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createTransportNodeWithDeploymentInfoAsync(TransportNode body, final ApiCallback<TransportNode> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createTransportNodeWithDeploymentInfoValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TransportNode>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteComputeCollectionTransportNodeTemplateAndTNCollection
     * @param templateId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteComputeCollectionTransportNodeTemplateAndTNCollectionCall(String templateId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/compute-collection-transport-node-templates/{template-id}"
            .replaceAll("\\{" + "template-id" + "\\}", apiClient.escapeString(templateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteComputeCollectionTransportNodeTemplateAndTNCollectionValidateBeforeCall(String templateId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'templateId' is set
        if (templateId == null) {
            throw new ApiException("Missing the required parameter 'templateId' when calling deleteComputeCollectionTransportNodeTemplateAndTNCollection(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteComputeCollectionTransportNodeTemplateAndTNCollectionCall(templateId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete a compute collection transport node template
     * Delete the specified compute collection transport node template. Note- transport node templates APIs are deprecated and user is recommended to use transport node profiles APIs instead.
     * @param templateId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteComputeCollectionTransportNodeTemplateAndTNCollection(String templateId) throws ApiException {
        deleteComputeCollectionTransportNodeTemplateAndTNCollectionWithHttpInfo(templateId);
    }

    /**
     * Delete a compute collection transport node template
     * Delete the specified compute collection transport node template. Note- transport node templates APIs are deprecated and user is recommended to use transport node profiles APIs instead.
     * @param templateId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteComputeCollectionTransportNodeTemplateAndTNCollectionWithHttpInfo(String templateId) throws ApiException {
        com.squareup.okhttp.Call call = deleteComputeCollectionTransportNodeTemplateAndTNCollectionValidateBeforeCall(templateId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a compute collection transport node template (asynchronously)
     * Delete the specified compute collection transport node template. Note- transport node templates APIs are deprecated and user is recommended to use transport node profiles APIs instead.
     * @param templateId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteComputeCollectionTransportNodeTemplateAndTNCollectionAsync(String templateId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteComputeCollectionTransportNodeTemplateAndTNCollectionValidateBeforeCall(templateId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteNetworkMigrationSpec
     * @param templateId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteNetworkMigrationSpecCall(String templateId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/network-migration-specs/{template-id}"
            .replaceAll("\\{" + "template-id" + "\\}", apiClient.escapeString(templateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteNetworkMigrationSpecValidateBeforeCall(String templateId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'templateId' is set
        if (templateId == null) {
            throw new ApiException("Missing the required parameter 'templateId' when calling deleteNetworkMigrationSpec(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteNetworkMigrationSpecCall(templateId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete a network migration specification template
     * Delete the specified network migration specification template. Delete will fail if this is a HostProfileNetworkMigrationSpec and is associated with certain compute collection. Note- transport node templates APIs are deprecated and user is recommended to use transport node profiles APIs instead.
     * @param templateId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteNetworkMigrationSpec(String templateId) throws ApiException {
        deleteNetworkMigrationSpecWithHttpInfo(templateId);
    }

    /**
     * Delete a network migration specification template
     * Delete the specified network migration specification template. Delete will fail if this is a HostProfileNetworkMigrationSpec and is associated with certain compute collection. Note- transport node templates APIs are deprecated and user is recommended to use transport node profiles APIs instead.
     * @param templateId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteNetworkMigrationSpecWithHttpInfo(String templateId) throws ApiException {
        com.squareup.okhttp.Call call = deleteNetworkMigrationSpecValidateBeforeCall(templateId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a network migration specification template (asynchronously)
     * Delete the specified network migration specification template. Delete will fail if this is a HostProfileNetworkMigrationSpec and is associated with certain compute collection. Note- transport node templates APIs are deprecated and user is recommended to use transport node profiles APIs instead.
     * @param templateId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteNetworkMigrationSpecAsync(String templateId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteNetworkMigrationSpecValidateBeforeCall(templateId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteTransportNodeWithDeploymentInfo
     * @param transportNodeId  (required)
     * @param force Force delete the resource even if it is being used somewhere  (optional)
     * @param unprepareHost Uninstall NSX components from host while deleting (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteTransportNodeWithDeploymentInfoCall(String transportNodeId, Boolean force, Boolean unprepareHost, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/transport-nodes/{transport-node-id}"
            .replaceAll("\\{" + "transport-node-id" + "\\}", apiClient.escapeString(transportNodeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (force != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("force", force));
        if (unprepareHost != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("unprepare_host", unprepareHost));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteTransportNodeWithDeploymentInfoValidateBeforeCall(String transportNodeId, Boolean force, Boolean unprepareHost, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'transportNodeId' is set
        if (transportNodeId == null) {
            throw new ApiException("Missing the required parameter 'transportNodeId' when calling deleteTransportNodeWithDeploymentInfo(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteTransportNodeWithDeploymentInfoCall(transportNodeId, force, unprepareHost, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete a Transport Node
     * Deletes the specified transport node. Query param force can be used to force delete the host nodes. Force deletion of edge and public cloud gateway nodes is not supported.  It also removes the specified node (host or edge) from system. If unprepare_host option is set to false, then host will be deleted without uninstalling the NSX components from the host. 
     * @param transportNodeId  (required)
     * @param force Force delete the resource even if it is being used somewhere  (optional)
     * @param unprepareHost Uninstall NSX components from host while deleting (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteTransportNodeWithDeploymentInfo(String transportNodeId, Boolean force, Boolean unprepareHost) throws ApiException {
        deleteTransportNodeWithDeploymentInfoWithHttpInfo(transportNodeId, force, unprepareHost);
    }

    /**
     * Delete a Transport Node
     * Deletes the specified transport node. Query param force can be used to force delete the host nodes. Force deletion of edge and public cloud gateway nodes is not supported.  It also removes the specified node (host or edge) from system. If unprepare_host option is set to false, then host will be deleted without uninstalling the NSX components from the host. 
     * @param transportNodeId  (required)
     * @param force Force delete the resource even if it is being used somewhere  (optional)
     * @param unprepareHost Uninstall NSX components from host while deleting (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteTransportNodeWithDeploymentInfoWithHttpInfo(String transportNodeId, Boolean force, Boolean unprepareHost) throws ApiException {
        com.squareup.okhttp.Call call = deleteTransportNodeWithDeploymentInfoValidateBeforeCall(transportNodeId, force, unprepareHost, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a Transport Node (asynchronously)
     * Deletes the specified transport node. Query param force can be used to force delete the host nodes. Force deletion of edge and public cloud gateway nodes is not supported.  It also removes the specified node (host or edge) from system. If unprepare_host option is set to false, then host will be deleted without uninstalling the NSX components from the host. 
     * @param transportNodeId  (required)
     * @param force Force delete the resource even if it is being used somewhere  (optional)
     * @param unprepareHost Uninstall NSX components from host while deleting (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteTransportNodeWithDeploymentInfoAsync(String transportNodeId, Boolean force, Boolean unprepareHost, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteTransportNodeWithDeploymentInfoValidateBeforeCall(transportNodeId, force, unprepareHost, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for disableFlowCacheDisableFlowCache
     * @param transportNodeId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call disableFlowCacheDisableFlowCacheCall(String transportNodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/transport-nodes/{transport-node-id}?action=disable_flow_cache"
            .replaceAll("\\{" + "transport-node-id" + "\\}", apiClient.escapeString(transportNodeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call disableFlowCacheDisableFlowCacheValidateBeforeCall(String transportNodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'transportNodeId' is set
        if (transportNodeId == null) {
            throw new ApiException("Missing the required parameter 'transportNodeId' when calling disableFlowCacheDisableFlowCache(Async)");
        }
        
        com.squareup.okhttp.Call call = disableFlowCacheDisableFlowCacheCall(transportNodeId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Disable flow cache for an edge transport node
     * Disable flow cache for edge transport node. Caution: This involves restart of the edge dataplane and hence may lead to network disruption. 
     * @param transportNodeId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void disableFlowCacheDisableFlowCache(String transportNodeId) throws ApiException {
        disableFlowCacheDisableFlowCacheWithHttpInfo(transportNodeId);
    }

    /**
     * Disable flow cache for an edge transport node
     * Disable flow cache for edge transport node. Caution: This involves restart of the edge dataplane and hence may lead to network disruption. 
     * @param transportNodeId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> disableFlowCacheDisableFlowCacheWithHttpInfo(String transportNodeId) throws ApiException {
        com.squareup.okhttp.Call call = disableFlowCacheDisableFlowCacheValidateBeforeCall(transportNodeId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Disable flow cache for an edge transport node (asynchronously)
     * Disable flow cache for edge transport node. Caution: This involves restart of the edge dataplane and hence may lead to network disruption. 
     * @param transportNodeId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call disableFlowCacheDisableFlowCacheAsync(String transportNodeId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = disableFlowCacheDisableFlowCacheValidateBeforeCall(transportNodeId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for enableFlowCacheEnableFlowCache
     * @param transportNodeId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call enableFlowCacheEnableFlowCacheCall(String transportNodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/transport-nodes/{transport-node-id}?action=enable_flow_cache"
            .replaceAll("\\{" + "transport-node-id" + "\\}", apiClient.escapeString(transportNodeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call enableFlowCacheEnableFlowCacheValidateBeforeCall(String transportNodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'transportNodeId' is set
        if (transportNodeId == null) {
            throw new ApiException("Missing the required parameter 'transportNodeId' when calling enableFlowCacheEnableFlowCache(Async)");
        }
        
        com.squareup.okhttp.Call call = enableFlowCacheEnableFlowCacheCall(transportNodeId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Enable flow cache for an edge transport node
     * Enable flow cache for edge transport node. Caution: This involves restart of the edge dataplane and hence may lead to network disruption. 
     * @param transportNodeId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void enableFlowCacheEnableFlowCache(String transportNodeId) throws ApiException {
        enableFlowCacheEnableFlowCacheWithHttpInfo(transportNodeId);
    }

    /**
     * Enable flow cache for an edge transport node
     * Enable flow cache for edge transport node. Caution: This involves restart of the edge dataplane and hence may lead to network disruption. 
     * @param transportNodeId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> enableFlowCacheEnableFlowCacheWithHttpInfo(String transportNodeId) throws ApiException {
        com.squareup.okhttp.Call call = enableFlowCacheEnableFlowCacheValidateBeforeCall(transportNodeId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Enable flow cache for an edge transport node (asynchronously)
     * Enable flow cache for edge transport node. Caution: This involves restart of the edge dataplane and hence may lead to network disruption. 
     * @param transportNodeId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call enableFlowCacheEnableFlowCacheAsync(String transportNodeId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = enableFlowCacheEnableFlowCacheValidateBeforeCall(transportNodeId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getAllTransportNodesStatus
     * @param nodeType Transport node type (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAllTransportNodesStatusCall(String nodeType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/transport-nodes/status";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (nodeType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("node_type", nodeType));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllTransportNodesStatusValidateBeforeCall(String nodeType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getAllTransportNodesStatusCall(nodeType, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get high-level summary of all transport nodes. The service layer does not support source &#x3D; realtime or cached.
     * Get high-level summary of all transport nodes. The service layer does not support source &#x3D; realtime or cached.
     * @param nodeType Transport node type (optional)
     * @return HeatMapTransportZoneStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HeatMapTransportZoneStatus getAllTransportNodesStatus(String nodeType) throws ApiException {
        ApiResponse<HeatMapTransportZoneStatus> resp = getAllTransportNodesStatusWithHttpInfo(nodeType);
        return resp.getData();
    }

    /**
     * Get high-level summary of all transport nodes. The service layer does not support source &#x3D; realtime or cached.
     * Get high-level summary of all transport nodes. The service layer does not support source &#x3D; realtime or cached.
     * @param nodeType Transport node type (optional)
     * @return ApiResponse&lt;HeatMapTransportZoneStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HeatMapTransportZoneStatus> getAllTransportNodesStatusWithHttpInfo(String nodeType) throws ApiException {
        com.squareup.okhttp.Call call = getAllTransportNodesStatusValidateBeforeCall(nodeType, null, null);
        Type localVarReturnType = new TypeToken<HeatMapTransportZoneStatus>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get high-level summary of all transport nodes. The service layer does not support source &#x3D; realtime or cached. (asynchronously)
     * Get high-level summary of all transport nodes. The service layer does not support source &#x3D; realtime or cached.
     * @param nodeType Transport node type (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllTransportNodesStatusAsync(String nodeType, final ApiCallback<HeatMapTransportZoneStatus> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllTransportNodesStatusValidateBeforeCall(nodeType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HeatMapTransportZoneStatus>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAllTransportZoneStatus
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAllTransportZoneStatusCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/transport-zones/status";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllTransportZoneStatusValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getAllTransportZoneStatusCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get high-level summary of a transport zone. The service layer does not support source &#x3D; realtime or cached.
     * Get high-level summary of a transport zone. The service layer does not support source &#x3D; realtime or cached.
     * @return HeatMapTransportNodesAggregateStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HeatMapTransportNodesAggregateStatus getAllTransportZoneStatus() throws ApiException {
        ApiResponse<HeatMapTransportNodesAggregateStatus> resp = getAllTransportZoneStatusWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get high-level summary of a transport zone. The service layer does not support source &#x3D; realtime or cached.
     * Get high-level summary of a transport zone. The service layer does not support source &#x3D; realtime or cached.
     * @return ApiResponse&lt;HeatMapTransportNodesAggregateStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HeatMapTransportNodesAggregateStatus> getAllTransportZoneStatusWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getAllTransportZoneStatusValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<HeatMapTransportNodesAggregateStatus>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get high-level summary of a transport zone. The service layer does not support source &#x3D; realtime or cached. (asynchronously)
     * Get high-level summary of a transport zone. The service layer does not support source &#x3D; realtime or cached.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllTransportZoneStatusAsync(final ApiCallback<HeatMapTransportNodesAggregateStatus> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllTransportZoneStatusValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HeatMapTransportNodesAggregateStatus>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getComputeCollectionTransportNodeTemplate
     * @param templateId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getComputeCollectionTransportNodeTemplateCall(String templateId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/compute-collection-transport-node-templates/{template-id}"
            .replaceAll("\\{" + "template-id" + "\\}", apiClient.escapeString(templateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getComputeCollectionTransportNodeTemplateValidateBeforeCall(String templateId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'templateId' is set
        if (templateId == null) {
            throw new ApiException("Missing the required parameter 'templateId' when calling getComputeCollectionTransportNodeTemplate(Async)");
        }
        
        com.squareup.okhttp.Call call = getComputeCollectionTransportNodeTemplateCall(templateId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get compute collection transportnode template by id
     * Returns compute collection transportnode template by id Note- transport node templates APIs are deprecated and user is recommended to use transport node profiles APIs instead.
     * @param templateId  (required)
     * @return ComputeCollectionTransportNodeTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ComputeCollectionTransportNodeTemplate getComputeCollectionTransportNodeTemplate(String templateId) throws ApiException {
        ApiResponse<ComputeCollectionTransportNodeTemplate> resp = getComputeCollectionTransportNodeTemplateWithHttpInfo(templateId);
        return resp.getData();
    }

    /**
     * Get compute collection transportnode template by id
     * Returns compute collection transportnode template by id Note- transport node templates APIs are deprecated and user is recommended to use transport node profiles APIs instead.
     * @param templateId  (required)
     * @return ApiResponse&lt;ComputeCollectionTransportNodeTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ComputeCollectionTransportNodeTemplate> getComputeCollectionTransportNodeTemplateWithHttpInfo(String templateId) throws ApiException {
        com.squareup.okhttp.Call call = getComputeCollectionTransportNodeTemplateValidateBeforeCall(templateId, null, null);
        Type localVarReturnType = new TypeToken<ComputeCollectionTransportNodeTemplate>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get compute collection transportnode template by id (asynchronously)
     * Returns compute collection transportnode template by id Note- transport node templates APIs are deprecated and user is recommended to use transport node profiles APIs instead.
     * @param templateId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getComputeCollectionTransportNodeTemplateAsync(String templateId, final ApiCallback<ComputeCollectionTransportNodeTemplate> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getComputeCollectionTransportNodeTemplateValidateBeforeCall(templateId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ComputeCollectionTransportNodeTemplate>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getComputeCollectionTransportNodeTemplateState
     * @param templateId  (required)
     * @param computeCollectionId Compute collection id (optional)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getComputeCollectionTransportNodeTemplateStateCall(String templateId, String computeCollectionId, String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/compute-collection-transport-node-templates/{template-id}/state"
            .replaceAll("\\{" + "template-id" + "\\}", apiClient.escapeString(templateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (computeCollectionId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("compute_collection_id", computeCollectionId));
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (includedFields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("included_fields", includedFields));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page_size", pageSize));
        if (sortAscending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_ascending", sortAscending));
        if (sortBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_by", sortBy));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getComputeCollectionTransportNodeTemplateStateValidateBeforeCall(String templateId, String computeCollectionId, String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'templateId' is set
        if (templateId == null) {
            throw new ApiException("Missing the required parameter 'templateId' when calling getComputeCollectionTransportNodeTemplateState(Async)");
        }
        
        com.squareup.okhttp.Call call = getComputeCollectionTransportNodeTemplateStateCall(templateId, computeCollectionId, cursor, includedFields, pageSize, sortAscending, sortBy, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get compute collection transportnode template application states
     * Returns detailed transport node states for this compute collection Note- transport node templates APIs are deprecated and user is recommended to use transport node profiles APIs instead.
     * @param templateId  (required)
     * @param computeCollectionId Compute collection id (optional)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @return ComputeCollectionTransportNodeTemplateStateList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ComputeCollectionTransportNodeTemplateStateList getComputeCollectionTransportNodeTemplateState(String templateId, String computeCollectionId, String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy) throws ApiException {
        ApiResponse<ComputeCollectionTransportNodeTemplateStateList> resp = getComputeCollectionTransportNodeTemplateStateWithHttpInfo(templateId, computeCollectionId, cursor, includedFields, pageSize, sortAscending, sortBy);
        return resp.getData();
    }

    /**
     * Get compute collection transportnode template application states
     * Returns detailed transport node states for this compute collection Note- transport node templates APIs are deprecated and user is recommended to use transport node profiles APIs instead.
     * @param templateId  (required)
     * @param computeCollectionId Compute collection id (optional)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @return ApiResponse&lt;ComputeCollectionTransportNodeTemplateStateList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ComputeCollectionTransportNodeTemplateStateList> getComputeCollectionTransportNodeTemplateStateWithHttpInfo(String templateId, String computeCollectionId, String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy) throws ApiException {
        com.squareup.okhttp.Call call = getComputeCollectionTransportNodeTemplateStateValidateBeforeCall(templateId, computeCollectionId, cursor, includedFields, pageSize, sortAscending, sortBy, null, null);
        Type localVarReturnType = new TypeToken<ComputeCollectionTransportNodeTemplateStateList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get compute collection transportnode template application states (asynchronously)
     * Returns detailed transport node states for this compute collection Note- transport node templates APIs are deprecated and user is recommended to use transport node profiles APIs instead.
     * @param templateId  (required)
     * @param computeCollectionId Compute collection id (optional)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getComputeCollectionTransportNodeTemplateStateAsync(String templateId, String computeCollectionId, String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, final ApiCallback<ComputeCollectionTransportNodeTemplateStateList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getComputeCollectionTransportNodeTemplateStateValidateBeforeCall(templateId, computeCollectionId, cursor, includedFields, pageSize, sortAscending, sortBy, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ComputeCollectionTransportNodeTemplateStateList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFabricNodeModulesOfTransportNode
     * @param nodeId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFabricNodeModulesOfTransportNodeCall(String nodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/transport-nodes/{node-id}/modules"
            .replaceAll("\\{" + "node-id" + "\\}", apiClient.escapeString(nodeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFabricNodeModulesOfTransportNodeValidateBeforeCall(String nodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'nodeId' is set
        if (nodeId == null) {
            throw new ApiException("Missing the required parameter 'nodeId' when calling getFabricNodeModulesOfTransportNode(Async)");
        }
        
        com.squareup.okhttp.Call call = getFabricNodeModulesOfTransportNodeCall(nodeId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the module details of a transport node 
     * Get the module details of a transport node 
     * @param nodeId  (required)
     * @return SoftwareModuleResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SoftwareModuleResult getFabricNodeModulesOfTransportNode(String nodeId) throws ApiException {
        ApiResponse<SoftwareModuleResult> resp = getFabricNodeModulesOfTransportNodeWithHttpInfo(nodeId);
        return resp.getData();
    }

    /**
     * Get the module details of a transport node 
     * Get the module details of a transport node 
     * @param nodeId  (required)
     * @return ApiResponse&lt;SoftwareModuleResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SoftwareModuleResult> getFabricNodeModulesOfTransportNodeWithHttpInfo(String nodeId) throws ApiException {
        com.squareup.okhttp.Call call = getFabricNodeModulesOfTransportNodeValidateBeforeCall(nodeId, null, null);
        Type localVarReturnType = new TypeToken<SoftwareModuleResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the module details of a transport node  (asynchronously)
     * Get the module details of a transport node 
     * @param nodeId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFabricNodeModulesOfTransportNodeAsync(String nodeId, final ApiCallback<SoftwareModuleResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFabricNodeModulesOfTransportNodeValidateBeforeCall(nodeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SoftwareModuleResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getHeatmapTransportZoneStatus
     * @param zoneId ID of transport zone (required)
     * @param source Data source type. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getHeatmapTransportZoneStatusCall(String zoneId, String source, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/transport-zones/{zone-id}/status"
            .replaceAll("\\{" + "zone-id" + "\\}", apiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (source != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("source", source));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getHeatmapTransportZoneStatusValidateBeforeCall(String zoneId, String source, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling getHeatmapTransportZoneStatus(Async)");
        }
        
        com.squareup.okhttp.Call call = getHeatmapTransportZoneStatusCall(zoneId, source, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get high-level summary of a transport zone
     * Get high-level summary of a transport zone
     * @param zoneId ID of transport zone (required)
     * @param source Data source type. (optional)
     * @return HeatMapTransportZoneStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HeatMapTransportZoneStatus getHeatmapTransportZoneStatus(String zoneId, String source) throws ApiException {
        ApiResponse<HeatMapTransportZoneStatus> resp = getHeatmapTransportZoneStatusWithHttpInfo(zoneId, source);
        return resp.getData();
    }

    /**
     * Get high-level summary of a transport zone
     * Get high-level summary of a transport zone
     * @param zoneId ID of transport zone (required)
     * @param source Data source type. (optional)
     * @return ApiResponse&lt;HeatMapTransportZoneStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HeatMapTransportZoneStatus> getHeatmapTransportZoneStatusWithHttpInfo(String zoneId, String source) throws ApiException {
        com.squareup.okhttp.Call call = getHeatmapTransportZoneStatusValidateBeforeCall(zoneId, source, null, null);
        Type localVarReturnType = new TypeToken<HeatMapTransportZoneStatus>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get high-level summary of a transport zone (asynchronously)
     * Get high-level summary of a transport zone
     * @param zoneId ID of transport zone (required)
     * @param source Data source type. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getHeatmapTransportZoneStatusAsync(String zoneId, String source, final ApiCallback<HeatMapTransportZoneStatus> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getHeatmapTransportZoneStatusValidateBeforeCall(zoneId, source, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HeatMapTransportZoneStatus>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNetworkMigrationSpec
     * @param templateId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNetworkMigrationSpecCall(String templateId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/network-migration-specs/{template-id}"
            .replaceAll("\\{" + "template-id" + "\\}", apiClient.escapeString(templateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNetworkMigrationSpecValidateBeforeCall(String templateId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'templateId' is set
        if (templateId == null) {
            throw new ApiException("Missing the required parameter 'templateId' when calling getNetworkMigrationSpec(Async)");
        }
        
        com.squareup.okhttp.Call call = getNetworkMigrationSpecCall(templateId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get network migration specification template by id.
     * Network migration specification once created and can be used as a template to indicate associated component which networks should be migrated and where. Currently migration template can be associated with compute collections which are managed by vCenter host profiles, to trigger automatic migration of networks for Stateless ESX hosts. Currently we only support creation of HostProfileNetworkMigrationSpec type of specification. Note- transport node templates APIs are deprecated and user is recommended to use transport node profiles APIs instead.
     * @param templateId  (required)
     * @return NetworkMigrationSpec
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NetworkMigrationSpec getNetworkMigrationSpec(String templateId) throws ApiException {
        ApiResponse<NetworkMigrationSpec> resp = getNetworkMigrationSpecWithHttpInfo(templateId);
        return resp.getData();
    }

    /**
     * Get network migration specification template by id.
     * Network migration specification once created and can be used as a template to indicate associated component which networks should be migrated and where. Currently migration template can be associated with compute collections which are managed by vCenter host profiles, to trigger automatic migration of networks for Stateless ESX hosts. Currently we only support creation of HostProfileNetworkMigrationSpec type of specification. Note- transport node templates APIs are deprecated and user is recommended to use transport node profiles APIs instead.
     * @param templateId  (required)
     * @return ApiResponse&lt;NetworkMigrationSpec&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NetworkMigrationSpec> getNetworkMigrationSpecWithHttpInfo(String templateId) throws ApiException {
        com.squareup.okhttp.Call call = getNetworkMigrationSpecValidateBeforeCall(templateId, null, null);
        Type localVarReturnType = new TypeToken<NetworkMigrationSpec>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get network migration specification template by id. (asynchronously)
     * Network migration specification once created and can be used as a template to indicate associated component which networks should be migrated and where. Currently migration template can be associated with compute collections which are managed by vCenter host profiles, to trigger automatic migration of networks for Stateless ESX hosts. Currently we only support creation of HostProfileNetworkMigrationSpec type of specification. Note- transport node templates APIs are deprecated and user is recommended to use transport node profiles APIs instead.
     * @param templateId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNetworkMigrationSpecAsync(String templateId, final ApiCallback<NetworkMigrationSpec> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNetworkMigrationSpecValidateBeforeCall(templateId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NetworkMigrationSpec>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPnicStatusesForTransportNode
     * @param nodeId ID of transport node (required)
     * @param status pNic/bond status (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPnicStatusesForTransportNodeCall(String nodeId, String status, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/transport-nodes/{node-id}/pnic-bond-status"
            .replaceAll("\\{" + "node-id" + "\\}", apiClient.escapeString(nodeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (status != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("status", status));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPnicStatusesForTransportNodeValidateBeforeCall(String nodeId, String status, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'nodeId' is set
        if (nodeId == null) {
            throw new ApiException("Missing the required parameter 'nodeId' when calling getPnicStatusesForTransportNode(Async)");
        }
        
        com.squareup.okhttp.Call call = getPnicStatusesForTransportNodeCall(nodeId, status, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get high-level summary of a transport node
     * Get high-level summary of a transport node
     * @param nodeId ID of transport node (required)
     * @param status pNic/bond status (optional)
     * @return PnicBondStatusListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PnicBondStatusListResult getPnicStatusesForTransportNode(String nodeId, String status) throws ApiException {
        ApiResponse<PnicBondStatusListResult> resp = getPnicStatusesForTransportNodeWithHttpInfo(nodeId, status);
        return resp.getData();
    }

    /**
     * Get high-level summary of a transport node
     * Get high-level summary of a transport node
     * @param nodeId ID of transport node (required)
     * @param status pNic/bond status (optional)
     * @return ApiResponse&lt;PnicBondStatusListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PnicBondStatusListResult> getPnicStatusesForTransportNodeWithHttpInfo(String nodeId, String status) throws ApiException {
        com.squareup.okhttp.Call call = getPnicStatusesForTransportNodeValidateBeforeCall(nodeId, status, null, null);
        Type localVarReturnType = new TypeToken<PnicBondStatusListResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get high-level summary of a transport node (asynchronously)
     * Get high-level summary of a transport node
     * @param nodeId ID of transport node (required)
     * @param status pNic/bond status (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPnicStatusesForTransportNodeAsync(String nodeId, String status, final ApiCallback<PnicBondStatusListResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPnicStatusesForTransportNodeValidateBeforeCall(nodeId, status, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PnicBondStatusListResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTransportNodeReport
     * @param source Data source type. (optional)
     * @param status Transport node (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTransportNodeReportCall(String source, String status, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/transport-zones/transport-node-status-report";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (source != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("source", source));
        if (status != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("status", status));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/octet-stream"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTransportNodeReportValidateBeforeCall(String source, String status, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getTransportNodeReportCall(source, status, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Creates a status report of transport nodes of all the transport zones
     * You must provide the request header \&quot;Accept:application/octet-stream\&quot; when calling this API.
     * @param source Data source type. (optional)
     * @param status Transport node (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getTransportNodeReport(String source, String status) throws ApiException {
        getTransportNodeReportWithHttpInfo(source, status);
    }

    /**
     * Creates a status report of transport nodes of all the transport zones
     * You must provide the request header \&quot;Accept:application/octet-stream\&quot; when calling this API.
     * @param source Data source type. (optional)
     * @param status Transport node (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getTransportNodeReportWithHttpInfo(String source, String status) throws ApiException {
        com.squareup.okhttp.Call call = getTransportNodeReportValidateBeforeCall(source, status, null, null);
        return apiClient.execute(call);
    }

    /**
     * Creates a status report of transport nodes of all the transport zones (asynchronously)
     * You must provide the request header \&quot;Accept:application/octet-stream\&quot; when calling this API.
     * @param source Data source type. (optional)
     * @param status Transport node (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTransportNodeReportAsync(String source, String status, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTransportNodeReportValidateBeforeCall(source, status, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getTransportNodeReportForATransportZone
     * @param zoneId ID of transport zone (required)
     * @param source Data source type. (optional)
     * @param status Transport node (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTransportNodeReportForATransportZoneCall(String zoneId, String source, String status, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/transport-zones/{zone-id}/transport-node-status-report"
            .replaceAll("\\{" + "zone-id" + "\\}", apiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (source != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("source", source));
        if (status != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("status", status));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/octet-stream"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTransportNodeReportForATransportZoneValidateBeforeCall(String zoneId, String source, String status, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling getTransportNodeReportForATransportZone(Async)");
        }
        
        com.squareup.okhttp.Call call = getTransportNodeReportForATransportZoneCall(zoneId, source, status, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Creates a status report of transport nodes in a transport zone
     * You must provide the request header \&quot;Accept:application/octet-stream\&quot; when calling this API.
     * @param zoneId ID of transport zone (required)
     * @param source Data source type. (optional)
     * @param status Transport node (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getTransportNodeReportForATransportZone(String zoneId, String source, String status) throws ApiException {
        getTransportNodeReportForATransportZoneWithHttpInfo(zoneId, source, status);
    }

    /**
     * Creates a status report of transport nodes in a transport zone
     * You must provide the request header \&quot;Accept:application/octet-stream\&quot; when calling this API.
     * @param zoneId ID of transport zone (required)
     * @param source Data source type. (optional)
     * @param status Transport node (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getTransportNodeReportForATransportZoneWithHttpInfo(String zoneId, String source, String status) throws ApiException {
        com.squareup.okhttp.Call call = getTransportNodeReportForATransportZoneValidateBeforeCall(zoneId, source, status, null, null);
        return apiClient.execute(call);
    }

    /**
     * Creates a status report of transport nodes in a transport zone (asynchronously)
     * You must provide the request header \&quot;Accept:application/octet-stream\&quot; when calling this API.
     * @param zoneId ID of transport zone (required)
     * @param source Data source type. (optional)
     * @param status Transport node (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTransportNodeReportForATransportZoneAsync(String zoneId, String source, String status, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTransportNodeReportForATransportZoneValidateBeforeCall(zoneId, source, status, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getTransportNodeStateWithDeploymentInfo
     * @param transportNodeId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTransportNodeStateWithDeploymentInfoCall(String transportNodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/transport-nodes/{transport-node-id}/state"
            .replaceAll("\\{" + "transport-node-id" + "\\}", apiClient.escapeString(transportNodeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTransportNodeStateWithDeploymentInfoValidateBeforeCall(String transportNodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'transportNodeId' is set
        if (transportNodeId == null) {
            throw new ApiException("Missing the required parameter 'transportNodeId' when calling getTransportNodeStateWithDeploymentInfo(Async)");
        }
        
        com.squareup.okhttp.Call call = getTransportNodeStateWithDeploymentInfoCall(transportNodeId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get a Transport Node&#x27;s State
     * Returns information about the current state of the transport node configuration and information about the associated hostswitch. 
     * @param transportNodeId  (required)
     * @return TransportNodeState
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TransportNodeState getTransportNodeStateWithDeploymentInfo(String transportNodeId) throws ApiException {
        ApiResponse<TransportNodeState> resp = getTransportNodeStateWithDeploymentInfoWithHttpInfo(transportNodeId);
        return resp.getData();
    }

    /**
     * Get a Transport Node&#x27;s State
     * Returns information about the current state of the transport node configuration and information about the associated hostswitch. 
     * @param transportNodeId  (required)
     * @return ApiResponse&lt;TransportNodeState&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TransportNodeState> getTransportNodeStateWithDeploymentInfoWithHttpInfo(String transportNodeId) throws ApiException {
        com.squareup.okhttp.Call call = getTransportNodeStateWithDeploymentInfoValidateBeforeCall(transportNodeId, null, null);
        Type localVarReturnType = new TypeToken<TransportNodeState>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a Transport Node&#x27;s State (asynchronously)
     * Returns information about the current state of the transport node configuration and information about the associated hostswitch. 
     * @param transportNodeId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTransportNodeStateWithDeploymentInfoAsync(String transportNodeId, final ApiCallback<TransportNodeState> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTransportNodeStateWithDeploymentInfoValidateBeforeCall(transportNodeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TransportNodeState>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTransportNodeStatus
     * @param nodeId ID of transport node (required)
     * @param source Data source type. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTransportNodeStatusCall(String nodeId, String source, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/transport-nodes/{node-id}/status"
            .replaceAll("\\{" + "node-id" + "\\}", apiClient.escapeString(nodeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (source != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("source", source));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTransportNodeStatusValidateBeforeCall(String nodeId, String source, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'nodeId' is set
        if (nodeId == null) {
            throw new ApiException("Missing the required parameter 'nodeId' when calling getTransportNodeStatus(Async)");
        }
        
        com.squareup.okhttp.Call call = getTransportNodeStatusCall(nodeId, source, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read status of a transport node
     * Read status of a transport node
     * @param nodeId ID of transport node (required)
     * @param source Data source type. (optional)
     * @return TransportNodeStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TransportNodeStatus getTransportNodeStatus(String nodeId, String source) throws ApiException {
        ApiResponse<TransportNodeStatus> resp = getTransportNodeStatusWithHttpInfo(nodeId, source);
        return resp.getData();
    }

    /**
     * Read status of a transport node
     * Read status of a transport node
     * @param nodeId ID of transport node (required)
     * @param source Data source type. (optional)
     * @return ApiResponse&lt;TransportNodeStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TransportNodeStatus> getTransportNodeStatusWithHttpInfo(String nodeId, String source) throws ApiException {
        com.squareup.okhttp.Call call = getTransportNodeStatusValidateBeforeCall(nodeId, source, null, null);
        Type localVarReturnType = new TypeToken<TransportNodeStatus>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read status of a transport node (asynchronously)
     * Read status of a transport node
     * @param nodeId ID of transport node (required)
     * @param source Data source type. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTransportNodeStatusAsync(String nodeId, String source, final ApiCallback<TransportNodeStatus> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTransportNodeStatusValidateBeforeCall(nodeId, source, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TransportNodeStatus>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTransportNodeWithDeploymentInfo
     * @param transportNodeId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTransportNodeWithDeploymentInfoCall(String transportNodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/transport-nodes/{transport-node-id}"
            .replaceAll("\\{" + "transport-node-id" + "\\}", apiClient.escapeString(transportNodeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTransportNodeWithDeploymentInfoValidateBeforeCall(String transportNodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'transportNodeId' is set
        if (transportNodeId == null) {
            throw new ApiException("Missing the required parameter 'transportNodeId' when calling getTransportNodeWithDeploymentInfo(Async)");
        }
        
        com.squareup.okhttp.Call call = getTransportNodeWithDeploymentInfoCall(transportNodeId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get a Transport Node
     * Returns information about a specified transport node.
     * @param transportNodeId  (required)
     * @return TransportNode
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TransportNode getTransportNodeWithDeploymentInfo(String transportNodeId) throws ApiException {
        ApiResponse<TransportNode> resp = getTransportNodeWithDeploymentInfoWithHttpInfo(transportNodeId);
        return resp.getData();
    }

    /**
     * Get a Transport Node
     * Returns information about a specified transport node.
     * @param transportNodeId  (required)
     * @return ApiResponse&lt;TransportNode&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TransportNode> getTransportNodeWithDeploymentInfoWithHttpInfo(String transportNodeId) throws ApiException {
        com.squareup.okhttp.Call call = getTransportNodeWithDeploymentInfoValidateBeforeCall(transportNodeId, null, null);
        Type localVarReturnType = new TypeToken<TransportNode>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a Transport Node (asynchronously)
     * Returns information about a specified transport node.
     * @param transportNodeId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTransportNodeWithDeploymentInfoAsync(String transportNodeId, final ApiCallback<TransportNode> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTransportNodeWithDeploymentInfoValidateBeforeCall(transportNodeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TransportNode>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTunnel
     * @param nodeId ID of transport node (required)
     * @param tunnelName Tunnel name (required)
     * @param source Data source type. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTunnelCall(String nodeId, String tunnelName, String source, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/transport-nodes/{node-id}/tunnels/{tunnel-name}"
            .replaceAll("\\{" + "node-id" + "\\}", apiClient.escapeString(nodeId.toString()))
            .replaceAll("\\{" + "tunnel-name" + "\\}", apiClient.escapeString(tunnelName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (source != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("source", source));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTunnelValidateBeforeCall(String nodeId, String tunnelName, String source, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'nodeId' is set
        if (nodeId == null) {
            throw new ApiException("Missing the required parameter 'nodeId' when calling getTunnel(Async)");
        }
        // verify the required parameter 'tunnelName' is set
        if (tunnelName == null) {
            throw new ApiException("Missing the required parameter 'tunnelName' when calling getTunnel(Async)");
        }
        
        com.squareup.okhttp.Call call = getTunnelCall(nodeId, tunnelName, source, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Tunnel properties
     * Tunnel properties
     * @param nodeId ID of transport node (required)
     * @param tunnelName Tunnel name (required)
     * @param source Data source type. (optional)
     * @return TunnelProperties
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TunnelProperties getTunnel(String nodeId, String tunnelName, String source) throws ApiException {
        ApiResponse<TunnelProperties> resp = getTunnelWithHttpInfo(nodeId, tunnelName, source);
        return resp.getData();
    }

    /**
     * Tunnel properties
     * Tunnel properties
     * @param nodeId ID of transport node (required)
     * @param tunnelName Tunnel name (required)
     * @param source Data source type. (optional)
     * @return ApiResponse&lt;TunnelProperties&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TunnelProperties> getTunnelWithHttpInfo(String nodeId, String tunnelName, String source) throws ApiException {
        com.squareup.okhttp.Call call = getTunnelValidateBeforeCall(nodeId, tunnelName, source, null, null);
        Type localVarReturnType = new TypeToken<TunnelProperties>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Tunnel properties (asynchronously)
     * Tunnel properties
     * @param nodeId ID of transport node (required)
     * @param tunnelName Tunnel name (required)
     * @param source Data source type. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTunnelAsync(String nodeId, String tunnelName, String source, final ApiCallback<TunnelProperties> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTunnelValidateBeforeCall(nodeId, tunnelName, source, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TunnelProperties>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listComputeCollectionTransportNodeTemplates
     * @param computeCollectionId Compute collection id (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listComputeCollectionTransportNodeTemplatesCall(String computeCollectionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/compute-collection-transport-node-templates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (computeCollectionId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("compute_collection_id", computeCollectionId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listComputeCollectionTransportNodeTemplatesValidateBeforeCall(String computeCollectionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listComputeCollectionTransportNodeTemplatesCall(computeCollectionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List compute collection transportnode templates
     * Returns all eligible compute collection transportnode templates Note- transport node templates APIs are deprecated and user is recommended to use transport node profiles APIs instead.
     * @param computeCollectionId Compute collection id (optional)
     * @return TransportNodeTemplateListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TransportNodeTemplateListResult listComputeCollectionTransportNodeTemplates(String computeCollectionId) throws ApiException {
        ApiResponse<TransportNodeTemplateListResult> resp = listComputeCollectionTransportNodeTemplatesWithHttpInfo(computeCollectionId);
        return resp.getData();
    }

    /**
     * List compute collection transportnode templates
     * Returns all eligible compute collection transportnode templates Note- transport node templates APIs are deprecated and user is recommended to use transport node profiles APIs instead.
     * @param computeCollectionId Compute collection id (optional)
     * @return ApiResponse&lt;TransportNodeTemplateListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TransportNodeTemplateListResult> listComputeCollectionTransportNodeTemplatesWithHttpInfo(String computeCollectionId) throws ApiException {
        com.squareup.okhttp.Call call = listComputeCollectionTransportNodeTemplatesValidateBeforeCall(computeCollectionId, null, null);
        Type localVarReturnType = new TypeToken<TransportNodeTemplateListResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List compute collection transportnode templates (asynchronously)
     * Returns all eligible compute collection transportnode templates Note- transport node templates APIs are deprecated and user is recommended to use transport node profiles APIs instead.
     * @param computeCollectionId Compute collection id (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listComputeCollectionTransportNodeTemplatesAsync(String computeCollectionId, final ApiCallback<TransportNodeTemplateListResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listComputeCollectionTransportNodeTemplatesValidateBeforeCall(computeCollectionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TransportNodeTemplateListResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listNeighborProperties
     * @param nodeId ID of transport node (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listNeighborPropertiesCall(String nodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/lldp/transport-nodes/{node-id}/interfaces"
            .replaceAll("\\{" + "node-id" + "\\}", apiClient.escapeString(nodeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listNeighborPropertiesValidateBeforeCall(String nodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'nodeId' is set
        if (nodeId == null) {
            throw new ApiException("Missing the required parameter 'nodeId' when calling listNeighborProperties(Async)");
        }
        
        com.squareup.okhttp.Call call = listNeighborPropertiesCall(nodeId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List LLDP Neighbor Properties of Transport Node
     * List LLDP Neighbor Properties for all interfaces of Transport Node 
     * @param nodeId ID of transport node (required)
     * @return InterfaceNeighborPropertyListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InterfaceNeighborPropertyListResult listNeighborProperties(String nodeId) throws ApiException {
        ApiResponse<InterfaceNeighborPropertyListResult> resp = listNeighborPropertiesWithHttpInfo(nodeId);
        return resp.getData();
    }

    /**
     * List LLDP Neighbor Properties of Transport Node
     * List LLDP Neighbor Properties for all interfaces of Transport Node 
     * @param nodeId ID of transport node (required)
     * @return ApiResponse&lt;InterfaceNeighborPropertyListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InterfaceNeighborPropertyListResult> listNeighborPropertiesWithHttpInfo(String nodeId) throws ApiException {
        com.squareup.okhttp.Call call = listNeighborPropertiesValidateBeforeCall(nodeId, null, null);
        Type localVarReturnType = new TypeToken<InterfaceNeighborPropertyListResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List LLDP Neighbor Properties of Transport Node (asynchronously)
     * List LLDP Neighbor Properties for all interfaces of Transport Node 
     * @param nodeId ID of transport node (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listNeighborPropertiesAsync(String nodeId, final ApiCallback<InterfaceNeighborPropertyListResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listNeighborPropertiesValidateBeforeCall(nodeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InterfaceNeighborPropertyListResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listNetworkMigrationSpecs
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includeSystemOwned Whether the list result contains system resources (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param type Supported network migration specification types. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listNetworkMigrationSpecsCall(String cursor, Boolean includeSystemOwned, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, String type, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/network-migration-specs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (includeSystemOwned != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("include_system_owned", includeSystemOwned));
        if (includedFields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("included_fields", includedFields));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page_size", pageSize));
        if (sortAscending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_ascending", sortAscending));
        if (sortBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_by", sortBy));
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("type", type));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listNetworkMigrationSpecsValidateBeforeCall(String cursor, Boolean includeSystemOwned, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, String type, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listNetworkMigrationSpecsCall(cursor, includeSystemOwned, includedFields, pageSize, sortAscending, sortBy, type, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List all network migration specification templates.
     * Network migration specification once created and can be used as a template to indicate associated component which networks should be migrated and where. Currently migration template can be associated with compute collections which are managed by vCenter host profiles, to trigger automatic migration of networks for Stateless ESX hosts. Currently we only support creation of HostProfileNetworkMigrationSpec type of specification. Note- transport node templates APIs are deprecated and user is recommended to use transport node profiles APIs instead.
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includeSystemOwned Whether the list result contains system resources (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param type Supported network migration specification types. (optional)
     * @return NetworkMigrationSpecListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NetworkMigrationSpecListResult listNetworkMigrationSpecs(String cursor, Boolean includeSystemOwned, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, String type) throws ApiException {
        ApiResponse<NetworkMigrationSpecListResult> resp = listNetworkMigrationSpecsWithHttpInfo(cursor, includeSystemOwned, includedFields, pageSize, sortAscending, sortBy, type);
        return resp.getData();
    }

    /**
     * List all network migration specification templates.
     * Network migration specification once created and can be used as a template to indicate associated component which networks should be migrated and where. Currently migration template can be associated with compute collections which are managed by vCenter host profiles, to trigger automatic migration of networks for Stateless ESX hosts. Currently we only support creation of HostProfileNetworkMigrationSpec type of specification. Note- transport node templates APIs are deprecated and user is recommended to use transport node profiles APIs instead.
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includeSystemOwned Whether the list result contains system resources (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param type Supported network migration specification types. (optional)
     * @return ApiResponse&lt;NetworkMigrationSpecListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NetworkMigrationSpecListResult> listNetworkMigrationSpecsWithHttpInfo(String cursor, Boolean includeSystemOwned, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, String type) throws ApiException {
        com.squareup.okhttp.Call call = listNetworkMigrationSpecsValidateBeforeCall(cursor, includeSystemOwned, includedFields, pageSize, sortAscending, sortBy, type, null, null);
        Type localVarReturnType = new TypeToken<NetworkMigrationSpecListResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all network migration specification templates. (asynchronously)
     * Network migration specification once created and can be used as a template to indicate associated component which networks should be migrated and where. Currently migration template can be associated with compute collections which are managed by vCenter host profiles, to trigger automatic migration of networks for Stateless ESX hosts. Currently we only support creation of HostProfileNetworkMigrationSpec type of specification. Note- transport node templates APIs are deprecated and user is recommended to use transport node profiles APIs instead.
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includeSystemOwned Whether the list result contains system resources (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param type Supported network migration specification types. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listNetworkMigrationSpecsAsync(String cursor, Boolean includeSystemOwned, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, String type, final ApiCallback<NetworkMigrationSpecListResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listNetworkMigrationSpecsValidateBeforeCall(cursor, includeSystemOwned, includedFields, pageSize, sortAscending, sortBy, type, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NetworkMigrationSpecListResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listRemoteTransportNodeStatus
     * @param nodeId ID of transport node (required)
     * @param bfdDiagnosticCode BFD diagnostic code of Tunnel (optional)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param source Data source type. (optional)
     * @param tunnelStatus Tunnel Status (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listRemoteTransportNodeStatusCall(String nodeId, String bfdDiagnosticCode, String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, String source, String tunnelStatus, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/transport-nodes/{node-id}/remote-transport-node-status"
            .replaceAll("\\{" + "node-id" + "\\}", apiClient.escapeString(nodeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (bfdDiagnosticCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("bfd_diagnostic_code", bfdDiagnosticCode));
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (includedFields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("included_fields", includedFields));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page_size", pageSize));
        if (sortAscending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_ascending", sortAscending));
        if (sortBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_by", sortBy));
        if (source != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("source", source));
        if (tunnelStatus != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("tunnel_status", tunnelStatus));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listRemoteTransportNodeStatusValidateBeforeCall(String nodeId, String bfdDiagnosticCode, String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, String source, String tunnelStatus, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'nodeId' is set
        if (nodeId == null) {
            throw new ApiException("Missing the required parameter 'nodeId' when calling listRemoteTransportNodeStatus(Async)");
        }
        
        com.squareup.okhttp.Call call = listRemoteTransportNodeStatusCall(nodeId, bfdDiagnosticCode, cursor, includedFields, pageSize, sortAscending, sortBy, source, tunnelStatus, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read status of all transport nodes with tunnel connections to transport node 
     * Read status of all transport nodes with tunnel connections to transport node 
     * @param nodeId ID of transport node (required)
     * @param bfdDiagnosticCode BFD diagnostic code of Tunnel (optional)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param source Data source type. (optional)
     * @param tunnelStatus Tunnel Status (optional)
     * @return TransportNodeStatusListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TransportNodeStatusListResult listRemoteTransportNodeStatus(String nodeId, String bfdDiagnosticCode, String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, String source, String tunnelStatus) throws ApiException {
        ApiResponse<TransportNodeStatusListResult> resp = listRemoteTransportNodeStatusWithHttpInfo(nodeId, bfdDiagnosticCode, cursor, includedFields, pageSize, sortAscending, sortBy, source, tunnelStatus);
        return resp.getData();
    }

    /**
     * Read status of all transport nodes with tunnel connections to transport node 
     * Read status of all transport nodes with tunnel connections to transport node 
     * @param nodeId ID of transport node (required)
     * @param bfdDiagnosticCode BFD diagnostic code of Tunnel (optional)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param source Data source type. (optional)
     * @param tunnelStatus Tunnel Status (optional)
     * @return ApiResponse&lt;TransportNodeStatusListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TransportNodeStatusListResult> listRemoteTransportNodeStatusWithHttpInfo(String nodeId, String bfdDiagnosticCode, String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, String source, String tunnelStatus) throws ApiException {
        com.squareup.okhttp.Call call = listRemoteTransportNodeStatusValidateBeforeCall(nodeId, bfdDiagnosticCode, cursor, includedFields, pageSize, sortAscending, sortBy, source, tunnelStatus, null, null);
        Type localVarReturnType = new TypeToken<TransportNodeStatusListResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read status of all transport nodes with tunnel connections to transport node  (asynchronously)
     * Read status of all transport nodes with tunnel connections to transport node 
     * @param nodeId ID of transport node (required)
     * @param bfdDiagnosticCode BFD diagnostic code of Tunnel (optional)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param source Data source type. (optional)
     * @param tunnelStatus Tunnel Status (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listRemoteTransportNodeStatusAsync(String nodeId, String bfdDiagnosticCode, String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, String source, String tunnelStatus, final ApiCallback<TransportNodeStatusListResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listRemoteTransportNodeStatusValidateBeforeCall(nodeId, bfdDiagnosticCode, cursor, includedFields, pageSize, sortAscending, sortBy, source, tunnelStatus, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TransportNodeStatusListResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listTransportNodeCapabilities
     * @param transportNodeId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listTransportNodeCapabilitiesCall(String transportNodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/transport-nodes/{transport-node-id}/capabilities"
            .replaceAll("\\{" + "transport-node-id" + "\\}", apiClient.escapeString(transportNodeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listTransportNodeCapabilitiesValidateBeforeCall(String transportNodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'transportNodeId' is set
        if (transportNodeId == null) {
            throw new ApiException("Missing the required parameter 'transportNodeId' when calling listTransportNodeCapabilities(Async)");
        }
        
        com.squareup.okhttp.Call call = listTransportNodeCapabilitiesCall(transportNodeId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Return the list of capabilities of transport node
     * Returns information about capabilities of transport host node. Edge nodes do not have capabilities.
     * @param transportNodeId  (required)
     * @return NodeCapabilitiesResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeCapabilitiesResult listTransportNodeCapabilities(String transportNodeId) throws ApiException {
        ApiResponse<NodeCapabilitiesResult> resp = listTransportNodeCapabilitiesWithHttpInfo(transportNodeId);
        return resp.getData();
    }

    /**
     * Return the list of capabilities of transport node
     * Returns information about capabilities of transport host node. Edge nodes do not have capabilities.
     * @param transportNodeId  (required)
     * @return ApiResponse&lt;NodeCapabilitiesResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeCapabilitiesResult> listTransportNodeCapabilitiesWithHttpInfo(String transportNodeId) throws ApiException {
        com.squareup.okhttp.Call call = listTransportNodeCapabilitiesValidateBeforeCall(transportNodeId, null, null);
        Type localVarReturnType = new TypeToken<NodeCapabilitiesResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Return the list of capabilities of transport node (asynchronously)
     * Returns information about capabilities of transport host node. Edge nodes do not have capabilities.
     * @param transportNodeId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listTransportNodeCapabilitiesAsync(String transportNodeId, final ApiCallback<NodeCapabilitiesResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listTransportNodeCapabilitiesValidateBeforeCall(transportNodeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeCapabilitiesResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listTransportNodeInterfaces
     * @param transportNodeId  (required)
     * @param source Data source type. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listTransportNodeInterfacesCall(String transportNodeId, String source, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/transport-nodes/{transport-node-id}/network/interfaces"
            .replaceAll("\\{" + "transport-node-id" + "\\}", apiClient.escapeString(transportNodeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (source != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("source", source));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listTransportNodeInterfacesValidateBeforeCall(String transportNodeId, String source, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'transportNodeId' is set
        if (transportNodeId == null) {
            throw new ApiException("Missing the required parameter 'transportNodeId' when calling listTransportNodeInterfaces(Async)");
        }
        
        com.squareup.okhttp.Call call = listTransportNodeInterfacesCall(transportNodeId, source, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List the specified transport node&#x27;s network interfaces
     * Returns the number of interfaces on the node and detailed information about each interface. Interface information includes MTU, broadcast and host IP addresses, link and admin status, MAC address, network mask, and the IP configuration method (static or DHCP). 
     * @param transportNodeId  (required)
     * @param source Data source type. (optional)
     * @return NodeInterfacePropertiesListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeInterfacePropertiesListResult listTransportNodeInterfaces(String transportNodeId, String source) throws ApiException {
        ApiResponse<NodeInterfacePropertiesListResult> resp = listTransportNodeInterfacesWithHttpInfo(transportNodeId, source);
        return resp.getData();
    }

    /**
     * List the specified transport node&#x27;s network interfaces
     * Returns the number of interfaces on the node and detailed information about each interface. Interface information includes MTU, broadcast and host IP addresses, link and admin status, MAC address, network mask, and the IP configuration method (static or DHCP). 
     * @param transportNodeId  (required)
     * @param source Data source type. (optional)
     * @return ApiResponse&lt;NodeInterfacePropertiesListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeInterfacePropertiesListResult> listTransportNodeInterfacesWithHttpInfo(String transportNodeId, String source) throws ApiException {
        com.squareup.okhttp.Call call = listTransportNodeInterfacesValidateBeforeCall(transportNodeId, source, null, null);
        Type localVarReturnType = new TypeToken<NodeInterfacePropertiesListResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List the specified transport node&#x27;s network interfaces (asynchronously)
     * Returns the number of interfaces on the node and detailed information about each interface. Interface information includes MTU, broadcast and host IP addresses, link and admin status, MAC address, network mask, and the IP configuration method (static or DHCP). 
     * @param transportNodeId  (required)
     * @param source Data source type. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listTransportNodeInterfacesAsync(String transportNodeId, String source, final ApiCallback<NodeInterfacePropertiesListResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listTransportNodeInterfacesValidateBeforeCall(transportNodeId, source, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeInterfacePropertiesListResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listTransportNodeStatus
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param source Data source type. (optional)
     * @param status Transport node (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listTransportNodeStatusCall(String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, String source, String status, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/transport-zones/transport-node-status";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (includedFields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("included_fields", includedFields));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page_size", pageSize));
        if (sortAscending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_ascending", sortAscending));
        if (sortBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_by", sortBy));
        if (source != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("source", source));
        if (status != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("status", status));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listTransportNodeStatusValidateBeforeCall(String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, String source, String status, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listTransportNodeStatusCall(cursor, includedFields, pageSize, sortAscending, sortBy, source, status, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read status of all the transport nodes
     * Read status of all the transport nodes
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param source Data source type. (optional)
     * @param status Transport node (optional)
     * @return TransportNodeStatusListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TransportNodeStatusListResult listTransportNodeStatus(String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, String source, String status) throws ApiException {
        ApiResponse<TransportNodeStatusListResult> resp = listTransportNodeStatusWithHttpInfo(cursor, includedFields, pageSize, sortAscending, sortBy, source, status);
        return resp.getData();
    }

    /**
     * Read status of all the transport nodes
     * Read status of all the transport nodes
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param source Data source type. (optional)
     * @param status Transport node (optional)
     * @return ApiResponse&lt;TransportNodeStatusListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TransportNodeStatusListResult> listTransportNodeStatusWithHttpInfo(String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, String source, String status) throws ApiException {
        com.squareup.okhttp.Call call = listTransportNodeStatusValidateBeforeCall(cursor, includedFields, pageSize, sortAscending, sortBy, source, status, null, null);
        Type localVarReturnType = new TypeToken<TransportNodeStatusListResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read status of all the transport nodes (asynchronously)
     * Read status of all the transport nodes
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param source Data source type. (optional)
     * @param status Transport node (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listTransportNodeStatusAsync(String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, String source, String status, final ApiCallback<TransportNodeStatusListResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listTransportNodeStatusValidateBeforeCall(cursor, includedFields, pageSize, sortAscending, sortBy, source, status, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TransportNodeStatusListResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listTransportNodeStatusForTransportZone
     * @param zoneId ID of transport zone (required)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param source Data source type. (optional)
     * @param status Transport node (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listTransportNodeStatusForTransportZoneCall(String zoneId, String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, String source, String status, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/transport-zones/{zone-id}/transport-node-status"
            .replaceAll("\\{" + "zone-id" + "\\}", apiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (includedFields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("included_fields", includedFields));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page_size", pageSize));
        if (sortAscending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_ascending", sortAscending));
        if (sortBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_by", sortBy));
        if (source != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("source", source));
        if (status != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("status", status));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listTransportNodeStatusForTransportZoneValidateBeforeCall(String zoneId, String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, String source, String status, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling listTransportNodeStatusForTransportZone(Async)");
        }
        
        com.squareup.okhttp.Call call = listTransportNodeStatusForTransportZoneCall(zoneId, cursor, includedFields, pageSize, sortAscending, sortBy, source, status, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read status of transport nodes in a transport zone
     * Read status of transport nodes in a transport zone
     * @param zoneId ID of transport zone (required)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param source Data source type. (optional)
     * @param status Transport node (optional)
     * @return TransportNodeStatusListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TransportNodeStatusListResult listTransportNodeStatusForTransportZone(String zoneId, String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, String source, String status) throws ApiException {
        ApiResponse<TransportNodeStatusListResult> resp = listTransportNodeStatusForTransportZoneWithHttpInfo(zoneId, cursor, includedFields, pageSize, sortAscending, sortBy, source, status);
        return resp.getData();
    }

    /**
     * Read status of transport nodes in a transport zone
     * Read status of transport nodes in a transport zone
     * @param zoneId ID of transport zone (required)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param source Data source type. (optional)
     * @param status Transport node (optional)
     * @return ApiResponse&lt;TransportNodeStatusListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TransportNodeStatusListResult> listTransportNodeStatusForTransportZoneWithHttpInfo(String zoneId, String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, String source, String status) throws ApiException {
        com.squareup.okhttp.Call call = listTransportNodeStatusForTransportZoneValidateBeforeCall(zoneId, cursor, includedFields, pageSize, sortAscending, sortBy, source, status, null, null);
        Type localVarReturnType = new TypeToken<TransportNodeStatusListResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read status of transport nodes in a transport zone (asynchronously)
     * Read status of transport nodes in a transport zone
     * @param zoneId ID of transport zone (required)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param source Data source type. (optional)
     * @param status Transport node (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listTransportNodeStatusForTransportZoneAsync(String zoneId, String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, String source, String status, final ApiCallback<TransportNodeStatusListResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listTransportNodeStatusForTransportZoneValidateBeforeCall(zoneId, cursor, includedFields, pageSize, sortAscending, sortBy, source, status, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TransportNodeStatusListResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listTransportNodesByStateWithDeploymentInfo
     * @param mmState maintenance mode state (optional)
     * @param status Realized state of transport nodes (optional)
     * @param vtepIp Virtual tunnel endpoint ip address of transport node (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listTransportNodesByStateWithDeploymentInfoCall(String mmState, String status, String vtepIp, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/transport-nodes/state";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (mmState != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("mm_state", mmState));
        if (status != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("status", status));
        if (vtepIp != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("vtep_ip", vtepIp));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listTransportNodesByStateWithDeploymentInfoValidateBeforeCall(String mmState, String status, String vtepIp, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listTransportNodesByStateWithDeploymentInfoCall(mmState, status, vtepIp, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List transport nodes by realized state
     * Returns a list of transport node states that have realized state as provided as query parameter 
     * @param mmState maintenance mode state (optional)
     * @param status Realized state of transport nodes (optional)
     * @param vtepIp Virtual tunnel endpoint ip address of transport node (optional)
     * @return TransportNodeStateListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TransportNodeStateListResult listTransportNodesByStateWithDeploymentInfo(String mmState, String status, String vtepIp) throws ApiException {
        ApiResponse<TransportNodeStateListResult> resp = listTransportNodesByStateWithDeploymentInfoWithHttpInfo(mmState, status, vtepIp);
        return resp.getData();
    }

    /**
     * List transport nodes by realized state
     * Returns a list of transport node states that have realized state as provided as query parameter 
     * @param mmState maintenance mode state (optional)
     * @param status Realized state of transport nodes (optional)
     * @param vtepIp Virtual tunnel endpoint ip address of transport node (optional)
     * @return ApiResponse&lt;TransportNodeStateListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TransportNodeStateListResult> listTransportNodesByStateWithDeploymentInfoWithHttpInfo(String mmState, String status, String vtepIp) throws ApiException {
        com.squareup.okhttp.Call call = listTransportNodesByStateWithDeploymentInfoValidateBeforeCall(mmState, status, vtepIp, null, null);
        Type localVarReturnType = new TypeToken<TransportNodeStateListResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List transport nodes by realized state (asynchronously)
     * Returns a list of transport node states that have realized state as provided as query parameter 
     * @param mmState maintenance mode state (optional)
     * @param status Realized state of transport nodes (optional)
     * @param vtepIp Virtual tunnel endpoint ip address of transport node (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listTransportNodesByStateWithDeploymentInfoAsync(String mmState, String status, String vtepIp, final ApiCallback<TransportNodeStateListResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listTransportNodesByStateWithDeploymentInfoValidateBeforeCall(mmState, status, vtepIp, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TransportNodeStateListResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listTransportNodesWithDeploymentInfo
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param inMaintenanceMode maintenance mode flag (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param nodeId node identifier (optional)
     * @param nodeIp Fabric node IP address (optional)
     * @param nodeTypes a list of fabric node types separated by comma or a single type (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param transportZoneId Transport zone identifier (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listTransportNodesWithDeploymentInfoCall(String cursor, Boolean inMaintenanceMode, String includedFields, String nodeId, String nodeIp, String nodeTypes, Long pageSize, Boolean sortAscending, String sortBy, String transportZoneId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/transport-nodes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (inMaintenanceMode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("in_maintenance_mode", inMaintenanceMode));
        if (includedFields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("included_fields", includedFields));
        if (nodeId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("node_id", nodeId));
        if (nodeIp != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("node_ip", nodeIp));
        if (nodeTypes != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("node_types", nodeTypes));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page_size", pageSize));
        if (sortAscending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_ascending", sortAscending));
        if (sortBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_by", sortBy));
        if (transportZoneId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("transport_zone_id", transportZoneId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listTransportNodesWithDeploymentInfoValidateBeforeCall(String cursor, Boolean inMaintenanceMode, String includedFields, String nodeId, String nodeIp, String nodeTypes, Long pageSize, Boolean sortAscending, String sortBy, String transportZoneId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listTransportNodesWithDeploymentInfoCall(cursor, inMaintenanceMode, includedFields, nodeId, nodeIp, nodeTypes, pageSize, sortAscending, sortBy, transportZoneId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List Transport Nodes
     * Returns information about all transport nodes along with underlying host or edge details. A transport node is a host or edge that contains hostswitches. A hostswitch can have virtual machines connected to them.  Because each transport node has hostswitches, transport nodes can also have virtual tunnel endpoints, which means that they can be part of the overlay. 
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param inMaintenanceMode maintenance mode flag (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param nodeId node identifier (optional)
     * @param nodeIp Fabric node IP address (optional)
     * @param nodeTypes a list of fabric node types separated by comma or a single type (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param transportZoneId Transport zone identifier (optional)
     * @return TransportNodeListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TransportNodeListResult listTransportNodesWithDeploymentInfo(String cursor, Boolean inMaintenanceMode, String includedFields, String nodeId, String nodeIp, String nodeTypes, Long pageSize, Boolean sortAscending, String sortBy, String transportZoneId) throws ApiException {
        ApiResponse<TransportNodeListResult> resp = listTransportNodesWithDeploymentInfoWithHttpInfo(cursor, inMaintenanceMode, includedFields, nodeId, nodeIp, nodeTypes, pageSize, sortAscending, sortBy, transportZoneId);
        return resp.getData();
    }

    /**
     * List Transport Nodes
     * Returns information about all transport nodes along with underlying host or edge details. A transport node is a host or edge that contains hostswitches. A hostswitch can have virtual machines connected to them.  Because each transport node has hostswitches, transport nodes can also have virtual tunnel endpoints, which means that they can be part of the overlay. 
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param inMaintenanceMode maintenance mode flag (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param nodeId node identifier (optional)
     * @param nodeIp Fabric node IP address (optional)
     * @param nodeTypes a list of fabric node types separated by comma or a single type (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param transportZoneId Transport zone identifier (optional)
     * @return ApiResponse&lt;TransportNodeListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TransportNodeListResult> listTransportNodesWithDeploymentInfoWithHttpInfo(String cursor, Boolean inMaintenanceMode, String includedFields, String nodeId, String nodeIp, String nodeTypes, Long pageSize, Boolean sortAscending, String sortBy, String transportZoneId) throws ApiException {
        com.squareup.okhttp.Call call = listTransportNodesWithDeploymentInfoValidateBeforeCall(cursor, inMaintenanceMode, includedFields, nodeId, nodeIp, nodeTypes, pageSize, sortAscending, sortBy, transportZoneId, null, null);
        Type localVarReturnType = new TypeToken<TransportNodeListResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List Transport Nodes (asynchronously)
     * Returns information about all transport nodes along with underlying host or edge details. A transport node is a host or edge that contains hostswitches. A hostswitch can have virtual machines connected to them.  Because each transport node has hostswitches, transport nodes can also have virtual tunnel endpoints, which means that they can be part of the overlay. 
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param inMaintenanceMode maintenance mode flag (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param nodeId node identifier (optional)
     * @param nodeIp Fabric node IP address (optional)
     * @param nodeTypes a list of fabric node types separated by comma or a single type (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param transportZoneId Transport zone identifier (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listTransportNodesWithDeploymentInfoAsync(String cursor, Boolean inMaintenanceMode, String includedFields, String nodeId, String nodeIp, String nodeTypes, Long pageSize, Boolean sortAscending, String sortBy, String transportZoneId, final ApiCallback<TransportNodeListResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listTransportNodesWithDeploymentInfoValidateBeforeCall(cursor, inMaintenanceMode, includedFields, nodeId, nodeIp, nodeTypes, pageSize, sortAscending, sortBy, transportZoneId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TransportNodeListResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for queryTunnels
     * @param nodeId ID of transport node (required)
     * @param bfdDiagnosticCode BFD diagnostic code of Tunnel as defined in RFC 5880 (optional)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param remoteNodeId  (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param source Data source type. (optional)
     * @param status Tunnel status (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call queryTunnelsCall(String nodeId, String bfdDiagnosticCode, String cursor, String includedFields, Long pageSize, String remoteNodeId, Boolean sortAscending, String sortBy, String source, String status, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/transport-nodes/{node-id}/tunnels"
            .replaceAll("\\{" + "node-id" + "\\}", apiClient.escapeString(nodeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (bfdDiagnosticCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("bfd_diagnostic_code", bfdDiagnosticCode));
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (includedFields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("included_fields", includedFields));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page_size", pageSize));
        if (remoteNodeId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("remote_node_id", remoteNodeId));
        if (sortAscending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_ascending", sortAscending));
        if (sortBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_by", sortBy));
        if (source != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("source", source));
        if (status != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("status", status));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call queryTunnelsValidateBeforeCall(String nodeId, String bfdDiagnosticCode, String cursor, String includedFields, Long pageSize, String remoteNodeId, Boolean sortAscending, String sortBy, String source, String status, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'nodeId' is set
        if (nodeId == null) {
            throw new ApiException("Missing the required parameter 'nodeId' when calling queryTunnels(Async)");
        }
        
        com.squareup.okhttp.Call call = queryTunnelsCall(nodeId, bfdDiagnosticCode, cursor, includedFields, pageSize, remoteNodeId, sortAscending, sortBy, source, status, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List of tunnels
     * List of tunnels
     * @param nodeId ID of transport node (required)
     * @param bfdDiagnosticCode BFD diagnostic code of Tunnel as defined in RFC 5880 (optional)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param remoteNodeId  (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param source Data source type. (optional)
     * @param status Tunnel status (optional)
     * @return TunnelList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TunnelList queryTunnels(String nodeId, String bfdDiagnosticCode, String cursor, String includedFields, Long pageSize, String remoteNodeId, Boolean sortAscending, String sortBy, String source, String status) throws ApiException {
        ApiResponse<TunnelList> resp = queryTunnelsWithHttpInfo(nodeId, bfdDiagnosticCode, cursor, includedFields, pageSize, remoteNodeId, sortAscending, sortBy, source, status);
        return resp.getData();
    }

    /**
     * List of tunnels
     * List of tunnels
     * @param nodeId ID of transport node (required)
     * @param bfdDiagnosticCode BFD diagnostic code of Tunnel as defined in RFC 5880 (optional)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param remoteNodeId  (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param source Data source type. (optional)
     * @param status Tunnel status (optional)
     * @return ApiResponse&lt;TunnelList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TunnelList> queryTunnelsWithHttpInfo(String nodeId, String bfdDiagnosticCode, String cursor, String includedFields, Long pageSize, String remoteNodeId, Boolean sortAscending, String sortBy, String source, String status) throws ApiException {
        com.squareup.okhttp.Call call = queryTunnelsValidateBeforeCall(nodeId, bfdDiagnosticCode, cursor, includedFields, pageSize, remoteNodeId, sortAscending, sortBy, source, status, null, null);
        Type localVarReturnType = new TypeToken<TunnelList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List of tunnels (asynchronously)
     * List of tunnels
     * @param nodeId ID of transport node (required)
     * @param bfdDiagnosticCode BFD diagnostic code of Tunnel as defined in RFC 5880 (optional)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param remoteNodeId  (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param source Data source type. (optional)
     * @param status Tunnel status (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call queryTunnelsAsync(String nodeId, String bfdDiagnosticCode, String cursor, String includedFields, Long pageSize, String remoteNodeId, Boolean sortAscending, String sortBy, String source, String status, final ApiCallback<TunnelList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = queryTunnelsValidateBeforeCall(nodeId, bfdDiagnosticCode, cursor, includedFields, pageSize, remoteNodeId, sortAscending, sortBy, source, status, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TunnelList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for readNeighborProperties
     * @param nodeId ID of transport node (required)
     * @param interfaceName Interface name to read (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call readNeighborPropertiesCall(String nodeId, String interfaceName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/lldp/transport-nodes/{node-id}/interfaces/{interface-name}"
            .replaceAll("\\{" + "node-id" + "\\}", apiClient.escapeString(nodeId.toString()))
            .replaceAll("\\{" + "interface-name" + "\\}", apiClient.escapeString(interfaceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call readNeighborPropertiesValidateBeforeCall(String nodeId, String interfaceName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'nodeId' is set
        if (nodeId == null) {
            throw new ApiException("Missing the required parameter 'nodeId' when calling readNeighborProperties(Async)");
        }
        // verify the required parameter 'interfaceName' is set
        if (interfaceName == null) {
            throw new ApiException("Missing the required parameter 'interfaceName' when calling readNeighborProperties(Async)");
        }
        
        com.squareup.okhttp.Call call = readNeighborPropertiesCall(nodeId, interfaceName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read LLDP Neighbor Properties of Transport Node by Interface Name 
     * Read LLDP Neighbor Properties for a specific interface of Transport Node 
     * @param nodeId ID of transport node (required)
     * @param interfaceName Interface name to read (required)
     * @return InterfaceNeighborProperties
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InterfaceNeighborProperties readNeighborProperties(String nodeId, String interfaceName) throws ApiException {
        ApiResponse<InterfaceNeighborProperties> resp = readNeighborPropertiesWithHttpInfo(nodeId, interfaceName);
        return resp.getData();
    }

    /**
     * Read LLDP Neighbor Properties of Transport Node by Interface Name 
     * Read LLDP Neighbor Properties for a specific interface of Transport Node 
     * @param nodeId ID of transport node (required)
     * @param interfaceName Interface name to read (required)
     * @return ApiResponse&lt;InterfaceNeighborProperties&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InterfaceNeighborProperties> readNeighborPropertiesWithHttpInfo(String nodeId, String interfaceName) throws ApiException {
        com.squareup.okhttp.Call call = readNeighborPropertiesValidateBeforeCall(nodeId, interfaceName, null, null);
        Type localVarReturnType = new TypeToken<InterfaceNeighborProperties>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read LLDP Neighbor Properties of Transport Node by Interface Name  (asynchronously)
     * Read LLDP Neighbor Properties for a specific interface of Transport Node 
     * @param nodeId ID of transport node (required)
     * @param interfaceName Interface name to read (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call readNeighborPropertiesAsync(String nodeId, String interfaceName, final ApiCallback<InterfaceNeighborProperties> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = readNeighborPropertiesValidateBeforeCall(nodeId, interfaceName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InterfaceNeighborProperties>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for readTransportNodeInterface
     * @param transportNodeId  (required)
     * @param interfaceId  (required)
     * @param source Data source type. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call readTransportNodeInterfaceCall(String transportNodeId, String interfaceId, String source, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/transport-nodes/{transport-node-id}/network/interfaces/{interface-id}"
            .replaceAll("\\{" + "transport-node-id" + "\\}", apiClient.escapeString(transportNodeId.toString()))
            .replaceAll("\\{" + "interface-id" + "\\}", apiClient.escapeString(interfaceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (source != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("source", source));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call readTransportNodeInterfaceValidateBeforeCall(String transportNodeId, String interfaceId, String source, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'transportNodeId' is set
        if (transportNodeId == null) {
            throw new ApiException("Missing the required parameter 'transportNodeId' when calling readTransportNodeInterface(Async)");
        }
        // verify the required parameter 'interfaceId' is set
        if (interfaceId == null) {
            throw new ApiException("Missing the required parameter 'interfaceId' when calling readTransportNodeInterface(Async)");
        }
        
        com.squareup.okhttp.Call call = readTransportNodeInterfaceCall(transportNodeId, interfaceId, source, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read the transport node&#x27;s network interface
     * Returns detailed information about the specified interface. Interface information includes MTU, broadcast and host IP addresses, link and admin status, MAC address, network  mask, and the IP configuration method (static or DHCP). 
     * @param transportNodeId  (required)
     * @param interfaceId  (required)
     * @param source Data source type. (optional)
     * @return NodeInterfaceProperties
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeInterfaceProperties readTransportNodeInterface(String transportNodeId, String interfaceId, String source) throws ApiException {
        ApiResponse<NodeInterfaceProperties> resp = readTransportNodeInterfaceWithHttpInfo(transportNodeId, interfaceId, source);
        return resp.getData();
    }

    /**
     * Read the transport node&#x27;s network interface
     * Returns detailed information about the specified interface. Interface information includes MTU, broadcast and host IP addresses, link and admin status, MAC address, network  mask, and the IP configuration method (static or DHCP). 
     * @param transportNodeId  (required)
     * @param interfaceId  (required)
     * @param source Data source type. (optional)
     * @return ApiResponse&lt;NodeInterfaceProperties&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeInterfaceProperties> readTransportNodeInterfaceWithHttpInfo(String transportNodeId, String interfaceId, String source) throws ApiException {
        com.squareup.okhttp.Call call = readTransportNodeInterfaceValidateBeforeCall(transportNodeId, interfaceId, source, null, null);
        Type localVarReturnType = new TypeToken<NodeInterfaceProperties>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read the transport node&#x27;s network interface (asynchronously)
     * Returns detailed information about the specified interface. Interface information includes MTU, broadcast and host IP addresses, link and admin status, MAC address, network  mask, and the IP configuration method (static or DHCP). 
     * @param transportNodeId  (required)
     * @param interfaceId  (required)
     * @param source Data source type. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call readTransportNodeInterfaceAsync(String transportNodeId, String interfaceId, String source, final ApiCallback<NodeInterfaceProperties> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = readTransportNodeInterfaceValidateBeforeCall(transportNodeId, interfaceId, source, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeInterfaceProperties>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for readTransportNodeInterfaceStatistics
     * @param transportNodeId  (required)
     * @param interfaceId  (required)
     * @param source Data source type. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call readTransportNodeInterfaceStatisticsCall(String transportNodeId, String interfaceId, String source, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/transport-nodes/{transport-node-id}/network/interfaces/{interface-id}/stats"
            .replaceAll("\\{" + "transport-node-id" + "\\}", apiClient.escapeString(transportNodeId.toString()))
            .replaceAll("\\{" + "interface-id" + "\\}", apiClient.escapeString(interfaceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (source != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("source", source));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call readTransportNodeInterfaceStatisticsValidateBeforeCall(String transportNodeId, String interfaceId, String source, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'transportNodeId' is set
        if (transportNodeId == null) {
            throw new ApiException("Missing the required parameter 'transportNodeId' when calling readTransportNodeInterfaceStatistics(Async)");
        }
        // verify the required parameter 'interfaceId' is set
        if (interfaceId == null) {
            throw new ApiException("Missing the required parameter 'interfaceId' when calling readTransportNodeInterfaceStatistics(Async)");
        }
        
        com.squareup.okhttp.Call call = readTransportNodeInterfaceStatisticsCall(transportNodeId, interfaceId, source, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read the NSX Manager&#x27;s Network Interface Statistics
     * On the specified interface, returns the number of received (rx), transmitted (tx), and dropped packets; the number of bytes and errors received and transmitted on the interface; and the number of detected collisions. 
     * @param transportNodeId  (required)
     * @param interfaceId  (required)
     * @param source Data source type. (optional)
     * @return NodeInterfaceStatisticsProperties
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeInterfaceStatisticsProperties readTransportNodeInterfaceStatistics(String transportNodeId, String interfaceId, String source) throws ApiException {
        ApiResponse<NodeInterfaceStatisticsProperties> resp = readTransportNodeInterfaceStatisticsWithHttpInfo(transportNodeId, interfaceId, source);
        return resp.getData();
    }

    /**
     * Read the NSX Manager&#x27;s Network Interface Statistics
     * On the specified interface, returns the number of received (rx), transmitted (tx), and dropped packets; the number of bytes and errors received and transmitted on the interface; and the number of detected collisions. 
     * @param transportNodeId  (required)
     * @param interfaceId  (required)
     * @param source Data source type. (optional)
     * @return ApiResponse&lt;NodeInterfaceStatisticsProperties&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeInterfaceStatisticsProperties> readTransportNodeInterfaceStatisticsWithHttpInfo(String transportNodeId, String interfaceId, String source) throws ApiException {
        com.squareup.okhttp.Call call = readTransportNodeInterfaceStatisticsValidateBeforeCall(transportNodeId, interfaceId, source, null, null);
        Type localVarReturnType = new TypeToken<NodeInterfaceStatisticsProperties>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read the NSX Manager&#x27;s Network Interface Statistics (asynchronously)
     * On the specified interface, returns the number of received (rx), transmitted (tx), and dropped packets; the number of bytes and errors received and transmitted on the interface; and the number of detected collisions. 
     * @param transportNodeId  (required)
     * @param interfaceId  (required)
     * @param source Data source type. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call readTransportNodeInterfaceStatisticsAsync(String transportNodeId, String interfaceId, String source, final ApiCallback<NodeInterfaceStatisticsProperties> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = readTransportNodeInterfaceStatisticsValidateBeforeCall(transportNodeId, interfaceId, source, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeInterfaceStatisticsProperties>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for refreshTransportNode
     * @param transportNodeId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call refreshTransportNodeCall(String transportNodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/transport-nodes/{transport-node-id}?action=refresh_node_configuration&resource_type=EdgeNode"
            .replaceAll("\\{" + "transport-node-id" + "\\}", apiClient.escapeString(transportNodeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call refreshTransportNodeValidateBeforeCall(String transportNodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'transportNodeId' is set
        if (transportNodeId == null) {
            throw new ApiException("Missing the required parameter 'transportNodeId' when calling refreshTransportNode(Async)");
        }
        
        com.squareup.okhttp.Call call = refreshTransportNodeCall(transportNodeId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Refresh the node configuration for the Edge node.
     * The API is applicable for Edge transport nodes. If you update the VM configuration and find a discrepancy in VM configuration at NSX Manager, then use this API to refresh configuration at NSX Manager. It refreshes the VM configuration from sources external to MP. Sources include vSphere Server and the edge node. After this action, the API GET api/v1/transport-nodes will show refreshed data. 
     * @param transportNodeId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void refreshTransportNode(String transportNodeId) throws ApiException {
        refreshTransportNodeWithHttpInfo(transportNodeId);
    }

    /**
     * Refresh the node configuration for the Edge node.
     * The API is applicable for Edge transport nodes. If you update the VM configuration and find a discrepancy in VM configuration at NSX Manager, then use this API to refresh configuration at NSX Manager. It refreshes the VM configuration from sources external to MP. Sources include vSphere Server and the edge node. After this action, the API GET api/v1/transport-nodes will show refreshed data. 
     * @param transportNodeId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> refreshTransportNodeWithHttpInfo(String transportNodeId) throws ApiException {
        com.squareup.okhttp.Call call = refreshTransportNodeValidateBeforeCall(transportNodeId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Refresh the node configuration for the Edge node. (asynchronously)
     * The API is applicable for Edge transport nodes. If you update the VM configuration and find a discrepancy in VM configuration at NSX Manager, then use this API to refresh configuration at NSX Manager. It refreshes the VM configuration from sources external to MP. Sources include vSphere Server and the edge node. After this action, the API GET api/v1/transport-nodes will show refreshed data. 
     * @param transportNodeId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call refreshTransportNodeAsync(String transportNodeId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = refreshTransportNodeValidateBeforeCall(transportNodeId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for restartTransportNodeInventorySyncRestartInventorySync
     * @param transportNodeId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call restartTransportNodeInventorySyncRestartInventorySyncCall(String transportNodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/transport-nodes/{transport-node-id}?action=restart_inventory_sync"
            .replaceAll("\\{" + "transport-node-id" + "\\}", apiClient.escapeString(transportNodeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call restartTransportNodeInventorySyncRestartInventorySyncValidateBeforeCall(String transportNodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'transportNodeId' is set
        if (transportNodeId == null) {
            throw new ApiException("Missing the required parameter 'transportNodeId' when calling restartTransportNodeInventorySyncRestartInventorySync(Async)");
        }
        
        com.squareup.okhttp.Call call = restartTransportNodeInventorySyncRestartInventorySyncCall(transportNodeId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Restart the inventory sync for the node if it is paused currently.
     * Restart the inventory sync for the node if it is currently internally paused. After this action the next inventory sync coming from the node is processed. 
     * @param transportNodeId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void restartTransportNodeInventorySyncRestartInventorySync(String transportNodeId) throws ApiException {
        restartTransportNodeInventorySyncRestartInventorySyncWithHttpInfo(transportNodeId);
    }

    /**
     * Restart the inventory sync for the node if it is paused currently.
     * Restart the inventory sync for the node if it is currently internally paused. After this action the next inventory sync coming from the node is processed. 
     * @param transportNodeId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> restartTransportNodeInventorySyncRestartInventorySyncWithHttpInfo(String transportNodeId) throws ApiException {
        com.squareup.okhttp.Call call = restartTransportNodeInventorySyncRestartInventorySyncValidateBeforeCall(transportNodeId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Restart the inventory sync for the node if it is paused currently. (asynchronously)
     * Restart the inventory sync for the node if it is currently internally paused. After this action the next inventory sync coming from the node is processed. 
     * @param transportNodeId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call restartTransportNodeInventorySyncRestartInventorySyncAsync(String transportNodeId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = restartTransportNodeInventorySyncRestartInventorySyncValidateBeforeCall(transportNodeId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for restoreParentClusterConfigurationRestoreClusterConfig
     * @param transportNodeId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call restoreParentClusterConfigurationRestoreClusterConfigCall(String transportNodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/transport-nodes/{transport-node-id}?action=restore_cluster_config"
            .replaceAll("\\{" + "transport-node-id" + "\\}", apiClient.escapeString(transportNodeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call restoreParentClusterConfigurationRestoreClusterConfigValidateBeforeCall(String transportNodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'transportNodeId' is set
        if (transportNodeId == null) {
            throw new ApiException("Missing the required parameter 'transportNodeId' when calling restoreParentClusterConfigurationRestoreClusterConfig(Async)");
        }
        
        com.squareup.okhttp.Call call = restoreParentClusterConfigurationRestoreClusterConfigCall(transportNodeId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Apply cluster level Transport Node Profile on overridden host
     * A host can be overridden to have different configuration than Transport Node Profile(TNP) on cluster. This action will restore such overridden host back to cluster level TNP.  This API can be used in other case. When TNP is applied to a cluster, if any validation fails (e.g. VMs running on host) then existing transport node (TN) is not updated. In that case after the issue is resolved manually (e.g. VMs powered off), you can call this API to update TN as per cluster level TNP. 
     * @param transportNodeId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void restoreParentClusterConfigurationRestoreClusterConfig(String transportNodeId) throws ApiException {
        restoreParentClusterConfigurationRestoreClusterConfigWithHttpInfo(transportNodeId);
    }

    /**
     * Apply cluster level Transport Node Profile on overridden host
     * A host can be overridden to have different configuration than Transport Node Profile(TNP) on cluster. This action will restore such overridden host back to cluster level TNP.  This API can be used in other case. When TNP is applied to a cluster, if any validation fails (e.g. VMs running on host) then existing transport node (TN) is not updated. In that case after the issue is resolved manually (e.g. VMs powered off), you can call this API to update TN as per cluster level TNP. 
     * @param transportNodeId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> restoreParentClusterConfigurationRestoreClusterConfigWithHttpInfo(String transportNodeId) throws ApiException {
        com.squareup.okhttp.Call call = restoreParentClusterConfigurationRestoreClusterConfigValidateBeforeCall(transportNodeId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Apply cluster level Transport Node Profile on overridden host (asynchronously)
     * A host can be overridden to have different configuration than Transport Node Profile(TNP) on cluster. This action will restore such overridden host back to cluster level TNP.  This API can be used in other case. When TNP is applied to a cluster, if any validation fails (e.g. VMs running on host) then existing transport node (TN) is not updated. In that case after the issue is resolved manually (e.g. VMs powered off), you can call this API to update TN as per cluster level TNP. 
     * @param transportNodeId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call restoreParentClusterConfigurationRestoreClusterConfigAsync(String transportNodeId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = restoreParentClusterConfigurationRestoreClusterConfigValidateBeforeCall(transportNodeId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for resyncTransportNodeResyncHostConfig
     * @param transportnodeId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call resyncTransportNodeResyncHostConfigCall(String transportnodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/transport-nodes/{transportnode-id}?action=resync_host_config"
            .replaceAll("\\{" + "transportnode-id" + "\\}", apiClient.escapeString(transportnodeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call resyncTransportNodeResyncHostConfigValidateBeforeCall(String transportnodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'transportnodeId' is set
        if (transportnodeId == null) {
            throw new ApiException("Missing the required parameter 'transportnodeId' when calling resyncTransportNodeResyncHostConfig(Async)");
        }
        
        com.squareup.okhttp.Call call = resyncTransportNodeResyncHostConfigCall(transportnodeId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Resync a Transport Node
     * Resync the TransportNode configuration on a host. It is similar to updating the TransportNode with existing configuration, but force synce these configurations to the host (no backend optimizations). 
     * @param transportnodeId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void resyncTransportNodeResyncHostConfig(String transportnodeId) throws ApiException {
        resyncTransportNodeResyncHostConfigWithHttpInfo(transportnodeId);
    }

    /**
     * Resync a Transport Node
     * Resync the TransportNode configuration on a host. It is similar to updating the TransportNode with existing configuration, but force synce these configurations to the host (no backend optimizations). 
     * @param transportnodeId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> resyncTransportNodeResyncHostConfigWithHttpInfo(String transportnodeId) throws ApiException {
        com.squareup.okhttp.Call call = resyncTransportNodeResyncHostConfigValidateBeforeCall(transportnodeId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Resync a Transport Node (asynchronously)
     * Resync the TransportNode configuration on a host. It is similar to updating the TransportNode with existing configuration, but force synce these configurations to the host (no backend optimizations). 
     * @param transportnodeId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call resyncTransportNodeResyncHostConfigAsync(String transportnodeId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = resyncTransportNodeResyncHostConfigValidateBeforeCall(transportnodeId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateComputeCollectionTransportNodeTemplateAndTNCollection
     * @param body  (required)
     * @param templateId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateComputeCollectionTransportNodeTemplateAndTNCollectionCall(ComputeCollectionTransportNodeTemplate body, String templateId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/compute-collection-transport-node-templates/{template-id}"
            .replaceAll("\\{" + "template-id" + "\\}", apiClient.escapeString(templateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateComputeCollectionTransportNodeTemplateAndTNCollectionValidateBeforeCall(ComputeCollectionTransportNodeTemplate body, String templateId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateComputeCollectionTransportNodeTemplateAndTNCollection(Async)");
        }
        // verify the required parameter 'templateId' is set
        if (templateId == null) {
            throw new ApiException("Missing the required parameter 'templateId' when calling updateComputeCollectionTransportNodeTemplateAndTNCollection(Async)");
        }
        
        com.squareup.okhttp.Call call = updateComputeCollectionTransportNodeTemplateAndTNCollectionCall(body, templateId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update compute collection transportnode template
     * Update configuration of compute collection transportnode template. Compute_collection_id isn&#x27;t allowed to be changed since it represents the association between ComputeCollection and this template. This is determined when ComputeCollectionTransportNodeTemplate got created. Note- transport node templates APIs are deprecated and user is recommended to use transport node profiles APIs instead. 
     * @param body  (required)
     * @param templateId  (required)
     * @return ComputeCollectionTransportNodeTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ComputeCollectionTransportNodeTemplate updateComputeCollectionTransportNodeTemplateAndTNCollection(ComputeCollectionTransportNodeTemplate body, String templateId) throws ApiException {
        ApiResponse<ComputeCollectionTransportNodeTemplate> resp = updateComputeCollectionTransportNodeTemplateAndTNCollectionWithHttpInfo(body, templateId);
        return resp.getData();
    }

    /**
     * Update compute collection transportnode template
     * Update configuration of compute collection transportnode template. Compute_collection_id isn&#x27;t allowed to be changed since it represents the association between ComputeCollection and this template. This is determined when ComputeCollectionTransportNodeTemplate got created. Note- transport node templates APIs are deprecated and user is recommended to use transport node profiles APIs instead. 
     * @param body  (required)
     * @param templateId  (required)
     * @return ApiResponse&lt;ComputeCollectionTransportNodeTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ComputeCollectionTransportNodeTemplate> updateComputeCollectionTransportNodeTemplateAndTNCollectionWithHttpInfo(ComputeCollectionTransportNodeTemplate body, String templateId) throws ApiException {
        com.squareup.okhttp.Call call = updateComputeCollectionTransportNodeTemplateAndTNCollectionValidateBeforeCall(body, templateId, null, null);
        Type localVarReturnType = new TypeToken<ComputeCollectionTransportNodeTemplate>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update compute collection transportnode template (asynchronously)
     * Update configuration of compute collection transportnode template. Compute_collection_id isn&#x27;t allowed to be changed since it represents the association between ComputeCollection and this template. This is determined when ComputeCollectionTransportNodeTemplate got created. Note- transport node templates APIs are deprecated and user is recommended to use transport node profiles APIs instead. 
     * @param body  (required)
     * @param templateId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateComputeCollectionTransportNodeTemplateAndTNCollectionAsync(ComputeCollectionTransportNodeTemplate body, String templateId, final ApiCallback<ComputeCollectionTransportNodeTemplate> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateComputeCollectionTransportNodeTemplateAndTNCollectionValidateBeforeCall(body, templateId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ComputeCollectionTransportNodeTemplate>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateNetworkMigrationSpec
     * @param body  (required)
     * @param templateId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateNetworkMigrationSpecCall(NetworkMigrationSpec body, String templateId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/network-migration-specs/{template-id}"
            .replaceAll("\\{" + "template-id" + "\\}", apiClient.escapeString(templateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateNetworkMigrationSpecValidateBeforeCall(NetworkMigrationSpec body, String templateId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateNetworkMigrationSpec(Async)");
        }
        // verify the required parameter 'templateId' is set
        if (templateId == null) {
            throw new ApiException("Missing the required parameter 'templateId' when calling updateNetworkMigrationSpec(Async)");
        }
        
        com.squareup.okhttp.Call call = updateNetworkMigrationSpecCall(body, templateId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update a template of network migration specification.
     * Network migration specification once created and can be used as a template to indicate associated component which networks should be migrated and where. Currently migration template can be associated with compute collections which are managed by vCenter host profiles, to trigger automatic migration of networks for Stateless ESX hosts. Currently we only support creation of HostProfileNetworkMigrationSpec type of specification. For a HostProfileNetworkMigrationSpec which is already associated with a compute collection, updating it would mean next time the system needs to trigger migration for hosts managed by compute collection, it will use the updated migration specification. Note- transport node templates APIs are deprecated and user is recommended to use transport node profiles APIs instead.
     * @param body  (required)
     * @param templateId  (required)
     * @return NetworkMigrationSpec
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NetworkMigrationSpec updateNetworkMigrationSpec(NetworkMigrationSpec body, String templateId) throws ApiException {
        ApiResponse<NetworkMigrationSpec> resp = updateNetworkMigrationSpecWithHttpInfo(body, templateId);
        return resp.getData();
    }

    /**
     * Update a template of network migration specification.
     * Network migration specification once created and can be used as a template to indicate associated component which networks should be migrated and where. Currently migration template can be associated with compute collections which are managed by vCenter host profiles, to trigger automatic migration of networks for Stateless ESX hosts. Currently we only support creation of HostProfileNetworkMigrationSpec type of specification. For a HostProfileNetworkMigrationSpec which is already associated with a compute collection, updating it would mean next time the system needs to trigger migration for hosts managed by compute collection, it will use the updated migration specification. Note- transport node templates APIs are deprecated and user is recommended to use transport node profiles APIs instead.
     * @param body  (required)
     * @param templateId  (required)
     * @return ApiResponse&lt;NetworkMigrationSpec&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NetworkMigrationSpec> updateNetworkMigrationSpecWithHttpInfo(NetworkMigrationSpec body, String templateId) throws ApiException {
        com.squareup.okhttp.Call call = updateNetworkMigrationSpecValidateBeforeCall(body, templateId, null, null);
        Type localVarReturnType = new TypeToken<NetworkMigrationSpec>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a template of network migration specification. (asynchronously)
     * Network migration specification once created and can be used as a template to indicate associated component which networks should be migrated and where. Currently migration template can be associated with compute collections which are managed by vCenter host profiles, to trigger automatic migration of networks for Stateless ESX hosts. Currently we only support creation of HostProfileNetworkMigrationSpec type of specification. For a HostProfileNetworkMigrationSpec which is already associated with a compute collection, updating it would mean next time the system needs to trigger migration for hosts managed by compute collection, it will use the updated migration specification. Note- transport node templates APIs are deprecated and user is recommended to use transport node profiles APIs instead.
     * @param body  (required)
     * @param templateId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateNetworkMigrationSpecAsync(NetworkMigrationSpec body, String templateId, final ApiCallback<NetworkMigrationSpec> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateNetworkMigrationSpecValidateBeforeCall(body, templateId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NetworkMigrationSpec>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateTransportNodeMaintenanceMode
     * @param transportnodeId  (required)
     * @param action  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateTransportNodeMaintenanceModeCall(String transportnodeId, String action, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/transport-nodes/{transportnode-id}"
            .replaceAll("\\{" + "transportnode-id" + "\\}", apiClient.escapeString(transportnodeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (action != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("action", action));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateTransportNodeMaintenanceModeValidateBeforeCall(String transportnodeId, String action, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'transportnodeId' is set
        if (transportnodeId == null) {
            throw new ApiException("Missing the required parameter 'transportnodeId' when calling updateTransportNodeMaintenanceMode(Async)");
        }
        
        com.squareup.okhttp.Call call = updateTransportNodeMaintenanceModeCall(transportnodeId, action, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update transport node maintenance mode
     * Put transport node into maintenance mode or exit from maintenance mode.
     * @param transportnodeId  (required)
     * @param action  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateTransportNodeMaintenanceMode(String transportnodeId, String action) throws ApiException {
        updateTransportNodeMaintenanceModeWithHttpInfo(transportnodeId, action);
    }

    /**
     * Update transport node maintenance mode
     * Put transport node into maintenance mode or exit from maintenance mode.
     * @param transportnodeId  (required)
     * @param action  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateTransportNodeMaintenanceModeWithHttpInfo(String transportnodeId, String action) throws ApiException {
        com.squareup.okhttp.Call call = updateTransportNodeMaintenanceModeValidateBeforeCall(transportnodeId, action, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update transport node maintenance mode (asynchronously)
     * Put transport node into maintenance mode or exit from maintenance mode.
     * @param transportnodeId  (required)
     * @param action  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateTransportNodeMaintenanceModeAsync(String transportnodeId, String action, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateTransportNodeMaintenanceModeValidateBeforeCall(transportnodeId, action, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateTransportNodeWithDeploymentInfo
     * @param body  (required)
     * @param transportNodeId  (required)
     * @param esxMgmtIfMigrationDest The network ids to which the ESX vmk interfaces will be migrated (optional)
     * @param ifId The ESX vmk interfaces to migrate (optional)
     * @param pingIp IP Addresses to ping right after ESX vmk interfaces were migrated. (optional)
     * @param vnic The ESX vmk interfaces and/or VM NIC to migrate (optional)
     * @param vnicMigrationDest The migration destinations of ESX vmk interfaces and/or VM NIC (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateTransportNodeWithDeploymentInfoCall(TransportNode body, String transportNodeId, String esxMgmtIfMigrationDest, String ifId, String pingIp, String vnic, String vnicMigrationDest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/transport-nodes/{transport-node-id}"
            .replaceAll("\\{" + "transport-node-id" + "\\}", apiClient.escapeString(transportNodeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (esxMgmtIfMigrationDest != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("esx_mgmt_if_migration_dest", esxMgmtIfMigrationDest));
        if (ifId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("if_id", ifId));
        if (pingIp != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ping_ip", pingIp));
        if (vnic != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("vnic", vnic));
        if (vnicMigrationDest != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("vnic_migration_dest", vnicMigrationDest));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateTransportNodeWithDeploymentInfoValidateBeforeCall(TransportNode body, String transportNodeId, String esxMgmtIfMigrationDest, String ifId, String pingIp, String vnic, String vnicMigrationDest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateTransportNodeWithDeploymentInfo(Async)");
        }
        // verify the required parameter 'transportNodeId' is set
        if (transportNodeId == null) {
            throw new ApiException("Missing the required parameter 'transportNodeId' when calling updateTransportNodeWithDeploymentInfo(Async)");
        }
        
        com.squareup.okhttp.Call call = updateTransportNodeWithDeploymentInfoCall(body, transportNodeId, esxMgmtIfMigrationDest, ifId, pingIp, vnic, vnicMigrationDest, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update a Transport Node
     * Modifies the transport node information. The host_switch_name field must match the host_switch_name value specified in the transport zone (API: transport-zones). You must create the associated uplink profile (API: host-switch-profiles) before you can specify an uplink_name here. If the host is an ESX and has only one physical NIC being used by a vSphere standard switch, TransportNodeUpdateParameters should be used to migrate the management interface and the physical NIC into a logical switch that is in a transport zone this transport node will join or has already joined. If the migration is already done, TransportNodeUpdateParameters can also be used to migrate the management interface and the physical NIC back to a vSphere standard switch. In other cases, the TransportNodeUpdateParameters should NOT be used. When updating transport node you should follow pattern where you should fetch the existing transport node and then only modify the required properties keeping other properties as is. For API backward compatibility, property host_switches will be still returned in response and will contain the configuration matching the one in host_switch_spec. In update call you should only modify configuration in either host_switch_spec or host_switches, but not both. Property host_switch_spec should be preferred over deprecated host_switches property when creating or updating transport nodes.  It also modifies attributes of node (host or edge). 
     * @param body  (required)
     * @param transportNodeId  (required)
     * @param esxMgmtIfMigrationDest The network ids to which the ESX vmk interfaces will be migrated (optional)
     * @param ifId The ESX vmk interfaces to migrate (optional)
     * @param pingIp IP Addresses to ping right after ESX vmk interfaces were migrated. (optional)
     * @param vnic The ESX vmk interfaces and/or VM NIC to migrate (optional)
     * @param vnicMigrationDest The migration destinations of ESX vmk interfaces and/or VM NIC (optional)
     * @return TransportNode
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TransportNode updateTransportNodeWithDeploymentInfo(TransportNode body, String transportNodeId, String esxMgmtIfMigrationDest, String ifId, String pingIp, String vnic, String vnicMigrationDest) throws ApiException {
        ApiResponse<TransportNode> resp = updateTransportNodeWithDeploymentInfoWithHttpInfo(body, transportNodeId, esxMgmtIfMigrationDest, ifId, pingIp, vnic, vnicMigrationDest);
        return resp.getData();
    }

    /**
     * Update a Transport Node
     * Modifies the transport node information. The host_switch_name field must match the host_switch_name value specified in the transport zone (API: transport-zones). You must create the associated uplink profile (API: host-switch-profiles) before you can specify an uplink_name here. If the host is an ESX and has only one physical NIC being used by a vSphere standard switch, TransportNodeUpdateParameters should be used to migrate the management interface and the physical NIC into a logical switch that is in a transport zone this transport node will join or has already joined. If the migration is already done, TransportNodeUpdateParameters can also be used to migrate the management interface and the physical NIC back to a vSphere standard switch. In other cases, the TransportNodeUpdateParameters should NOT be used. When updating transport node you should follow pattern where you should fetch the existing transport node and then only modify the required properties keeping other properties as is. For API backward compatibility, property host_switches will be still returned in response and will contain the configuration matching the one in host_switch_spec. In update call you should only modify configuration in either host_switch_spec or host_switches, but not both. Property host_switch_spec should be preferred over deprecated host_switches property when creating or updating transport nodes.  It also modifies attributes of node (host or edge). 
     * @param body  (required)
     * @param transportNodeId  (required)
     * @param esxMgmtIfMigrationDest The network ids to which the ESX vmk interfaces will be migrated (optional)
     * @param ifId The ESX vmk interfaces to migrate (optional)
     * @param pingIp IP Addresses to ping right after ESX vmk interfaces were migrated. (optional)
     * @param vnic The ESX vmk interfaces and/or VM NIC to migrate (optional)
     * @param vnicMigrationDest The migration destinations of ESX vmk interfaces and/or VM NIC (optional)
     * @return ApiResponse&lt;TransportNode&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TransportNode> updateTransportNodeWithDeploymentInfoWithHttpInfo(TransportNode body, String transportNodeId, String esxMgmtIfMigrationDest, String ifId, String pingIp, String vnic, String vnicMigrationDest) throws ApiException {
        com.squareup.okhttp.Call call = updateTransportNodeWithDeploymentInfoValidateBeforeCall(body, transportNodeId, esxMgmtIfMigrationDest, ifId, pingIp, vnic, vnicMigrationDest, null, null);
        Type localVarReturnType = new TypeToken<TransportNode>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a Transport Node (asynchronously)
     * Modifies the transport node information. The host_switch_name field must match the host_switch_name value specified in the transport zone (API: transport-zones). You must create the associated uplink profile (API: host-switch-profiles) before you can specify an uplink_name here. If the host is an ESX and has only one physical NIC being used by a vSphere standard switch, TransportNodeUpdateParameters should be used to migrate the management interface and the physical NIC into a logical switch that is in a transport zone this transport node will join or has already joined. If the migration is already done, TransportNodeUpdateParameters can also be used to migrate the management interface and the physical NIC back to a vSphere standard switch. In other cases, the TransportNodeUpdateParameters should NOT be used. When updating transport node you should follow pattern where you should fetch the existing transport node and then only modify the required properties keeping other properties as is. For API backward compatibility, property host_switches will be still returned in response and will contain the configuration matching the one in host_switch_spec. In update call you should only modify configuration in either host_switch_spec or host_switches, but not both. Property host_switch_spec should be preferred over deprecated host_switches property when creating or updating transport nodes.  It also modifies attributes of node (host or edge). 
     * @param body  (required)
     * @param transportNodeId  (required)
     * @param esxMgmtIfMigrationDest The network ids to which the ESX vmk interfaces will be migrated (optional)
     * @param ifId The ESX vmk interfaces to migrate (optional)
     * @param pingIp IP Addresses to ping right after ESX vmk interfaces were migrated. (optional)
     * @param vnic The ESX vmk interfaces and/or VM NIC to migrate (optional)
     * @param vnicMigrationDest The migration destinations of ESX vmk interfaces and/or VM NIC (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateTransportNodeWithDeploymentInfoAsync(TransportNode body, String transportNodeId, String esxMgmtIfMigrationDest, String ifId, String pingIp, String vnic, String vnicMigrationDest, final ApiCallback<TransportNode> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateTransportNodeWithDeploymentInfoValidateBeforeCall(body, transportNodeId, esxMgmtIfMigrationDest, ifId, pingIp, vnic, vnicMigrationDest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TransportNode>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
