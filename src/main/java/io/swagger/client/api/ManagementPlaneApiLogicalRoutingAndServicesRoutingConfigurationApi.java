/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.AdvertiseRuleList;
import io.swagger.client.model.AdvertisementConfig;
import io.swagger.client.model.ApiError;
import io.swagger.client.model.BGPCommunityList;
import io.swagger.client.model.BGPCommunityListListResult;
import io.swagger.client.model.BgpConfig;
import io.swagger.client.model.BgpNeighbor;
import io.swagger.client.model.BgpNeighborListResult;
import io.swagger.client.model.DADProfile;
import io.swagger.client.model.DADProfileListResult;
import io.swagger.client.model.IPPrefixList;
import io.swagger.client.model.IPPrefixListListResult;
import io.swagger.client.model.NDRAProfile;
import io.swagger.client.model.NDRAProfileListResult;
import io.swagger.client.model.RedistributionConfig;
import io.swagger.client.model.RedistributionRuleList;
import io.swagger.client.model.RouteMap;
import io.swagger.client.model.RouteMapListResult;
import io.swagger.client.model.RoutingConfig;
import io.swagger.client.model.StaticRoute;
import io.swagger.client.model.StaticRouteListResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi {
    private ApiClient apiClient;

    public ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addBgpNeighbor
     * @param body  (required)
     * @param logicalRouterId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addBgpNeighborCall(BgpNeighbor body, String logicalRouterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/logical-routers/{logical-router-id}/routing/bgp/neighbors"
            .replaceAll("\\{" + "logical-router-id" + "\\}", apiClient.escapeString(logicalRouterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addBgpNeighborValidateBeforeCall(BgpNeighbor body, String logicalRouterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addBgpNeighbor(Async)");
        }
        // verify the required parameter 'logicalRouterId' is set
        if (logicalRouterId == null) {
            throw new ApiException("Missing the required parameter 'logicalRouterId' when calling addBgpNeighbor(Async)");
        }
        
        com.squareup.okhttp.Call call = addBgpNeighborCall(body, logicalRouterId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add a new BGP Neighbor on a Logical Router
     * Add a new BGP Neighbor on a Logical Router 
     * @param body  (required)
     * @param logicalRouterId  (required)
     * @return BgpNeighbor
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BgpNeighbor addBgpNeighbor(BgpNeighbor body, String logicalRouterId) throws ApiException {
        ApiResponse<BgpNeighbor> resp = addBgpNeighborWithHttpInfo(body, logicalRouterId);
        return resp.getData();
    }

    /**
     * Add a new BGP Neighbor on a Logical Router
     * Add a new BGP Neighbor on a Logical Router 
     * @param body  (required)
     * @param logicalRouterId  (required)
     * @return ApiResponse&lt;BgpNeighbor&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BgpNeighbor> addBgpNeighborWithHttpInfo(BgpNeighbor body, String logicalRouterId) throws ApiException {
        com.squareup.okhttp.Call call = addBgpNeighborValidateBeforeCall(body, logicalRouterId, null, null);
        Type localVarReturnType = new TypeToken<BgpNeighbor>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add a new BGP Neighbor on a Logical Router (asynchronously)
     * Add a new BGP Neighbor on a Logical Router 
     * @param body  (required)
     * @param logicalRouterId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addBgpNeighborAsync(BgpNeighbor body, String logicalRouterId, final ApiCallback<BgpNeighbor> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addBgpNeighborValidateBeforeCall(body, logicalRouterId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BgpNeighbor>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addIPPrefixList
     * @param body  (required)
     * @param logicalRouterId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addIPPrefixListCall(IPPrefixList body, String logicalRouterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/logical-routers/{logical-router-id}/routing/ip-prefix-lists"
            .replaceAll("\\{" + "logical-router-id" + "\\}", apiClient.escapeString(logicalRouterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addIPPrefixListValidateBeforeCall(IPPrefixList body, String logicalRouterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addIPPrefixList(Async)");
        }
        // verify the required parameter 'logicalRouterId' is set
        if (logicalRouterId == null) {
            throw new ApiException("Missing the required parameter 'logicalRouterId' when calling addIPPrefixList(Async)");
        }
        
        com.squareup.okhttp.Call call = addIPPrefixListCall(body, logicalRouterId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add IPPrefixList on a Logical Router
     * Adds a new IPPrefixList on a Logical Router 
     * @param body  (required)
     * @param logicalRouterId  (required)
     * @return IPPrefixList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public IPPrefixList addIPPrefixList(IPPrefixList body, String logicalRouterId) throws ApiException {
        ApiResponse<IPPrefixList> resp = addIPPrefixListWithHttpInfo(body, logicalRouterId);
        return resp.getData();
    }

    /**
     * Add IPPrefixList on a Logical Router
     * Adds a new IPPrefixList on a Logical Router 
     * @param body  (required)
     * @param logicalRouterId  (required)
     * @return ApiResponse&lt;IPPrefixList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<IPPrefixList> addIPPrefixListWithHttpInfo(IPPrefixList body, String logicalRouterId) throws ApiException {
        com.squareup.okhttp.Call call = addIPPrefixListValidateBeforeCall(body, logicalRouterId, null, null);
        Type localVarReturnType = new TypeToken<IPPrefixList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add IPPrefixList on a Logical Router (asynchronously)
     * Adds a new IPPrefixList on a Logical Router 
     * @param body  (required)
     * @param logicalRouterId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addIPPrefixListAsync(IPPrefixList body, String logicalRouterId, final ApiCallback<IPPrefixList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addIPPrefixListValidateBeforeCall(body, logicalRouterId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<IPPrefixList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addRouteMap
     * @param body  (required)
     * @param logicalRouterId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addRouteMapCall(RouteMap body, String logicalRouterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/logical-routers/{logical-router-id}/routing/route-maps"
            .replaceAll("\\{" + "logical-router-id" + "\\}", apiClient.escapeString(logicalRouterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addRouteMapValidateBeforeCall(RouteMap body, String logicalRouterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addRouteMap(Async)");
        }
        // verify the required parameter 'logicalRouterId' is set
        if (logicalRouterId == null) {
            throw new ApiException("Missing the required parameter 'logicalRouterId' when calling addRouteMap(Async)");
        }
        
        com.squareup.okhttp.Call call = addRouteMapCall(body, logicalRouterId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add RouteMap on a Logical Router
     * Adds a new RouteMap on a Logical Router 
     * @param body  (required)
     * @param logicalRouterId  (required)
     * @return RouteMap
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RouteMap addRouteMap(RouteMap body, String logicalRouterId) throws ApiException {
        ApiResponse<RouteMap> resp = addRouteMapWithHttpInfo(body, logicalRouterId);
        return resp.getData();
    }

    /**
     * Add RouteMap on a Logical Router
     * Adds a new RouteMap on a Logical Router 
     * @param body  (required)
     * @param logicalRouterId  (required)
     * @return ApiResponse&lt;RouteMap&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RouteMap> addRouteMapWithHttpInfo(RouteMap body, String logicalRouterId) throws ApiException {
        com.squareup.okhttp.Call call = addRouteMapValidateBeforeCall(body, logicalRouterId, null, null);
        Type localVarReturnType = new TypeToken<RouteMap>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add RouteMap on a Logical Router (asynchronously)
     * Adds a new RouteMap on a Logical Router 
     * @param body  (required)
     * @param logicalRouterId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addRouteMapAsync(RouteMap body, String logicalRouterId, final ApiCallback<RouteMap> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addRouteMapValidateBeforeCall(body, logicalRouterId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RouteMap>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addStaticRoute
     * @param body  (required)
     * @param logicalRouterId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addStaticRouteCall(StaticRoute body, String logicalRouterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/logical-routers/{logical-router-id}/routing/static-routes"
            .replaceAll("\\{" + "logical-router-id" + "\\}", apiClient.escapeString(logicalRouterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addStaticRouteValidateBeforeCall(StaticRoute body, String logicalRouterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addStaticRoute(Async)");
        }
        // verify the required parameter 'logicalRouterId' is set
        if (logicalRouterId == null) {
            throw new ApiException("Missing the required parameter 'logicalRouterId' when calling addStaticRoute(Async)");
        }
        
        com.squareup.okhttp.Call call = addStaticRouteCall(body, logicalRouterId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add Static Routes on a Logical Router
     * Adds a new static route on a Logical Router 
     * @param body  (required)
     * @param logicalRouterId  (required)
     * @return StaticRoute
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StaticRoute addStaticRoute(StaticRoute body, String logicalRouterId) throws ApiException {
        ApiResponse<StaticRoute> resp = addStaticRouteWithHttpInfo(body, logicalRouterId);
        return resp.getData();
    }

    /**
     * Add Static Routes on a Logical Router
     * Adds a new static route on a Logical Router 
     * @param body  (required)
     * @param logicalRouterId  (required)
     * @return ApiResponse&lt;StaticRoute&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StaticRoute> addStaticRouteWithHttpInfo(StaticRoute body, String logicalRouterId) throws ApiException {
        com.squareup.okhttp.Call call = addStaticRouteValidateBeforeCall(body, logicalRouterId, null, null);
        Type localVarReturnType = new TypeToken<StaticRoute>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add Static Routes on a Logical Router (asynchronously)
     * Adds a new static route on a Logical Router 
     * @param body  (required)
     * @param logicalRouterId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addStaticRouteAsync(StaticRoute body, String logicalRouterId, final ApiCallback<StaticRoute> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addStaticRouteValidateBeforeCall(body, logicalRouterId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StaticRoute>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createBGPCommunityList
     * @param body  (required)
     * @param logicalRouterId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createBGPCommunityListCall(BGPCommunityList body, String logicalRouterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/logical-routers/{logical-router-id}/routing/bgp/community-lists"
            .replaceAll("\\{" + "logical-router-id" + "\\}", apiClient.escapeString(logicalRouterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createBGPCommunityListValidateBeforeCall(BGPCommunityList body, String logicalRouterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createBGPCommunityList(Async)");
        }
        // verify the required parameter 'logicalRouterId' is set
        if (logicalRouterId == null) {
            throw new ApiException("Missing the required parameter 'logicalRouterId' when calling createBGPCommunityList(Async)");
        }
        
        com.squareup.okhttp.Call call = createBGPCommunityListCall(body, logicalRouterId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create a new BGP community list on a Logical Router
     * Add a new BGP Community List on a Logical Router 
     * @param body  (required)
     * @param logicalRouterId  (required)
     * @return BGPCommunityList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BGPCommunityList createBGPCommunityList(BGPCommunityList body, String logicalRouterId) throws ApiException {
        ApiResponse<BGPCommunityList> resp = createBGPCommunityListWithHttpInfo(body, logicalRouterId);
        return resp.getData();
    }

    /**
     * Create a new BGP community list on a Logical Router
     * Add a new BGP Community List on a Logical Router 
     * @param body  (required)
     * @param logicalRouterId  (required)
     * @return ApiResponse&lt;BGPCommunityList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BGPCommunityList> createBGPCommunityListWithHttpInfo(BGPCommunityList body, String logicalRouterId) throws ApiException {
        com.squareup.okhttp.Call call = createBGPCommunityListValidateBeforeCall(body, logicalRouterId, null, null);
        Type localVarReturnType = new TypeToken<BGPCommunityList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a new BGP community list on a Logical Router (asynchronously)
     * Add a new BGP Community List on a Logical Router 
     * @param body  (required)
     * @param logicalRouterId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createBGPCommunityListAsync(BGPCommunityList body, String logicalRouterId, final ApiCallback<BGPCommunityList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createBGPCommunityListValidateBeforeCall(body, logicalRouterId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BGPCommunityList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createDADProfile
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createDADProfileCall(DADProfile body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/ipv6/dad-profiles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createDADProfileValidateBeforeCall(DADProfile body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createDADProfile(Async)");
        }
        
        com.squareup.okhttp.Call call = createDADProfileCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create a new DADProfile
     * Adds a new DADProfile 
     * @param body  (required)
     * @return DADProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DADProfile createDADProfile(DADProfile body) throws ApiException {
        ApiResponse<DADProfile> resp = createDADProfileWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create a new DADProfile
     * Adds a new DADProfile 
     * @param body  (required)
     * @return ApiResponse&lt;DADProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DADProfile> createDADProfileWithHttpInfo(DADProfile body) throws ApiException {
        com.squareup.okhttp.Call call = createDADProfileValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<DADProfile>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a new DADProfile (asynchronously)
     * Adds a new DADProfile 
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createDADProfileAsync(DADProfile body, final ApiCallback<DADProfile> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createDADProfileValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DADProfile>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createNDRAProfile
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createNDRAProfileCall(NDRAProfile body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/ipv6/nd-ra-profiles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createNDRAProfileValidateBeforeCall(NDRAProfile body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createNDRAProfile(Async)");
        }
        
        com.squareup.okhttp.Call call = createNDRAProfileCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create a new NDRA Profile
     * Adds a new NDRAProfile 
     * @param body  (required)
     * @return NDRAProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NDRAProfile createNDRAProfile(NDRAProfile body) throws ApiException {
        ApiResponse<NDRAProfile> resp = createNDRAProfileWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create a new NDRA Profile
     * Adds a new NDRAProfile 
     * @param body  (required)
     * @return ApiResponse&lt;NDRAProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NDRAProfile> createNDRAProfileWithHttpInfo(NDRAProfile body) throws ApiException {
        com.squareup.okhttp.Call call = createNDRAProfileValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<NDRAProfile>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a new NDRA Profile (asynchronously)
     * Adds a new NDRAProfile 
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createNDRAProfileAsync(NDRAProfile body, final ApiCallback<NDRAProfile> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createNDRAProfileValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NDRAProfile>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteBGPCommunityList
     * @param logicalRouterId  (required)
     * @param communityListId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteBGPCommunityListCall(String logicalRouterId, String communityListId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/logical-routers/{logical-router-id}/routing/bgp/community-lists/{community-list-id}"
            .replaceAll("\\{" + "logical-router-id" + "\\}", apiClient.escapeString(logicalRouterId.toString()))
            .replaceAll("\\{" + "community-list-id" + "\\}", apiClient.escapeString(communityListId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteBGPCommunityListValidateBeforeCall(String logicalRouterId, String communityListId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'logicalRouterId' is set
        if (logicalRouterId == null) {
            throw new ApiException("Missing the required parameter 'logicalRouterId' when calling deleteBGPCommunityList(Async)");
        }
        // verify the required parameter 'communityListId' is set
        if (communityListId == null) {
            throw new ApiException("Missing the required parameter 'communityListId' when calling deleteBGPCommunityList(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteBGPCommunityListCall(logicalRouterId, communityListId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete a specific BGP community list from a Logical Router
     * Delete a specific BGP community list from a Logical Router 
     * @param logicalRouterId  (required)
     * @param communityListId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteBGPCommunityList(String logicalRouterId, String communityListId) throws ApiException {
        deleteBGPCommunityListWithHttpInfo(logicalRouterId, communityListId);
    }

    /**
     * Delete a specific BGP community list from a Logical Router
     * Delete a specific BGP community list from a Logical Router 
     * @param logicalRouterId  (required)
     * @param communityListId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteBGPCommunityListWithHttpInfo(String logicalRouterId, String communityListId) throws ApiException {
        com.squareup.okhttp.Call call = deleteBGPCommunityListValidateBeforeCall(logicalRouterId, communityListId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a specific BGP community list from a Logical Router (asynchronously)
     * Delete a specific BGP community list from a Logical Router 
     * @param logicalRouterId  (required)
     * @param communityListId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteBGPCommunityListAsync(String logicalRouterId, String communityListId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteBGPCommunityListValidateBeforeCall(logicalRouterId, communityListId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteBgpNeighbor
     * @param logicalRouterId  (required)
     * @param id  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteBgpNeighborCall(String logicalRouterId, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/logical-routers/{logical-router-id}/routing/bgp/neighbors/{id}"
            .replaceAll("\\{" + "logical-router-id" + "\\}", apiClient.escapeString(logicalRouterId.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteBgpNeighborValidateBeforeCall(String logicalRouterId, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'logicalRouterId' is set
        if (logicalRouterId == null) {
            throw new ApiException("Missing the required parameter 'logicalRouterId' when calling deleteBgpNeighbor(Async)");
        }
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteBgpNeighbor(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteBgpNeighborCall(logicalRouterId, id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete a specific BGP Neighbor on a Logical Router
     * Delete a specific BGP Neighbor on a Logical Router 
     * @param logicalRouterId  (required)
     * @param id  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteBgpNeighbor(String logicalRouterId, String id) throws ApiException {
        deleteBgpNeighborWithHttpInfo(logicalRouterId, id);
    }

    /**
     * Delete a specific BGP Neighbor on a Logical Router
     * Delete a specific BGP Neighbor on a Logical Router 
     * @param logicalRouterId  (required)
     * @param id  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteBgpNeighborWithHttpInfo(String logicalRouterId, String id) throws ApiException {
        com.squareup.okhttp.Call call = deleteBgpNeighborValidateBeforeCall(logicalRouterId, id, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a specific BGP Neighbor on a Logical Router (asynchronously)
     * Delete a specific BGP Neighbor on a Logical Router 
     * @param logicalRouterId  (required)
     * @param id  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteBgpNeighborAsync(String logicalRouterId, String id, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteBgpNeighborValidateBeforeCall(logicalRouterId, id, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteDADProfile
     * @param dadProfileId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteDADProfileCall(String dadProfileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ipv6/dad-profiles/{dad-profile-id}"
            .replaceAll("\\{" + "dad-profile-id" + "\\}", apiClient.escapeString(dadProfileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteDADProfileValidateBeforeCall(String dadProfileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'dadProfileId' is set
        if (dadProfileId == null) {
            throw new ApiException("Missing the required parameter 'dadProfileId' when calling deleteDADProfile(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteDADProfileCall(dadProfileId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete DAD Profile
     * Delete DADProfile 
     * @param dadProfileId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteDADProfile(String dadProfileId) throws ApiException {
        deleteDADProfileWithHttpInfo(dadProfileId);
    }

    /**
     * Delete DAD Profile
     * Delete DADProfile 
     * @param dadProfileId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteDADProfileWithHttpInfo(String dadProfileId) throws ApiException {
        com.squareup.okhttp.Call call = deleteDADProfileValidateBeforeCall(dadProfileId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete DAD Profile (asynchronously)
     * Delete DADProfile 
     * @param dadProfileId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteDADProfileAsync(String dadProfileId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteDADProfileValidateBeforeCall(dadProfileId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteIPPrefixList
     * @param logicalRouterId  (required)
     * @param id  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteIPPrefixListCall(String logicalRouterId, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/logical-routers/{logical-router-id}/routing/ip-prefix-lists/{id}"
            .replaceAll("\\{" + "logical-router-id" + "\\}", apiClient.escapeString(logicalRouterId.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteIPPrefixListValidateBeforeCall(String logicalRouterId, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'logicalRouterId' is set
        if (logicalRouterId == null) {
            throw new ApiException("Missing the required parameter 'logicalRouterId' when calling deleteIPPrefixList(Async)");
        }
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteIPPrefixList(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteIPPrefixListCall(logicalRouterId, id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete a specific IPPrefixList on a Logical Router
     * Deletes a specific IPPrefixList on the specified logical router. 
     * @param logicalRouterId  (required)
     * @param id  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteIPPrefixList(String logicalRouterId, String id) throws ApiException {
        deleteIPPrefixListWithHttpInfo(logicalRouterId, id);
    }

    /**
     * Delete a specific IPPrefixList on a Logical Router
     * Deletes a specific IPPrefixList on the specified logical router. 
     * @param logicalRouterId  (required)
     * @param id  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteIPPrefixListWithHttpInfo(String logicalRouterId, String id) throws ApiException {
        com.squareup.okhttp.Call call = deleteIPPrefixListValidateBeforeCall(logicalRouterId, id, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a specific IPPrefixList on a Logical Router (asynchronously)
     * Deletes a specific IPPrefixList on the specified logical router. 
     * @param logicalRouterId  (required)
     * @param id  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteIPPrefixListAsync(String logicalRouterId, String id, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteIPPrefixListValidateBeforeCall(logicalRouterId, id, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteNDRAProfile
     * @param ndRaProfileId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteNDRAProfileCall(String ndRaProfileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ipv6/nd-ra-profiles/{nd-ra-profile-id}"
            .replaceAll("\\{" + "nd-ra-profile-id" + "\\}", apiClient.escapeString(ndRaProfileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteNDRAProfileValidateBeforeCall(String ndRaProfileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'ndRaProfileId' is set
        if (ndRaProfileId == null) {
            throw new ApiException("Missing the required parameter 'ndRaProfileId' when calling deleteNDRAProfile(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteNDRAProfileCall(ndRaProfileId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete NDRA Profile
     * Delete NDRAProfile 
     * @param ndRaProfileId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteNDRAProfile(String ndRaProfileId) throws ApiException {
        deleteNDRAProfileWithHttpInfo(ndRaProfileId);
    }

    /**
     * Delete NDRA Profile
     * Delete NDRAProfile 
     * @param ndRaProfileId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteNDRAProfileWithHttpInfo(String ndRaProfileId) throws ApiException {
        com.squareup.okhttp.Call call = deleteNDRAProfileValidateBeforeCall(ndRaProfileId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete NDRA Profile (asynchronously)
     * Delete NDRAProfile 
     * @param ndRaProfileId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteNDRAProfileAsync(String ndRaProfileId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteNDRAProfileValidateBeforeCall(ndRaProfileId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteRouteMap
     * @param logicalRouterId  (required)
     * @param id  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteRouteMapCall(String logicalRouterId, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/logical-routers/{logical-router-id}/routing/route-maps/{id}"
            .replaceAll("\\{" + "logical-router-id" + "\\}", apiClient.escapeString(logicalRouterId.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteRouteMapValidateBeforeCall(String logicalRouterId, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'logicalRouterId' is set
        if (logicalRouterId == null) {
            throw new ApiException("Missing the required parameter 'logicalRouterId' when calling deleteRouteMap(Async)");
        }
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteRouteMap(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteRouteMapCall(logicalRouterId, id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete a specific RouteMap on a Logical Router
     * Deletes a specific RouteMap on the specified logical router. 
     * @param logicalRouterId  (required)
     * @param id  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteRouteMap(String logicalRouterId, String id) throws ApiException {
        deleteRouteMapWithHttpInfo(logicalRouterId, id);
    }

    /**
     * Delete a specific RouteMap on a Logical Router
     * Deletes a specific RouteMap on the specified logical router. 
     * @param logicalRouterId  (required)
     * @param id  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteRouteMapWithHttpInfo(String logicalRouterId, String id) throws ApiException {
        com.squareup.okhttp.Call call = deleteRouteMapValidateBeforeCall(logicalRouterId, id, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a specific RouteMap on a Logical Router (asynchronously)
     * Deletes a specific RouteMap on the specified logical router. 
     * @param logicalRouterId  (required)
     * @param id  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteRouteMapAsync(String logicalRouterId, String id, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteRouteMapValidateBeforeCall(logicalRouterId, id, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteStaticRoute
     * @param logicalRouterId  (required)
     * @param id  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteStaticRouteCall(String logicalRouterId, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/logical-routers/{logical-router-id}/routing/static-routes/{id}"
            .replaceAll("\\{" + "logical-router-id" + "\\}", apiClient.escapeString(logicalRouterId.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteStaticRouteValidateBeforeCall(String logicalRouterId, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'logicalRouterId' is set
        if (logicalRouterId == null) {
            throw new ApiException("Missing the required parameter 'logicalRouterId' when calling deleteStaticRoute(Async)");
        }
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteStaticRoute(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteStaticRouteCall(logicalRouterId, id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete a specific Static Route on a Logical Router
     * Deletes a specific static route on the specified logical router. 
     * @param logicalRouterId  (required)
     * @param id  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteStaticRoute(String logicalRouterId, String id) throws ApiException {
        deleteStaticRouteWithHttpInfo(logicalRouterId, id);
    }

    /**
     * Delete a specific Static Route on a Logical Router
     * Deletes a specific static route on the specified logical router. 
     * @param logicalRouterId  (required)
     * @param id  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteStaticRouteWithHttpInfo(String logicalRouterId, String id) throws ApiException {
        com.squareup.okhttp.Call call = deleteStaticRouteValidateBeforeCall(logicalRouterId, id, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a specific Static Route on a Logical Router (asynchronously)
     * Deletes a specific static route on the specified logical router. 
     * @param logicalRouterId  (required)
     * @param id  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteStaticRouteAsync(String logicalRouterId, String id, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteStaticRouteValidateBeforeCall(logicalRouterId, id, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for listBGPCommunityLists
     * @param logicalRouterId  (required)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listBGPCommunityListsCall(String logicalRouterId, String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/logical-routers/{logical-router-id}/routing/bgp/community-lists"
            .replaceAll("\\{" + "logical-router-id" + "\\}", apiClient.escapeString(logicalRouterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (includedFields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("included_fields", includedFields));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page_size", pageSize));
        if (sortAscending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_ascending", sortAscending));
        if (sortBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_by", sortBy));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listBGPCommunityListsValidateBeforeCall(String logicalRouterId, String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'logicalRouterId' is set
        if (logicalRouterId == null) {
            throw new ApiException("Missing the required parameter 'logicalRouterId' when calling listBGPCommunityLists(Async)");
        }
        
        com.squareup.okhttp.Call call = listBGPCommunityListsCall(logicalRouterId, cursor, includedFields, pageSize, sortAscending, sortBy, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Paginated list of BGP community lists on a Logical Router
     * Paginated list of BGP Community Lists on a Logical Router 
     * @param logicalRouterId  (required)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @return BGPCommunityListListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BGPCommunityListListResult listBGPCommunityLists(String logicalRouterId, String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy) throws ApiException {
        ApiResponse<BGPCommunityListListResult> resp = listBGPCommunityListsWithHttpInfo(logicalRouterId, cursor, includedFields, pageSize, sortAscending, sortBy);
        return resp.getData();
    }

    /**
     * Paginated list of BGP community lists on a Logical Router
     * Paginated list of BGP Community Lists on a Logical Router 
     * @param logicalRouterId  (required)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @return ApiResponse&lt;BGPCommunityListListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BGPCommunityListListResult> listBGPCommunityListsWithHttpInfo(String logicalRouterId, String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy) throws ApiException {
        com.squareup.okhttp.Call call = listBGPCommunityListsValidateBeforeCall(logicalRouterId, cursor, includedFields, pageSize, sortAscending, sortBy, null, null);
        Type localVarReturnType = new TypeToken<BGPCommunityListListResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Paginated list of BGP community lists on a Logical Router (asynchronously)
     * Paginated list of BGP Community Lists on a Logical Router 
     * @param logicalRouterId  (required)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listBGPCommunityListsAsync(String logicalRouterId, String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, final ApiCallback<BGPCommunityListListResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listBGPCommunityListsValidateBeforeCall(logicalRouterId, cursor, includedFields, pageSize, sortAscending, sortBy, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BGPCommunityListListResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listBgpNeighbors
     * @param logicalRouterId  (required)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listBgpNeighborsCall(String logicalRouterId, String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/logical-routers/{logical-router-id}/routing/bgp/neighbors"
            .replaceAll("\\{" + "logical-router-id" + "\\}", apiClient.escapeString(logicalRouterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (includedFields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("included_fields", includedFields));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page_size", pageSize));
        if (sortAscending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_ascending", sortAscending));
        if (sortBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_by", sortBy));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listBgpNeighborsValidateBeforeCall(String logicalRouterId, String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'logicalRouterId' is set
        if (logicalRouterId == null) {
            throw new ApiException("Missing the required parameter 'logicalRouterId' when calling listBgpNeighbors(Async)");
        }
        
        com.squareup.okhttp.Call call = listBgpNeighborsCall(logicalRouterId, cursor, includedFields, pageSize, sortAscending, sortBy, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Paginated list of BGP Neighbors on a Logical Router
     * Paginated list of BGP Neighbors on a Logical Router 
     * @param logicalRouterId  (required)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @return BgpNeighborListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BgpNeighborListResult listBgpNeighbors(String logicalRouterId, String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy) throws ApiException {
        ApiResponse<BgpNeighborListResult> resp = listBgpNeighborsWithHttpInfo(logicalRouterId, cursor, includedFields, pageSize, sortAscending, sortBy);
        return resp.getData();
    }

    /**
     * Paginated list of BGP Neighbors on a Logical Router
     * Paginated list of BGP Neighbors on a Logical Router 
     * @param logicalRouterId  (required)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @return ApiResponse&lt;BgpNeighborListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BgpNeighborListResult> listBgpNeighborsWithHttpInfo(String logicalRouterId, String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy) throws ApiException {
        com.squareup.okhttp.Call call = listBgpNeighborsValidateBeforeCall(logicalRouterId, cursor, includedFields, pageSize, sortAscending, sortBy, null, null);
        Type localVarReturnType = new TypeToken<BgpNeighborListResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Paginated list of BGP Neighbors on a Logical Router (asynchronously)
     * Paginated list of BGP Neighbors on a Logical Router 
     * @param logicalRouterId  (required)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listBgpNeighborsAsync(String logicalRouterId, String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, final ApiCallback<BgpNeighborListResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listBgpNeighborsValidateBeforeCall(logicalRouterId, cursor, includedFields, pageSize, sortAscending, sortBy, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BgpNeighborListResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listDADProfiles
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listDADProfilesCall(String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ipv6/dad-profiles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (includedFields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("included_fields", includedFields));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page_size", pageSize));
        if (sortAscending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_ascending", sortAscending));
        if (sortBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_by", sortBy));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listDADProfilesValidateBeforeCall(String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listDADProfilesCall(cursor, includedFields, pageSize, sortAscending, sortBy, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read All IPV6 DADProfiles
     * Returns all IPv6 DADProfiles. 
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @return DADProfileListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DADProfileListResult listDADProfiles(String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy) throws ApiException {
        ApiResponse<DADProfileListResult> resp = listDADProfilesWithHttpInfo(cursor, includedFields, pageSize, sortAscending, sortBy);
        return resp.getData();
    }

    /**
     * Read All IPV6 DADProfiles
     * Returns all IPv6 DADProfiles. 
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @return ApiResponse&lt;DADProfileListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DADProfileListResult> listDADProfilesWithHttpInfo(String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy) throws ApiException {
        com.squareup.okhttp.Call call = listDADProfilesValidateBeforeCall(cursor, includedFields, pageSize, sortAscending, sortBy, null, null);
        Type localVarReturnType = new TypeToken<DADProfileListResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read All IPV6 DADProfiles (asynchronously)
     * Returns all IPv6 DADProfiles. 
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listDADProfilesAsync(String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, final ApiCallback<DADProfileListResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listDADProfilesValidateBeforeCall(cursor, includedFields, pageSize, sortAscending, sortBy, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DADProfileListResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listIPPrefixLists
     * @param logicalRouterId  (required)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listIPPrefixListsCall(String logicalRouterId, String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/logical-routers/{logical-router-id}/routing/ip-prefix-lists"
            .replaceAll("\\{" + "logical-router-id" + "\\}", apiClient.escapeString(logicalRouterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (includedFields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("included_fields", includedFields));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page_size", pageSize));
        if (sortAscending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_ascending", sortAscending));
        if (sortBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_by", sortBy));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listIPPrefixListsValidateBeforeCall(String logicalRouterId, String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'logicalRouterId' is set
        if (logicalRouterId == null) {
            throw new ApiException("Missing the required parameter 'logicalRouterId' when calling listIPPrefixLists(Async)");
        }
        
        com.squareup.okhttp.Call call = listIPPrefixListsCall(logicalRouterId, cursor, includedFields, pageSize, sortAscending, sortBy, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Paginated List of IPPrefixLists
     * Paginated List of IPPrefixLists
     * @param logicalRouterId  (required)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @return IPPrefixListListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public IPPrefixListListResult listIPPrefixLists(String logicalRouterId, String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy) throws ApiException {
        ApiResponse<IPPrefixListListResult> resp = listIPPrefixListsWithHttpInfo(logicalRouterId, cursor, includedFields, pageSize, sortAscending, sortBy);
        return resp.getData();
    }

    /**
     * Paginated List of IPPrefixLists
     * Paginated List of IPPrefixLists
     * @param logicalRouterId  (required)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @return ApiResponse&lt;IPPrefixListListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<IPPrefixListListResult> listIPPrefixListsWithHttpInfo(String logicalRouterId, String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy) throws ApiException {
        com.squareup.okhttp.Call call = listIPPrefixListsValidateBeforeCall(logicalRouterId, cursor, includedFields, pageSize, sortAscending, sortBy, null, null);
        Type localVarReturnType = new TypeToken<IPPrefixListListResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Paginated List of IPPrefixLists (asynchronously)
     * Paginated List of IPPrefixLists
     * @param logicalRouterId  (required)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listIPPrefixListsAsync(String logicalRouterId, String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, final ApiCallback<IPPrefixListListResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listIPPrefixListsValidateBeforeCall(logicalRouterId, cursor, includedFields, pageSize, sortAscending, sortBy, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<IPPrefixListListResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listNDRAProfiles
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listNDRAProfilesCall(String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ipv6/nd-ra-profiles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (includedFields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("included_fields", includedFields));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page_size", pageSize));
        if (sortAscending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_ascending", sortAscending));
        if (sortBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_by", sortBy));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listNDRAProfilesValidateBeforeCall(String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listNDRAProfilesCall(cursor, includedFields, pageSize, sortAscending, sortBy, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read All IPV6 NDRA Profiles
     * Returns all IPv6 NDRA Profiles. 
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @return NDRAProfileListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NDRAProfileListResult listNDRAProfiles(String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy) throws ApiException {
        ApiResponse<NDRAProfileListResult> resp = listNDRAProfilesWithHttpInfo(cursor, includedFields, pageSize, sortAscending, sortBy);
        return resp.getData();
    }

    /**
     * Read All IPV6 NDRA Profiles
     * Returns all IPv6 NDRA Profiles. 
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @return ApiResponse&lt;NDRAProfileListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NDRAProfileListResult> listNDRAProfilesWithHttpInfo(String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy) throws ApiException {
        com.squareup.okhttp.Call call = listNDRAProfilesValidateBeforeCall(cursor, includedFields, pageSize, sortAscending, sortBy, null, null);
        Type localVarReturnType = new TypeToken<NDRAProfileListResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read All IPV6 NDRA Profiles (asynchronously)
     * Returns all IPv6 NDRA Profiles. 
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listNDRAProfilesAsync(String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, final ApiCallback<NDRAProfileListResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listNDRAProfilesValidateBeforeCall(cursor, includedFields, pageSize, sortAscending, sortBy, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NDRAProfileListResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listRouteMaps
     * @param logicalRouterId  (required)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listRouteMapsCall(String logicalRouterId, String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/logical-routers/{logical-router-id}/routing/route-maps"
            .replaceAll("\\{" + "logical-router-id" + "\\}", apiClient.escapeString(logicalRouterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (includedFields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("included_fields", includedFields));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page_size", pageSize));
        if (sortAscending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_ascending", sortAscending));
        if (sortBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_by", sortBy));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listRouteMapsValidateBeforeCall(String logicalRouterId, String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'logicalRouterId' is set
        if (logicalRouterId == null) {
            throw new ApiException("Missing the required parameter 'logicalRouterId' when calling listRouteMaps(Async)");
        }
        
        com.squareup.okhttp.Call call = listRouteMapsCall(logicalRouterId, cursor, includedFields, pageSize, sortAscending, sortBy, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Paginated List of RouteMaps
     * Paginated List of RouteMaps
     * @param logicalRouterId  (required)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @return RouteMapListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RouteMapListResult listRouteMaps(String logicalRouterId, String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy) throws ApiException {
        ApiResponse<RouteMapListResult> resp = listRouteMapsWithHttpInfo(logicalRouterId, cursor, includedFields, pageSize, sortAscending, sortBy);
        return resp.getData();
    }

    /**
     * Paginated List of RouteMaps
     * Paginated List of RouteMaps
     * @param logicalRouterId  (required)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @return ApiResponse&lt;RouteMapListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RouteMapListResult> listRouteMapsWithHttpInfo(String logicalRouterId, String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy) throws ApiException {
        com.squareup.okhttp.Call call = listRouteMapsValidateBeforeCall(logicalRouterId, cursor, includedFields, pageSize, sortAscending, sortBy, null, null);
        Type localVarReturnType = new TypeToken<RouteMapListResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Paginated List of RouteMaps (asynchronously)
     * Paginated List of RouteMaps
     * @param logicalRouterId  (required)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listRouteMapsAsync(String logicalRouterId, String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, final ApiCallback<RouteMapListResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listRouteMapsValidateBeforeCall(logicalRouterId, cursor, includedFields, pageSize, sortAscending, sortBy, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RouteMapListResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listStaticRoutes
     * @param logicalRouterId  (required)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listStaticRoutesCall(String logicalRouterId, String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/logical-routers/{logical-router-id}/routing/static-routes"
            .replaceAll("\\{" + "logical-router-id" + "\\}", apiClient.escapeString(logicalRouterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (includedFields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("included_fields", includedFields));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page_size", pageSize));
        if (sortAscending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_ascending", sortAscending));
        if (sortBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_by", sortBy));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listStaticRoutesValidateBeforeCall(String logicalRouterId, String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'logicalRouterId' is set
        if (logicalRouterId == null) {
            throw new ApiException("Missing the required parameter 'logicalRouterId' when calling listStaticRoutes(Async)");
        }
        
        com.squareup.okhttp.Call call = listStaticRoutesCall(logicalRouterId, cursor, includedFields, pageSize, sortAscending, sortBy, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Paginated List of Static Routes
     * Returns information about configured static routes, including the network address and next hops for each static route. 
     * @param logicalRouterId  (required)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @return StaticRouteListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StaticRouteListResult listStaticRoutes(String logicalRouterId, String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy) throws ApiException {
        ApiResponse<StaticRouteListResult> resp = listStaticRoutesWithHttpInfo(logicalRouterId, cursor, includedFields, pageSize, sortAscending, sortBy);
        return resp.getData();
    }

    /**
     * Paginated List of Static Routes
     * Returns information about configured static routes, including the network address and next hops for each static route. 
     * @param logicalRouterId  (required)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @return ApiResponse&lt;StaticRouteListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StaticRouteListResult> listStaticRoutesWithHttpInfo(String logicalRouterId, String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy) throws ApiException {
        com.squareup.okhttp.Call call = listStaticRoutesValidateBeforeCall(logicalRouterId, cursor, includedFields, pageSize, sortAscending, sortBy, null, null);
        Type localVarReturnType = new TypeToken<StaticRouteListResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Paginated List of Static Routes (asynchronously)
     * Returns information about configured static routes, including the network address and next hops for each static route. 
     * @param logicalRouterId  (required)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listStaticRoutesAsync(String logicalRouterId, String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, final ApiCallback<StaticRouteListResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listStaticRoutesValidateBeforeCall(logicalRouterId, cursor, includedFields, pageSize, sortAscending, sortBy, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StaticRouteListResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for readAdvertiseRuleList
     * @param logicalRouterId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call readAdvertiseRuleListCall(String logicalRouterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/logical-routers/{logical-router-id}/routing/advertisement/rules"
            .replaceAll("\\{" + "logical-router-id" + "\\}", apiClient.escapeString(logicalRouterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call readAdvertiseRuleListValidateBeforeCall(String logicalRouterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'logicalRouterId' is set
        if (logicalRouterId == null) {
            throw new ApiException("Missing the required parameter 'logicalRouterId' when calling readAdvertiseRuleList(Async)");
        }
        
        com.squareup.okhttp.Call call = readAdvertiseRuleListCall(logicalRouterId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read the Advertisement Rules on a Logical Router
     * Returns the advertisement rule list for the specified TIER1 logical router. 
     * @param logicalRouterId  (required)
     * @return AdvertiseRuleList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AdvertiseRuleList readAdvertiseRuleList(String logicalRouterId) throws ApiException {
        ApiResponse<AdvertiseRuleList> resp = readAdvertiseRuleListWithHttpInfo(logicalRouterId);
        return resp.getData();
    }

    /**
     * Read the Advertisement Rules on a Logical Router
     * Returns the advertisement rule list for the specified TIER1 logical router. 
     * @param logicalRouterId  (required)
     * @return ApiResponse&lt;AdvertiseRuleList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AdvertiseRuleList> readAdvertiseRuleListWithHttpInfo(String logicalRouterId) throws ApiException {
        com.squareup.okhttp.Call call = readAdvertiseRuleListValidateBeforeCall(logicalRouterId, null, null);
        Type localVarReturnType = new TypeToken<AdvertiseRuleList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read the Advertisement Rules on a Logical Router (asynchronously)
     * Returns the advertisement rule list for the specified TIER1 logical router. 
     * @param logicalRouterId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call readAdvertiseRuleListAsync(String logicalRouterId, final ApiCallback<AdvertiseRuleList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = readAdvertiseRuleListValidateBeforeCall(logicalRouterId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AdvertiseRuleList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for readAdvertisementConfig
     * @param logicalRouterId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call readAdvertisementConfigCall(String logicalRouterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/logical-routers/{logical-router-id}/routing/advertisement"
            .replaceAll("\\{" + "logical-router-id" + "\\}", apiClient.escapeString(logicalRouterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call readAdvertisementConfigValidateBeforeCall(String logicalRouterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'logicalRouterId' is set
        if (logicalRouterId == null) {
            throw new ApiException("Missing the required parameter 'logicalRouterId' when calling readAdvertisementConfig(Async)");
        }
        
        com.squareup.okhttp.Call call = readAdvertisementConfigCall(logicalRouterId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read the Advertisement Configuration on a Logical Router
     * Returns information about the routes to be advertised by the specified TIER1 logical router. 
     * @param logicalRouterId  (required)
     * @return AdvertisementConfig
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AdvertisementConfig readAdvertisementConfig(String logicalRouterId) throws ApiException {
        ApiResponse<AdvertisementConfig> resp = readAdvertisementConfigWithHttpInfo(logicalRouterId);
        return resp.getData();
    }

    /**
     * Read the Advertisement Configuration on a Logical Router
     * Returns information about the routes to be advertised by the specified TIER1 logical router. 
     * @param logicalRouterId  (required)
     * @return ApiResponse&lt;AdvertisementConfig&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AdvertisementConfig> readAdvertisementConfigWithHttpInfo(String logicalRouterId) throws ApiException {
        com.squareup.okhttp.Call call = readAdvertisementConfigValidateBeforeCall(logicalRouterId, null, null);
        Type localVarReturnType = new TypeToken<AdvertisementConfig>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read the Advertisement Configuration on a Logical Router (asynchronously)
     * Returns information about the routes to be advertised by the specified TIER1 logical router. 
     * @param logicalRouterId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call readAdvertisementConfigAsync(String logicalRouterId, final ApiCallback<AdvertisementConfig> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = readAdvertisementConfigValidateBeforeCall(logicalRouterId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AdvertisementConfig>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for readBGPCommunityList
     * @param logicalRouterId  (required)
     * @param communityListId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call readBGPCommunityListCall(String logicalRouterId, String communityListId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/logical-routers/{logical-router-id}/routing/bgp/community-lists/{community-list-id}"
            .replaceAll("\\{" + "logical-router-id" + "\\}", apiClient.escapeString(logicalRouterId.toString()))
            .replaceAll("\\{" + "community-list-id" + "\\}", apiClient.escapeString(communityListId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call readBGPCommunityListValidateBeforeCall(String logicalRouterId, String communityListId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'logicalRouterId' is set
        if (logicalRouterId == null) {
            throw new ApiException("Missing the required parameter 'logicalRouterId' when calling readBGPCommunityList(Async)");
        }
        // verify the required parameter 'communityListId' is set
        if (communityListId == null) {
            throw new ApiException("Missing the required parameter 'communityListId' when calling readBGPCommunityList(Async)");
        }
        
        com.squareup.okhttp.Call call = readBGPCommunityListCall(logicalRouterId, communityListId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read a specific BGP community list from a Logical Router
     * Read a specific BGP community list from a Logical Router 
     * @param logicalRouterId  (required)
     * @param communityListId  (required)
     * @return BGPCommunityList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BGPCommunityList readBGPCommunityList(String logicalRouterId, String communityListId) throws ApiException {
        ApiResponse<BGPCommunityList> resp = readBGPCommunityListWithHttpInfo(logicalRouterId, communityListId);
        return resp.getData();
    }

    /**
     * Read a specific BGP community list from a Logical Router
     * Read a specific BGP community list from a Logical Router 
     * @param logicalRouterId  (required)
     * @param communityListId  (required)
     * @return ApiResponse&lt;BGPCommunityList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BGPCommunityList> readBGPCommunityListWithHttpInfo(String logicalRouterId, String communityListId) throws ApiException {
        com.squareup.okhttp.Call call = readBGPCommunityListValidateBeforeCall(logicalRouterId, communityListId, null, null);
        Type localVarReturnType = new TypeToken<BGPCommunityList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read a specific BGP community list from a Logical Router (asynchronously)
     * Read a specific BGP community list from a Logical Router 
     * @param logicalRouterId  (required)
     * @param communityListId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call readBGPCommunityListAsync(String logicalRouterId, String communityListId, final ApiCallback<BGPCommunityList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = readBGPCommunityListValidateBeforeCall(logicalRouterId, communityListId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BGPCommunityList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for readBgpConfig
     * @param logicalRouterId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call readBgpConfigCall(String logicalRouterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/logical-routers/{logical-router-id}/routing/bgp"
            .replaceAll("\\{" + "logical-router-id" + "\\}", apiClient.escapeString(logicalRouterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call readBgpConfigValidateBeforeCall(String logicalRouterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'logicalRouterId' is set
        if (logicalRouterId == null) {
            throw new ApiException("Missing the required parameter 'logicalRouterId' when calling readBgpConfig(Async)");
        }
        
        com.squareup.okhttp.Call call = readBgpConfigCall(logicalRouterId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read the BGP Configuration on a Logical Router
     * Returns information about the BGP configuration on a specified logical router. Information includes whether or not the BGP configuration is enabled, the AS number, and whether or not graceful restart is enabled. 
     * @param logicalRouterId  (required)
     * @return BgpConfig
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BgpConfig readBgpConfig(String logicalRouterId) throws ApiException {
        ApiResponse<BgpConfig> resp = readBgpConfigWithHttpInfo(logicalRouterId);
        return resp.getData();
    }

    /**
     * Read the BGP Configuration on a Logical Router
     * Returns information about the BGP configuration on a specified logical router. Information includes whether or not the BGP configuration is enabled, the AS number, and whether or not graceful restart is enabled. 
     * @param logicalRouterId  (required)
     * @return ApiResponse&lt;BgpConfig&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BgpConfig> readBgpConfigWithHttpInfo(String logicalRouterId) throws ApiException {
        com.squareup.okhttp.Call call = readBgpConfigValidateBeforeCall(logicalRouterId, null, null);
        Type localVarReturnType = new TypeToken<BgpConfig>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read the BGP Configuration on a Logical Router (asynchronously)
     * Returns information about the BGP configuration on a specified logical router. Information includes whether or not the BGP configuration is enabled, the AS number, and whether or not graceful restart is enabled. 
     * @param logicalRouterId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call readBgpConfigAsync(String logicalRouterId, final ApiCallback<BgpConfig> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = readBgpConfigValidateBeforeCall(logicalRouterId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BgpConfig>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for readBgpNeighbor
     * @param logicalRouterId  (required)
     * @param id  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call readBgpNeighborCall(String logicalRouterId, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/logical-routers/{logical-router-id}/routing/bgp/neighbors/{id}"
            .replaceAll("\\{" + "logical-router-id" + "\\}", apiClient.escapeString(logicalRouterId.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call readBgpNeighborValidateBeforeCall(String logicalRouterId, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'logicalRouterId' is set
        if (logicalRouterId == null) {
            throw new ApiException("Missing the required parameter 'logicalRouterId' when calling readBgpNeighbor(Async)");
        }
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling readBgpNeighbor(Async)");
        }
        
        com.squareup.okhttp.Call call = readBgpNeighborCall(logicalRouterId, id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read a specific BGP Neighbor on a Logical Router
     * Read a specific BGP Neighbor on a Logical Router 
     * @param logicalRouterId  (required)
     * @param id  (required)
     * @return BgpNeighbor
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BgpNeighbor readBgpNeighbor(String logicalRouterId, String id) throws ApiException {
        ApiResponse<BgpNeighbor> resp = readBgpNeighborWithHttpInfo(logicalRouterId, id);
        return resp.getData();
    }

    /**
     * Read a specific BGP Neighbor on a Logical Router
     * Read a specific BGP Neighbor on a Logical Router 
     * @param logicalRouterId  (required)
     * @param id  (required)
     * @return ApiResponse&lt;BgpNeighbor&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BgpNeighbor> readBgpNeighborWithHttpInfo(String logicalRouterId, String id) throws ApiException {
        com.squareup.okhttp.Call call = readBgpNeighborValidateBeforeCall(logicalRouterId, id, null, null);
        Type localVarReturnType = new TypeToken<BgpNeighbor>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read a specific BGP Neighbor on a Logical Router (asynchronously)
     * Read a specific BGP Neighbor on a Logical Router 
     * @param logicalRouterId  (required)
     * @param id  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call readBgpNeighborAsync(String logicalRouterId, String id, final ApiCallback<BgpNeighbor> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = readBgpNeighborValidateBeforeCall(logicalRouterId, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BgpNeighbor>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for readBgpNeighborWithPasswordShowSensitiveData
     * @param logicalRouterId  (required)
     * @param id  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call readBgpNeighborWithPasswordShowSensitiveDataCall(String logicalRouterId, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/logical-routers/{logical-router-id}/routing/bgp/neighbors/{id}?action=show-sensitive-data"
            .replaceAll("\\{" + "logical-router-id" + "\\}", apiClient.escapeString(logicalRouterId.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call readBgpNeighborWithPasswordShowSensitiveDataValidateBeforeCall(String logicalRouterId, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'logicalRouterId' is set
        if (logicalRouterId == null) {
            throw new ApiException("Missing the required parameter 'logicalRouterId' when calling readBgpNeighborWithPasswordShowSensitiveData(Async)");
        }
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling readBgpNeighborWithPasswordShowSensitiveData(Async)");
        }
        
        com.squareup.okhttp.Call call = readBgpNeighborWithPasswordShowSensitiveDataCall(logicalRouterId, id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read a specific BGP Neighbor with password on a Logical Router
     * Read a specific BGP Neighbor details with password on a Logical Router 
     * @param logicalRouterId  (required)
     * @param id  (required)
     * @return BgpNeighbor
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BgpNeighbor readBgpNeighborWithPasswordShowSensitiveData(String logicalRouterId, String id) throws ApiException {
        ApiResponse<BgpNeighbor> resp = readBgpNeighborWithPasswordShowSensitiveDataWithHttpInfo(logicalRouterId, id);
        return resp.getData();
    }

    /**
     * Read a specific BGP Neighbor with password on a Logical Router
     * Read a specific BGP Neighbor details with password on a Logical Router 
     * @param logicalRouterId  (required)
     * @param id  (required)
     * @return ApiResponse&lt;BgpNeighbor&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BgpNeighbor> readBgpNeighborWithPasswordShowSensitiveDataWithHttpInfo(String logicalRouterId, String id) throws ApiException {
        com.squareup.okhttp.Call call = readBgpNeighborWithPasswordShowSensitiveDataValidateBeforeCall(logicalRouterId, id, null, null);
        Type localVarReturnType = new TypeToken<BgpNeighbor>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read a specific BGP Neighbor with password on a Logical Router (asynchronously)
     * Read a specific BGP Neighbor details with password on a Logical Router 
     * @param logicalRouterId  (required)
     * @param id  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call readBgpNeighborWithPasswordShowSensitiveDataAsync(String logicalRouterId, String id, final ApiCallback<BgpNeighbor> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = readBgpNeighborWithPasswordShowSensitiveDataValidateBeforeCall(logicalRouterId, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BgpNeighbor>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for readDADProfile
     * @param dadProfileId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call readDADProfileCall(String dadProfileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ipv6/dad-profiles/{dad-profile-id}"
            .replaceAll("\\{" + "dad-profile-id" + "\\}", apiClient.escapeString(dadProfileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call readDADProfileValidateBeforeCall(String dadProfileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'dadProfileId' is set
        if (dadProfileId == null) {
            throw new ApiException("Missing the required parameter 'dadProfileId' when calling readDADProfile(Async)");
        }
        
        com.squareup.okhttp.Call call = readDADProfileCall(dadProfileId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read specified IPV6 DADProfile
     * Returns information about specified IPv6 DADProfile. 
     * @param dadProfileId  (required)
     * @return DADProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DADProfile readDADProfile(String dadProfileId) throws ApiException {
        ApiResponse<DADProfile> resp = readDADProfileWithHttpInfo(dadProfileId);
        return resp.getData();
    }

    /**
     * Read specified IPV6 DADProfile
     * Returns information about specified IPv6 DADProfile. 
     * @param dadProfileId  (required)
     * @return ApiResponse&lt;DADProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DADProfile> readDADProfileWithHttpInfo(String dadProfileId) throws ApiException {
        com.squareup.okhttp.Call call = readDADProfileValidateBeforeCall(dadProfileId, null, null);
        Type localVarReturnType = new TypeToken<DADProfile>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read specified IPV6 DADProfile (asynchronously)
     * Returns information about specified IPv6 DADProfile. 
     * @param dadProfileId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call readDADProfileAsync(String dadProfileId, final ApiCallback<DADProfile> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = readDADProfileValidateBeforeCall(dadProfileId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DADProfile>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for readDebugInfoText
     * @param logicalRouterId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call readDebugInfoTextCall(String logicalRouterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/logical-routers/{logical-router-id}/debug-info?format=text"
            .replaceAll("\\{" + "logical-router-id" + "\\}", apiClient.escapeString(logicalRouterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain; charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call readDebugInfoTextValidateBeforeCall(String logicalRouterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'logicalRouterId' is set
        if (logicalRouterId == null) {
            throw new ApiException("Missing the required parameter 'logicalRouterId' when calling readDebugInfoText(Async)");
        }
        
        com.squareup.okhttp.Call call = readDebugInfoTextCall(logicalRouterId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read the debug information for the logical router
     * API to download below information as text which will be used for debugging and troubleshooting. 1) Logical router sub-components and ports. 2) Routing configuration as sent to central control plane. 3) TIER1 advertised network information. 
     * @param logicalRouterId  (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String readDebugInfoText(String logicalRouterId) throws ApiException {
        ApiResponse<String> resp = readDebugInfoTextWithHttpInfo(logicalRouterId);
        return resp.getData();
    }

    /**
     * Read the debug information for the logical router
     * API to download below information as text which will be used for debugging and troubleshooting. 1) Logical router sub-components and ports. 2) Routing configuration as sent to central control plane. 3) TIER1 advertised network information. 
     * @param logicalRouterId  (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> readDebugInfoTextWithHttpInfo(String logicalRouterId) throws ApiException {
        com.squareup.okhttp.Call call = readDebugInfoTextValidateBeforeCall(logicalRouterId, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read the debug information for the logical router (asynchronously)
     * API to download below information as text which will be used for debugging and troubleshooting. 1) Logical router sub-components and ports. 2) Routing configuration as sent to central control plane. 3) TIER1 advertised network information. 
     * @param logicalRouterId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call readDebugInfoTextAsync(String logicalRouterId, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = readDebugInfoTextValidateBeforeCall(logicalRouterId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for readIPPrefixList
     * @param logicalRouterId  (required)
     * @param id  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call readIPPrefixListCall(String logicalRouterId, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/logical-routers/{logical-router-id}/routing/ip-prefix-lists/{id}"
            .replaceAll("\\{" + "logical-router-id" + "\\}", apiClient.escapeString(logicalRouterId.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call readIPPrefixListValidateBeforeCall(String logicalRouterId, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'logicalRouterId' is set
        if (logicalRouterId == null) {
            throw new ApiException("Missing the required parameter 'logicalRouterId' when calling readIPPrefixList(Async)");
        }
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling readIPPrefixList(Async)");
        }
        
        com.squareup.okhttp.Call call = readIPPrefixListCall(logicalRouterId, id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get a specific IPPrefixList on a Logical Router
     * Read a specific IPPrefixList on the specified logical router. 
     * @param logicalRouterId  (required)
     * @param id  (required)
     * @return IPPrefixList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public IPPrefixList readIPPrefixList(String logicalRouterId, String id) throws ApiException {
        ApiResponse<IPPrefixList> resp = readIPPrefixListWithHttpInfo(logicalRouterId, id);
        return resp.getData();
    }

    /**
     * Get a specific IPPrefixList on a Logical Router
     * Read a specific IPPrefixList on the specified logical router. 
     * @param logicalRouterId  (required)
     * @param id  (required)
     * @return ApiResponse&lt;IPPrefixList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<IPPrefixList> readIPPrefixListWithHttpInfo(String logicalRouterId, String id) throws ApiException {
        com.squareup.okhttp.Call call = readIPPrefixListValidateBeforeCall(logicalRouterId, id, null, null);
        Type localVarReturnType = new TypeToken<IPPrefixList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a specific IPPrefixList on a Logical Router (asynchronously)
     * Read a specific IPPrefixList on the specified logical router. 
     * @param logicalRouterId  (required)
     * @param id  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call readIPPrefixListAsync(String logicalRouterId, String id, final ApiCallback<IPPrefixList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = readIPPrefixListValidateBeforeCall(logicalRouterId, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<IPPrefixList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for readNDRAProfile
     * @param ndRaProfileId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call readNDRAProfileCall(String ndRaProfileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ipv6/nd-ra-profiles/{nd-ra-profile-id}"
            .replaceAll("\\{" + "nd-ra-profile-id" + "\\}", apiClient.escapeString(ndRaProfileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call readNDRAProfileValidateBeforeCall(String ndRaProfileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'ndRaProfileId' is set
        if (ndRaProfileId == null) {
            throw new ApiException("Missing the required parameter 'ndRaProfileId' when calling readNDRAProfile(Async)");
        }
        
        com.squareup.okhttp.Call call = readNDRAProfileCall(ndRaProfileId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read specified IPV6 NDRA Profile
     * Returns information about specified IPv6 NDRA Profile. 
     * @param ndRaProfileId  (required)
     * @return NDRAProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NDRAProfile readNDRAProfile(String ndRaProfileId) throws ApiException {
        ApiResponse<NDRAProfile> resp = readNDRAProfileWithHttpInfo(ndRaProfileId);
        return resp.getData();
    }

    /**
     * Read specified IPV6 NDRA Profile
     * Returns information about specified IPv6 NDRA Profile. 
     * @param ndRaProfileId  (required)
     * @return ApiResponse&lt;NDRAProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NDRAProfile> readNDRAProfileWithHttpInfo(String ndRaProfileId) throws ApiException {
        com.squareup.okhttp.Call call = readNDRAProfileValidateBeforeCall(ndRaProfileId, null, null);
        Type localVarReturnType = new TypeToken<NDRAProfile>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read specified IPV6 NDRA Profile (asynchronously)
     * Returns information about specified IPv6 NDRA Profile. 
     * @param ndRaProfileId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call readNDRAProfileAsync(String ndRaProfileId, final ApiCallback<NDRAProfile> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = readNDRAProfileValidateBeforeCall(ndRaProfileId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NDRAProfile>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for readRedistributionConfig
     * @param logicalRouterId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call readRedistributionConfigCall(String logicalRouterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/logical-routers/{logical-router-id}/routing/redistribution"
            .replaceAll("\\{" + "logical-router-id" + "\\}", apiClient.escapeString(logicalRouterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call readRedistributionConfigValidateBeforeCall(String logicalRouterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'logicalRouterId' is set
        if (logicalRouterId == null) {
            throw new ApiException("Missing the required parameter 'logicalRouterId' when calling readRedistributionConfig(Async)");
        }
        
        com.squareup.okhttp.Call call = readRedistributionConfigCall(logicalRouterId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read the Redistribution Configuration on a Logical Router
     * Returns information about configured route redistribution for the specified logical router. 
     * @param logicalRouterId  (required)
     * @return RedistributionConfig
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RedistributionConfig readRedistributionConfig(String logicalRouterId) throws ApiException {
        ApiResponse<RedistributionConfig> resp = readRedistributionConfigWithHttpInfo(logicalRouterId);
        return resp.getData();
    }

    /**
     * Read the Redistribution Configuration on a Logical Router
     * Returns information about configured route redistribution for the specified logical router. 
     * @param logicalRouterId  (required)
     * @return ApiResponse&lt;RedistributionConfig&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RedistributionConfig> readRedistributionConfigWithHttpInfo(String logicalRouterId) throws ApiException {
        com.squareup.okhttp.Call call = readRedistributionConfigValidateBeforeCall(logicalRouterId, null, null);
        Type localVarReturnType = new TypeToken<RedistributionConfig>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read the Redistribution Configuration on a Logical Router (asynchronously)
     * Returns information about configured route redistribution for the specified logical router. 
     * @param logicalRouterId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call readRedistributionConfigAsync(String logicalRouterId, final ApiCallback<RedistributionConfig> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = readRedistributionConfigValidateBeforeCall(logicalRouterId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RedistributionConfig>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for readRedistributionRuleList
     * @param logicalRouterId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call readRedistributionRuleListCall(String logicalRouterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/logical-routers/{logical-router-id}/routing/redistribution/rules"
            .replaceAll("\\{" + "logical-router-id" + "\\}", apiClient.escapeString(logicalRouterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call readRedistributionRuleListValidateBeforeCall(String logicalRouterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'logicalRouterId' is set
        if (logicalRouterId == null) {
            throw new ApiException("Missing the required parameter 'logicalRouterId' when calling readRedistributionRuleList(Async)");
        }
        
        com.squareup.okhttp.Call call = readRedistributionRuleListCall(logicalRouterId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read All the Redistribution Rules on a Logical Router
     * Returns all the route redistribution rules for the specified logical router. 
     * @param logicalRouterId  (required)
     * @return RedistributionRuleList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RedistributionRuleList readRedistributionRuleList(String logicalRouterId) throws ApiException {
        ApiResponse<RedistributionRuleList> resp = readRedistributionRuleListWithHttpInfo(logicalRouterId);
        return resp.getData();
    }

    /**
     * Read All the Redistribution Rules on a Logical Router
     * Returns all the route redistribution rules for the specified logical router. 
     * @param logicalRouterId  (required)
     * @return ApiResponse&lt;RedistributionRuleList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RedistributionRuleList> readRedistributionRuleListWithHttpInfo(String logicalRouterId) throws ApiException {
        com.squareup.okhttp.Call call = readRedistributionRuleListValidateBeforeCall(logicalRouterId, null, null);
        Type localVarReturnType = new TypeToken<RedistributionRuleList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read All the Redistribution Rules on a Logical Router (asynchronously)
     * Returns all the route redistribution rules for the specified logical router. 
     * @param logicalRouterId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call readRedistributionRuleListAsync(String logicalRouterId, final ApiCallback<RedistributionRuleList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = readRedistributionRuleListValidateBeforeCall(logicalRouterId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RedistributionRuleList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for readRouteMap
     * @param logicalRouterId  (required)
     * @param id  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call readRouteMapCall(String logicalRouterId, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/logical-routers/{logical-router-id}/routing/route-maps/{id}"
            .replaceAll("\\{" + "logical-router-id" + "\\}", apiClient.escapeString(logicalRouterId.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call readRouteMapValidateBeforeCall(String logicalRouterId, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'logicalRouterId' is set
        if (logicalRouterId == null) {
            throw new ApiException("Missing the required parameter 'logicalRouterId' when calling readRouteMap(Async)");
        }
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling readRouteMap(Async)");
        }
        
        com.squareup.okhttp.Call call = readRouteMapCall(logicalRouterId, id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get a specific RouteMap on a Logical Router
     * Read a specific RouteMap on the specified logical router. 
     * @param logicalRouterId  (required)
     * @param id  (required)
     * @return RouteMap
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RouteMap readRouteMap(String logicalRouterId, String id) throws ApiException {
        ApiResponse<RouteMap> resp = readRouteMapWithHttpInfo(logicalRouterId, id);
        return resp.getData();
    }

    /**
     * Get a specific RouteMap on a Logical Router
     * Read a specific RouteMap on the specified logical router. 
     * @param logicalRouterId  (required)
     * @param id  (required)
     * @return ApiResponse&lt;RouteMap&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RouteMap> readRouteMapWithHttpInfo(String logicalRouterId, String id) throws ApiException {
        com.squareup.okhttp.Call call = readRouteMapValidateBeforeCall(logicalRouterId, id, null, null);
        Type localVarReturnType = new TypeToken<RouteMap>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a specific RouteMap on a Logical Router (asynchronously)
     * Read a specific RouteMap on the specified logical router. 
     * @param logicalRouterId  (required)
     * @param id  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call readRouteMapAsync(String logicalRouterId, String id, final ApiCallback<RouteMap> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = readRouteMapValidateBeforeCall(logicalRouterId, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RouteMap>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for readRoutingConfig
     * @param logicalRouterId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call readRoutingConfigCall(String logicalRouterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/logical-routers/{logical-router-id}/routing"
            .replaceAll("\\{" + "logical-router-id" + "\\}", apiClient.escapeString(logicalRouterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call readRoutingConfigValidateBeforeCall(String logicalRouterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'logicalRouterId' is set
        if (logicalRouterId == null) {
            throw new ApiException("Missing the required parameter 'logicalRouterId' when calling readRoutingConfig(Async)");
        }
        
        com.squareup.okhttp.Call call = readRoutingConfigCall(logicalRouterId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read the Routing Configuration
     * Returns the routing configuration for a specified logical router. 
     * @param logicalRouterId  (required)
     * @return RoutingConfig
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RoutingConfig readRoutingConfig(String logicalRouterId) throws ApiException {
        ApiResponse<RoutingConfig> resp = readRoutingConfigWithHttpInfo(logicalRouterId);
        return resp.getData();
    }

    /**
     * Read the Routing Configuration
     * Returns the routing configuration for a specified logical router. 
     * @param logicalRouterId  (required)
     * @return ApiResponse&lt;RoutingConfig&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RoutingConfig> readRoutingConfigWithHttpInfo(String logicalRouterId) throws ApiException {
        com.squareup.okhttp.Call call = readRoutingConfigValidateBeforeCall(logicalRouterId, null, null);
        Type localVarReturnType = new TypeToken<RoutingConfig>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read the Routing Configuration (asynchronously)
     * Returns the routing configuration for a specified logical router. 
     * @param logicalRouterId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call readRoutingConfigAsync(String logicalRouterId, final ApiCallback<RoutingConfig> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = readRoutingConfigValidateBeforeCall(logicalRouterId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RoutingConfig>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for readStaticRoute
     * @param logicalRouterId  (required)
     * @param id  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call readStaticRouteCall(String logicalRouterId, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/logical-routers/{logical-router-id}/routing/static-routes/{id}"
            .replaceAll("\\{" + "logical-router-id" + "\\}", apiClient.escapeString(logicalRouterId.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call readStaticRouteValidateBeforeCall(String logicalRouterId, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'logicalRouterId' is set
        if (logicalRouterId == null) {
            throw new ApiException("Missing the required parameter 'logicalRouterId' when calling readStaticRoute(Async)");
        }
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling readStaticRoute(Async)");
        }
        
        com.squareup.okhttp.Call call = readStaticRouteCall(logicalRouterId, id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get a specific Static Route on a Logical Router
     * Read a specific static routes on the specified logical router. 
     * @param logicalRouterId  (required)
     * @param id  (required)
     * @return StaticRoute
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StaticRoute readStaticRoute(String logicalRouterId, String id) throws ApiException {
        ApiResponse<StaticRoute> resp = readStaticRouteWithHttpInfo(logicalRouterId, id);
        return resp.getData();
    }

    /**
     * Get a specific Static Route on a Logical Router
     * Read a specific static routes on the specified logical router. 
     * @param logicalRouterId  (required)
     * @param id  (required)
     * @return ApiResponse&lt;StaticRoute&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StaticRoute> readStaticRouteWithHttpInfo(String logicalRouterId, String id) throws ApiException {
        com.squareup.okhttp.Call call = readStaticRouteValidateBeforeCall(logicalRouterId, id, null, null);
        Type localVarReturnType = new TypeToken<StaticRoute>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a specific Static Route on a Logical Router (asynchronously)
     * Read a specific static routes on the specified logical router. 
     * @param logicalRouterId  (required)
     * @param id  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call readStaticRouteAsync(String logicalRouterId, String id, final ApiCallback<StaticRoute> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = readStaticRouteValidateBeforeCall(logicalRouterId, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StaticRoute>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for unSetPasswordOnBgpNeighbor
     * @param logicalRouterId  (required)
     * @param id  (required)
     * @param action  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call unSetPasswordOnBgpNeighborCall(String logicalRouterId, String id, String action, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/logical-routers/{logical-router-id}/routing/bgp/neighbors/{id}"
            .replaceAll("\\{" + "logical-router-id" + "\\}", apiClient.escapeString(logicalRouterId.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (action != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("action", action));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call unSetPasswordOnBgpNeighborValidateBeforeCall(String logicalRouterId, String id, String action, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'logicalRouterId' is set
        if (logicalRouterId == null) {
            throw new ApiException("Missing the required parameter 'logicalRouterId' when calling unSetPasswordOnBgpNeighbor(Async)");
        }
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling unSetPasswordOnBgpNeighbor(Async)");
        }
        
        com.squareup.okhttp.Call call = unSetPasswordOnBgpNeighborCall(logicalRouterId, id, action, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Unset/Delete password property on specific BGP Neighbor on Logical Router
     * Unset/Delete the password property on the specific BGP Neighbor. No other property of the BgpNeighbor can be updated using this API 
     * @param logicalRouterId  (required)
     * @param id  (required)
     * @param action  (optional)
     * @return BgpNeighbor
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BgpNeighbor unSetPasswordOnBgpNeighbor(String logicalRouterId, String id, String action) throws ApiException {
        ApiResponse<BgpNeighbor> resp = unSetPasswordOnBgpNeighborWithHttpInfo(logicalRouterId, id, action);
        return resp.getData();
    }

    /**
     * Unset/Delete password property on specific BGP Neighbor on Logical Router
     * Unset/Delete the password property on the specific BGP Neighbor. No other property of the BgpNeighbor can be updated using this API 
     * @param logicalRouterId  (required)
     * @param id  (required)
     * @param action  (optional)
     * @return ApiResponse&lt;BgpNeighbor&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BgpNeighbor> unSetPasswordOnBgpNeighborWithHttpInfo(String logicalRouterId, String id, String action) throws ApiException {
        com.squareup.okhttp.Call call = unSetPasswordOnBgpNeighborValidateBeforeCall(logicalRouterId, id, action, null, null);
        Type localVarReturnType = new TypeToken<BgpNeighbor>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Unset/Delete password property on specific BGP Neighbor on Logical Router (asynchronously)
     * Unset/Delete the password property on the specific BGP Neighbor. No other property of the BgpNeighbor can be updated using this API 
     * @param logicalRouterId  (required)
     * @param id  (required)
     * @param action  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call unSetPasswordOnBgpNeighborAsync(String logicalRouterId, String id, String action, final ApiCallback<BgpNeighbor> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = unSetPasswordOnBgpNeighborValidateBeforeCall(logicalRouterId, id, action, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BgpNeighbor>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateAdvertiseRuleList
     * @param body  (required)
     * @param logicalRouterId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateAdvertiseRuleListCall(AdvertiseRuleList body, String logicalRouterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/logical-routers/{logical-router-id}/routing/advertisement/rules"
            .replaceAll("\\{" + "logical-router-id" + "\\}", apiClient.escapeString(logicalRouterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateAdvertiseRuleListValidateBeforeCall(AdvertiseRuleList body, String logicalRouterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateAdvertiseRuleList(Async)");
        }
        // verify the required parameter 'logicalRouterId' is set
        if (logicalRouterId == null) {
            throw new ApiException("Missing the required parameter 'logicalRouterId' when calling updateAdvertiseRuleList(Async)");
        }
        
        com.squareup.okhttp.Call call = updateAdvertiseRuleListCall(body, logicalRouterId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update the Advertisement Rules on a Logical Router
     * Modifies the advertisement rules on the specified logical router. The PUT request must include all the rules with the networks parameter. Modifiable parameters are networks, display_name, and description. Set the rules list to empty to delete/clear all rules. 
     * @param body  (required)
     * @param logicalRouterId  (required)
     * @return AdvertiseRuleList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AdvertiseRuleList updateAdvertiseRuleList(AdvertiseRuleList body, String logicalRouterId) throws ApiException {
        ApiResponse<AdvertiseRuleList> resp = updateAdvertiseRuleListWithHttpInfo(body, logicalRouterId);
        return resp.getData();
    }

    /**
     * Update the Advertisement Rules on a Logical Router
     * Modifies the advertisement rules on the specified logical router. The PUT request must include all the rules with the networks parameter. Modifiable parameters are networks, display_name, and description. Set the rules list to empty to delete/clear all rules. 
     * @param body  (required)
     * @param logicalRouterId  (required)
     * @return ApiResponse&lt;AdvertiseRuleList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AdvertiseRuleList> updateAdvertiseRuleListWithHttpInfo(AdvertiseRuleList body, String logicalRouterId) throws ApiException {
        com.squareup.okhttp.Call call = updateAdvertiseRuleListValidateBeforeCall(body, logicalRouterId, null, null);
        Type localVarReturnType = new TypeToken<AdvertiseRuleList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update the Advertisement Rules on a Logical Router (asynchronously)
     * Modifies the advertisement rules on the specified logical router. The PUT request must include all the rules with the networks parameter. Modifiable parameters are networks, display_name, and description. Set the rules list to empty to delete/clear all rules. 
     * @param body  (required)
     * @param logicalRouterId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateAdvertiseRuleListAsync(AdvertiseRuleList body, String logicalRouterId, final ApiCallback<AdvertiseRuleList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateAdvertiseRuleListValidateBeforeCall(body, logicalRouterId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AdvertiseRuleList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateAdvertisementConfig
     * @param body  (required)
     * @param logicalRouterId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateAdvertisementConfigCall(AdvertisementConfig body, String logicalRouterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/logical-routers/{logical-router-id}/routing/advertisement"
            .replaceAll("\\{" + "logical-router-id" + "\\}", apiClient.escapeString(logicalRouterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateAdvertisementConfigValidateBeforeCall(AdvertisementConfig body, String logicalRouterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateAdvertisementConfig(Async)");
        }
        // verify the required parameter 'logicalRouterId' is set
        if (logicalRouterId == null) {
            throw new ApiException("Missing the required parameter 'logicalRouterId' when calling updateAdvertisementConfig(Async)");
        }
        
        com.squareup.okhttp.Call call = updateAdvertisementConfigCall(body, logicalRouterId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update the Advertisement Configuration on a Logical Router
     * Modifies the route advertisement configuration on the specified logical router. 
     * @param body  (required)
     * @param logicalRouterId  (required)
     * @return AdvertisementConfig
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AdvertisementConfig updateAdvertisementConfig(AdvertisementConfig body, String logicalRouterId) throws ApiException {
        ApiResponse<AdvertisementConfig> resp = updateAdvertisementConfigWithHttpInfo(body, logicalRouterId);
        return resp.getData();
    }

    /**
     * Update the Advertisement Configuration on a Logical Router
     * Modifies the route advertisement configuration on the specified logical router. 
     * @param body  (required)
     * @param logicalRouterId  (required)
     * @return ApiResponse&lt;AdvertisementConfig&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AdvertisementConfig> updateAdvertisementConfigWithHttpInfo(AdvertisementConfig body, String logicalRouterId) throws ApiException {
        com.squareup.okhttp.Call call = updateAdvertisementConfigValidateBeforeCall(body, logicalRouterId, null, null);
        Type localVarReturnType = new TypeToken<AdvertisementConfig>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update the Advertisement Configuration on a Logical Router (asynchronously)
     * Modifies the route advertisement configuration on the specified logical router. 
     * @param body  (required)
     * @param logicalRouterId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateAdvertisementConfigAsync(AdvertisementConfig body, String logicalRouterId, final ApiCallback<AdvertisementConfig> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateAdvertisementConfigValidateBeforeCall(body, logicalRouterId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AdvertisementConfig>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateBGPCommunityList
     * @param body  (required)
     * @param logicalRouterId  (required)
     * @param communityListId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateBGPCommunityListCall(BGPCommunityList body, String logicalRouterId, String communityListId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/logical-routers/{logical-router-id}/routing/bgp/community-lists/{community-list-id}"
            .replaceAll("\\{" + "logical-router-id" + "\\}", apiClient.escapeString(logicalRouterId.toString()))
            .replaceAll("\\{" + "community-list-id" + "\\}", apiClient.escapeString(communityListId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateBGPCommunityListValidateBeforeCall(BGPCommunityList body, String logicalRouterId, String communityListId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateBGPCommunityList(Async)");
        }
        // verify the required parameter 'logicalRouterId' is set
        if (logicalRouterId == null) {
            throw new ApiException("Missing the required parameter 'logicalRouterId' when calling updateBGPCommunityList(Async)");
        }
        // verify the required parameter 'communityListId' is set
        if (communityListId == null) {
            throw new ApiException("Missing the required parameter 'communityListId' when calling updateBGPCommunityList(Async)");
        }
        
        com.squareup.okhttp.Call call = updateBGPCommunityListCall(body, logicalRouterId, communityListId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update a specific BGP community list from a Logical Router
     * Update a specific BGP community list from a Logical Router 
     * @param body  (required)
     * @param logicalRouterId  (required)
     * @param communityListId  (required)
     * @return BGPCommunityList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BGPCommunityList updateBGPCommunityList(BGPCommunityList body, String logicalRouterId, String communityListId) throws ApiException {
        ApiResponse<BGPCommunityList> resp = updateBGPCommunityListWithHttpInfo(body, logicalRouterId, communityListId);
        return resp.getData();
    }

    /**
     * Update a specific BGP community list from a Logical Router
     * Update a specific BGP community list from a Logical Router 
     * @param body  (required)
     * @param logicalRouterId  (required)
     * @param communityListId  (required)
     * @return ApiResponse&lt;BGPCommunityList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BGPCommunityList> updateBGPCommunityListWithHttpInfo(BGPCommunityList body, String logicalRouterId, String communityListId) throws ApiException {
        com.squareup.okhttp.Call call = updateBGPCommunityListValidateBeforeCall(body, logicalRouterId, communityListId, null, null);
        Type localVarReturnType = new TypeToken<BGPCommunityList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a specific BGP community list from a Logical Router (asynchronously)
     * Update a specific BGP community list from a Logical Router 
     * @param body  (required)
     * @param logicalRouterId  (required)
     * @param communityListId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateBGPCommunityListAsync(BGPCommunityList body, String logicalRouterId, String communityListId, final ApiCallback<BGPCommunityList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateBGPCommunityListValidateBeforeCall(body, logicalRouterId, communityListId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BGPCommunityList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateBGPCommunityListOld
     * @param body  (required)
     * @param logicalRouterId  (required)
     * @param communityListId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateBGPCommunityListOldCall(BGPCommunityList body, String logicalRouterId, String communityListId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/logical-routers/{logical-router-id}/routing/bgp/communty-lists/{community-list-id}"
            .replaceAll("\\{" + "logical-router-id" + "\\}", apiClient.escapeString(logicalRouterId.toString()))
            .replaceAll("\\{" + "community-list-id" + "\\}", apiClient.escapeString(communityListId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateBGPCommunityListOldValidateBeforeCall(BGPCommunityList body, String logicalRouterId, String communityListId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateBGPCommunityListOld(Async)");
        }
        // verify the required parameter 'logicalRouterId' is set
        if (logicalRouterId == null) {
            throw new ApiException("Missing the required parameter 'logicalRouterId' when calling updateBGPCommunityListOld(Async)");
        }
        // verify the required parameter 'communityListId' is set
        if (communityListId == null) {
            throw new ApiException("Missing the required parameter 'communityListId' when calling updateBGPCommunityListOld(Async)");
        }
        
        com.squareup.okhttp.Call call = updateBGPCommunityListOldCall(body, logicalRouterId, communityListId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update a specific BGP community list from a Logical Router
     * Update a specific BGP community list from a Logical Router 
     * @param body  (required)
     * @param logicalRouterId  (required)
     * @param communityListId  (required)
     * @return BGPCommunityList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BGPCommunityList updateBGPCommunityListOld(BGPCommunityList body, String logicalRouterId, String communityListId) throws ApiException {
        ApiResponse<BGPCommunityList> resp = updateBGPCommunityListOldWithHttpInfo(body, logicalRouterId, communityListId);
        return resp.getData();
    }

    /**
     * Update a specific BGP community list from a Logical Router
     * Update a specific BGP community list from a Logical Router 
     * @param body  (required)
     * @param logicalRouterId  (required)
     * @param communityListId  (required)
     * @return ApiResponse&lt;BGPCommunityList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BGPCommunityList> updateBGPCommunityListOldWithHttpInfo(BGPCommunityList body, String logicalRouterId, String communityListId) throws ApiException {
        com.squareup.okhttp.Call call = updateBGPCommunityListOldValidateBeforeCall(body, logicalRouterId, communityListId, null, null);
        Type localVarReturnType = new TypeToken<BGPCommunityList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a specific BGP community list from a Logical Router (asynchronously)
     * Update a specific BGP community list from a Logical Router 
     * @param body  (required)
     * @param logicalRouterId  (required)
     * @param communityListId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateBGPCommunityListOldAsync(BGPCommunityList body, String logicalRouterId, String communityListId, final ApiCallback<BGPCommunityList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateBGPCommunityListOldValidateBeforeCall(body, logicalRouterId, communityListId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BGPCommunityList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateBgpConfig
     * @param body  (required)
     * @param logicalRouterId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateBgpConfigCall(BgpConfig body, String logicalRouterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/logical-routers/{logical-router-id}/routing/bgp"
            .replaceAll("\\{" + "logical-router-id" + "\\}", apiClient.escapeString(logicalRouterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateBgpConfigValidateBeforeCall(BgpConfig body, String logicalRouterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateBgpConfig(Async)");
        }
        // verify the required parameter 'logicalRouterId' is set
        if (logicalRouterId == null) {
            throw new ApiException("Missing the required parameter 'logicalRouterId' when calling updateBgpConfig(Async)");
        }
        
        com.squareup.okhttp.Call call = updateBgpConfigCall(body, logicalRouterId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update the BGP Configuration on a Logical Router
     * Modifies the BGP configuration on a specified TIER0 logical router. Modifiable parameters include enabled, graceful_restart, as_number. 
     * @param body  (required)
     * @param logicalRouterId  (required)
     * @return BgpConfig
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BgpConfig updateBgpConfig(BgpConfig body, String logicalRouterId) throws ApiException {
        ApiResponse<BgpConfig> resp = updateBgpConfigWithHttpInfo(body, logicalRouterId);
        return resp.getData();
    }

    /**
     * Update the BGP Configuration on a Logical Router
     * Modifies the BGP configuration on a specified TIER0 logical router. Modifiable parameters include enabled, graceful_restart, as_number. 
     * @param body  (required)
     * @param logicalRouterId  (required)
     * @return ApiResponse&lt;BgpConfig&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BgpConfig> updateBgpConfigWithHttpInfo(BgpConfig body, String logicalRouterId) throws ApiException {
        com.squareup.okhttp.Call call = updateBgpConfigValidateBeforeCall(body, logicalRouterId, null, null);
        Type localVarReturnType = new TypeToken<BgpConfig>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update the BGP Configuration on a Logical Router (asynchronously)
     * Modifies the BGP configuration on a specified TIER0 logical router. Modifiable parameters include enabled, graceful_restart, as_number. 
     * @param body  (required)
     * @param logicalRouterId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateBgpConfigAsync(BgpConfig body, String logicalRouterId, final ApiCallback<BgpConfig> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateBgpConfigValidateBeforeCall(body, logicalRouterId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BgpConfig>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateBgpNeighbor
     * @param body  (required)
     * @param logicalRouterId  (required)
     * @param id  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateBgpNeighborCall(BgpNeighbor body, String logicalRouterId, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/logical-routers/{logical-router-id}/routing/bgp/neighbors/{id}"
            .replaceAll("\\{" + "logical-router-id" + "\\}", apiClient.escapeString(logicalRouterId.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateBgpNeighborValidateBeforeCall(BgpNeighbor body, String logicalRouterId, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateBgpNeighbor(Async)");
        }
        // verify the required parameter 'logicalRouterId' is set
        if (logicalRouterId == null) {
            throw new ApiException("Missing the required parameter 'logicalRouterId' when calling updateBgpNeighbor(Async)");
        }
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateBgpNeighbor(Async)");
        }
        
        com.squareup.okhttp.Call call = updateBgpNeighborCall(body, logicalRouterId, id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update a specific BGP Neighbor on a Logical Router
     * Update a specific BGP Neighbor on a Logical Router 
     * @param body  (required)
     * @param logicalRouterId  (required)
     * @param id  (required)
     * @return BgpNeighbor
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BgpNeighbor updateBgpNeighbor(BgpNeighbor body, String logicalRouterId, String id) throws ApiException {
        ApiResponse<BgpNeighbor> resp = updateBgpNeighborWithHttpInfo(body, logicalRouterId, id);
        return resp.getData();
    }

    /**
     * Update a specific BGP Neighbor on a Logical Router
     * Update a specific BGP Neighbor on a Logical Router 
     * @param body  (required)
     * @param logicalRouterId  (required)
     * @param id  (required)
     * @return ApiResponse&lt;BgpNeighbor&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BgpNeighbor> updateBgpNeighborWithHttpInfo(BgpNeighbor body, String logicalRouterId, String id) throws ApiException {
        com.squareup.okhttp.Call call = updateBgpNeighborValidateBeforeCall(body, logicalRouterId, id, null, null);
        Type localVarReturnType = new TypeToken<BgpNeighbor>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a specific BGP Neighbor on a Logical Router (asynchronously)
     * Update a specific BGP Neighbor on a Logical Router 
     * @param body  (required)
     * @param logicalRouterId  (required)
     * @param id  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateBgpNeighborAsync(BgpNeighbor body, String logicalRouterId, String id, final ApiCallback<BgpNeighbor> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateBgpNeighborValidateBeforeCall(body, logicalRouterId, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BgpNeighbor>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateDADProfile
     * @param body  (required)
     * @param dadProfileId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateDADProfileCall(DADProfile body, String dadProfileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/ipv6/dad-profiles/{dad-profile-id}"
            .replaceAll("\\{" + "dad-profile-id" + "\\}", apiClient.escapeString(dadProfileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateDADProfileValidateBeforeCall(DADProfile body, String dadProfileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateDADProfile(Async)");
        }
        // verify the required parameter 'dadProfileId' is set
        if (dadProfileId == null) {
            throw new ApiException("Missing the required parameter 'dadProfileId' when calling updateDADProfile(Async)");
        }
        
        com.squareup.okhttp.Call call = updateDADProfileCall(body, dadProfileId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update DADProfile
     * Update DADProfile. 
     * @param body  (required)
     * @param dadProfileId  (required)
     * @return DADProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DADProfile updateDADProfile(DADProfile body, String dadProfileId) throws ApiException {
        ApiResponse<DADProfile> resp = updateDADProfileWithHttpInfo(body, dadProfileId);
        return resp.getData();
    }

    /**
     * Update DADProfile
     * Update DADProfile. 
     * @param body  (required)
     * @param dadProfileId  (required)
     * @return ApiResponse&lt;DADProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DADProfile> updateDADProfileWithHttpInfo(DADProfile body, String dadProfileId) throws ApiException {
        com.squareup.okhttp.Call call = updateDADProfileValidateBeforeCall(body, dadProfileId, null, null);
        Type localVarReturnType = new TypeToken<DADProfile>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update DADProfile (asynchronously)
     * Update DADProfile. 
     * @param body  (required)
     * @param dadProfileId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateDADProfileAsync(DADProfile body, String dadProfileId, final ApiCallback<DADProfile> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateDADProfileValidateBeforeCall(body, dadProfileId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DADProfile>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateIPPrefixList
     * @param body  (required)
     * @param logicalRouterId  (required)
     * @param id  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateIPPrefixListCall(IPPrefixList body, String logicalRouterId, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/logical-routers/{logical-router-id}/routing/ip-prefix-lists/{id}"
            .replaceAll("\\{" + "logical-router-id" + "\\}", apiClient.escapeString(logicalRouterId.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateIPPrefixListValidateBeforeCall(IPPrefixList body, String logicalRouterId, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateIPPrefixList(Async)");
        }
        // verify the required parameter 'logicalRouterId' is set
        if (logicalRouterId == null) {
            throw new ApiException("Missing the required parameter 'logicalRouterId' when calling updateIPPrefixList(Async)");
        }
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateIPPrefixList(Async)");
        }
        
        com.squareup.okhttp.Call call = updateIPPrefixListCall(body, logicalRouterId, id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update a specific IPPrefixList on a Logical Router
     * Update a specific IPPrefixList on the specified logical router. 
     * @param body  (required)
     * @param logicalRouterId  (required)
     * @param id  (required)
     * @return IPPrefixList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public IPPrefixList updateIPPrefixList(IPPrefixList body, String logicalRouterId, String id) throws ApiException {
        ApiResponse<IPPrefixList> resp = updateIPPrefixListWithHttpInfo(body, logicalRouterId, id);
        return resp.getData();
    }

    /**
     * Update a specific IPPrefixList on a Logical Router
     * Update a specific IPPrefixList on the specified logical router. 
     * @param body  (required)
     * @param logicalRouterId  (required)
     * @param id  (required)
     * @return ApiResponse&lt;IPPrefixList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<IPPrefixList> updateIPPrefixListWithHttpInfo(IPPrefixList body, String logicalRouterId, String id) throws ApiException {
        com.squareup.okhttp.Call call = updateIPPrefixListValidateBeforeCall(body, logicalRouterId, id, null, null);
        Type localVarReturnType = new TypeToken<IPPrefixList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a specific IPPrefixList on a Logical Router (asynchronously)
     * Update a specific IPPrefixList on the specified logical router. 
     * @param body  (required)
     * @param logicalRouterId  (required)
     * @param id  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateIPPrefixListAsync(IPPrefixList body, String logicalRouterId, String id, final ApiCallback<IPPrefixList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateIPPrefixListValidateBeforeCall(body, logicalRouterId, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<IPPrefixList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateNDRAProfile
     * @param body  (required)
     * @param ndRaProfileId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateNDRAProfileCall(NDRAProfile body, String ndRaProfileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/ipv6/nd-ra-profiles/{nd-ra-profile-id}"
            .replaceAll("\\{" + "nd-ra-profile-id" + "\\}", apiClient.escapeString(ndRaProfileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateNDRAProfileValidateBeforeCall(NDRAProfile body, String ndRaProfileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateNDRAProfile(Async)");
        }
        // verify the required parameter 'ndRaProfileId' is set
        if (ndRaProfileId == null) {
            throw new ApiException("Missing the required parameter 'ndRaProfileId' when calling updateNDRAProfile(Async)");
        }
        
        com.squareup.okhttp.Call call = updateNDRAProfileCall(body, ndRaProfileId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update NDRA Profile
     * Update NDRAProfile 
     * @param body  (required)
     * @param ndRaProfileId  (required)
     * @return NDRAProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NDRAProfile updateNDRAProfile(NDRAProfile body, String ndRaProfileId) throws ApiException {
        ApiResponse<NDRAProfile> resp = updateNDRAProfileWithHttpInfo(body, ndRaProfileId);
        return resp.getData();
    }

    /**
     * Update NDRA Profile
     * Update NDRAProfile 
     * @param body  (required)
     * @param ndRaProfileId  (required)
     * @return ApiResponse&lt;NDRAProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NDRAProfile> updateNDRAProfileWithHttpInfo(NDRAProfile body, String ndRaProfileId) throws ApiException {
        com.squareup.okhttp.Call call = updateNDRAProfileValidateBeforeCall(body, ndRaProfileId, null, null);
        Type localVarReturnType = new TypeToken<NDRAProfile>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update NDRA Profile (asynchronously)
     * Update NDRAProfile 
     * @param body  (required)
     * @param ndRaProfileId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateNDRAProfileAsync(NDRAProfile body, String ndRaProfileId, final ApiCallback<NDRAProfile> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateNDRAProfileValidateBeforeCall(body, ndRaProfileId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NDRAProfile>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateRedistributionConfig
     * @param body  (required)
     * @param logicalRouterId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateRedistributionConfigCall(RedistributionConfig body, String logicalRouterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/logical-routers/{logical-router-id}/routing/redistribution"
            .replaceAll("\\{" + "logical-router-id" + "\\}", apiClient.escapeString(logicalRouterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateRedistributionConfigValidateBeforeCall(RedistributionConfig body, String logicalRouterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateRedistributionConfig(Async)");
        }
        // verify the required parameter 'logicalRouterId' is set
        if (logicalRouterId == null) {
            throw new ApiException("Missing the required parameter 'logicalRouterId' when calling updateRedistributionConfig(Async)");
        }
        
        com.squareup.okhttp.Call call = updateRedistributionConfigCall(body, logicalRouterId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update the Redistribution Configuration on a Logical Router
     * Modifies existing route redistribution rules for the specified TIER0 logical router. 
     * @param body  (required)
     * @param logicalRouterId  (required)
     * @return RedistributionConfig
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RedistributionConfig updateRedistributionConfig(RedistributionConfig body, String logicalRouterId) throws ApiException {
        ApiResponse<RedistributionConfig> resp = updateRedistributionConfigWithHttpInfo(body, logicalRouterId);
        return resp.getData();
    }

    /**
     * Update the Redistribution Configuration on a Logical Router
     * Modifies existing route redistribution rules for the specified TIER0 logical router. 
     * @param body  (required)
     * @param logicalRouterId  (required)
     * @return ApiResponse&lt;RedistributionConfig&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RedistributionConfig> updateRedistributionConfigWithHttpInfo(RedistributionConfig body, String logicalRouterId) throws ApiException {
        com.squareup.okhttp.Call call = updateRedistributionConfigValidateBeforeCall(body, logicalRouterId, null, null);
        Type localVarReturnType = new TypeToken<RedistributionConfig>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update the Redistribution Configuration on a Logical Router (asynchronously)
     * Modifies existing route redistribution rules for the specified TIER0 logical router. 
     * @param body  (required)
     * @param logicalRouterId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateRedistributionConfigAsync(RedistributionConfig body, String logicalRouterId, final ApiCallback<RedistributionConfig> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateRedistributionConfigValidateBeforeCall(body, logicalRouterId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RedistributionConfig>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateRedistributionRuleList
     * @param body  (required)
     * @param logicalRouterId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateRedistributionRuleListCall(RedistributionRuleList body, String logicalRouterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/logical-routers/{logical-router-id}/routing/redistribution/rules"
            .replaceAll("\\{" + "logical-router-id" + "\\}", apiClient.escapeString(logicalRouterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateRedistributionRuleListValidateBeforeCall(RedistributionRuleList body, String logicalRouterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateRedistributionRuleList(Async)");
        }
        // verify the required parameter 'logicalRouterId' is set
        if (logicalRouterId == null) {
            throw new ApiException("Missing the required parameter 'logicalRouterId' when calling updateRedistributionRuleList(Async)");
        }
        
        com.squareup.okhttp.Call call = updateRedistributionRuleListCall(body, logicalRouterId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update All the Redistribution Rules on a Logical Router
     * Modifies all route redistribution rules for the specified TIER0 logical router. Set the rules list to empty to delete/clear all rules. 
     * @param body  (required)
     * @param logicalRouterId  (required)
     * @return RedistributionRuleList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RedistributionRuleList updateRedistributionRuleList(RedistributionRuleList body, String logicalRouterId) throws ApiException {
        ApiResponse<RedistributionRuleList> resp = updateRedistributionRuleListWithHttpInfo(body, logicalRouterId);
        return resp.getData();
    }

    /**
     * Update All the Redistribution Rules on a Logical Router
     * Modifies all route redistribution rules for the specified TIER0 logical router. Set the rules list to empty to delete/clear all rules. 
     * @param body  (required)
     * @param logicalRouterId  (required)
     * @return ApiResponse&lt;RedistributionRuleList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RedistributionRuleList> updateRedistributionRuleListWithHttpInfo(RedistributionRuleList body, String logicalRouterId) throws ApiException {
        com.squareup.okhttp.Call call = updateRedistributionRuleListValidateBeforeCall(body, logicalRouterId, null, null);
        Type localVarReturnType = new TypeToken<RedistributionRuleList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update All the Redistribution Rules on a Logical Router (asynchronously)
     * Modifies all route redistribution rules for the specified TIER0 logical router. Set the rules list to empty to delete/clear all rules. 
     * @param body  (required)
     * @param logicalRouterId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateRedistributionRuleListAsync(RedistributionRuleList body, String logicalRouterId, final ApiCallback<RedistributionRuleList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateRedistributionRuleListValidateBeforeCall(body, logicalRouterId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RedistributionRuleList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateRouteMap
     * @param body  (required)
     * @param logicalRouterId  (required)
     * @param id  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateRouteMapCall(RouteMap body, String logicalRouterId, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/logical-routers/{logical-router-id}/routing/route-maps/{id}"
            .replaceAll("\\{" + "logical-router-id" + "\\}", apiClient.escapeString(logicalRouterId.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateRouteMapValidateBeforeCall(RouteMap body, String logicalRouterId, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateRouteMap(Async)");
        }
        // verify the required parameter 'logicalRouterId' is set
        if (logicalRouterId == null) {
            throw new ApiException("Missing the required parameter 'logicalRouterId' when calling updateRouteMap(Async)");
        }
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateRouteMap(Async)");
        }
        
        com.squareup.okhttp.Call call = updateRouteMapCall(body, logicalRouterId, id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update a specific RouteMap on a Logical Router
     * Update a specific RouteMap on the specified logical router. 
     * @param body  (required)
     * @param logicalRouterId  (required)
     * @param id  (required)
     * @return RouteMap
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RouteMap updateRouteMap(RouteMap body, String logicalRouterId, String id) throws ApiException {
        ApiResponse<RouteMap> resp = updateRouteMapWithHttpInfo(body, logicalRouterId, id);
        return resp.getData();
    }

    /**
     * Update a specific RouteMap on a Logical Router
     * Update a specific RouteMap on the specified logical router. 
     * @param body  (required)
     * @param logicalRouterId  (required)
     * @param id  (required)
     * @return ApiResponse&lt;RouteMap&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RouteMap> updateRouteMapWithHttpInfo(RouteMap body, String logicalRouterId, String id) throws ApiException {
        com.squareup.okhttp.Call call = updateRouteMapValidateBeforeCall(body, logicalRouterId, id, null, null);
        Type localVarReturnType = new TypeToken<RouteMap>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a specific RouteMap on a Logical Router (asynchronously)
     * Update a specific RouteMap on the specified logical router. 
     * @param body  (required)
     * @param logicalRouterId  (required)
     * @param id  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateRouteMapAsync(RouteMap body, String logicalRouterId, String id, final ApiCallback<RouteMap> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateRouteMapValidateBeforeCall(body, logicalRouterId, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RouteMap>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateRoutingConfig
     * @param body  (required)
     * @param logicalRouterId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateRoutingConfigCall(RoutingConfig body, String logicalRouterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/logical-routers/{logical-router-id}/routing"
            .replaceAll("\\{" + "logical-router-id" + "\\}", apiClient.escapeString(logicalRouterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateRoutingConfigValidateBeforeCall(RoutingConfig body, String logicalRouterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateRoutingConfig(Async)");
        }
        // verify the required parameter 'logicalRouterId' is set
        if (logicalRouterId == null) {
            throw new ApiException("Missing the required parameter 'logicalRouterId' when calling updateRoutingConfig(Async)");
        }
        
        com.squareup.okhttp.Call call = updateRoutingConfigCall(body, logicalRouterId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update the Routing Configuration
     * Modifies the routing configuration for a specified logical router. 
     * @param body  (required)
     * @param logicalRouterId  (required)
     * @return RoutingConfig
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RoutingConfig updateRoutingConfig(RoutingConfig body, String logicalRouterId) throws ApiException {
        ApiResponse<RoutingConfig> resp = updateRoutingConfigWithHttpInfo(body, logicalRouterId);
        return resp.getData();
    }

    /**
     * Update the Routing Configuration
     * Modifies the routing configuration for a specified logical router. 
     * @param body  (required)
     * @param logicalRouterId  (required)
     * @return ApiResponse&lt;RoutingConfig&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RoutingConfig> updateRoutingConfigWithHttpInfo(RoutingConfig body, String logicalRouterId) throws ApiException {
        com.squareup.okhttp.Call call = updateRoutingConfigValidateBeforeCall(body, logicalRouterId, null, null);
        Type localVarReturnType = new TypeToken<RoutingConfig>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update the Routing Configuration (asynchronously)
     * Modifies the routing configuration for a specified logical router. 
     * @param body  (required)
     * @param logicalRouterId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateRoutingConfigAsync(RoutingConfig body, String logicalRouterId, final ApiCallback<RoutingConfig> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateRoutingConfigValidateBeforeCall(body, logicalRouterId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RoutingConfig>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateStaticRoute
     * @param body  (required)
     * @param logicalRouterId  (required)
     * @param id  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateStaticRouteCall(StaticRoute body, String logicalRouterId, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/logical-routers/{logical-router-id}/routing/static-routes/{id}"
            .replaceAll("\\{" + "logical-router-id" + "\\}", apiClient.escapeString(logicalRouterId.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateStaticRouteValidateBeforeCall(StaticRoute body, String logicalRouterId, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateStaticRoute(Async)");
        }
        // verify the required parameter 'logicalRouterId' is set
        if (logicalRouterId == null) {
            throw new ApiException("Missing the required parameter 'logicalRouterId' when calling updateStaticRoute(Async)");
        }
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateStaticRoute(Async)");
        }
        
        com.squareup.okhttp.Call call = updateStaticRouteCall(body, logicalRouterId, id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update a specific Static Route Rule on a Logical Router
     * Update a specific static route on the specified logical router. 
     * @param body  (required)
     * @param logicalRouterId  (required)
     * @param id  (required)
     * @return StaticRoute
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StaticRoute updateStaticRoute(StaticRoute body, String logicalRouterId, String id) throws ApiException {
        ApiResponse<StaticRoute> resp = updateStaticRouteWithHttpInfo(body, logicalRouterId, id);
        return resp.getData();
    }

    /**
     * Update a specific Static Route Rule on a Logical Router
     * Update a specific static route on the specified logical router. 
     * @param body  (required)
     * @param logicalRouterId  (required)
     * @param id  (required)
     * @return ApiResponse&lt;StaticRoute&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StaticRoute> updateStaticRouteWithHttpInfo(StaticRoute body, String logicalRouterId, String id) throws ApiException {
        com.squareup.okhttp.Call call = updateStaticRouteValidateBeforeCall(body, logicalRouterId, id, null, null);
        Type localVarReturnType = new TypeToken<StaticRoute>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a specific Static Route Rule on a Logical Router (asynchronously)
     * Update a specific static route on the specified logical router. 
     * @param body  (required)
     * @param logicalRouterId  (required)
     * @param id  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateStaticRouteAsync(StaticRoute body, String logicalRouterId, String id, final ApiCallback<StaticRoute> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateStaticRouteValidateBeforeCall(body, logicalRouterId, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StaticRoute>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
