/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ApiError;
import io.swagger.client.model.ComputeCollection;
import io.swagger.client.model.ComputeCollectionFabricTemplate;
import io.swagger.client.model.ComputeCollectionFabricTemplateListResult;
import io.swagger.client.model.ComputeCollectionListResult;
import io.swagger.client.model.ComputeCollectionNetworkInterfacesListResult;
import io.swagger.client.model.HostNodeStatusListResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ManagementPlaneApiFabricComputeCollectionsApi {
    private ApiClient apiClient;

    public ManagementPlaneApiFabricComputeCollectionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ManagementPlaneApiFabricComputeCollectionsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createComputeCollectionFabricTemplate
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createComputeCollectionFabricTemplateCall(ComputeCollectionFabricTemplate body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/fabric/compute-collection-fabric-templates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createComputeCollectionFabricTemplateValidateBeforeCall(ComputeCollectionFabricTemplate body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createComputeCollectionFabricTemplate(Async)");
        }
        
        com.squareup.okhttp.Call call = createComputeCollectionFabricTemplateCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create a compute collection fabric template
     * Fabric templates are fabric configurations applied at the compute collection level. This configurations is used to decide what automated operations should be a run when a host membership changes.
     * @param body  (required)
     * @return ComputeCollectionFabricTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ComputeCollectionFabricTemplate createComputeCollectionFabricTemplate(ComputeCollectionFabricTemplate body) throws ApiException {
        ApiResponse<ComputeCollectionFabricTemplate> resp = createComputeCollectionFabricTemplateWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create a compute collection fabric template
     * Fabric templates are fabric configurations applied at the compute collection level. This configurations is used to decide what automated operations should be a run when a host membership changes.
     * @param body  (required)
     * @return ApiResponse&lt;ComputeCollectionFabricTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ComputeCollectionFabricTemplate> createComputeCollectionFabricTemplateWithHttpInfo(ComputeCollectionFabricTemplate body) throws ApiException {
        com.squareup.okhttp.Call call = createComputeCollectionFabricTemplateValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<ComputeCollectionFabricTemplate>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a compute collection fabric template (asynchronously)
     * Fabric templates are fabric configurations applied at the compute collection level. This configurations is used to decide what automated operations should be a run when a host membership changes.
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createComputeCollectionFabricTemplateAsync(ComputeCollectionFabricTemplate body, final ApiCallback<ComputeCollectionFabricTemplate> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createComputeCollectionFabricTemplateValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ComputeCollectionFabricTemplate>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteComputeCollectionFabricTemplate
     * @param fabricTemplateId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteComputeCollectionFabricTemplateCall(String fabricTemplateId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/fabric/compute-collection-fabric-templates/{fabric-template-id}"
            .replaceAll("\\{" + "fabric-template-id" + "\\}", apiClient.escapeString(fabricTemplateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteComputeCollectionFabricTemplateValidateBeforeCall(String fabricTemplateId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'fabricTemplateId' is set
        if (fabricTemplateId == null) {
            throw new ApiException("Missing the required parameter 'fabricTemplateId' when calling deleteComputeCollectionFabricTemplate(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteComputeCollectionFabricTemplateCall(fabricTemplateId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Deletes compute collection fabric template
     * Deletes compute collection fabric template for the given id
     * @param fabricTemplateId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteComputeCollectionFabricTemplate(String fabricTemplateId) throws ApiException {
        deleteComputeCollectionFabricTemplateWithHttpInfo(fabricTemplateId);
    }

    /**
     * Deletes compute collection fabric template
     * Deletes compute collection fabric template for the given id
     * @param fabricTemplateId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteComputeCollectionFabricTemplateWithHttpInfo(String fabricTemplateId) throws ApiException {
        com.squareup.okhttp.Call call = deleteComputeCollectionFabricTemplateValidateBeforeCall(fabricTemplateId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Deletes compute collection fabric template (asynchronously)
     * Deletes compute collection fabric template for the given id
     * @param fabricTemplateId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteComputeCollectionFabricTemplateAsync(String fabricTemplateId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteComputeCollectionFabricTemplateValidateBeforeCall(fabricTemplateId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getComputeCollectionFabricTemplate
     * @param fabricTemplateId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getComputeCollectionFabricTemplateCall(String fabricTemplateId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/fabric/compute-collection-fabric-templates/{fabric-template-id}"
            .replaceAll("\\{" + "fabric-template-id" + "\\}", apiClient.escapeString(fabricTemplateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getComputeCollectionFabricTemplateValidateBeforeCall(String fabricTemplateId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'fabricTemplateId' is set
        if (fabricTemplateId == null) {
            throw new ApiException("Missing the required parameter 'fabricTemplateId' when calling getComputeCollectionFabricTemplate(Async)");
        }
        
        com.squareup.okhttp.Call call = getComputeCollectionFabricTemplateCall(fabricTemplateId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get compute collection fabric template by id
     * Get compute collection fabric template for the given id
     * @param fabricTemplateId  (required)
     * @return ComputeCollectionFabricTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ComputeCollectionFabricTemplate getComputeCollectionFabricTemplate(String fabricTemplateId) throws ApiException {
        ApiResponse<ComputeCollectionFabricTemplate> resp = getComputeCollectionFabricTemplateWithHttpInfo(fabricTemplateId);
        return resp.getData();
    }

    /**
     * Get compute collection fabric template by id
     * Get compute collection fabric template for the given id
     * @param fabricTemplateId  (required)
     * @return ApiResponse&lt;ComputeCollectionFabricTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ComputeCollectionFabricTemplate> getComputeCollectionFabricTemplateWithHttpInfo(String fabricTemplateId) throws ApiException {
        com.squareup.okhttp.Call call = getComputeCollectionFabricTemplateValidateBeforeCall(fabricTemplateId, null, null);
        Type localVarReturnType = new TypeToken<ComputeCollectionFabricTemplate>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get compute collection fabric template by id (asynchronously)
     * Get compute collection fabric template for the given id
     * @param fabricTemplateId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getComputeCollectionFabricTemplateAsync(String fabricTemplateId, final ApiCallback<ComputeCollectionFabricTemplate> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getComputeCollectionFabricTemplateValidateBeforeCall(fabricTemplateId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ComputeCollectionFabricTemplate>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getHostNodeStatusOnComputeCollection
     * @param ccExtId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getHostNodeStatusOnComputeCollectionCall(String ccExtId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/fabric/compute-collections/{cc-ext-id}/member-status"
            .replaceAll("\\{" + "cc-ext-id" + "\\}", apiClient.escapeString(ccExtId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getHostNodeStatusOnComputeCollectionValidateBeforeCall(String ccExtId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'ccExtId' is set
        if (ccExtId == null) {
            throw new ApiException("Missing the required parameter 'ccExtId' when calling getHostNodeStatusOnComputeCollection(Async)");
        }
        
        com.squareup.okhttp.Call call = getHostNodeStatusOnComputeCollectionCall(ccExtId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get status of member host nodes of the compute-collection. Only nsx prepared host nodes in the specified compute-collection are included in the response. cc-ext-id should be of type VC_Cluster.
     * Get status of member host nodes of the compute-collection. Only nsx prepared host nodes in the specified compute-collection are included in the response. cc-ext-id should be of type VC_Cluster.
     * @param ccExtId  (required)
     * @return HostNodeStatusListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HostNodeStatusListResult getHostNodeStatusOnComputeCollection(String ccExtId) throws ApiException {
        ApiResponse<HostNodeStatusListResult> resp = getHostNodeStatusOnComputeCollectionWithHttpInfo(ccExtId);
        return resp.getData();
    }

    /**
     * Get status of member host nodes of the compute-collection. Only nsx prepared host nodes in the specified compute-collection are included in the response. cc-ext-id should be of type VC_Cluster.
     * Get status of member host nodes of the compute-collection. Only nsx prepared host nodes in the specified compute-collection are included in the response. cc-ext-id should be of type VC_Cluster.
     * @param ccExtId  (required)
     * @return ApiResponse&lt;HostNodeStatusListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HostNodeStatusListResult> getHostNodeStatusOnComputeCollectionWithHttpInfo(String ccExtId) throws ApiException {
        com.squareup.okhttp.Call call = getHostNodeStatusOnComputeCollectionValidateBeforeCall(ccExtId, null, null);
        Type localVarReturnType = new TypeToken<HostNodeStatusListResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get status of member host nodes of the compute-collection. Only nsx prepared host nodes in the specified compute-collection are included in the response. cc-ext-id should be of type VC_Cluster. (asynchronously)
     * Get status of member host nodes of the compute-collection. Only nsx prepared host nodes in the specified compute-collection are included in the response. cc-ext-id should be of type VC_Cluster.
     * @param ccExtId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getHostNodeStatusOnComputeCollectionAsync(String ccExtId, final ApiCallback<HostNodeStatusListResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getHostNodeStatusOnComputeCollectionValidateBeforeCall(ccExtId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HostNodeStatusListResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listComputeCollectionFabricTemplates
     * @param computeCollectionId Compute collection id (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listComputeCollectionFabricTemplatesCall(String computeCollectionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/fabric/compute-collection-fabric-templates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (computeCollectionId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("compute_collection_id", computeCollectionId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listComputeCollectionFabricTemplatesValidateBeforeCall(String computeCollectionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listComputeCollectionFabricTemplatesCall(computeCollectionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get compute collection fabric templates
     * Returns compute collection fabric templates
     * @param computeCollectionId Compute collection id (optional)
     * @return ComputeCollectionFabricTemplateListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ComputeCollectionFabricTemplateListResult listComputeCollectionFabricTemplates(String computeCollectionId) throws ApiException {
        ApiResponse<ComputeCollectionFabricTemplateListResult> resp = listComputeCollectionFabricTemplatesWithHttpInfo(computeCollectionId);
        return resp.getData();
    }

    /**
     * Get compute collection fabric templates
     * Returns compute collection fabric templates
     * @param computeCollectionId Compute collection id (optional)
     * @return ApiResponse&lt;ComputeCollectionFabricTemplateListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ComputeCollectionFabricTemplateListResult> listComputeCollectionFabricTemplatesWithHttpInfo(String computeCollectionId) throws ApiException {
        com.squareup.okhttp.Call call = listComputeCollectionFabricTemplatesValidateBeforeCall(computeCollectionId, null, null);
        Type localVarReturnType = new TypeToken<ComputeCollectionFabricTemplateListResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get compute collection fabric templates (asynchronously)
     * Returns compute collection fabric templates
     * @param computeCollectionId Compute collection id (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listComputeCollectionFabricTemplatesAsync(String computeCollectionId, final ApiCallback<ComputeCollectionFabricTemplateListResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listComputeCollectionFabricTemplatesValidateBeforeCall(computeCollectionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ComputeCollectionFabricTemplateListResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listComputeCollectionPhysicalNetworkInterfaces
     * @param ccExtId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listComputeCollectionPhysicalNetworkInterfacesCall(String ccExtId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/fabric/compute-collections/{cc-ext-id}/network/physical-interfaces"
            .replaceAll("\\{" + "cc-ext-id" + "\\}", apiClient.escapeString(ccExtId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listComputeCollectionPhysicalNetworkInterfacesValidateBeforeCall(String ccExtId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'ccExtId' is set
        if (ccExtId == null) {
            throw new ApiException("Missing the required parameter 'ccExtId' when calling listComputeCollectionPhysicalNetworkInterfaces(Async)");
        }
        
        com.squareup.okhttp.Call call = listComputeCollectionPhysicalNetworkInterfacesCall(ccExtId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List the Physical Network Interface for all discovered nodes
     * Returns list of physical network interfaces for all discovered nodes in compute collection. Interface information includes PNIC name, hostswitch name it&#x27;s attached to(if any) and MAC address. 
     * @param ccExtId  (required)
     * @return ComputeCollectionNetworkInterfacesListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ComputeCollectionNetworkInterfacesListResult listComputeCollectionPhysicalNetworkInterfaces(String ccExtId) throws ApiException {
        ApiResponse<ComputeCollectionNetworkInterfacesListResult> resp = listComputeCollectionPhysicalNetworkInterfacesWithHttpInfo(ccExtId);
        return resp.getData();
    }

    /**
     * List the Physical Network Interface for all discovered nodes
     * Returns list of physical network interfaces for all discovered nodes in compute collection. Interface information includes PNIC name, hostswitch name it&#x27;s attached to(if any) and MAC address. 
     * @param ccExtId  (required)
     * @return ApiResponse&lt;ComputeCollectionNetworkInterfacesListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ComputeCollectionNetworkInterfacesListResult> listComputeCollectionPhysicalNetworkInterfacesWithHttpInfo(String ccExtId) throws ApiException {
        com.squareup.okhttp.Call call = listComputeCollectionPhysicalNetworkInterfacesValidateBeforeCall(ccExtId, null, null);
        Type localVarReturnType = new TypeToken<ComputeCollectionNetworkInterfacesListResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List the Physical Network Interface for all discovered nodes (asynchronously)
     * Returns list of physical network interfaces for all discovered nodes in compute collection. Interface information includes PNIC name, hostswitch name it&#x27;s attached to(if any) and MAC address. 
     * @param ccExtId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listComputeCollectionPhysicalNetworkInterfacesAsync(String ccExtId, final ApiCallback<ComputeCollectionNetworkInterfacesListResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listComputeCollectionPhysicalNetworkInterfacesValidateBeforeCall(ccExtId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ComputeCollectionNetworkInterfacesListResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listComputeCollections
     * @param cmLocalId Local Id of the compute collection in the Compute Manager (optional)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param discoveredNodeId Id of the discovered node which belongs to this Compute Collection  (optional)
     * @param displayName Name of the ComputeCollection in source compute manager (optional)
     * @param externalId External ID of the ComputeCollection in the source Compute manager, e.g. mo-ref in VC  (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param nodeId Id of the fabric node created from a discovered node belonging to this Compute Collection  (optional)
     * @param originId Id of the compute manager from where this Compute Collection was discovered (optional)
     * @param originType ComputeCollection type like VC_Cluster. Here the Compute Manager type prefix would help in differentiating similar named Compute Collection types from different Compute Managers  (optional)
     * @param ownerId Id of the owner of compute collection in the Compute Manager (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listComputeCollectionsCall(String cmLocalId, String cursor, String discoveredNodeId, String displayName, String externalId, String includedFields, String nodeId, String originId, String originType, String ownerId, Long pageSize, Boolean sortAscending, String sortBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/fabric/compute-collections";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (cmLocalId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cm_local_id", cmLocalId));
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (discoveredNodeId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("discovered_node_id", discoveredNodeId));
        if (displayName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("display_name", displayName));
        if (externalId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("external_id", externalId));
        if (includedFields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("included_fields", includedFields));
        if (nodeId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("node_id", nodeId));
        if (originId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("origin_id", originId));
        if (originType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("origin_type", originType));
        if (ownerId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("owner_id", ownerId));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page_size", pageSize));
        if (sortAscending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_ascending", sortAscending));
        if (sortBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_by", sortBy));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listComputeCollectionsValidateBeforeCall(String cmLocalId, String cursor, String discoveredNodeId, String displayName, String externalId, String includedFields, String nodeId, String originId, String originType, String ownerId, Long pageSize, Boolean sortAscending, String sortBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listComputeCollectionsCall(cmLocalId, cursor, discoveredNodeId, displayName, externalId, includedFields, nodeId, originId, originType, ownerId, pageSize, sortAscending, sortBy, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Return the List of Compute Collections
     * Returns information about all compute collections.
     * @param cmLocalId Local Id of the compute collection in the Compute Manager (optional)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param discoveredNodeId Id of the discovered node which belongs to this Compute Collection  (optional)
     * @param displayName Name of the ComputeCollection in source compute manager (optional)
     * @param externalId External ID of the ComputeCollection in the source Compute manager, e.g. mo-ref in VC  (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param nodeId Id of the fabric node created from a discovered node belonging to this Compute Collection  (optional)
     * @param originId Id of the compute manager from where this Compute Collection was discovered (optional)
     * @param originType ComputeCollection type like VC_Cluster. Here the Compute Manager type prefix would help in differentiating similar named Compute Collection types from different Compute Managers  (optional)
     * @param ownerId Id of the owner of compute collection in the Compute Manager (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @return ComputeCollectionListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ComputeCollectionListResult listComputeCollections(String cmLocalId, String cursor, String discoveredNodeId, String displayName, String externalId, String includedFields, String nodeId, String originId, String originType, String ownerId, Long pageSize, Boolean sortAscending, String sortBy) throws ApiException {
        ApiResponse<ComputeCollectionListResult> resp = listComputeCollectionsWithHttpInfo(cmLocalId, cursor, discoveredNodeId, displayName, externalId, includedFields, nodeId, originId, originType, ownerId, pageSize, sortAscending, sortBy);
        return resp.getData();
    }

    /**
     * Return the List of Compute Collections
     * Returns information about all compute collections.
     * @param cmLocalId Local Id of the compute collection in the Compute Manager (optional)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param discoveredNodeId Id of the discovered node which belongs to this Compute Collection  (optional)
     * @param displayName Name of the ComputeCollection in source compute manager (optional)
     * @param externalId External ID of the ComputeCollection in the source Compute manager, e.g. mo-ref in VC  (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param nodeId Id of the fabric node created from a discovered node belonging to this Compute Collection  (optional)
     * @param originId Id of the compute manager from where this Compute Collection was discovered (optional)
     * @param originType ComputeCollection type like VC_Cluster. Here the Compute Manager type prefix would help in differentiating similar named Compute Collection types from different Compute Managers  (optional)
     * @param ownerId Id of the owner of compute collection in the Compute Manager (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @return ApiResponse&lt;ComputeCollectionListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ComputeCollectionListResult> listComputeCollectionsWithHttpInfo(String cmLocalId, String cursor, String discoveredNodeId, String displayName, String externalId, String includedFields, String nodeId, String originId, String originType, String ownerId, Long pageSize, Boolean sortAscending, String sortBy) throws ApiException {
        com.squareup.okhttp.Call call = listComputeCollectionsValidateBeforeCall(cmLocalId, cursor, discoveredNodeId, displayName, externalId, includedFields, nodeId, originId, originType, ownerId, pageSize, sortAscending, sortBy, null, null);
        Type localVarReturnType = new TypeToken<ComputeCollectionListResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Return the List of Compute Collections (asynchronously)
     * Returns information about all compute collections.
     * @param cmLocalId Local Id of the compute collection in the Compute Manager (optional)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param discoveredNodeId Id of the discovered node which belongs to this Compute Collection  (optional)
     * @param displayName Name of the ComputeCollection in source compute manager (optional)
     * @param externalId External ID of the ComputeCollection in the source Compute manager, e.g. mo-ref in VC  (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param nodeId Id of the fabric node created from a discovered node belonging to this Compute Collection  (optional)
     * @param originId Id of the compute manager from where this Compute Collection was discovered (optional)
     * @param originType ComputeCollection type like VC_Cluster. Here the Compute Manager type prefix would help in differentiating similar named Compute Collection types from different Compute Managers  (optional)
     * @param ownerId Id of the owner of compute collection in the Compute Manager (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listComputeCollectionsAsync(String cmLocalId, String cursor, String discoveredNodeId, String displayName, String externalId, String includedFields, String nodeId, String originId, String originType, String ownerId, Long pageSize, Boolean sortAscending, String sortBy, final ApiCallback<ComputeCollectionListResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listComputeCollectionsValidateBeforeCall(cmLocalId, cursor, discoveredNodeId, displayName, externalId, includedFields, nodeId, originId, originType, ownerId, pageSize, sortAscending, sortBy, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ComputeCollectionListResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for performActionOnComputeCollection
     * @param ccExtId  (required)
     * @param action Supported actions on compute-collection (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call performActionOnComputeCollectionCall(String ccExtId, String action, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/fabric/compute-collections/{cc-ext-id}"
            .replaceAll("\\{" + "cc-ext-id" + "\\}", apiClient.escapeString(ccExtId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (action != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("action", action));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call performActionOnComputeCollectionValidateBeforeCall(String ccExtId, String action, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'ccExtId' is set
        if (ccExtId == null) {
            throw new ApiException("Missing the required parameter 'ccExtId' when calling performActionOnComputeCollection(Async)");
        }
        
        com.squareup.okhttp.Call call = performActionOnComputeCollectionCall(ccExtId, action, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Perform action specific to NSX on the compute-collection. cc-ext-id should be of type VC_Cluster.
     * Perform action specific to NSX on the compute-collection. cc-ext-id should be of type VC_Cluster.
     * @param ccExtId  (required)
     * @param action Supported actions on compute-collection (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void performActionOnComputeCollection(String ccExtId, String action) throws ApiException {
        performActionOnComputeCollectionWithHttpInfo(ccExtId, action);
    }

    /**
     * Perform action specific to NSX on the compute-collection. cc-ext-id should be of type VC_Cluster.
     * Perform action specific to NSX on the compute-collection. cc-ext-id should be of type VC_Cluster.
     * @param ccExtId  (required)
     * @param action Supported actions on compute-collection (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> performActionOnComputeCollectionWithHttpInfo(String ccExtId, String action) throws ApiException {
        com.squareup.okhttp.Call call = performActionOnComputeCollectionValidateBeforeCall(ccExtId, action, null, null);
        return apiClient.execute(call);
    }

    /**
     * Perform action specific to NSX on the compute-collection. cc-ext-id should be of type VC_Cluster. (asynchronously)
     * Perform action specific to NSX on the compute-collection. cc-ext-id should be of type VC_Cluster.
     * @param ccExtId  (required)
     * @param action Supported actions on compute-collection (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call performActionOnComputeCollectionAsync(String ccExtId, String action, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = performActionOnComputeCollectionValidateBeforeCall(ccExtId, action, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for readComputeCollection
     * @param ccExtId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call readComputeCollectionCall(String ccExtId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/fabric/compute-collections/{cc-ext-id}"
            .replaceAll("\\{" + "cc-ext-id" + "\\}", apiClient.escapeString(ccExtId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call readComputeCollectionValidateBeforeCall(String ccExtId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'ccExtId' is set
        if (ccExtId == null) {
            throw new ApiException("Missing the required parameter 'ccExtId' when calling readComputeCollection(Async)");
        }
        
        com.squareup.okhttp.Call call = readComputeCollectionCall(ccExtId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Return Compute Collection Information
     * Returns information about a specific compute collection.
     * @param ccExtId  (required)
     * @return ComputeCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ComputeCollection readComputeCollection(String ccExtId) throws ApiException {
        ApiResponse<ComputeCollection> resp = readComputeCollectionWithHttpInfo(ccExtId);
        return resp.getData();
    }

    /**
     * Return Compute Collection Information
     * Returns information about a specific compute collection.
     * @param ccExtId  (required)
     * @return ApiResponse&lt;ComputeCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ComputeCollection> readComputeCollectionWithHttpInfo(String ccExtId) throws ApiException {
        com.squareup.okhttp.Call call = readComputeCollectionValidateBeforeCall(ccExtId, null, null);
        Type localVarReturnType = new TypeToken<ComputeCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Return Compute Collection Information (asynchronously)
     * Returns information about a specific compute collection.
     * @param ccExtId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call readComputeCollectionAsync(String ccExtId, final ApiCallback<ComputeCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = readComputeCollectionValidateBeforeCall(ccExtId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ComputeCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateComputeCollectionFabricTemplate
     * @param body  (required)
     * @param fabricTemplateId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateComputeCollectionFabricTemplateCall(ComputeCollectionFabricTemplate body, String fabricTemplateId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/fabric/compute-collection-fabric-templates/{fabric-template-id}"
            .replaceAll("\\{" + "fabric-template-id" + "\\}", apiClient.escapeString(fabricTemplateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateComputeCollectionFabricTemplateValidateBeforeCall(ComputeCollectionFabricTemplate body, String fabricTemplateId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateComputeCollectionFabricTemplate(Async)");
        }
        // verify the required parameter 'fabricTemplateId' is set
        if (fabricTemplateId == null) {
            throw new ApiException("Missing the required parameter 'fabricTemplateId' when calling updateComputeCollectionFabricTemplate(Async)");
        }
        
        com.squareup.okhttp.Call call = updateComputeCollectionFabricTemplateCall(body, fabricTemplateId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Updates compute collection fabric template
     * Updates compute collection fabric template for the given id
     * @param body  (required)
     * @param fabricTemplateId  (required)
     * @return ComputeCollectionFabricTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ComputeCollectionFabricTemplate updateComputeCollectionFabricTemplate(ComputeCollectionFabricTemplate body, String fabricTemplateId) throws ApiException {
        ApiResponse<ComputeCollectionFabricTemplate> resp = updateComputeCollectionFabricTemplateWithHttpInfo(body, fabricTemplateId);
        return resp.getData();
    }

    /**
     * Updates compute collection fabric template
     * Updates compute collection fabric template for the given id
     * @param body  (required)
     * @param fabricTemplateId  (required)
     * @return ApiResponse&lt;ComputeCollectionFabricTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ComputeCollectionFabricTemplate> updateComputeCollectionFabricTemplateWithHttpInfo(ComputeCollectionFabricTemplate body, String fabricTemplateId) throws ApiException {
        com.squareup.okhttp.Call call = updateComputeCollectionFabricTemplateValidateBeforeCall(body, fabricTemplateId, null, null);
        Type localVarReturnType = new TypeToken<ComputeCollectionFabricTemplate>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates compute collection fabric template (asynchronously)
     * Updates compute collection fabric template for the given id
     * @param body  (required)
     * @param fabricTemplateId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateComputeCollectionFabricTemplateAsync(ComputeCollectionFabricTemplate body, String fabricTemplateId, final ApiCallback<ComputeCollectionFabricTemplate> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateComputeCollectionFabricTemplateValidateBeforeCall(body, fabricTemplateId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ComputeCollectionFabricTemplate>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
