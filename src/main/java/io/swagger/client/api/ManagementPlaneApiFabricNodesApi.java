/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ApiError;
import io.swagger.client.model.ConfigurationState;
import io.swagger.client.model.Node;
import io.swagger.client.model.NodeCapabilitiesResult;
import io.swagger.client.model.NodeInterfaceProperties;
import io.swagger.client.model.NodeInterfacePropertiesListResult;
import io.swagger.client.model.NodeInterfaceStatisticsProperties;
import io.swagger.client.model.NodeListResult;
import io.swagger.client.model.NodeStatus;
import io.swagger.client.model.NodeStatusListResult;
import io.swagger.client.model.SoftwareModuleResult;
import io.swagger.client.model.SupportedHostOSListResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ManagementPlaneApiFabricNodesApi {
    private ApiClient apiClient;

    public ManagementPlaneApiFabricNodesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ManagementPlaneApiFabricNodesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addNode
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addNodeCall(Node body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/fabric/nodes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addNodeValidateBeforeCall(Node body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addNode(Async)");
        }
        
        com.squareup.okhttp.Call call = addNodeCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Register and Install NSX Components on a Node
     * Creates a host node (hypervisor) or edge node (router) in the transport network.  When you run this command for a host, NSX Manager attempts to install the NSX kernel modules, which are packaged as VIB, RPM, or DEB files. For the installation to succeed, you must provide the host login credentials and the host thumbprint.  To get the ESXi host thumbprint, SSH to the host and run the &lt;b&gt;openssl x509 -in /etc/vmware/ssl/rui.crt -fingerprint -sha256 -noout&lt;/b&gt; command.  To generate host key thumbprint using SHA-256 algorithm please follow the steps below.  Log into the host, making sure that the connection is not vulnerable to a man in the middle attack. Check whether a public key already exists. Host public key is generally located at &#x27;/etc/ssh/ssh_host_rsa_key.pub&#x27;. If the key is not present then generate a new key by running the following command and follow the instructions.  &lt;b&gt;ssh-keygen -t rsa&lt;/b&gt;  Now generate a SHA256 hash of the key using the following command. Please make sure to pass the appropriate file name if the public key is stored with a different file name other than the default &#x27;id_rsa.pub&#x27;.  &lt;b&gt;awk &#x27;{print $2}&#x27; id_rsa.pub | base64 -d | sha256sum -b | sed &#x27;s/ .*$//&#x27; | xxd -r -p | base64&lt;/b&gt; This api is deprecated as part of FN+TN unification. Please use Transport Node API POST /transport-nodes to install NSX components on a node. 
     * @param body  (required)
     * @return Node
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Node addNode(Node body) throws ApiException {
        ApiResponse<Node> resp = addNodeWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Register and Install NSX Components on a Node
     * Creates a host node (hypervisor) or edge node (router) in the transport network.  When you run this command for a host, NSX Manager attempts to install the NSX kernel modules, which are packaged as VIB, RPM, or DEB files. For the installation to succeed, you must provide the host login credentials and the host thumbprint.  To get the ESXi host thumbprint, SSH to the host and run the &lt;b&gt;openssl x509 -in /etc/vmware/ssl/rui.crt -fingerprint -sha256 -noout&lt;/b&gt; command.  To generate host key thumbprint using SHA-256 algorithm please follow the steps below.  Log into the host, making sure that the connection is not vulnerable to a man in the middle attack. Check whether a public key already exists. Host public key is generally located at &#x27;/etc/ssh/ssh_host_rsa_key.pub&#x27;. If the key is not present then generate a new key by running the following command and follow the instructions.  &lt;b&gt;ssh-keygen -t rsa&lt;/b&gt;  Now generate a SHA256 hash of the key using the following command. Please make sure to pass the appropriate file name if the public key is stored with a different file name other than the default &#x27;id_rsa.pub&#x27;.  &lt;b&gt;awk &#x27;{print $2}&#x27; id_rsa.pub | base64 -d | sha256sum -b | sed &#x27;s/ .*$//&#x27; | xxd -r -p | base64&lt;/b&gt; This api is deprecated as part of FN+TN unification. Please use Transport Node API POST /transport-nodes to install NSX components on a node. 
     * @param body  (required)
     * @return ApiResponse&lt;Node&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Node> addNodeWithHttpInfo(Node body) throws ApiException {
        com.squareup.okhttp.Call call = addNodeValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<Node>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Register and Install NSX Components on a Node (asynchronously)
     * Creates a host node (hypervisor) or edge node (router) in the transport network.  When you run this command for a host, NSX Manager attempts to install the NSX kernel modules, which are packaged as VIB, RPM, or DEB files. For the installation to succeed, you must provide the host login credentials and the host thumbprint.  To get the ESXi host thumbprint, SSH to the host and run the &lt;b&gt;openssl x509 -in /etc/vmware/ssl/rui.crt -fingerprint -sha256 -noout&lt;/b&gt; command.  To generate host key thumbprint using SHA-256 algorithm please follow the steps below.  Log into the host, making sure that the connection is not vulnerable to a man in the middle attack. Check whether a public key already exists. Host public key is generally located at &#x27;/etc/ssh/ssh_host_rsa_key.pub&#x27;. If the key is not present then generate a new key by running the following command and follow the instructions.  &lt;b&gt;ssh-keygen -t rsa&lt;/b&gt;  Now generate a SHA256 hash of the key using the following command. Please make sure to pass the appropriate file name if the public key is stored with a different file name other than the default &#x27;id_rsa.pub&#x27;.  &lt;b&gt;awk &#x27;{print $2}&#x27; id_rsa.pub | base64 -d | sha256sum -b | sed &#x27;s/ .*$//&#x27; | xxd -r -p | base64&lt;/b&gt; This api is deprecated as part of FN+TN unification. Please use Transport Node API POST /transport-nodes to install NSX components on a node. 
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addNodeAsync(Node body, final ApiCallback<Node> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addNodeValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Node>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteNode
     * @param nodeId  (required)
     * @param unprepareHost Delete a host and uninstall NSX components (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteNodeCall(String nodeId, Boolean unprepareHost, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/fabric/nodes/{node-id}"
            .replaceAll("\\{" + "node-id" + "\\}", apiClient.escapeString(nodeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (unprepareHost != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("unprepare_host", unprepareHost));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteNodeValidateBeforeCall(String nodeId, Boolean unprepareHost, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'nodeId' is set
        if (nodeId == null) {
            throw new ApiException("Missing the required parameter 'nodeId' when calling deleteNode(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteNodeCall(nodeId, unprepareHost, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete a Node
     * Removes a specified fabric node (host or edge). A fabric node may only be deleted when it is no longer referenced by a Transport Node. If unprepare_host option is set to false, the host will be deleted without uninstalling the NSX components from the host. This api is deprecated, use Transport Node API DELETE /transport-nodes/&amp;lt;transport-node-id&amp;gt; to delete FN. DELETE /transport-nodes/&lt;transport-node-id&gt; to delete FN. 
     * @param nodeId  (required)
     * @param unprepareHost Delete a host and uninstall NSX components (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteNode(String nodeId, Boolean unprepareHost) throws ApiException {
        deleteNodeWithHttpInfo(nodeId, unprepareHost);
    }

    /**
     * Delete a Node
     * Removes a specified fabric node (host or edge). A fabric node may only be deleted when it is no longer referenced by a Transport Node. If unprepare_host option is set to false, the host will be deleted without uninstalling the NSX components from the host. This api is deprecated, use Transport Node API DELETE /transport-nodes/&amp;lt;transport-node-id&amp;gt; to delete FN. DELETE /transport-nodes/&lt;transport-node-id&gt; to delete FN. 
     * @param nodeId  (required)
     * @param unprepareHost Delete a host and uninstall NSX components (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteNodeWithHttpInfo(String nodeId, Boolean unprepareHost) throws ApiException {
        com.squareup.okhttp.Call call = deleteNodeValidateBeforeCall(nodeId, unprepareHost, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a Node (asynchronously)
     * Removes a specified fabric node (host or edge). A fabric node may only be deleted when it is no longer referenced by a Transport Node. If unprepare_host option is set to false, the host will be deleted without uninstalling the NSX components from the host. This api is deprecated, use Transport Node API DELETE /transport-nodes/&amp;lt;transport-node-id&amp;gt; to delete FN. DELETE /transport-nodes/&lt;transport-node-id&gt; to delete FN. 
     * @param nodeId  (required)
     * @param unprepareHost Delete a host and uninstall NSX components (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteNodeAsync(String nodeId, Boolean unprepareHost, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteNodeValidateBeforeCall(nodeId, unprepareHost, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getFabricNodeModules
     * @param nodeId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFabricNodeModulesCall(String nodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/fabric/nodes/{node-id}/modules"
            .replaceAll("\\{" + "node-id" + "\\}", apiClient.escapeString(nodeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFabricNodeModulesValidateBeforeCall(String nodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'nodeId' is set
        if (nodeId == null) {
            throw new ApiException("Missing the required parameter 'nodeId' when calling getFabricNodeModules(Async)");
        }
        
        com.squareup.okhttp.Call call = getFabricNodeModulesCall(nodeId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the module details of a Fabric Node This api is deprecated, use Transport Node API GET /transport-nodes/&amp;lt;transportnode-id&amp;gt;/modules to get fabric node modules. 
     * Get the module details of a Fabric Node This api is deprecated, use Transport Node API GET /transport-nodes/&amp;lt;transportnode-id&amp;gt;/modules to get fabric node modules. 
     * @param nodeId  (required)
     * @return SoftwareModuleResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SoftwareModuleResult getFabricNodeModules(String nodeId) throws ApiException {
        ApiResponse<SoftwareModuleResult> resp = getFabricNodeModulesWithHttpInfo(nodeId);
        return resp.getData();
    }

    /**
     * Get the module details of a Fabric Node This api is deprecated, use Transport Node API GET /transport-nodes/&amp;lt;transportnode-id&amp;gt;/modules to get fabric node modules. 
     * Get the module details of a Fabric Node This api is deprecated, use Transport Node API GET /transport-nodes/&amp;lt;transportnode-id&amp;gt;/modules to get fabric node modules. 
     * @param nodeId  (required)
     * @return ApiResponse&lt;SoftwareModuleResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SoftwareModuleResult> getFabricNodeModulesWithHttpInfo(String nodeId) throws ApiException {
        com.squareup.okhttp.Call call = getFabricNodeModulesValidateBeforeCall(nodeId, null, null);
        Type localVarReturnType = new TypeToken<SoftwareModuleResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the module details of a Fabric Node This api is deprecated, use Transport Node API GET /transport-nodes/&amp;lt;transportnode-id&amp;gt;/modules to get fabric node modules.  (asynchronously)
     * Get the module details of a Fabric Node This api is deprecated, use Transport Node API GET /transport-nodes/&amp;lt;transportnode-id&amp;gt;/modules to get fabric node modules. 
     * @param nodeId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFabricNodeModulesAsync(String nodeId, final ApiCallback<SoftwareModuleResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFabricNodeModulesValidateBeforeCall(nodeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SoftwareModuleResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFabricNodeState
     * @param nodeId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFabricNodeStateCall(String nodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/fabric/nodes/{node-id}/state"
            .replaceAll("\\{" + "node-id" + "\\}", apiClient.escapeString(nodeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFabricNodeStateValidateBeforeCall(String nodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'nodeId' is set
        if (nodeId == null) {
            throw new ApiException("Missing the required parameter 'nodeId' when calling getFabricNodeState(Async)");
        }
        
        com.squareup.okhttp.Call call = getFabricNodeStateCall(nodeId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the Realized State of a Fabric Node.
     * For edge nodes, returns the current install state when deployment is in progress, NODE_READY when deployment is complete and the failure state when deployment has failed. This api is deprecated. Please use /transport-nodes/&amp;lt;transportnode-id&amp;gt;/state to get realized state of a Fabric Node. 
     * @param nodeId  (required)
     * @return ConfigurationState
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConfigurationState getFabricNodeState(String nodeId) throws ApiException {
        ApiResponse<ConfigurationState> resp = getFabricNodeStateWithHttpInfo(nodeId);
        return resp.getData();
    }

    /**
     * Get the Realized State of a Fabric Node.
     * For edge nodes, returns the current install state when deployment is in progress, NODE_READY when deployment is complete and the failure state when deployment has failed. This api is deprecated. Please use /transport-nodes/&amp;lt;transportnode-id&amp;gt;/state to get realized state of a Fabric Node. 
     * @param nodeId  (required)
     * @return ApiResponse&lt;ConfigurationState&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConfigurationState> getFabricNodeStateWithHttpInfo(String nodeId) throws ApiException {
        com.squareup.okhttp.Call call = getFabricNodeStateValidateBeforeCall(nodeId, null, null);
        Type localVarReturnType = new TypeToken<ConfigurationState>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the Realized State of a Fabric Node. (asynchronously)
     * For edge nodes, returns the current install state when deployment is in progress, NODE_READY when deployment is complete and the failure state when deployment has failed. This api is deprecated. Please use /transport-nodes/&amp;lt;transportnode-id&amp;gt;/state to get realized state of a Fabric Node. 
     * @param nodeId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFabricNodeStateAsync(String nodeId, final ApiCallback<ConfigurationState> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFabricNodeStateValidateBeforeCall(nodeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConfigurationState>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSupportedHostOSTypes
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSupportedHostOSTypesCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/fabric/ostypes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSupportedHostOSTypesValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getSupportedHostOSTypesCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Return list of supported host OS types
     * Returns names of all supported host OS.
     * @return SupportedHostOSListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SupportedHostOSListResult getSupportedHostOSTypes() throws ApiException {
        ApiResponse<SupportedHostOSListResult> resp = getSupportedHostOSTypesWithHttpInfo();
        return resp.getData();
    }

    /**
     * Return list of supported host OS types
     * Returns names of all supported host OS.
     * @return ApiResponse&lt;SupportedHostOSListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SupportedHostOSListResult> getSupportedHostOSTypesWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getSupportedHostOSTypesValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<SupportedHostOSListResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Return list of supported host OS types (asynchronously)
     * Returns names of all supported host OS.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSupportedHostOSTypesAsync(final ApiCallback<SupportedHostOSListResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSupportedHostOSTypesValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SupportedHostOSListResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listFabricNodeInterfaces
     * @param nodeId  (required)
     * @param source Data source type. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listFabricNodeInterfacesCall(String nodeId, String source, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/fabric/nodes/{node-id}/network/interfaces"
            .replaceAll("\\{" + "node-id" + "\\}", apiClient.escapeString(nodeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (source != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("source", source));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listFabricNodeInterfacesValidateBeforeCall(String nodeId, String source, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'nodeId' is set
        if (nodeId == null) {
            throw new ApiException("Missing the required parameter 'nodeId' when calling listFabricNodeInterfaces(Async)");
        }
        
        com.squareup.okhttp.Call call = listFabricNodeInterfacesCall(nodeId, source, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List the specified node&#x27;s Network Interfaces
     * Returns the number of interfaces on the node and detailed information about each interface. Interface information includes MTU, broadcast and host IP addresses, link and admin status, MAC address, network mask, and the IP configuration method (static or DHCP). This api is deprecated. Please use Transport Node API GET /transport-nodes/&lt;transport-node-id&gt;/network/interfaces to list node network interfaces for the corresponding TN. 
     * @param nodeId  (required)
     * @param source Data source type. (optional)
     * @return NodeInterfacePropertiesListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeInterfacePropertiesListResult listFabricNodeInterfaces(String nodeId, String source) throws ApiException {
        ApiResponse<NodeInterfacePropertiesListResult> resp = listFabricNodeInterfacesWithHttpInfo(nodeId, source);
        return resp.getData();
    }

    /**
     * List the specified node&#x27;s Network Interfaces
     * Returns the number of interfaces on the node and detailed information about each interface. Interface information includes MTU, broadcast and host IP addresses, link and admin status, MAC address, network mask, and the IP configuration method (static or DHCP). This api is deprecated. Please use Transport Node API GET /transport-nodes/&lt;transport-node-id&gt;/network/interfaces to list node network interfaces for the corresponding TN. 
     * @param nodeId  (required)
     * @param source Data source type. (optional)
     * @return ApiResponse&lt;NodeInterfacePropertiesListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeInterfacePropertiesListResult> listFabricNodeInterfacesWithHttpInfo(String nodeId, String source) throws ApiException {
        com.squareup.okhttp.Call call = listFabricNodeInterfacesValidateBeforeCall(nodeId, source, null, null);
        Type localVarReturnType = new TypeToken<NodeInterfacePropertiesListResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List the specified node&#x27;s Network Interfaces (asynchronously)
     * Returns the number of interfaces on the node and detailed information about each interface. Interface information includes MTU, broadcast and host IP addresses, link and admin status, MAC address, network mask, and the IP configuration method (static or DHCP). This api is deprecated. Please use Transport Node API GET /transport-nodes/&lt;transport-node-id&gt;/network/interfaces to list node network interfaces for the corresponding TN. 
     * @param nodeId  (required)
     * @param source Data source type. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listFabricNodeInterfacesAsync(String nodeId, String source, final ApiCallback<NodeInterfacePropertiesListResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listFabricNodeInterfacesValidateBeforeCall(nodeId, source, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeInterfacePropertiesListResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listNodeCapabilities
     * @param nodeId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listNodeCapabilitiesCall(String nodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/fabric/nodes/{node-id}/capabilities"
            .replaceAll("\\{" + "node-id" + "\\}", apiClient.escapeString(nodeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listNodeCapabilitiesValidateBeforeCall(String nodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'nodeId' is set
        if (nodeId == null) {
            throw new ApiException("Missing the required parameter 'nodeId' when calling listNodeCapabilities(Async)");
        }
        
        com.squareup.okhttp.Call call = listNodeCapabilitiesCall(nodeId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Return the List of Capabilities of a Single Node
     * Returns information about capabilities of a single fabric host node. Edge nodes do not have capabilities. This api is deprecated, use GET /transport-nodes/&amp;lt;transportnode-id&amp;gt;/capabilities if FN is converted to TN.
     * @param nodeId  (required)
     * @return NodeCapabilitiesResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeCapabilitiesResult listNodeCapabilities(String nodeId) throws ApiException {
        ApiResponse<NodeCapabilitiesResult> resp = listNodeCapabilitiesWithHttpInfo(nodeId);
        return resp.getData();
    }

    /**
     * Return the List of Capabilities of a Single Node
     * Returns information about capabilities of a single fabric host node. Edge nodes do not have capabilities. This api is deprecated, use GET /transport-nodes/&amp;lt;transportnode-id&amp;gt;/capabilities if FN is converted to TN.
     * @param nodeId  (required)
     * @return ApiResponse&lt;NodeCapabilitiesResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeCapabilitiesResult> listNodeCapabilitiesWithHttpInfo(String nodeId) throws ApiException {
        com.squareup.okhttp.Call call = listNodeCapabilitiesValidateBeforeCall(nodeId, null, null);
        Type localVarReturnType = new TypeToken<NodeCapabilitiesResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Return the List of Capabilities of a Single Node (asynchronously)
     * Returns information about capabilities of a single fabric host node. Edge nodes do not have capabilities. This api is deprecated, use GET /transport-nodes/&amp;lt;transportnode-id&amp;gt;/capabilities if FN is converted to TN.
     * @param nodeId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listNodeCapabilitiesAsync(String nodeId, final ApiCallback<NodeCapabilitiesResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listNodeCapabilitiesValidateBeforeCall(nodeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeCapabilitiesResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listNodes
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param discoveredNodeId Id of the discovered node which was converted to create this node (optional)
     * @param displayName HostNode display name (optional)
     * @param externalId HostNode external id (optional)
     * @param hardwareId Hardware Id of the host (optional)
     * @param hypervisorOsType HostNode&#x27;s Hypervisor type, for example ESXi, RHEL KVM or UBUNTU KVM. (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param ipAddress Management IP address of the node (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param resourceType Node type from &#x27;HostNode&#x27;, &#x27;EdgeNode&#x27;, &#x27;PublicCloudGatewayNode&#x27; (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listNodesCall(String cursor, String discoveredNodeId, String displayName, String externalId, String hardwareId, String hypervisorOsType, String includedFields, String ipAddress, Long pageSize, String resourceType, Boolean sortAscending, String sortBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/fabric/nodes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (discoveredNodeId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("discovered_node_id", discoveredNodeId));
        if (displayName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("display_name", displayName));
        if (externalId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("external_id", externalId));
        if (hardwareId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("hardware_id", hardwareId));
        if (hypervisorOsType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("hypervisor_os_type", hypervisorOsType));
        if (includedFields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("included_fields", includedFields));
        if (ipAddress != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ip_address", ipAddress));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page_size", pageSize));
        if (resourceType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("resource_type", resourceType));
        if (sortAscending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_ascending", sortAscending));
        if (sortBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_by", sortBy));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listNodesValidateBeforeCall(String cursor, String discoveredNodeId, String displayName, String externalId, String hardwareId, String hypervisorOsType, String includedFields, String ipAddress, Long pageSize, String resourceType, Boolean sortAscending, String sortBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listNodesCall(cursor, discoveredNodeId, displayName, externalId, hardwareId, hypervisorOsType, includedFields, ipAddress, pageSize, resourceType, sortAscending, sortBy, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Return the List of Nodes
     * Returns information about all fabric nodes (hosts and edges). This api is deprecated as part of FN+TN unification. Please use Transport Node API GET /transport-nodes to list all fabric nodes. 
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param discoveredNodeId Id of the discovered node which was converted to create this node (optional)
     * @param displayName HostNode display name (optional)
     * @param externalId HostNode external id (optional)
     * @param hardwareId Hardware Id of the host (optional)
     * @param hypervisorOsType HostNode&#x27;s Hypervisor type, for example ESXi, RHEL KVM or UBUNTU KVM. (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param ipAddress Management IP address of the node (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param resourceType Node type from &#x27;HostNode&#x27;, &#x27;EdgeNode&#x27;, &#x27;PublicCloudGatewayNode&#x27; (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @return NodeListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeListResult listNodes(String cursor, String discoveredNodeId, String displayName, String externalId, String hardwareId, String hypervisorOsType, String includedFields, String ipAddress, Long pageSize, String resourceType, Boolean sortAscending, String sortBy) throws ApiException {
        ApiResponse<NodeListResult> resp = listNodesWithHttpInfo(cursor, discoveredNodeId, displayName, externalId, hardwareId, hypervisorOsType, includedFields, ipAddress, pageSize, resourceType, sortAscending, sortBy);
        return resp.getData();
    }

    /**
     * Return the List of Nodes
     * Returns information about all fabric nodes (hosts and edges). This api is deprecated as part of FN+TN unification. Please use Transport Node API GET /transport-nodes to list all fabric nodes. 
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param discoveredNodeId Id of the discovered node which was converted to create this node (optional)
     * @param displayName HostNode display name (optional)
     * @param externalId HostNode external id (optional)
     * @param hardwareId Hardware Id of the host (optional)
     * @param hypervisorOsType HostNode&#x27;s Hypervisor type, for example ESXi, RHEL KVM or UBUNTU KVM. (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param ipAddress Management IP address of the node (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param resourceType Node type from &#x27;HostNode&#x27;, &#x27;EdgeNode&#x27;, &#x27;PublicCloudGatewayNode&#x27; (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @return ApiResponse&lt;NodeListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeListResult> listNodesWithHttpInfo(String cursor, String discoveredNodeId, String displayName, String externalId, String hardwareId, String hypervisorOsType, String includedFields, String ipAddress, Long pageSize, String resourceType, Boolean sortAscending, String sortBy) throws ApiException {
        com.squareup.okhttp.Call call = listNodesValidateBeforeCall(cursor, discoveredNodeId, displayName, externalId, hardwareId, hypervisorOsType, includedFields, ipAddress, pageSize, resourceType, sortAscending, sortBy, null, null);
        Type localVarReturnType = new TypeToken<NodeListResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Return the List of Nodes (asynchronously)
     * Returns information about all fabric nodes (hosts and edges). This api is deprecated as part of FN+TN unification. Please use Transport Node API GET /transport-nodes to list all fabric nodes. 
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param discoveredNodeId Id of the discovered node which was converted to create this node (optional)
     * @param displayName HostNode display name (optional)
     * @param externalId HostNode external id (optional)
     * @param hardwareId Hardware Id of the host (optional)
     * @param hypervisorOsType HostNode&#x27;s Hypervisor type, for example ESXi, RHEL KVM or UBUNTU KVM. (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param ipAddress Management IP address of the node (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param resourceType Node type from &#x27;HostNode&#x27;, &#x27;EdgeNode&#x27;, &#x27;PublicCloudGatewayNode&#x27; (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listNodesAsync(String cursor, String discoveredNodeId, String displayName, String externalId, String hardwareId, String hypervisorOsType, String includedFields, String ipAddress, Long pageSize, String resourceType, Boolean sortAscending, String sortBy, final ApiCallback<NodeListResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listNodesValidateBeforeCall(cursor, discoveredNodeId, displayName, externalId, hardwareId, hypervisorOsType, includedFields, ipAddress, pageSize, resourceType, sortAscending, sortBy, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeListResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for performHostNodeUpgradeActionUpgradeInfra
     * @param nodeId  (required)
     * @param disableVmMigration Should VM migration be disabled during upgrade (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call performHostNodeUpgradeActionUpgradeInfraCall(String nodeId, Boolean disableVmMigration, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/fabric/nodes/{node-id}?action=upgrade_infra"
            .replaceAll("\\{" + "node-id" + "\\}", apiClient.escapeString(nodeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (disableVmMigration != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("disable_vm_migration", disableVmMigration));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call performHostNodeUpgradeActionUpgradeInfraValidateBeforeCall(String nodeId, Boolean disableVmMigration, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'nodeId' is set
        if (nodeId == null) {
            throw new ApiException("Missing the required parameter 'nodeId' when calling performHostNodeUpgradeActionUpgradeInfra(Async)");
        }
        
        com.squareup.okhttp.Call call = performHostNodeUpgradeActionUpgradeInfraCall(nodeId, disableVmMigration, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Perform a service deployment upgrade on a host node
     * Perform a service deployment upgrade on a host node
     * @param nodeId  (required)
     * @param disableVmMigration Should VM migration be disabled during upgrade (optional)
     * @return Node
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Node performHostNodeUpgradeActionUpgradeInfra(String nodeId, Boolean disableVmMigration) throws ApiException {
        ApiResponse<Node> resp = performHostNodeUpgradeActionUpgradeInfraWithHttpInfo(nodeId, disableVmMigration);
        return resp.getData();
    }

    /**
     * Perform a service deployment upgrade on a host node
     * Perform a service deployment upgrade on a host node
     * @param nodeId  (required)
     * @param disableVmMigration Should VM migration be disabled during upgrade (optional)
     * @return ApiResponse&lt;Node&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Node> performHostNodeUpgradeActionUpgradeInfraWithHttpInfo(String nodeId, Boolean disableVmMigration) throws ApiException {
        com.squareup.okhttp.Call call = performHostNodeUpgradeActionUpgradeInfraValidateBeforeCall(nodeId, disableVmMigration, null, null);
        Type localVarReturnType = new TypeToken<Node>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Perform a service deployment upgrade on a host node (asynchronously)
     * Perform a service deployment upgrade on a host node
     * @param nodeId  (required)
     * @param disableVmMigration Should VM migration be disabled during upgrade (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call performHostNodeUpgradeActionUpgradeInfraAsync(String nodeId, Boolean disableVmMigration, final ApiCallback<Node> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = performHostNodeUpgradeActionUpgradeInfraValidateBeforeCall(nodeId, disableVmMigration, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Node>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for performNodeAction
     * @param nodeId  (required)
     * @param action Supported fabric node actions (optional)
     * @param evacuatePoweredOffVms Evacuate powered-off vms (optional)
     * @param vsanMode Vsan decommission mode (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call performNodeActionCall(String nodeId, String action, Boolean evacuatePoweredOffVms, String vsanMode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/fabric/nodes/{node-id}"
            .replaceAll("\\{" + "node-id" + "\\}", apiClient.escapeString(nodeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (action != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("action", action));
        if (evacuatePoweredOffVms != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("evacuate_powered_off_vms", evacuatePoweredOffVms));
        if (vsanMode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("vsan_mode", vsanMode));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call performNodeActionValidateBeforeCall(String nodeId, String action, Boolean evacuatePoweredOffVms, String vsanMode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'nodeId' is set
        if (nodeId == null) {
            throw new ApiException("Missing the required parameter 'nodeId' when calling performNodeAction(Async)");
        }
        
        com.squareup.okhttp.Call call = performNodeActionCall(nodeId, action, evacuatePoweredOffVms, vsanMode, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Perform an Action on Fabric Node
     * The supported fabric node actions are enter_maintenance_mode, exit_maintenance_mode for EdgeNode. This API is deprecated, please call TransportNode maintenance mode API to update maintenance mode, refer to \&quot;Update transport node maintenance mode\&quot;. 
     * @param nodeId  (required)
     * @param action Supported fabric node actions (optional)
     * @param evacuatePoweredOffVms Evacuate powered-off vms (optional)
     * @param vsanMode Vsan decommission mode (optional)
     * @return Node
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Node performNodeAction(String nodeId, String action, Boolean evacuatePoweredOffVms, String vsanMode) throws ApiException {
        ApiResponse<Node> resp = performNodeActionWithHttpInfo(nodeId, action, evacuatePoweredOffVms, vsanMode);
        return resp.getData();
    }

    /**
     * Perform an Action on Fabric Node
     * The supported fabric node actions are enter_maintenance_mode, exit_maintenance_mode for EdgeNode. This API is deprecated, please call TransportNode maintenance mode API to update maintenance mode, refer to \&quot;Update transport node maintenance mode\&quot;. 
     * @param nodeId  (required)
     * @param action Supported fabric node actions (optional)
     * @param evacuatePoweredOffVms Evacuate powered-off vms (optional)
     * @param vsanMode Vsan decommission mode (optional)
     * @return ApiResponse&lt;Node&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Node> performNodeActionWithHttpInfo(String nodeId, String action, Boolean evacuatePoweredOffVms, String vsanMode) throws ApiException {
        com.squareup.okhttp.Call call = performNodeActionValidateBeforeCall(nodeId, action, evacuatePoweredOffVms, vsanMode, null, null);
        Type localVarReturnType = new TypeToken<Node>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Perform an Action on Fabric Node (asynchronously)
     * The supported fabric node actions are enter_maintenance_mode, exit_maintenance_mode for EdgeNode. This API is deprecated, please call TransportNode maintenance mode API to update maintenance mode, refer to \&quot;Update transport node maintenance mode\&quot;. 
     * @param nodeId  (required)
     * @param action Supported fabric node actions (optional)
     * @param evacuatePoweredOffVms Evacuate powered-off vms (optional)
     * @param vsanMode Vsan decommission mode (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call performNodeActionAsync(String nodeId, String action, Boolean evacuatePoweredOffVms, String vsanMode, final ApiCallback<Node> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = performNodeActionValidateBeforeCall(nodeId, action, evacuatePoweredOffVms, vsanMode, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Node>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for readFabricNodeInterface
     * @param nodeId  (required)
     * @param interfaceId  (required)
     * @param source Data source type. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call readFabricNodeInterfaceCall(String nodeId, String interfaceId, String source, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/fabric/nodes/{node-id}/network/interfaces/{interface-id}"
            .replaceAll("\\{" + "node-id" + "\\}", apiClient.escapeString(nodeId.toString()))
            .replaceAll("\\{" + "interface-id" + "\\}", apiClient.escapeString(interfaceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (source != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("source", source));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call readFabricNodeInterfaceValidateBeforeCall(String nodeId, String interfaceId, String source, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'nodeId' is set
        if (nodeId == null) {
            throw new ApiException("Missing the required parameter 'nodeId' when calling readFabricNodeInterface(Async)");
        }
        // verify the required parameter 'interfaceId' is set
        if (interfaceId == null) {
            throw new ApiException("Missing the required parameter 'interfaceId' when calling readFabricNodeInterface(Async)");
        }
        
        com.squareup.okhttp.Call call = readFabricNodeInterfaceCall(nodeId, interfaceId, source, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read the node&#x27;s Network Interface
     * Returns detailed information about the specified interface. Interface information includes MTU, broadcast and host IP addresses, link and admin status, MAC address, network  mask, and the IP configuration method (static or DHCP). This api is deprecated as part of FN+TN unification. Please use Transport Node API GET /transport-nodes/&lt;transport-node-id&gt;/network/interfaces/&lt;interface-id&gt; to get interface details of a node. 
     * @param nodeId  (required)
     * @param interfaceId  (required)
     * @param source Data source type. (optional)
     * @return NodeInterfaceProperties
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeInterfaceProperties readFabricNodeInterface(String nodeId, String interfaceId, String source) throws ApiException {
        ApiResponse<NodeInterfaceProperties> resp = readFabricNodeInterfaceWithHttpInfo(nodeId, interfaceId, source);
        return resp.getData();
    }

    /**
     * Read the node&#x27;s Network Interface
     * Returns detailed information about the specified interface. Interface information includes MTU, broadcast and host IP addresses, link and admin status, MAC address, network  mask, and the IP configuration method (static or DHCP). This api is deprecated as part of FN+TN unification. Please use Transport Node API GET /transport-nodes/&lt;transport-node-id&gt;/network/interfaces/&lt;interface-id&gt; to get interface details of a node. 
     * @param nodeId  (required)
     * @param interfaceId  (required)
     * @param source Data source type. (optional)
     * @return ApiResponse&lt;NodeInterfaceProperties&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeInterfaceProperties> readFabricNodeInterfaceWithHttpInfo(String nodeId, String interfaceId, String source) throws ApiException {
        com.squareup.okhttp.Call call = readFabricNodeInterfaceValidateBeforeCall(nodeId, interfaceId, source, null, null);
        Type localVarReturnType = new TypeToken<NodeInterfaceProperties>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read the node&#x27;s Network Interface (asynchronously)
     * Returns detailed information about the specified interface. Interface information includes MTU, broadcast and host IP addresses, link and admin status, MAC address, network  mask, and the IP configuration method (static or DHCP). This api is deprecated as part of FN+TN unification. Please use Transport Node API GET /transport-nodes/&lt;transport-node-id&gt;/network/interfaces/&lt;interface-id&gt; to get interface details of a node. 
     * @param nodeId  (required)
     * @param interfaceId  (required)
     * @param source Data source type. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call readFabricNodeInterfaceAsync(String nodeId, String interfaceId, String source, final ApiCallback<NodeInterfaceProperties> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = readFabricNodeInterfaceValidateBeforeCall(nodeId, interfaceId, source, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeInterfaceProperties>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for readFabricNodeInterfaceStatistics
     * @param nodeId  (required)
     * @param interfaceId  (required)
     * @param source Data source type. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call readFabricNodeInterfaceStatisticsCall(String nodeId, String interfaceId, String source, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/fabric/nodes/{node-id}/network/interfaces/{interface-id}/stats"
            .replaceAll("\\{" + "node-id" + "\\}", apiClient.escapeString(nodeId.toString()))
            .replaceAll("\\{" + "interface-id" + "\\}", apiClient.escapeString(interfaceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (source != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("source", source));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call readFabricNodeInterfaceStatisticsValidateBeforeCall(String nodeId, String interfaceId, String source, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'nodeId' is set
        if (nodeId == null) {
            throw new ApiException("Missing the required parameter 'nodeId' when calling readFabricNodeInterfaceStatistics(Async)");
        }
        // verify the required parameter 'interfaceId' is set
        if (interfaceId == null) {
            throw new ApiException("Missing the required parameter 'interfaceId' when calling readFabricNodeInterfaceStatistics(Async)");
        }
        
        com.squareup.okhttp.Call call = readFabricNodeInterfaceStatisticsCall(nodeId, interfaceId, source, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read the NSX Manager&#x27;s Network Interface Statistics
     * On the specified interface, returns the number of received (rx), transmitted (tx), and dropped packets; the number of bytes and errors received and transmitted on the interface; and the number of detected collisions. This api is deprecated as part of FN+TN unification. Please use /transport-nodes/&lt;transportnode-id&gt;/network/interfaces/&lt;interface-id&gt;/stats to read network interface statistics with contraint FN is converted to TN. 
     * @param nodeId  (required)
     * @param interfaceId  (required)
     * @param source Data source type. (optional)
     * @return NodeInterfaceStatisticsProperties
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeInterfaceStatisticsProperties readFabricNodeInterfaceStatistics(String nodeId, String interfaceId, String source) throws ApiException {
        ApiResponse<NodeInterfaceStatisticsProperties> resp = readFabricNodeInterfaceStatisticsWithHttpInfo(nodeId, interfaceId, source);
        return resp.getData();
    }

    /**
     * Read the NSX Manager&#x27;s Network Interface Statistics
     * On the specified interface, returns the number of received (rx), transmitted (tx), and dropped packets; the number of bytes and errors received and transmitted on the interface; and the number of detected collisions. This api is deprecated as part of FN+TN unification. Please use /transport-nodes/&lt;transportnode-id&gt;/network/interfaces/&lt;interface-id&gt;/stats to read network interface statistics with contraint FN is converted to TN. 
     * @param nodeId  (required)
     * @param interfaceId  (required)
     * @param source Data source type. (optional)
     * @return ApiResponse&lt;NodeInterfaceStatisticsProperties&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeInterfaceStatisticsProperties> readFabricNodeInterfaceStatisticsWithHttpInfo(String nodeId, String interfaceId, String source) throws ApiException {
        com.squareup.okhttp.Call call = readFabricNodeInterfaceStatisticsValidateBeforeCall(nodeId, interfaceId, source, null, null);
        Type localVarReturnType = new TypeToken<NodeInterfaceStatisticsProperties>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read the NSX Manager&#x27;s Network Interface Statistics (asynchronously)
     * On the specified interface, returns the number of received (rx), transmitted (tx), and dropped packets; the number of bytes and errors received and transmitted on the interface; and the number of detected collisions. This api is deprecated as part of FN+TN unification. Please use /transport-nodes/&lt;transportnode-id&gt;/network/interfaces/&lt;interface-id&gt;/stats to read network interface statistics with contraint FN is converted to TN. 
     * @param nodeId  (required)
     * @param interfaceId  (required)
     * @param source Data source type. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call readFabricNodeInterfaceStatisticsAsync(String nodeId, String interfaceId, String source, final ApiCallback<NodeInterfaceStatisticsProperties> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = readFabricNodeInterfaceStatisticsValidateBeforeCall(nodeId, interfaceId, source, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeInterfaceStatisticsProperties>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for readNode
     * @param nodeId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call readNodeCall(String nodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/fabric/nodes/{node-id}"
            .replaceAll("\\{" + "node-id" + "\\}", apiClient.escapeString(nodeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call readNodeValidateBeforeCall(String nodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'nodeId' is set
        if (nodeId == null) {
            throw new ApiException("Missing the required parameter 'nodeId' when calling readNode(Async)");
        }
        
        com.squareup.okhttp.Call call = readNodeCall(nodeId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Return Node Information
     * Returns information about a specific fabric node (host or edge). This api is deprecated, use Transport Node API GET /transport-nodes/&amp;lt;transport-node-id&amp;gt; to get fabric node information. 
     * @param nodeId  (required)
     * @return Node
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Node readNode(String nodeId) throws ApiException {
        ApiResponse<Node> resp = readNodeWithHttpInfo(nodeId);
        return resp.getData();
    }

    /**
     * Return Node Information
     * Returns information about a specific fabric node (host or edge). This api is deprecated, use Transport Node API GET /transport-nodes/&amp;lt;transport-node-id&amp;gt; to get fabric node information. 
     * @param nodeId  (required)
     * @return ApiResponse&lt;Node&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Node> readNodeWithHttpInfo(String nodeId) throws ApiException {
        com.squareup.okhttp.Call call = readNodeValidateBeforeCall(nodeId, null, null);
        Type localVarReturnType = new TypeToken<Node>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Return Node Information (asynchronously)
     * Returns information about a specific fabric node (host or edge). This api is deprecated, use Transport Node API GET /transport-nodes/&amp;lt;transport-node-id&amp;gt; to get fabric node information. 
     * @param nodeId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call readNodeAsync(String nodeId, final ApiCallback<Node> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = readNodeValidateBeforeCall(nodeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Node>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for readNodeStatus
     * @param nodeId  (required)
     * @param source Data source type. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call readNodeStatusCall(String nodeId, String source, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/fabric/nodes/{node-id}/status"
            .replaceAll("\\{" + "node-id" + "\\}", apiClient.escapeString(nodeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (source != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("source", source));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call readNodeStatusValidateBeforeCall(String nodeId, String source, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'nodeId' is set
        if (nodeId == null) {
            throw new ApiException("Missing the required parameter 'nodeId' when calling readNodeStatus(Async)");
        }
        
        com.squareup.okhttp.Call call = readNodeStatusCall(nodeId, source, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Return Runtime Status Information for a Node
     * Returns connectivity, heartbeat, and version information about a fabric node (host or edge). Note that the LCP connectivity status remains down until after the fabric node has been added as a transpot node and the NSX host switch has been successfully installed. See POST /api/v1/transport-nodes. This api is deprecated, use GET /api/v1/transport-nodes/&amp;lt;node-id&amp;gt;/status to get status information of a node with constraint FN is converted to TN. 
     * @param nodeId  (required)
     * @param source Data source type. (optional)
     * @return NodeStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeStatus readNodeStatus(String nodeId, String source) throws ApiException {
        ApiResponse<NodeStatus> resp = readNodeStatusWithHttpInfo(nodeId, source);
        return resp.getData();
    }

    /**
     * Return Runtime Status Information for a Node
     * Returns connectivity, heartbeat, and version information about a fabric node (host or edge). Note that the LCP connectivity status remains down until after the fabric node has been added as a transpot node and the NSX host switch has been successfully installed. See POST /api/v1/transport-nodes. This api is deprecated, use GET /api/v1/transport-nodes/&amp;lt;node-id&amp;gt;/status to get status information of a node with constraint FN is converted to TN. 
     * @param nodeId  (required)
     * @param source Data source type. (optional)
     * @return ApiResponse&lt;NodeStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeStatus> readNodeStatusWithHttpInfo(String nodeId, String source) throws ApiException {
        com.squareup.okhttp.Call call = readNodeStatusValidateBeforeCall(nodeId, source, null, null);
        Type localVarReturnType = new TypeToken<NodeStatus>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Return Runtime Status Information for a Node (asynchronously)
     * Returns connectivity, heartbeat, and version information about a fabric node (host or edge). Note that the LCP connectivity status remains down until after the fabric node has been added as a transpot node and the NSX host switch has been successfully installed. See POST /api/v1/transport-nodes. This api is deprecated, use GET /api/v1/transport-nodes/&amp;lt;node-id&amp;gt;/status to get status information of a node with constraint FN is converted to TN. 
     * @param nodeId  (required)
     * @param source Data source type. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call readNodeStatusAsync(String nodeId, String source, final ApiCallback<NodeStatus> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = readNodeStatusValidateBeforeCall(nodeId, source, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeStatus>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for readNodesStatus
     * @param nodeIds List of requested Nodes. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call readNodesStatusCall(String nodeIds, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/fabric/nodes/status";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (nodeIds != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("node_ids", nodeIds));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call readNodesStatusValidateBeforeCall(String nodeIds, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'nodeIds' is set
        if (nodeIds == null) {
            throw new ApiException("Missing the required parameter 'nodeIds' when calling readNodesStatus(Async)");
        }
        
        com.squareup.okhttp.Call call = readNodesStatusCall(nodeIds, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Return Runtime Status Information for given Nodes
     * Returns connectivity, heartbeat, and version information about all fabric nodes (host or edge). This api is deprecated as part of FN+TN unification. Please use Transport Node Status API /transport-nodes/&amp;lt;node-id&amp;gt;/status to get status information of a node and to get all transport nodes ids use GET /transport-nodes. 
     * @param nodeIds List of requested Nodes. (required)
     * @return NodeStatusListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeStatusListResult readNodesStatus(String nodeIds) throws ApiException {
        ApiResponse<NodeStatusListResult> resp = readNodesStatusWithHttpInfo(nodeIds);
        return resp.getData();
    }

    /**
     * Return Runtime Status Information for given Nodes
     * Returns connectivity, heartbeat, and version information about all fabric nodes (host or edge). This api is deprecated as part of FN+TN unification. Please use Transport Node Status API /transport-nodes/&amp;lt;node-id&amp;gt;/status to get status information of a node and to get all transport nodes ids use GET /transport-nodes. 
     * @param nodeIds List of requested Nodes. (required)
     * @return ApiResponse&lt;NodeStatusListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeStatusListResult> readNodesStatusWithHttpInfo(String nodeIds) throws ApiException {
        com.squareup.okhttp.Call call = readNodesStatusValidateBeforeCall(nodeIds, null, null);
        Type localVarReturnType = new TypeToken<NodeStatusListResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Return Runtime Status Information for given Nodes (asynchronously)
     * Returns connectivity, heartbeat, and version information about all fabric nodes (host or edge). This api is deprecated as part of FN+TN unification. Please use Transport Node Status API /transport-nodes/&amp;lt;node-id&amp;gt;/status to get status information of a node and to get all transport nodes ids use GET /transport-nodes. 
     * @param nodeIds List of requested Nodes. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call readNodesStatusAsync(String nodeIds, final ApiCallback<NodeStatusListResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = readNodesStatusValidateBeforeCall(nodeIds, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeStatusListResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for restartInventorySyncRestartInventorySync
     * @param nodeId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call restartInventorySyncRestartInventorySyncCall(String nodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/fabric/nodes/{node-id}?action=restart_inventory_sync"
            .replaceAll("\\{" + "node-id" + "\\}", apiClient.escapeString(nodeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call restartInventorySyncRestartInventorySyncValidateBeforeCall(String nodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'nodeId' is set
        if (nodeId == null) {
            throw new ApiException("Missing the required parameter 'nodeId' when calling restartInventorySyncRestartInventorySync(Async)");
        }
        
        com.squareup.okhttp.Call call = restartInventorySyncRestartInventorySyncCall(nodeId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Restart the inventory sync for the node if it is paused currently.
     * Restart the inventory sync for the node if it is currently internally paused. After this action the next inventory sync coming from the node is processed. This api is deprecated as part of FN+TN unification. Please use Transport Node API POST /transport-nodes/&amp;lt;transport-node-id&amp;gt;?action&#x3D;restart_inventory_sync to restart inventory sync of node. 
     * @param nodeId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void restartInventorySyncRestartInventorySync(String nodeId) throws ApiException {
        restartInventorySyncRestartInventorySyncWithHttpInfo(nodeId);
    }

    /**
     * Restart the inventory sync for the node if it is paused currently.
     * Restart the inventory sync for the node if it is currently internally paused. After this action the next inventory sync coming from the node is processed. This api is deprecated as part of FN+TN unification. Please use Transport Node API POST /transport-nodes/&amp;lt;transport-node-id&amp;gt;?action&#x3D;restart_inventory_sync to restart inventory sync of node. 
     * @param nodeId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> restartInventorySyncRestartInventorySyncWithHttpInfo(String nodeId) throws ApiException {
        com.squareup.okhttp.Call call = restartInventorySyncRestartInventorySyncValidateBeforeCall(nodeId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Restart the inventory sync for the node if it is paused currently. (asynchronously)
     * Restart the inventory sync for the node if it is currently internally paused. After this action the next inventory sync coming from the node is processed. This api is deprecated as part of FN+TN unification. Please use Transport Node API POST /transport-nodes/&amp;lt;transport-node-id&amp;gt;?action&#x3D;restart_inventory_sync to restart inventory sync of node. 
     * @param nodeId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call restartInventorySyncRestartInventorySyncAsync(String nodeId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = restartInventorySyncRestartInventorySyncValidateBeforeCall(nodeId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateNode
     * @param body  (required)
     * @param nodeId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateNodeCall(Node body, String nodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/fabric/nodes/{node-id}"
            .replaceAll("\\{" + "node-id" + "\\}", apiClient.escapeString(nodeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateNodeValidateBeforeCall(Node body, String nodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateNode(Async)");
        }
        // verify the required parameter 'nodeId' is set
        if (nodeId == null) {
            throw new ApiException("Missing the required parameter 'nodeId' when calling updateNode(Async)");
        }
        
        com.squareup.okhttp.Call call = updateNodeCall(body, nodeId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update a Node
     * Modifies attributes of a fabric node (host or edge). This api is deprecated as part of FN+TN unification. Please use Transport Node API PUT /transport-nodes/&amp;lt;transport-node-id&amp;gt; to update fabric node details. API PUT /transport-nodes/&lt;transport-node-id&gt; to update fabric node details. 
     * @param body  (required)
     * @param nodeId  (required)
     * @return Node
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Node updateNode(Node body, String nodeId) throws ApiException {
        ApiResponse<Node> resp = updateNodeWithHttpInfo(body, nodeId);
        return resp.getData();
    }

    /**
     * Update a Node
     * Modifies attributes of a fabric node (host or edge). This api is deprecated as part of FN+TN unification. Please use Transport Node API PUT /transport-nodes/&amp;lt;transport-node-id&amp;gt; to update fabric node details. API PUT /transport-nodes/&lt;transport-node-id&gt; to update fabric node details. 
     * @param body  (required)
     * @param nodeId  (required)
     * @return ApiResponse&lt;Node&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Node> updateNodeWithHttpInfo(Node body, String nodeId) throws ApiException {
        com.squareup.okhttp.Call call = updateNodeValidateBeforeCall(body, nodeId, null, null);
        Type localVarReturnType = new TypeToken<Node>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a Node (asynchronously)
     * Modifies attributes of a fabric node (host or edge). This api is deprecated as part of FN+TN unification. Please use Transport Node API PUT /transport-nodes/&amp;lt;transport-node-id&amp;gt; to update fabric node details. API PUT /transport-nodes/&lt;transport-node-id&gt; to update fabric node details. 
     * @param body  (required)
     * @param nodeId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateNodeAsync(Node body, String nodeId, final ApiCallback<Node> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateNodeValidateBeforeCall(body, nodeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Node>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
