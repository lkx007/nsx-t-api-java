/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ApiError;
import io.swagger.client.model.IdfwComputeCollectionListResult;
import io.swagger.client.model.IdfwComputeCollectionStatus;
import io.swagger.client.model.IdfwTransportNodeStatusListResult;
import io.swagger.client.model.IdfwVirtualMachineStatusListResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ManagementPlaneApiIdentityFirewallMonitoringApi {
    private ApiClient apiClient;

    public ManagementPlaneApiIdentityFirewallMonitoringApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ManagementPlaneApiIdentityFirewallMonitoringApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getComputeCollectionStatusById
     * @param computeCollectionExtId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getComputeCollectionStatusByIdCall(String computeCollectionExtId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/idfw/compute-collections/{compute-collection-ext-id}/status"
            .replaceAll("\\{" + "compute-collection-ext-id" + "\\}", apiClient.escapeString(computeCollectionExtId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getComputeCollectionStatusByIdValidateBeforeCall(String computeCollectionExtId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'computeCollectionExtId' is set
        if (computeCollectionExtId == null) {
            throw new ApiException("Missing the required parameter 'computeCollectionExtId' when calling getComputeCollectionStatusById(Async)");
        }
        
        com.squareup.okhttp.Call call = getComputeCollectionStatusByIdCall(computeCollectionExtId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get list of compute collections and status.
     * Retrieve the compute collection status by ID. 
     * @param computeCollectionExtId  (required)
     * @return IdfwComputeCollectionStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public IdfwComputeCollectionStatus getComputeCollectionStatusById(String computeCollectionExtId) throws ApiException {
        ApiResponse<IdfwComputeCollectionStatus> resp = getComputeCollectionStatusByIdWithHttpInfo(computeCollectionExtId);
        return resp.getData();
    }

    /**
     * Get list of compute collections and status.
     * Retrieve the compute collection status by ID. 
     * @param computeCollectionExtId  (required)
     * @return ApiResponse&lt;IdfwComputeCollectionStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<IdfwComputeCollectionStatus> getComputeCollectionStatusByIdWithHttpInfo(String computeCollectionExtId) throws ApiException {
        com.squareup.okhttp.Call call = getComputeCollectionStatusByIdValidateBeforeCall(computeCollectionExtId, null, null);
        Type localVarReturnType = new TypeToken<IdfwComputeCollectionStatus>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get list of compute collections and status. (asynchronously)
     * Retrieve the compute collection status by ID. 
     * @param computeCollectionExtId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getComputeCollectionStatusByIdAsync(String computeCollectionExtId, final ApiCallback<IdfwComputeCollectionStatus> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getComputeCollectionStatusByIdValidateBeforeCall(computeCollectionExtId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<IdfwComputeCollectionStatus>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listComputeCollectionStatuses
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listComputeCollectionStatusesCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/idfw/compute-collections/status";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listComputeCollectionStatusesValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listComputeCollectionStatusesCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List all IDFW enabled ComputeCollection statuses.
     * Retrieve all the Compute collection status. 
     * @return IdfwComputeCollectionListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public IdfwComputeCollectionListResult listComputeCollectionStatuses() throws ApiException {
        ApiResponse<IdfwComputeCollectionListResult> resp = listComputeCollectionStatusesWithHttpInfo();
        return resp.getData();
    }

    /**
     * List all IDFW enabled ComputeCollection statuses.
     * Retrieve all the Compute collection status. 
     * @return ApiResponse&lt;IdfwComputeCollectionListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<IdfwComputeCollectionListResult> listComputeCollectionStatusesWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = listComputeCollectionStatusesValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<IdfwComputeCollectionListResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all IDFW enabled ComputeCollection statuses. (asynchronously)
     * Retrieve all the Compute collection status. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listComputeCollectionStatusesAsync(final ApiCallback<IdfwComputeCollectionListResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listComputeCollectionStatusesValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<IdfwComputeCollectionListResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listTransportNodeStatusesByComputeCollectionId
     * @param ccExtId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listTransportNodeStatusesByComputeCollectionIdCall(String ccExtId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/idfw/compute-collections/{cc-ext-id}/transport-nodes/status"
            .replaceAll("\\{" + "cc-ext-id" + "\\}", apiClient.escapeString(ccExtId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listTransportNodeStatusesByComputeCollectionIdValidateBeforeCall(String ccExtId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'ccExtId' is set
        if (ccExtId == null) {
            throw new ApiException("Missing the required parameter 'ccExtId' when calling listTransportNodeStatusesByComputeCollectionId(Async)");
        }
        
        com.squareup.okhttp.Call call = listTransportNodeStatusesByComputeCollectionIdCall(ccExtId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List all transport node and statuses based on idfw enabled ComputeCollection ID.
     * Retrieve all the transport node and status by idfw enabled   ComputeCollection ID in the request. 
     * @param ccExtId  (required)
     * @return IdfwTransportNodeStatusListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public IdfwTransportNodeStatusListResult listTransportNodeStatusesByComputeCollectionId(String ccExtId) throws ApiException {
        ApiResponse<IdfwTransportNodeStatusListResult> resp = listTransportNodeStatusesByComputeCollectionIdWithHttpInfo(ccExtId);
        return resp.getData();
    }

    /**
     * List all transport node and statuses based on idfw enabled ComputeCollection ID.
     * Retrieve all the transport node and status by idfw enabled   ComputeCollection ID in the request. 
     * @param ccExtId  (required)
     * @return ApiResponse&lt;IdfwTransportNodeStatusListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<IdfwTransportNodeStatusListResult> listTransportNodeStatusesByComputeCollectionIdWithHttpInfo(String ccExtId) throws ApiException {
        com.squareup.okhttp.Call call = listTransportNodeStatusesByComputeCollectionIdValidateBeforeCall(ccExtId, null, null);
        Type localVarReturnType = new TypeToken<IdfwTransportNodeStatusListResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all transport node and statuses based on idfw enabled ComputeCollection ID. (asynchronously)
     * Retrieve all the transport node and status by idfw enabled   ComputeCollection ID in the request. 
     * @param ccExtId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listTransportNodeStatusesByComputeCollectionIdAsync(String ccExtId, final ApiCallback<IdfwTransportNodeStatusListResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listTransportNodeStatusesByComputeCollectionIdValidateBeforeCall(ccExtId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<IdfwTransportNodeStatusListResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listVirtualMachineStatusesByTransportNodeId
     * @param transportNodeId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listVirtualMachineStatusesByTransportNodeIdCall(String transportNodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/idfw/transport-nodes/{transport-node-id}/vms/status"
            .replaceAll("\\{" + "transport-node-id" + "\\}", apiClient.escapeString(transportNodeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listVirtualMachineStatusesByTransportNodeIdValidateBeforeCall(String transportNodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'transportNodeId' is set
        if (transportNodeId == null) {
            throw new ApiException("Missing the required parameter 'transportNodeId' when calling listVirtualMachineStatusesByTransportNodeId(Async)");
        }
        
        com.squareup.okhttp.Call call = listVirtualMachineStatusesByTransportNodeIdCall(transportNodeId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List all VM and statuses based on transport node ID of idfw enabled compute collection.
     * Retrieve all the VM and status by transport node ID of idfw enabled compute collection in the request. 
     * @param transportNodeId  (required)
     * @return IdfwVirtualMachineStatusListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public IdfwVirtualMachineStatusListResult listVirtualMachineStatusesByTransportNodeId(String transportNodeId) throws ApiException {
        ApiResponse<IdfwVirtualMachineStatusListResult> resp = listVirtualMachineStatusesByTransportNodeIdWithHttpInfo(transportNodeId);
        return resp.getData();
    }

    /**
     * List all VM and statuses based on transport node ID of idfw enabled compute collection.
     * Retrieve all the VM and status by transport node ID of idfw enabled compute collection in the request. 
     * @param transportNodeId  (required)
     * @return ApiResponse&lt;IdfwVirtualMachineStatusListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<IdfwVirtualMachineStatusListResult> listVirtualMachineStatusesByTransportNodeIdWithHttpInfo(String transportNodeId) throws ApiException {
        com.squareup.okhttp.Call call = listVirtualMachineStatusesByTransportNodeIdValidateBeforeCall(transportNodeId, null, null);
        Type localVarReturnType = new TypeToken<IdfwVirtualMachineStatusListResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all VM and statuses based on transport node ID of idfw enabled compute collection. (asynchronously)
     * Retrieve all the VM and status by transport node ID of idfw enabled compute collection in the request. 
     * @param transportNodeId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listVirtualMachineStatusesByTransportNodeIdAsync(String transportNodeId, final ApiCallback<IdfwVirtualMachineStatusListResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listVirtualMachineStatusesByTransportNodeIdValidateBeforeCall(transportNodeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<IdfwVirtualMachineStatusListResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
