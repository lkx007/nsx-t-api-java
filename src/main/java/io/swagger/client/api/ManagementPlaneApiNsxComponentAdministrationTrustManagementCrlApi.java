/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ApiError;
import io.swagger.client.model.Crl;
import io.swagger.client.model.CrlDistributionPoint;
import io.swagger.client.model.CrlDistributionPointList;
import io.swagger.client.model.CrlDistributionPointStatus;
import io.swagger.client.model.CrlList;
import io.swagger.client.model.CrlObjectData;
import io.swagger.client.model.CrlPemRequestType;
import io.swagger.client.model.TrustManagementData;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ManagementPlaneApiNsxComponentAdministrationTrustManagementCrlApi {
    private ApiClient apiClient;

    public ManagementPlaneApiNsxComponentAdministrationTrustManagementCrlApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ManagementPlaneApiNsxComponentAdministrationTrustManagementCrlApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addCrlImport
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addCrlImportCall(CrlObjectData body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/trust-management/crls?action=import";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addCrlImportValidateBeforeCall(CrlObjectData body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addCrlImport(Async)");
        }
        
        com.squareup.okhttp.Call call = addCrlImportCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add a New Certificate Revocation List
     * Adds a new certificate revocation list (CRL). The CRL is used to verify the client certificate status against the revocation lists published by the CA. For this reason, the administrator needs to add the CRL in certificate repository as well. 
     * @param body  (required)
     * @return CrlList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CrlList addCrlImport(CrlObjectData body) throws ApiException {
        ApiResponse<CrlList> resp = addCrlImportWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Add a New Certificate Revocation List
     * Adds a new certificate revocation list (CRL). The CRL is used to verify the client certificate status against the revocation lists published by the CA. For this reason, the administrator needs to add the CRL in certificate repository as well. 
     * @param body  (required)
     * @return ApiResponse&lt;CrlList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CrlList> addCrlImportWithHttpInfo(CrlObjectData body) throws ApiException {
        com.squareup.okhttp.Call call = addCrlImportValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<CrlList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add a New Certificate Revocation List (asynchronously)
     * Adds a new certificate revocation list (CRL). The CRL is used to verify the client certificate status against the revocation lists published by the CA. For this reason, the administrator needs to add the CRL in certificate repository as well. 
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addCrlImportAsync(CrlObjectData body, final ApiCallback<CrlList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addCrlImportValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CrlList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createCrlDistributionPoint
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createCrlDistributionPointCall(CrlDistributionPoint body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/trust-management/crl-distribution-points";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createCrlDistributionPointValidateBeforeCall(CrlDistributionPoint body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createCrlDistributionPoint(Async)");
        }
        
        com.squareup.okhttp.Call call = createCrlDistributionPointCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create a Crl Distribution Point
     * Create an entity that will represent a Crl Distribution Point 
     * @param body  (required)
     * @return CrlDistributionPoint
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CrlDistributionPoint createCrlDistributionPoint(CrlDistributionPoint body) throws ApiException {
        ApiResponse<CrlDistributionPoint> resp = createCrlDistributionPointWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create a Crl Distribution Point
     * Create an entity that will represent a Crl Distribution Point 
     * @param body  (required)
     * @return ApiResponse&lt;CrlDistributionPoint&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CrlDistributionPoint> createCrlDistributionPointWithHttpInfo(CrlDistributionPoint body) throws ApiException {
        com.squareup.okhttp.Call call = createCrlDistributionPointValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<CrlDistributionPoint>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a Crl Distribution Point (asynchronously)
     * Create an entity that will represent a Crl Distribution Point 
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createCrlDistributionPointAsync(CrlDistributionPoint body, final ApiCallback<CrlDistributionPoint> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createCrlDistributionPointValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CrlDistributionPoint>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteCrl
     * @param crlId ID of CRL to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteCrlCall(String crlId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/trust-management/crls/{crl-id}"
            .replaceAll("\\{" + "crl-id" + "\\}", apiClient.escapeString(crlId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteCrlValidateBeforeCall(String crlId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'crlId' is set
        if (crlId == null) {
            throw new ApiException("Missing the required parameter 'crlId' when calling deleteCrl(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteCrlCall(crlId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete a CRL
     * Deletes an existing CRL.
     * @param crlId ID of CRL to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteCrl(String crlId) throws ApiException {
        deleteCrlWithHttpInfo(crlId);
    }

    /**
     * Delete a CRL
     * Deletes an existing CRL.
     * @param crlId ID of CRL to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteCrlWithHttpInfo(String crlId) throws ApiException {
        com.squareup.okhttp.Call call = deleteCrlValidateBeforeCall(crlId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a CRL (asynchronously)
     * Deletes an existing CRL.
     * @param crlId ID of CRL to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteCrlAsync(String crlId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteCrlValidateBeforeCall(crlId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteCrlDistributionPoint
     * @param crlDistributionPointId Unique id of the CrlDistributionPoint to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteCrlDistributionPointCall(String crlDistributionPointId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/trust-management/crl-distribution-points/{crl-distribution-point-id}"
            .replaceAll("\\{" + "crl-distribution-point-id" + "\\}", apiClient.escapeString(crlDistributionPointId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteCrlDistributionPointValidateBeforeCall(String crlDistributionPointId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'crlDistributionPointId' is set
        if (crlDistributionPointId == null) {
            throw new ApiException("Missing the required parameter 'crlDistributionPointId' when calling deleteCrlDistributionPoint(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteCrlDistributionPointCall(crlDistributionPointId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete a CrlDistributionPoint
     * Delete a CrlDistributionPoint. It does not delete the actual CRL. 
     * @param crlDistributionPointId Unique id of the CrlDistributionPoint to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteCrlDistributionPoint(String crlDistributionPointId) throws ApiException {
        deleteCrlDistributionPointWithHttpInfo(crlDistributionPointId);
    }

    /**
     * Delete a CrlDistributionPoint
     * Delete a CrlDistributionPoint. It does not delete the actual CRL. 
     * @param crlDistributionPointId Unique id of the CrlDistributionPoint to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteCrlDistributionPointWithHttpInfo(String crlDistributionPointId) throws ApiException {
        com.squareup.okhttp.Call call = deleteCrlDistributionPointValidateBeforeCall(crlDistributionPointId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a CrlDistributionPoint (asynchronously)
     * Delete a CrlDistributionPoint. It does not delete the actual CRL. 
     * @param crlDistributionPointId Unique id of the CrlDistributionPoint to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteCrlDistributionPointAsync(String crlDistributionPointId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteCrlDistributionPointValidateBeforeCall(crlDistributionPointId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getCrl
     * @param crlId ID of CRL to read (required)
     * @param details whether to expand the pem data and show all its details (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCrlCall(String crlId, Boolean details, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/trust-management/crls/{crl-id}"
            .replaceAll("\\{" + "crl-id" + "\\}", apiClient.escapeString(crlId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (details != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("details", details));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCrlValidateBeforeCall(String crlId, Boolean details, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'crlId' is set
        if (crlId == null) {
            throw new ApiException("Missing the required parameter 'crlId' when calling getCrl(Async)");
        }
        
        com.squareup.okhttp.Call call = getCrlCall(crlId, details, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Show CRL Data for the Given CRL ID
     * Returns information about the specified CRL. For additional information, include the ?details&#x3D;true modifier at the end of the request URI. 
     * @param crlId ID of CRL to read (required)
     * @param details whether to expand the pem data and show all its details (optional)
     * @return Crl
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Crl getCrl(String crlId, Boolean details) throws ApiException {
        ApiResponse<Crl> resp = getCrlWithHttpInfo(crlId, details);
        return resp.getData();
    }

    /**
     * Show CRL Data for the Given CRL ID
     * Returns information about the specified CRL. For additional information, include the ?details&#x3D;true modifier at the end of the request URI. 
     * @param crlId ID of CRL to read (required)
     * @param details whether to expand the pem data and show all its details (optional)
     * @return ApiResponse&lt;Crl&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Crl> getCrlWithHttpInfo(String crlId, Boolean details) throws ApiException {
        com.squareup.okhttp.Call call = getCrlValidateBeforeCall(crlId, details, null, null);
        Type localVarReturnType = new TypeToken<Crl>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Show CRL Data for the Given CRL ID (asynchronously)
     * Returns information about the specified CRL. For additional information, include the ?details&#x3D;true modifier at the end of the request URI. 
     * @param crlId ID of CRL to read (required)
     * @param details whether to expand the pem data and show all its details (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCrlAsync(String crlId, Boolean details, final ApiCallback<Crl> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCrlValidateBeforeCall(crlId, details, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Crl>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCrlDistributionPoint
     * @param crlDistributionPointId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCrlDistributionPointCall(String crlDistributionPointId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/trust-management/crl-distribution-points/{crl-distribution-point-id}"
            .replaceAll("\\{" + "crl-distribution-point-id" + "\\}", apiClient.escapeString(crlDistributionPointId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCrlDistributionPointValidateBeforeCall(String crlDistributionPointId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'crlDistributionPointId' is set
        if (crlDistributionPointId == null) {
            throw new ApiException("Missing the required parameter 'crlDistributionPointId' when calling getCrlDistributionPoint(Async)");
        }
        
        com.squareup.okhttp.Call call = getCrlDistributionPointCall(crlDistributionPointId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Return the CrlDistributionPoint with &lt;crl-distribution-point-id&gt;
     * Return the CrlDistributionPoint with &lt;crl-distribution-point-id&gt;
     * @param crlDistributionPointId  (required)
     * @return CrlDistributionPoint
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CrlDistributionPoint getCrlDistributionPoint(String crlDistributionPointId) throws ApiException {
        ApiResponse<CrlDistributionPoint> resp = getCrlDistributionPointWithHttpInfo(crlDistributionPointId);
        return resp.getData();
    }

    /**
     * Return the CrlDistributionPoint with &lt;crl-distribution-point-id&gt;
     * Return the CrlDistributionPoint with &lt;crl-distribution-point-id&gt;
     * @param crlDistributionPointId  (required)
     * @return ApiResponse&lt;CrlDistributionPoint&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CrlDistributionPoint> getCrlDistributionPointWithHttpInfo(String crlDistributionPointId) throws ApiException {
        com.squareup.okhttp.Call call = getCrlDistributionPointValidateBeforeCall(crlDistributionPointId, null, null);
        Type localVarReturnType = new TypeToken<CrlDistributionPoint>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Return the CrlDistributionPoint with &lt;crl-distribution-point-id&gt; (asynchronously)
     * Return the CrlDistributionPoint with &lt;crl-distribution-point-id&gt;
     * @param crlDistributionPointId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCrlDistributionPointAsync(String crlDistributionPointId, final ApiCallback<CrlDistributionPoint> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCrlDistributionPointValidateBeforeCall(crlDistributionPointId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CrlDistributionPoint>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCrlDistributionPointPem
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCrlDistributionPointPemCall(CrlPemRequestType body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/trust-management/crl-distribution-points/pem-file";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCrlDistributionPointPemValidateBeforeCall(CrlPemRequestType body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling getCrlDistributionPointPem(Async)");
        }
        
        com.squareup.okhttp.Call call = getCrlDistributionPointPemCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Return stored CRL in PEM format
     * Return stored CRL in PEM format
     * @param body  (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String getCrlDistributionPointPem(CrlPemRequestType body) throws ApiException {
        ApiResponse<String> resp = getCrlDistributionPointPemWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Return stored CRL in PEM format
     * Return stored CRL in PEM format
     * @param body  (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> getCrlDistributionPointPemWithHttpInfo(CrlPemRequestType body) throws ApiException {
        com.squareup.okhttp.Call call = getCrlDistributionPointPemValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Return stored CRL in PEM format (asynchronously)
     * Return stored CRL in PEM format
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCrlDistributionPointPemAsync(CrlPemRequestType body, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCrlDistributionPointPemValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCrlDistributionPointStatus
     * @param crlDistributionPointId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCrlDistributionPointStatusCall(String crlDistributionPointId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/trust-management/crl-distribution-points/{crl-distribution-point-id}/status"
            .replaceAll("\\{" + "crl-distribution-point-id" + "\\}", apiClient.escapeString(crlDistributionPointId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCrlDistributionPointStatusValidateBeforeCall(String crlDistributionPointId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'crlDistributionPointId' is set
        if (crlDistributionPointId == null) {
            throw new ApiException("Missing the required parameter 'crlDistributionPointId' when calling getCrlDistributionPointStatus(Async)");
        }
        
        com.squareup.okhttp.Call call = getCrlDistributionPointStatusCall(crlDistributionPointId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Return the status of the CrlDistributionPoint
     * Return the status of the CrlDistributionPoint
     * @param crlDistributionPointId  (required)
     * @return CrlDistributionPointStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CrlDistributionPointStatus getCrlDistributionPointStatus(String crlDistributionPointId) throws ApiException {
        ApiResponse<CrlDistributionPointStatus> resp = getCrlDistributionPointStatusWithHttpInfo(crlDistributionPointId);
        return resp.getData();
    }

    /**
     * Return the status of the CrlDistributionPoint
     * Return the status of the CrlDistributionPoint
     * @param crlDistributionPointId  (required)
     * @return ApiResponse&lt;CrlDistributionPointStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CrlDistributionPointStatus> getCrlDistributionPointStatusWithHttpInfo(String crlDistributionPointId) throws ApiException {
        com.squareup.okhttp.Call call = getCrlDistributionPointStatusValidateBeforeCall(crlDistributionPointId, null, null);
        Type localVarReturnType = new TypeToken<CrlDistributionPointStatus>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Return the status of the CrlDistributionPoint (asynchronously)
     * Return the status of the CrlDistributionPoint
     * @param crlDistributionPointId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCrlDistributionPointStatusAsync(String crlDistributionPointId, final ApiCallback<CrlDistributionPointStatus> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCrlDistributionPointStatusValidateBeforeCall(crlDistributionPointId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CrlDistributionPointStatus>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCrls
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param details whether to expand the pem data and show all its details (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param type Type of certificate to return (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCrlsCall(String cursor, Boolean details, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, String type, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/trust-management/crls";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (details != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("details", details));
        if (includedFields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("included_fields", includedFields));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page_size", pageSize));
        if (sortAscending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_ascending", sortAscending));
        if (sortBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_by", sortBy));
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("type", type));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCrlsValidateBeforeCall(String cursor, Boolean details, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, String type, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getCrlsCall(cursor, details, includedFields, pageSize, sortAscending, sortBy, type, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Return All Added CRLs
     * Returns information about all CRLs. For additional information, include the ?details&#x3D;true modifier at the end of the request URI. 
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param details whether to expand the pem data and show all its details (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param type Type of certificate to return (optional)
     * @return CrlList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CrlList getCrls(String cursor, Boolean details, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, String type) throws ApiException {
        ApiResponse<CrlList> resp = getCrlsWithHttpInfo(cursor, details, includedFields, pageSize, sortAscending, sortBy, type);
        return resp.getData();
    }

    /**
     * Return All Added CRLs
     * Returns information about all CRLs. For additional information, include the ?details&#x3D;true modifier at the end of the request URI. 
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param details whether to expand the pem data and show all its details (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param type Type of certificate to return (optional)
     * @return ApiResponse&lt;CrlList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CrlList> getCrlsWithHttpInfo(String cursor, Boolean details, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, String type) throws ApiException {
        com.squareup.okhttp.Call call = getCrlsValidateBeforeCall(cursor, details, includedFields, pageSize, sortAscending, sortBy, type, null, null);
        Type localVarReturnType = new TypeToken<CrlList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Return All Added CRLs (asynchronously)
     * Returns information about all CRLs. For additional information, include the ?details&#x3D;true modifier at the end of the request URI. 
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param details whether to expand the pem data and show all its details (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param type Type of certificate to return (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCrlsAsync(String cursor, Boolean details, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, String type, final ApiCallback<CrlList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCrlsValidateBeforeCall(cursor, details, includedFields, pageSize, sortAscending, sortBy, type, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CrlList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTrustObjects
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTrustObjectsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/trust-management";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTrustObjectsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getTrustObjectsCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Return the Properties of a Trust Manager
     * Returns information about the supported algorithms and key sizes.
     * @return TrustManagementData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TrustManagementData getTrustObjects() throws ApiException {
        ApiResponse<TrustManagementData> resp = getTrustObjectsWithHttpInfo();
        return resp.getData();
    }

    /**
     * Return the Properties of a Trust Manager
     * Returns information about the supported algorithms and key sizes.
     * @return ApiResponse&lt;TrustManagementData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TrustManagementData> getTrustObjectsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getTrustObjectsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<TrustManagementData>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Return the Properties of a Trust Manager (asynchronously)
     * Returns information about the supported algorithms and key sizes.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTrustObjectsAsync(final ApiCallback<TrustManagementData> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTrustObjectsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TrustManagementData>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listCrlDistributionPoints
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listCrlDistributionPointsCall(String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/trust-management/crl-distribution-points";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (includedFields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("included_fields", includedFields));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page_size", pageSize));
        if (sortAscending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_ascending", sortAscending));
        if (sortBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_by", sortBy));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listCrlDistributionPointsValidateBeforeCall(String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listCrlDistributionPointsCall(cursor, includedFields, pageSize, sortAscending, sortBy, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Return the list of CrlDistributionPoints
     * Return the list of CrlDistributionPoints
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @return CrlDistributionPointList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CrlDistributionPointList listCrlDistributionPoints(String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy) throws ApiException {
        ApiResponse<CrlDistributionPointList> resp = listCrlDistributionPointsWithHttpInfo(cursor, includedFields, pageSize, sortAscending, sortBy);
        return resp.getData();
    }

    /**
     * Return the list of CrlDistributionPoints
     * Return the list of CrlDistributionPoints
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @return ApiResponse&lt;CrlDistributionPointList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CrlDistributionPointList> listCrlDistributionPointsWithHttpInfo(String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy) throws ApiException {
        com.squareup.okhttp.Call call = listCrlDistributionPointsValidateBeforeCall(cursor, includedFields, pageSize, sortAscending, sortBy, null, null);
        Type localVarReturnType = new TypeToken<CrlDistributionPointList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Return the list of CrlDistributionPoints (asynchronously)
     * Return the list of CrlDistributionPoints
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listCrlDistributionPointsAsync(String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, final ApiCallback<CrlDistributionPointList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listCrlDistributionPointsValidateBeforeCall(cursor, includedFields, pageSize, sortAscending, sortBy, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CrlDistributionPointList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateCrl
     * @param body  (required)
     * @param crlId ID of CRL to update (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateCrlCall(Crl body, String crlId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/trust-management/crls/{crl-id}"
            .replaceAll("\\{" + "crl-id" + "\\}", apiClient.escapeString(crlId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateCrlValidateBeforeCall(Crl body, String crlId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateCrl(Async)");
        }
        // verify the required parameter 'crlId' is set
        if (crlId == null) {
            throw new ApiException("Missing the required parameter 'crlId' when calling updateCrl(Async)");
        }
        
        com.squareup.okhttp.Call call = updateCrlCall(body, crlId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update CRL for the Given CRL ID
     * Updates an existing CRL.
     * @param body  (required)
     * @param crlId ID of CRL to update (required)
     * @return Crl
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Crl updateCrl(Crl body, String crlId) throws ApiException {
        ApiResponse<Crl> resp = updateCrlWithHttpInfo(body, crlId);
        return resp.getData();
    }

    /**
     * Update CRL for the Given CRL ID
     * Updates an existing CRL.
     * @param body  (required)
     * @param crlId ID of CRL to update (required)
     * @return ApiResponse&lt;Crl&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Crl> updateCrlWithHttpInfo(Crl body, String crlId) throws ApiException {
        com.squareup.okhttp.Call call = updateCrlValidateBeforeCall(body, crlId, null, null);
        Type localVarReturnType = new TypeToken<Crl>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update CRL for the Given CRL ID (asynchronously)
     * Updates an existing CRL.
     * @param body  (required)
     * @param crlId ID of CRL to update (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateCrlAsync(Crl body, String crlId, final ApiCallback<Crl> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateCrlValidateBeforeCall(body, crlId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Crl>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateCrlDistributionPoint
     * @param body  (required)
     * @param crlDistributionPointId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateCrlDistributionPointCall(CrlDistributionPoint body, String crlDistributionPointId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/trust-management/crl-distribution-points/{crl-distribution-point-id}"
            .replaceAll("\\{" + "crl-distribution-point-id" + "\\}", apiClient.escapeString(crlDistributionPointId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateCrlDistributionPointValidateBeforeCall(CrlDistributionPoint body, String crlDistributionPointId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateCrlDistributionPoint(Async)");
        }
        // verify the required parameter 'crlDistributionPointId' is set
        if (crlDistributionPointId == null) {
            throw new ApiException("Missing the required parameter 'crlDistributionPointId' when calling updateCrlDistributionPoint(Async)");
        }
        
        com.squareup.okhttp.Call call = updateCrlDistributionPointCall(body, crlDistributionPointId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update CrlDistributionPoint with &lt;crl-distribution-point-id&gt; This allows updating the ManagedResource fields. 
     * Update CrlDistributionPoint with &lt;crl-distribution-point-id&gt; This allows updating the ManagedResource fields. 
     * @param body  (required)
     * @param crlDistributionPointId  (required)
     * @return CrlDistributionPoint
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CrlDistributionPoint updateCrlDistributionPoint(CrlDistributionPoint body, String crlDistributionPointId) throws ApiException {
        ApiResponse<CrlDistributionPoint> resp = updateCrlDistributionPointWithHttpInfo(body, crlDistributionPointId);
        return resp.getData();
    }

    /**
     * Update CrlDistributionPoint with &lt;crl-distribution-point-id&gt; This allows updating the ManagedResource fields. 
     * Update CrlDistributionPoint with &lt;crl-distribution-point-id&gt; This allows updating the ManagedResource fields. 
     * @param body  (required)
     * @param crlDistributionPointId  (required)
     * @return ApiResponse&lt;CrlDistributionPoint&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CrlDistributionPoint> updateCrlDistributionPointWithHttpInfo(CrlDistributionPoint body, String crlDistributionPointId) throws ApiException {
        com.squareup.okhttp.Call call = updateCrlDistributionPointValidateBeforeCall(body, crlDistributionPointId, null, null);
        Type localVarReturnType = new TypeToken<CrlDistributionPoint>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update CrlDistributionPoint with &lt;crl-distribution-point-id&gt; This allows updating the ManagedResource fields.  (asynchronously)
     * Update CrlDistributionPoint with &lt;crl-distribution-point-id&gt; This allows updating the ManagedResource fields. 
     * @param body  (required)
     * @param crlDistributionPointId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateCrlDistributionPointAsync(CrlDistributionPoint body, String crlDistributionPointId, final ApiCallback<CrlDistributionPoint> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateCrlDistributionPointValidateBeforeCall(body, crlDistributionPointId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CrlDistributionPoint>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
