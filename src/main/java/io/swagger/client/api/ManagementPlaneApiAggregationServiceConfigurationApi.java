/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ApiError;
import io.swagger.client.model.FeatureStackCollectionConfiguration;
import io.swagger.client.model.FeatureStackCollectionConfigurationList;
import io.swagger.client.model.GlobalCollectionConfiguration;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ManagementPlaneApiAggregationServiceConfigurationApi {
    private ApiClient apiClient;

    public ManagementPlaneApiAggregationServiceConfigurationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ManagementPlaneApiAggregationServiceConfigurationApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getAggregationServiceGlobalConfig
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAggregationServiceGlobalConfigCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/hpm/global-config";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAggregationServiceGlobalConfigValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getAggregationServiceGlobalConfigCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read global health performance monitoring configuration
     * Read global health performance monitoring configuration
     * @return GlobalCollectionConfiguration
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GlobalCollectionConfiguration getAggregationServiceGlobalConfig() throws ApiException {
        ApiResponse<GlobalCollectionConfiguration> resp = getAggregationServiceGlobalConfigWithHttpInfo();
        return resp.getData();
    }

    /**
     * Read global health performance monitoring configuration
     * Read global health performance monitoring configuration
     * @return ApiResponse&lt;GlobalCollectionConfiguration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GlobalCollectionConfiguration> getAggregationServiceGlobalConfigWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getAggregationServiceGlobalConfigValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<GlobalCollectionConfiguration>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read global health performance monitoring configuration (asynchronously)
     * Read global health performance monitoring configuration
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAggregationServiceGlobalConfigAsync(final ApiCallback<GlobalCollectionConfiguration> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAggregationServiceGlobalConfigValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GlobalCollectionConfiguration>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFeatureStackConfiguration
     * @param featureStackName  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFeatureStackConfigurationCall(String featureStackName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/hpm/features/{feature-stack-name}"
            .replaceAll("\\{" + "feature-stack-name" + "\\}", apiClient.escapeString(featureStackName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFeatureStackConfigurationValidateBeforeCall(String featureStackName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'featureStackName' is set
        if (featureStackName == null) {
            throw new ApiException("Missing the required parameter 'featureStackName' when calling getFeatureStackConfiguration(Async)");
        }
        
        com.squareup.okhttp.Call call = getFeatureStackConfigurationCall(featureStackName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read health performance monitoring configuration for feature stack
     * Returns the complete set of client type data collection configuration records for the specified feature stack. 
     * @param featureStackName  (required)
     * @return FeatureStackCollectionConfiguration
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FeatureStackCollectionConfiguration getFeatureStackConfiguration(String featureStackName) throws ApiException {
        ApiResponse<FeatureStackCollectionConfiguration> resp = getFeatureStackConfigurationWithHttpInfo(featureStackName);
        return resp.getData();
    }

    /**
     * Read health performance monitoring configuration for feature stack
     * Returns the complete set of client type data collection configuration records for the specified feature stack. 
     * @param featureStackName  (required)
     * @return ApiResponse&lt;FeatureStackCollectionConfiguration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FeatureStackCollectionConfiguration> getFeatureStackConfigurationWithHttpInfo(String featureStackName) throws ApiException {
        com.squareup.okhttp.Call call = getFeatureStackConfigurationValidateBeforeCall(featureStackName, null, null);
        Type localVarReturnType = new TypeToken<FeatureStackCollectionConfiguration>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read health performance monitoring configuration for feature stack (asynchronously)
     * Returns the complete set of client type data collection configuration records for the specified feature stack. 
     * @param featureStackName  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFeatureStackConfigurationAsync(String featureStackName, final ApiCallback<FeatureStackCollectionConfiguration> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFeatureStackConfigurationValidateBeforeCall(featureStackName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FeatureStackCollectionConfiguration>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listFeatureStackConfigurations
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listFeatureStackConfigurationsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/hpm/features";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listFeatureStackConfigurationsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listFeatureStackConfigurationsCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List all health performance monitoring feature stacks
     * List all health performance monitoring feature stacks
     * @return FeatureStackCollectionConfigurationList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FeatureStackCollectionConfigurationList listFeatureStackConfigurations() throws ApiException {
        ApiResponse<FeatureStackCollectionConfigurationList> resp = listFeatureStackConfigurationsWithHttpInfo();
        return resp.getData();
    }

    /**
     * List all health performance monitoring feature stacks
     * List all health performance monitoring feature stacks
     * @return ApiResponse&lt;FeatureStackCollectionConfigurationList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FeatureStackCollectionConfigurationList> listFeatureStackConfigurationsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = listFeatureStackConfigurationsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<FeatureStackCollectionConfigurationList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all health performance monitoring feature stacks (asynchronously)
     * List all health performance monitoring feature stacks
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listFeatureStackConfigurationsAsync(final ApiCallback<FeatureStackCollectionConfigurationList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listFeatureStackConfigurationsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FeatureStackCollectionConfigurationList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for resetAggregationServiceFeatureStackConfigurationResetCollectionFrequency
     * @param featureStackName  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call resetAggregationServiceFeatureStackConfigurationResetCollectionFrequencyCall(String featureStackName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/hpm/features/{feature-stack-name}?action=reset_collection_frequency"
            .replaceAll("\\{" + "feature-stack-name" + "\\}", apiClient.escapeString(featureStackName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call resetAggregationServiceFeatureStackConfigurationResetCollectionFrequencyValidateBeforeCall(String featureStackName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'featureStackName' is set
        if (featureStackName == null) {
            throw new ApiException("Missing the required parameter 'featureStackName' when calling resetAggregationServiceFeatureStackConfigurationResetCollectionFrequency(Async)");
        }
        
        com.squareup.okhttp.Call call = resetAggregationServiceFeatureStackConfigurationResetCollectionFrequencyCall(featureStackName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Reset the data collection frequency configuration setting to the default values
     * Reset the data collection frequency configuration setting to the default values
     * @param featureStackName  (required)
     * @return FeatureStackCollectionConfiguration
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FeatureStackCollectionConfiguration resetAggregationServiceFeatureStackConfigurationResetCollectionFrequency(String featureStackName) throws ApiException {
        ApiResponse<FeatureStackCollectionConfiguration> resp = resetAggregationServiceFeatureStackConfigurationResetCollectionFrequencyWithHttpInfo(featureStackName);
        return resp.getData();
    }

    /**
     * Reset the data collection frequency configuration setting to the default values
     * Reset the data collection frequency configuration setting to the default values
     * @param featureStackName  (required)
     * @return ApiResponse&lt;FeatureStackCollectionConfiguration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FeatureStackCollectionConfiguration> resetAggregationServiceFeatureStackConfigurationResetCollectionFrequencyWithHttpInfo(String featureStackName) throws ApiException {
        com.squareup.okhttp.Call call = resetAggregationServiceFeatureStackConfigurationResetCollectionFrequencyValidateBeforeCall(featureStackName, null, null);
        Type localVarReturnType = new TypeToken<FeatureStackCollectionConfiguration>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Reset the data collection frequency configuration setting to the default values (asynchronously)
     * Reset the data collection frequency configuration setting to the default values
     * @param featureStackName  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call resetAggregationServiceFeatureStackConfigurationResetCollectionFrequencyAsync(String featureStackName, final ApiCallback<FeatureStackCollectionConfiguration> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = resetAggregationServiceFeatureStackConfigurationResetCollectionFrequencyValidateBeforeCall(featureStackName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FeatureStackCollectionConfiguration>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateAggregationServiceGlobalConfig
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateAggregationServiceGlobalConfigCall(GlobalCollectionConfiguration body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/hpm/global-config";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateAggregationServiceGlobalConfigValidateBeforeCall(GlobalCollectionConfiguration body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateAggregationServiceGlobalConfig(Async)");
        }
        
        com.squareup.okhttp.Call call = updateAggregationServiceGlobalConfigCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Set the global configuration for aggregation service related data collection
     * Set the global configuration for aggregation service related data collection
     * @param body  (required)
     * @return GlobalCollectionConfiguration
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GlobalCollectionConfiguration updateAggregationServiceGlobalConfig(GlobalCollectionConfiguration body) throws ApiException {
        ApiResponse<GlobalCollectionConfiguration> resp = updateAggregationServiceGlobalConfigWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Set the global configuration for aggregation service related data collection
     * Set the global configuration for aggregation service related data collection
     * @param body  (required)
     * @return ApiResponse&lt;GlobalCollectionConfiguration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GlobalCollectionConfiguration> updateAggregationServiceGlobalConfigWithHttpInfo(GlobalCollectionConfiguration body) throws ApiException {
        com.squareup.okhttp.Call call = updateAggregationServiceGlobalConfigValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<GlobalCollectionConfiguration>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Set the global configuration for aggregation service related data collection (asynchronously)
     * Set the global configuration for aggregation service related data collection
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateAggregationServiceGlobalConfigAsync(GlobalCollectionConfiguration body, final ApiCallback<GlobalCollectionConfiguration> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateAggregationServiceGlobalConfigValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GlobalCollectionConfiguration>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateFeatureStackConfiguration
     * @param body  (required)
     * @param featureStackName  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateFeatureStackConfigurationCall(FeatureStackCollectionConfiguration body, String featureStackName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/hpm/features/{feature-stack-name}"
            .replaceAll("\\{" + "feature-stack-name" + "\\}", apiClient.escapeString(featureStackName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateFeatureStackConfigurationValidateBeforeCall(FeatureStackCollectionConfiguration body, String featureStackName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateFeatureStackConfiguration(Async)");
        }
        // verify the required parameter 'featureStackName' is set
        if (featureStackName == null) {
            throw new ApiException("Missing the required parameter 'featureStackName' when calling updateFeatureStackConfiguration(Async)");
        }
        
        com.squareup.okhttp.Call call = updateFeatureStackConfigurationCall(body, featureStackName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update health performance monitoring configuration for feature stack
     * Apply the data collection configuration for the specified feature stack. 
     * @param body  (required)
     * @param featureStackName  (required)
     * @return FeatureStackCollectionConfiguration
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FeatureStackCollectionConfiguration updateFeatureStackConfiguration(FeatureStackCollectionConfiguration body, String featureStackName) throws ApiException {
        ApiResponse<FeatureStackCollectionConfiguration> resp = updateFeatureStackConfigurationWithHttpInfo(body, featureStackName);
        return resp.getData();
    }

    /**
     * Update health performance monitoring configuration for feature stack
     * Apply the data collection configuration for the specified feature stack. 
     * @param body  (required)
     * @param featureStackName  (required)
     * @return ApiResponse&lt;FeatureStackCollectionConfiguration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FeatureStackCollectionConfiguration> updateFeatureStackConfigurationWithHttpInfo(FeatureStackCollectionConfiguration body, String featureStackName) throws ApiException {
        com.squareup.okhttp.Call call = updateFeatureStackConfigurationValidateBeforeCall(body, featureStackName, null, null);
        Type localVarReturnType = new TypeToken<FeatureStackCollectionConfiguration>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update health performance monitoring configuration for feature stack (asynchronously)
     * Apply the data collection configuration for the specified feature stack. 
     * @param body  (required)
     * @param featureStackName  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateFeatureStackConfigurationAsync(FeatureStackCollectionConfiguration body, String featureStackName, final ApiCallback<FeatureStackCollectionConfiguration> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateFeatureStackConfigurationValidateBeforeCall(body, featureStackName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FeatureStackCollectionConfiguration>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
