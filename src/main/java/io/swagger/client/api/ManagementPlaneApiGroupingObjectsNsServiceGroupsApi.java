/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ApiError;
import io.swagger.client.model.NSServiceGroup;
import io.swagger.client.model.NSServiceGroupListResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ManagementPlaneApiGroupingObjectsNsServiceGroupsApi {
    private ApiClient apiClient;

    public ManagementPlaneApiGroupingObjectsNsServiceGroupsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ManagementPlaneApiGroupingObjectsNsServiceGroupsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createNSServiceGroup
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createNSServiceGroupCall(NSServiceGroup body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/ns-service-groups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createNSServiceGroupValidateBeforeCall(NSServiceGroup body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createNSServiceGroup(Async)");
        }
        
        com.squareup.okhttp.Call call = createNSServiceGroupCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create NSServiceGroup
     * Creates a new NSServiceGroup which can contain NSServices. A given NSServiceGroup can contain either only ether type of NSServices or only non-ether type of NSServices, i.e. an NSServiceGroup cannot contain a mix of both ether and non-ether types of NSServices. 
     * @param body  (required)
     * @return NSServiceGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NSServiceGroup createNSServiceGroup(NSServiceGroup body) throws ApiException {
        ApiResponse<NSServiceGroup> resp = createNSServiceGroupWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create NSServiceGroup
     * Creates a new NSServiceGroup which can contain NSServices. A given NSServiceGroup can contain either only ether type of NSServices or only non-ether type of NSServices, i.e. an NSServiceGroup cannot contain a mix of both ether and non-ether types of NSServices. 
     * @param body  (required)
     * @return ApiResponse&lt;NSServiceGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NSServiceGroup> createNSServiceGroupWithHttpInfo(NSServiceGroup body) throws ApiException {
        com.squareup.okhttp.Call call = createNSServiceGroupValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<NSServiceGroup>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create NSServiceGroup (asynchronously)
     * Creates a new NSServiceGroup which can contain NSServices. A given NSServiceGroup can contain either only ether type of NSServices or only non-ether type of NSServices, i.e. an NSServiceGroup cannot contain a mix of both ether and non-ether types of NSServices. 
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createNSServiceGroupAsync(NSServiceGroup body, final ApiCallback<NSServiceGroup> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createNSServiceGroupValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NSServiceGroup>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteNSServiceGroup
     * @param nsServiceGroupId NSServiceGroup Id (required)
     * @param force Force delete the resource even if it is being used somewhere  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteNSServiceGroupCall(String nsServiceGroupId, Boolean force, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ns-service-groups/{ns-service-group-id}"
            .replaceAll("\\{" + "ns-service-group-id" + "\\}", apiClient.escapeString(nsServiceGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (force != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("force", force));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteNSServiceGroupValidateBeforeCall(String nsServiceGroupId, Boolean force, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'nsServiceGroupId' is set
        if (nsServiceGroupId == null) {
            throw new ApiException("Missing the required parameter 'nsServiceGroupId' when calling deleteNSServiceGroup(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteNSServiceGroupCall(nsServiceGroupId, force, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete NSServiceGroup
     * Deletes the specified NSServiceGroup. By default, if the NSServiceGroup is consumed in a Firewall rule, it won&#x27;t get deleted. In such situations, pass \&quot;force&#x3D;true\&quot; as query param to force delete the NSServiceGroup. 
     * @param nsServiceGroupId NSServiceGroup Id (required)
     * @param force Force delete the resource even if it is being used somewhere  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteNSServiceGroup(String nsServiceGroupId, Boolean force) throws ApiException {
        deleteNSServiceGroupWithHttpInfo(nsServiceGroupId, force);
    }

    /**
     * Delete NSServiceGroup
     * Deletes the specified NSServiceGroup. By default, if the NSServiceGroup is consumed in a Firewall rule, it won&#x27;t get deleted. In such situations, pass \&quot;force&#x3D;true\&quot; as query param to force delete the NSServiceGroup. 
     * @param nsServiceGroupId NSServiceGroup Id (required)
     * @param force Force delete the resource even if it is being used somewhere  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteNSServiceGroupWithHttpInfo(String nsServiceGroupId, Boolean force) throws ApiException {
        com.squareup.okhttp.Call call = deleteNSServiceGroupValidateBeforeCall(nsServiceGroupId, force, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete NSServiceGroup (asynchronously)
     * Deletes the specified NSServiceGroup. By default, if the NSServiceGroup is consumed in a Firewall rule, it won&#x27;t get deleted. In such situations, pass \&quot;force&#x3D;true\&quot; as query param to force delete the NSServiceGroup. 
     * @param nsServiceGroupId NSServiceGroup Id (required)
     * @param force Force delete the resource even if it is being used somewhere  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteNSServiceGroupAsync(String nsServiceGroupId, Boolean force, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteNSServiceGroupValidateBeforeCall(nsServiceGroupId, force, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for listNSServiceGroups
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param defaultService Fetch all default NSServiceGroups (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listNSServiceGroupsCall(String cursor, Boolean defaultService, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ns-service-groups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (defaultService != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("default_service", defaultService));
        if (includedFields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("included_fields", includedFields));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page_size", pageSize));
        if (sortAscending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_ascending", sortAscending));
        if (sortBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_by", sortBy));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listNSServiceGroupsValidateBeforeCall(String cursor, Boolean defaultService, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listNSServiceGroupsCall(cursor, defaultService, includedFields, pageSize, sortAscending, sortBy, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List all NSServiceGroups
     * Returns paginated list of NSServiceGroups 
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param defaultService Fetch all default NSServiceGroups (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @return NSServiceGroupListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NSServiceGroupListResult listNSServiceGroups(String cursor, Boolean defaultService, String includedFields, Long pageSize, Boolean sortAscending, String sortBy) throws ApiException {
        ApiResponse<NSServiceGroupListResult> resp = listNSServiceGroupsWithHttpInfo(cursor, defaultService, includedFields, pageSize, sortAscending, sortBy);
        return resp.getData();
    }

    /**
     * List all NSServiceGroups
     * Returns paginated list of NSServiceGroups 
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param defaultService Fetch all default NSServiceGroups (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @return ApiResponse&lt;NSServiceGroupListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NSServiceGroupListResult> listNSServiceGroupsWithHttpInfo(String cursor, Boolean defaultService, String includedFields, Long pageSize, Boolean sortAscending, String sortBy) throws ApiException {
        com.squareup.okhttp.Call call = listNSServiceGroupsValidateBeforeCall(cursor, defaultService, includedFields, pageSize, sortAscending, sortBy, null, null);
        Type localVarReturnType = new TypeToken<NSServiceGroupListResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all NSServiceGroups (asynchronously)
     * Returns paginated list of NSServiceGroups 
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param defaultService Fetch all default NSServiceGroups (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listNSServiceGroupsAsync(String cursor, Boolean defaultService, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, final ApiCallback<NSServiceGroupListResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listNSServiceGroupsValidateBeforeCall(cursor, defaultService, includedFields, pageSize, sortAscending, sortBy, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NSServiceGroupListResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for readNSServiceGroup
     * @param nsServiceGroupId NSServiceGroup Id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call readNSServiceGroupCall(String nsServiceGroupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ns-service-groups/{ns-service-group-id}"
            .replaceAll("\\{" + "ns-service-group-id" + "\\}", apiClient.escapeString(nsServiceGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call readNSServiceGroupValidateBeforeCall(String nsServiceGroupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'nsServiceGroupId' is set
        if (nsServiceGroupId == null) {
            throw new ApiException("Missing the required parameter 'nsServiceGroupId' when calling readNSServiceGroup(Async)");
        }
        
        com.squareup.okhttp.Call call = readNSServiceGroupCall(nsServiceGroupId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read NSServiceGroup
     * Returns information about the specified NSServiceGroup 
     * @param nsServiceGroupId NSServiceGroup Id (required)
     * @return NSServiceGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NSServiceGroup readNSServiceGroup(String nsServiceGroupId) throws ApiException {
        ApiResponse<NSServiceGroup> resp = readNSServiceGroupWithHttpInfo(nsServiceGroupId);
        return resp.getData();
    }

    /**
     * Read NSServiceGroup
     * Returns information about the specified NSServiceGroup 
     * @param nsServiceGroupId NSServiceGroup Id (required)
     * @return ApiResponse&lt;NSServiceGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NSServiceGroup> readNSServiceGroupWithHttpInfo(String nsServiceGroupId) throws ApiException {
        com.squareup.okhttp.Call call = readNSServiceGroupValidateBeforeCall(nsServiceGroupId, null, null);
        Type localVarReturnType = new TypeToken<NSServiceGroup>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read NSServiceGroup (asynchronously)
     * Returns information about the specified NSServiceGroup 
     * @param nsServiceGroupId NSServiceGroup Id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call readNSServiceGroupAsync(String nsServiceGroupId, final ApiCallback<NSServiceGroup> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = readNSServiceGroupValidateBeforeCall(nsServiceGroupId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NSServiceGroup>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateNSServiceGroup
     * @param body  (required)
     * @param nsServiceGroupId NSServiceGroup Id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateNSServiceGroupCall(NSServiceGroup body, String nsServiceGroupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/ns-service-groups/{ns-service-group-id}"
            .replaceAll("\\{" + "ns-service-group-id" + "\\}", apiClient.escapeString(nsServiceGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateNSServiceGroupValidateBeforeCall(NSServiceGroup body, String nsServiceGroupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateNSServiceGroup(Async)");
        }
        // verify the required parameter 'nsServiceGroupId' is set
        if (nsServiceGroupId == null) {
            throw new ApiException("Missing the required parameter 'nsServiceGroupId' when calling updateNSServiceGroup(Async)");
        }
        
        com.squareup.okhttp.Call call = updateNSServiceGroupCall(body, nsServiceGroupId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update NSServiceGroup
     * Updates the specified NSService. Modifiable parameters include the description, display_name and members. 
     * @param body  (required)
     * @param nsServiceGroupId NSServiceGroup Id (required)
     * @return NSServiceGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NSServiceGroup updateNSServiceGroup(NSServiceGroup body, String nsServiceGroupId) throws ApiException {
        ApiResponse<NSServiceGroup> resp = updateNSServiceGroupWithHttpInfo(body, nsServiceGroupId);
        return resp.getData();
    }

    /**
     * Update NSServiceGroup
     * Updates the specified NSService. Modifiable parameters include the description, display_name and members. 
     * @param body  (required)
     * @param nsServiceGroupId NSServiceGroup Id (required)
     * @return ApiResponse&lt;NSServiceGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NSServiceGroup> updateNSServiceGroupWithHttpInfo(NSServiceGroup body, String nsServiceGroupId) throws ApiException {
        com.squareup.okhttp.Call call = updateNSServiceGroupValidateBeforeCall(body, nsServiceGroupId, null, null);
        Type localVarReturnType = new TypeToken<NSServiceGroup>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update NSServiceGroup (asynchronously)
     * Updates the specified NSService. Modifiable parameters include the description, display_name and members. 
     * @param body  (required)
     * @param nsServiceGroupId NSServiceGroup Id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateNSServiceGroupAsync(NSServiceGroup body, String nsServiceGroupId, final ApiCallback<NSServiceGroup> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateNSServiceGroupValidateBeforeCall(body, nsServiceGroupId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NSServiceGroup>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
