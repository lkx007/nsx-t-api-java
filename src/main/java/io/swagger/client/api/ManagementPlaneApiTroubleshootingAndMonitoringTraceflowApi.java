/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ApiError;
import io.swagger.client.model.Traceflow;
import io.swagger.client.model.TraceflowListResult;
import io.swagger.client.model.TraceflowObservationListResult;
import io.swagger.client.model.TraceflowRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ManagementPlaneApiTroubleshootingAndMonitoringTraceflowApi {
    private ApiClient apiClient;

    public ManagementPlaneApiTroubleshootingAndMonitoringTraceflowApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ManagementPlaneApiTroubleshootingAndMonitoringTraceflowApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createTraceflow
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createTraceflowCall(TraceflowRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/traceflows";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createTraceflowValidateBeforeCall(TraceflowRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createTraceflow(Async)");
        }
        
        com.squareup.okhttp.Call call = createTraceflowCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Initiate a Traceflow Operation on the Specified Port
     * Initiate a Traceflow Operation on the Specified Port
     * @param body  (required)
     * @return Traceflow
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Traceflow createTraceflow(TraceflowRequest body) throws ApiException {
        ApiResponse<Traceflow> resp = createTraceflowWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Initiate a Traceflow Operation on the Specified Port
     * Initiate a Traceflow Operation on the Specified Port
     * @param body  (required)
     * @return ApiResponse&lt;Traceflow&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Traceflow> createTraceflowWithHttpInfo(TraceflowRequest body) throws ApiException {
        com.squareup.okhttp.Call call = createTraceflowValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<Traceflow>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Initiate a Traceflow Operation on the Specified Port (asynchronously)
     * Initiate a Traceflow Operation on the Specified Port
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createTraceflowAsync(TraceflowRequest body, final ApiCallback<Traceflow> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createTraceflowValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Traceflow>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteTraceflow
     * @param traceflowId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteTraceflowCall(String traceflowId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/traceflows/{traceflow-id}"
            .replaceAll("\\{" + "traceflow-id" + "\\}", apiClient.escapeString(traceflowId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteTraceflowValidateBeforeCall(String traceflowId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'traceflowId' is set
        if (traceflowId == null) {
            throw new ApiException("Missing the required parameter 'traceflowId' when calling deleteTraceflow(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteTraceflowCall(traceflowId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete the Traceflow round
     * Delete the Traceflow round
     * @param traceflowId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteTraceflow(String traceflowId) throws ApiException {
        deleteTraceflowWithHttpInfo(traceflowId);
    }

    /**
     * Delete the Traceflow round
     * Delete the Traceflow round
     * @param traceflowId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteTraceflowWithHttpInfo(String traceflowId) throws ApiException {
        com.squareup.okhttp.Call call = deleteTraceflowValidateBeforeCall(traceflowId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete the Traceflow round (asynchronously)
     * Delete the Traceflow round
     * @param traceflowId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteTraceflowAsync(String traceflowId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteTraceflowValidateBeforeCall(traceflowId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getTraceflow
     * @param traceflowId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTraceflowCall(String traceflowId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/traceflows/{traceflow-id}"
            .replaceAll("\\{" + "traceflow-id" + "\\}", apiClient.escapeString(traceflowId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTraceflowValidateBeforeCall(String traceflowId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'traceflowId' is set
        if (traceflowId == null) {
            throw new ApiException("Missing the required parameter 'traceflowId' when calling getTraceflow(Async)");
        }
        
        com.squareup.okhttp.Call call = getTraceflowCall(traceflowId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the Traceflow round status and result summary
     * Get the Traceflow round status and result summary
     * @param traceflowId  (required)
     * @return Traceflow
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Traceflow getTraceflow(String traceflowId) throws ApiException {
        ApiResponse<Traceflow> resp = getTraceflowWithHttpInfo(traceflowId);
        return resp.getData();
    }

    /**
     * Get the Traceflow round status and result summary
     * Get the Traceflow round status and result summary
     * @param traceflowId  (required)
     * @return ApiResponse&lt;Traceflow&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Traceflow> getTraceflowWithHttpInfo(String traceflowId) throws ApiException {
        com.squareup.okhttp.Call call = getTraceflowValidateBeforeCall(traceflowId, null, null);
        Type localVarReturnType = new TypeToken<Traceflow>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the Traceflow round status and result summary (asynchronously)
     * Get the Traceflow round status and result summary
     * @param traceflowId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTraceflowAsync(String traceflowId, final ApiCallback<Traceflow> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTraceflowValidateBeforeCall(traceflowId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Traceflow>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTraceflowObservations
     * @param traceflowId  (required)
     * @param componentName Observations having the given component name will be listed. (optional)
     * @param componentType Observations having the given component type will be listed. (optional)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param resourceType The type of observations that will be listed. (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param transportNodeName Observations having the given transport node name will be listed. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTraceflowObservationsCall(String traceflowId, String componentName, String componentType, String cursor, String includedFields, Long pageSize, String resourceType, Boolean sortAscending, String sortBy, String transportNodeName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/traceflows/{traceflow-id}/observations"
            .replaceAll("\\{" + "traceflow-id" + "\\}", apiClient.escapeString(traceflowId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (componentName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("component_name", componentName));
        if (componentType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("component_type", componentType));
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (includedFields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("included_fields", includedFields));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page_size", pageSize));
        if (resourceType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("resource_type", resourceType));
        if (sortAscending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_ascending", sortAscending));
        if (sortBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_by", sortBy));
        if (transportNodeName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("transport_node_name", transportNodeName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTraceflowObservationsValidateBeforeCall(String traceflowId, String componentName, String componentType, String cursor, String includedFields, Long pageSize, String resourceType, Boolean sortAscending, String sortBy, String transportNodeName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'traceflowId' is set
        if (traceflowId == null) {
            throw new ApiException("Missing the required parameter 'traceflowId' when calling getTraceflowObservations(Async)");
        }
        
        com.squareup.okhttp.Call call = getTraceflowObservationsCall(traceflowId, componentName, componentType, cursor, includedFields, pageSize, resourceType, sortAscending, sortBy, transportNodeName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get observations for the Traceflow round
     * Get observations for the Traceflow round
     * @param traceflowId  (required)
     * @param componentName Observations having the given component name will be listed. (optional)
     * @param componentType Observations having the given component type will be listed. (optional)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param resourceType The type of observations that will be listed. (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param transportNodeName Observations having the given transport node name will be listed. (optional)
     * @return TraceflowObservationListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TraceflowObservationListResult getTraceflowObservations(String traceflowId, String componentName, String componentType, String cursor, String includedFields, Long pageSize, String resourceType, Boolean sortAscending, String sortBy, String transportNodeName) throws ApiException {
        ApiResponse<TraceflowObservationListResult> resp = getTraceflowObservationsWithHttpInfo(traceflowId, componentName, componentType, cursor, includedFields, pageSize, resourceType, sortAscending, sortBy, transportNodeName);
        return resp.getData();
    }

    /**
     * Get observations for the Traceflow round
     * Get observations for the Traceflow round
     * @param traceflowId  (required)
     * @param componentName Observations having the given component name will be listed. (optional)
     * @param componentType Observations having the given component type will be listed. (optional)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param resourceType The type of observations that will be listed. (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param transportNodeName Observations having the given transport node name will be listed. (optional)
     * @return ApiResponse&lt;TraceflowObservationListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TraceflowObservationListResult> getTraceflowObservationsWithHttpInfo(String traceflowId, String componentName, String componentType, String cursor, String includedFields, Long pageSize, String resourceType, Boolean sortAscending, String sortBy, String transportNodeName) throws ApiException {
        com.squareup.okhttp.Call call = getTraceflowObservationsValidateBeforeCall(traceflowId, componentName, componentType, cursor, includedFields, pageSize, resourceType, sortAscending, sortBy, transportNodeName, null, null);
        Type localVarReturnType = new TypeToken<TraceflowObservationListResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get observations for the Traceflow round (asynchronously)
     * Get observations for the Traceflow round
     * @param traceflowId  (required)
     * @param componentName Observations having the given component name will be listed. (optional)
     * @param componentType Observations having the given component type will be listed. (optional)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param resourceType The type of observations that will be listed. (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param transportNodeName Observations having the given transport node name will be listed. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTraceflowObservationsAsync(String traceflowId, String componentName, String componentType, String cursor, String includedFields, Long pageSize, String resourceType, Boolean sortAscending, String sortBy, String transportNodeName, final ApiCallback<TraceflowObservationListResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTraceflowObservationsValidateBeforeCall(traceflowId, componentName, componentType, cursor, includedFields, pageSize, resourceType, sortAscending, sortBy, transportNodeName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TraceflowObservationListResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listTraceflows
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param lportId id of the source logical port where the trace flows originated (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listTraceflowsCall(String cursor, String includedFields, String lportId, Long pageSize, Boolean sortAscending, String sortBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/traceflows";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (includedFields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("included_fields", includedFields));
        if (lportId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("lport_id", lportId));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page_size", pageSize));
        if (sortAscending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_ascending", sortAscending));
        if (sortBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_by", sortBy));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listTraceflowsValidateBeforeCall(String cursor, String includedFields, String lportId, Long pageSize, Boolean sortAscending, String sortBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listTraceflowsCall(cursor, includedFields, lportId, pageSize, sortAscending, sortBy, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List all Traceflow rounds
     * List all Traceflow rounds; if a logical port id is given as a query parameter, only those originated from the logical port are returned. 
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param lportId id of the source logical port where the trace flows originated (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @return TraceflowListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TraceflowListResult listTraceflows(String cursor, String includedFields, String lportId, Long pageSize, Boolean sortAscending, String sortBy) throws ApiException {
        ApiResponse<TraceflowListResult> resp = listTraceflowsWithHttpInfo(cursor, includedFields, lportId, pageSize, sortAscending, sortBy);
        return resp.getData();
    }

    /**
     * List all Traceflow rounds
     * List all Traceflow rounds; if a logical port id is given as a query parameter, only those originated from the logical port are returned. 
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param lportId id of the source logical port where the trace flows originated (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @return ApiResponse&lt;TraceflowListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TraceflowListResult> listTraceflowsWithHttpInfo(String cursor, String includedFields, String lportId, Long pageSize, Boolean sortAscending, String sortBy) throws ApiException {
        com.squareup.okhttp.Call call = listTraceflowsValidateBeforeCall(cursor, includedFields, lportId, pageSize, sortAscending, sortBy, null, null);
        Type localVarReturnType = new TypeToken<TraceflowListResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all Traceflow rounds (asynchronously)
     * List all Traceflow rounds; if a logical port id is given as a query parameter, only those originated from the logical port are returned. 
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param lportId id of the source logical port where the trace flows originated (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listTraceflowsAsync(String cursor, String includedFields, String lportId, Long pageSize, Boolean sortAscending, String sortBy, final ApiCallback<TraceflowListResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listTraceflowsValidateBeforeCall(cursor, includedFields, lportId, pageSize, sortAscending, sortBy, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TraceflowListResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
