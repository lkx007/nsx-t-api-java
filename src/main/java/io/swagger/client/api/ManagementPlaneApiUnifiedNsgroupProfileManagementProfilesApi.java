/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ApiError;
import io.swagger.client.model.IpfixCollectorUpmProfile;
import io.swagger.client.model.IpfixCollectorUpmProfileListResult;
import io.swagger.client.model.IpfixUpmProfile;
import io.swagger.client.model.IpfixUpmProfileListResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ManagementPlaneApiUnifiedNsgroupProfileManagementProfilesApi {
    private ApiClient apiClient;

    public ManagementPlaneApiUnifiedNsgroupProfileManagementProfilesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ManagementPlaneApiUnifiedNsgroupProfileManagementProfilesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createIpfixCollectorUpmProfile
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createIpfixCollectorUpmProfileCall(IpfixCollectorUpmProfile body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/ipfix-collector-profiles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createIpfixCollectorUpmProfileValidateBeforeCall(IpfixCollectorUpmProfile body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createIpfixCollectorUpmProfile(Async)");
        }
        
        com.squareup.okhttp.Call call = createIpfixCollectorUpmProfileCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create a new IPFIX collector profile
     * Create a new IPFIX collector profile with essential properties.
     * @param body  (required)
     * @return IpfixCollectorUpmProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public IpfixCollectorUpmProfile createIpfixCollectorUpmProfile(IpfixCollectorUpmProfile body) throws ApiException {
        ApiResponse<IpfixCollectorUpmProfile> resp = createIpfixCollectorUpmProfileWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create a new IPFIX collector profile
     * Create a new IPFIX collector profile with essential properties.
     * @param body  (required)
     * @return ApiResponse&lt;IpfixCollectorUpmProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<IpfixCollectorUpmProfile> createIpfixCollectorUpmProfileWithHttpInfo(IpfixCollectorUpmProfile body) throws ApiException {
        com.squareup.okhttp.Call call = createIpfixCollectorUpmProfileValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<IpfixCollectorUpmProfile>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a new IPFIX collector profile (asynchronously)
     * Create a new IPFIX collector profile with essential properties.
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createIpfixCollectorUpmProfileAsync(IpfixCollectorUpmProfile body, final ApiCallback<IpfixCollectorUpmProfile> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createIpfixCollectorUpmProfileValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<IpfixCollectorUpmProfile>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createIpfixUpmProfile
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createIpfixUpmProfileCall(IpfixUpmProfile body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/ipfix-profiles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createIpfixUpmProfileValidateBeforeCall(IpfixUpmProfile body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createIpfixUpmProfile(Async)");
        }
        
        com.squareup.okhttp.Call call = createIpfixUpmProfileCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create a new IPFIX profile
     * Create a new IPFIX profile with essential properties.
     * @param body  (required)
     * @return IpfixUpmProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public IpfixUpmProfile createIpfixUpmProfile(IpfixUpmProfile body) throws ApiException {
        ApiResponse<IpfixUpmProfile> resp = createIpfixUpmProfileWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create a new IPFIX profile
     * Create a new IPFIX profile with essential properties.
     * @param body  (required)
     * @return ApiResponse&lt;IpfixUpmProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<IpfixUpmProfile> createIpfixUpmProfileWithHttpInfo(IpfixUpmProfile body) throws ApiException {
        com.squareup.okhttp.Call call = createIpfixUpmProfileValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<IpfixUpmProfile>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a new IPFIX profile (asynchronously)
     * Create a new IPFIX profile with essential properties.
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createIpfixUpmProfileAsync(IpfixUpmProfile body, final ApiCallback<IpfixUpmProfile> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createIpfixUpmProfileValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<IpfixUpmProfile>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteIpfixCollectorUpmProfile
     * @param ipfixCollectorProfileId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteIpfixCollectorUpmProfileCall(String ipfixCollectorProfileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ipfix-collector-profiles/{ipfix-collector-profile-id}"
            .replaceAll("\\{" + "ipfix-collector-profile-id" + "\\}", apiClient.escapeString(ipfixCollectorProfileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteIpfixCollectorUpmProfileValidateBeforeCall(String ipfixCollectorProfileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'ipfixCollectorProfileId' is set
        if (ipfixCollectorProfileId == null) {
            throw new ApiException("Missing the required parameter 'ipfixCollectorProfileId' when calling deleteIpfixCollectorUpmProfile(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteIpfixCollectorUpmProfileCall(ipfixCollectorProfileId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete an existing IPFIX collector profile
     * Delete an existing IPFIX collector profile by ID.
     * @param ipfixCollectorProfileId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteIpfixCollectorUpmProfile(String ipfixCollectorProfileId) throws ApiException {
        deleteIpfixCollectorUpmProfileWithHttpInfo(ipfixCollectorProfileId);
    }

    /**
     * Delete an existing IPFIX collector profile
     * Delete an existing IPFIX collector profile by ID.
     * @param ipfixCollectorProfileId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteIpfixCollectorUpmProfileWithHttpInfo(String ipfixCollectorProfileId) throws ApiException {
        com.squareup.okhttp.Call call = deleteIpfixCollectorUpmProfileValidateBeforeCall(ipfixCollectorProfileId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete an existing IPFIX collector profile (asynchronously)
     * Delete an existing IPFIX collector profile by ID.
     * @param ipfixCollectorProfileId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteIpfixCollectorUpmProfileAsync(String ipfixCollectorProfileId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteIpfixCollectorUpmProfileValidateBeforeCall(ipfixCollectorProfileId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteIpfixUpmProfile
     * @param ipfixProfileId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteIpfixUpmProfileCall(String ipfixProfileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ipfix-profiles/{ipfix-profile-id}"
            .replaceAll("\\{" + "ipfix-profile-id" + "\\}", apiClient.escapeString(ipfixProfileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteIpfixUpmProfileValidateBeforeCall(String ipfixProfileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'ipfixProfileId' is set
        if (ipfixProfileId == null) {
            throw new ApiException("Missing the required parameter 'ipfixProfileId' when calling deleteIpfixUpmProfile(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteIpfixUpmProfileCall(ipfixProfileId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete an existing IPFIX profile
     * Delete an existing IPFIX profile by ID.
     * @param ipfixProfileId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteIpfixUpmProfile(String ipfixProfileId) throws ApiException {
        deleteIpfixUpmProfileWithHttpInfo(ipfixProfileId);
    }

    /**
     * Delete an existing IPFIX profile
     * Delete an existing IPFIX profile by ID.
     * @param ipfixProfileId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteIpfixUpmProfileWithHttpInfo(String ipfixProfileId) throws ApiException {
        com.squareup.okhttp.Call call = deleteIpfixUpmProfileValidateBeforeCall(ipfixProfileId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete an existing IPFIX profile (asynchronously)
     * Delete an existing IPFIX profile by ID.
     * @param ipfixProfileId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteIpfixUpmProfileAsync(String ipfixProfileId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteIpfixUpmProfileValidateBeforeCall(ipfixProfileId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getIpfixCollectorUpmProfile
     * @param ipfixCollectorProfileId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getIpfixCollectorUpmProfileCall(String ipfixCollectorProfileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ipfix-collector-profiles/{ipfix-collector-profile-id}"
            .replaceAll("\\{" + "ipfix-collector-profile-id" + "\\}", apiClient.escapeString(ipfixCollectorProfileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getIpfixCollectorUpmProfileValidateBeforeCall(String ipfixCollectorProfileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'ipfixCollectorProfileId' is set
        if (ipfixCollectorProfileId == null) {
            throw new ApiException("Missing the required parameter 'ipfixCollectorProfileId' when calling getIpfixCollectorUpmProfile(Async)");
        }
        
        com.squareup.okhttp.Call call = getIpfixCollectorUpmProfileCall(ipfixCollectorProfileId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get an existing IPFIX collector profile
     * Get an existing IPFIX collector profile by profile ID.
     * @param ipfixCollectorProfileId  (required)
     * @return IpfixCollectorUpmProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public IpfixCollectorUpmProfile getIpfixCollectorUpmProfile(String ipfixCollectorProfileId) throws ApiException {
        ApiResponse<IpfixCollectorUpmProfile> resp = getIpfixCollectorUpmProfileWithHttpInfo(ipfixCollectorProfileId);
        return resp.getData();
    }

    /**
     * Get an existing IPFIX collector profile
     * Get an existing IPFIX collector profile by profile ID.
     * @param ipfixCollectorProfileId  (required)
     * @return ApiResponse&lt;IpfixCollectorUpmProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<IpfixCollectorUpmProfile> getIpfixCollectorUpmProfileWithHttpInfo(String ipfixCollectorProfileId) throws ApiException {
        com.squareup.okhttp.Call call = getIpfixCollectorUpmProfileValidateBeforeCall(ipfixCollectorProfileId, null, null);
        Type localVarReturnType = new TypeToken<IpfixCollectorUpmProfile>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get an existing IPFIX collector profile (asynchronously)
     * Get an existing IPFIX collector profile by profile ID.
     * @param ipfixCollectorProfileId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getIpfixCollectorUpmProfileAsync(String ipfixCollectorProfileId, final ApiCallback<IpfixCollectorUpmProfile> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getIpfixCollectorUpmProfileValidateBeforeCall(ipfixCollectorProfileId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<IpfixCollectorUpmProfile>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getIpfixUpmProfile
     * @param ipfixProfileId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getIpfixUpmProfileCall(String ipfixProfileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ipfix-profiles/{ipfix-profile-id}"
            .replaceAll("\\{" + "ipfix-profile-id" + "\\}", apiClient.escapeString(ipfixProfileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getIpfixUpmProfileValidateBeforeCall(String ipfixProfileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'ipfixProfileId' is set
        if (ipfixProfileId == null) {
            throw new ApiException("Missing the required parameter 'ipfixProfileId' when calling getIpfixUpmProfile(Async)");
        }
        
        com.squareup.okhttp.Call call = getIpfixUpmProfileCall(ipfixProfileId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get an existing IPFIX profile
     * Get an existing IPFIX profile by profile ID.
     * @param ipfixProfileId  (required)
     * @return IpfixUpmProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public IpfixUpmProfile getIpfixUpmProfile(String ipfixProfileId) throws ApiException {
        ApiResponse<IpfixUpmProfile> resp = getIpfixUpmProfileWithHttpInfo(ipfixProfileId);
        return resp.getData();
    }

    /**
     * Get an existing IPFIX profile
     * Get an existing IPFIX profile by profile ID.
     * @param ipfixProfileId  (required)
     * @return ApiResponse&lt;IpfixUpmProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<IpfixUpmProfile> getIpfixUpmProfileWithHttpInfo(String ipfixProfileId) throws ApiException {
        com.squareup.okhttp.Call call = getIpfixUpmProfileValidateBeforeCall(ipfixProfileId, null, null);
        Type localVarReturnType = new TypeToken<IpfixUpmProfile>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get an existing IPFIX profile (asynchronously)
     * Get an existing IPFIX profile by profile ID.
     * @param ipfixProfileId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getIpfixUpmProfileAsync(String ipfixProfileId, final ApiCallback<IpfixUpmProfile> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getIpfixUpmProfileValidateBeforeCall(ipfixProfileId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<IpfixUpmProfile>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listIpfixCollectorUpmProfiles
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param profileTypes IPFIX Collector Profile Type List (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listIpfixCollectorUpmProfilesCall(String cursor, String includedFields, Long pageSize, String profileTypes, Boolean sortAscending, String sortBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ipfix-collector-profiles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (includedFields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("included_fields", includedFields));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page_size", pageSize));
        if (profileTypes != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("profile_types", profileTypes));
        if (sortAscending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_ascending", sortAscending));
        if (sortBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_by", sortBy));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listIpfixCollectorUpmProfilesValidateBeforeCall(String cursor, String includedFields, Long pageSize, String profileTypes, Boolean sortAscending, String sortBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listIpfixCollectorUpmProfilesCall(cursor, includedFields, pageSize, profileTypes, sortAscending, sortBy, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List IPFIX Collector Profies
     * Query IPFIX collector profiles with list parameters. List result can be filtered by profile type defined by IpfixCollectorUpmProfileType. 
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param profileTypes IPFIX Collector Profile Type List (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @return IpfixCollectorUpmProfileListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public IpfixCollectorUpmProfileListResult listIpfixCollectorUpmProfiles(String cursor, String includedFields, Long pageSize, String profileTypes, Boolean sortAscending, String sortBy) throws ApiException {
        ApiResponse<IpfixCollectorUpmProfileListResult> resp = listIpfixCollectorUpmProfilesWithHttpInfo(cursor, includedFields, pageSize, profileTypes, sortAscending, sortBy);
        return resp.getData();
    }

    /**
     * List IPFIX Collector Profies
     * Query IPFIX collector profiles with list parameters. List result can be filtered by profile type defined by IpfixCollectorUpmProfileType. 
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param profileTypes IPFIX Collector Profile Type List (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @return ApiResponse&lt;IpfixCollectorUpmProfileListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<IpfixCollectorUpmProfileListResult> listIpfixCollectorUpmProfilesWithHttpInfo(String cursor, String includedFields, Long pageSize, String profileTypes, Boolean sortAscending, String sortBy) throws ApiException {
        com.squareup.okhttp.Call call = listIpfixCollectorUpmProfilesValidateBeforeCall(cursor, includedFields, pageSize, profileTypes, sortAscending, sortBy, null, null);
        Type localVarReturnType = new TypeToken<IpfixCollectorUpmProfileListResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List IPFIX Collector Profies (asynchronously)
     * Query IPFIX collector profiles with list parameters. List result can be filtered by profile type defined by IpfixCollectorUpmProfileType. 
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param profileTypes IPFIX Collector Profile Type List (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listIpfixCollectorUpmProfilesAsync(String cursor, String includedFields, Long pageSize, String profileTypes, Boolean sortAscending, String sortBy, final ApiCallback<IpfixCollectorUpmProfileListResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listIpfixCollectorUpmProfilesValidateBeforeCall(cursor, includedFields, pageSize, profileTypes, sortAscending, sortBy, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<IpfixCollectorUpmProfileListResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listIpfixUpmProfiles
     * @param appliedToEntityId ID of Entity Applied with Profile (optional)
     * @param appliedToEntityType Supported Entity Types (optional)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param profileTypes IPFIX Profile Type List (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listIpfixUpmProfilesCall(String appliedToEntityId, String appliedToEntityType, String cursor, String includedFields, Long pageSize, String profileTypes, Boolean sortAscending, String sortBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ipfix-profiles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (appliedToEntityId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("applied_to_entity_id", appliedToEntityId));
        if (appliedToEntityType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("applied_to_entity_type", appliedToEntityType));
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (includedFields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("included_fields", includedFields));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page_size", pageSize));
        if (profileTypes != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("profile_types", profileTypes));
        if (sortAscending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_ascending", sortAscending));
        if (sortBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_by", sortBy));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listIpfixUpmProfilesValidateBeforeCall(String appliedToEntityId, String appliedToEntityType, String cursor, String includedFields, Long pageSize, String profileTypes, Boolean sortAscending, String sortBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listIpfixUpmProfilesCall(appliedToEntityId, appliedToEntityType, cursor, includedFields, pageSize, profileTypes, sortAscending, sortBy, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List IPFIX Profies
     * Query IPFIX profiles with list parameters. List result can be filtered by profile type defined by IpfixUpmProfileType. 
     * @param appliedToEntityId ID of Entity Applied with Profile (optional)
     * @param appliedToEntityType Supported Entity Types (optional)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param profileTypes IPFIX Profile Type List (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @return IpfixUpmProfileListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public IpfixUpmProfileListResult listIpfixUpmProfiles(String appliedToEntityId, String appliedToEntityType, String cursor, String includedFields, Long pageSize, String profileTypes, Boolean sortAscending, String sortBy) throws ApiException {
        ApiResponse<IpfixUpmProfileListResult> resp = listIpfixUpmProfilesWithHttpInfo(appliedToEntityId, appliedToEntityType, cursor, includedFields, pageSize, profileTypes, sortAscending, sortBy);
        return resp.getData();
    }

    /**
     * List IPFIX Profies
     * Query IPFIX profiles with list parameters. List result can be filtered by profile type defined by IpfixUpmProfileType. 
     * @param appliedToEntityId ID of Entity Applied with Profile (optional)
     * @param appliedToEntityType Supported Entity Types (optional)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param profileTypes IPFIX Profile Type List (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @return ApiResponse&lt;IpfixUpmProfileListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<IpfixUpmProfileListResult> listIpfixUpmProfilesWithHttpInfo(String appliedToEntityId, String appliedToEntityType, String cursor, String includedFields, Long pageSize, String profileTypes, Boolean sortAscending, String sortBy) throws ApiException {
        com.squareup.okhttp.Call call = listIpfixUpmProfilesValidateBeforeCall(appliedToEntityId, appliedToEntityType, cursor, includedFields, pageSize, profileTypes, sortAscending, sortBy, null, null);
        Type localVarReturnType = new TypeToken<IpfixUpmProfileListResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List IPFIX Profies (asynchronously)
     * Query IPFIX profiles with list parameters. List result can be filtered by profile type defined by IpfixUpmProfileType. 
     * @param appliedToEntityId ID of Entity Applied with Profile (optional)
     * @param appliedToEntityType Supported Entity Types (optional)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param profileTypes IPFIX Profile Type List (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listIpfixUpmProfilesAsync(String appliedToEntityId, String appliedToEntityType, String cursor, String includedFields, Long pageSize, String profileTypes, Boolean sortAscending, String sortBy, final ApiCallback<IpfixUpmProfileListResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listIpfixUpmProfilesValidateBeforeCall(appliedToEntityId, appliedToEntityType, cursor, includedFields, pageSize, profileTypes, sortAscending, sortBy, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<IpfixUpmProfileListResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateIpfixCollectorUpmProfile
     * @param body  (required)
     * @param ipfixCollectorProfileId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateIpfixCollectorUpmProfileCall(IpfixCollectorUpmProfile body, String ipfixCollectorProfileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/ipfix-collector-profiles/{ipfix-collector-profile-id}"
            .replaceAll("\\{" + "ipfix-collector-profile-id" + "\\}", apiClient.escapeString(ipfixCollectorProfileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateIpfixCollectorUpmProfileValidateBeforeCall(IpfixCollectorUpmProfile body, String ipfixCollectorProfileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateIpfixCollectorUpmProfile(Async)");
        }
        // verify the required parameter 'ipfixCollectorProfileId' is set
        if (ipfixCollectorProfileId == null) {
            throw new ApiException("Missing the required parameter 'ipfixCollectorProfileId' when calling updateIpfixCollectorUpmProfile(Async)");
        }
        
        com.squareup.okhttp.Call call = updateIpfixCollectorUpmProfileCall(body, ipfixCollectorProfileId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update an existing IPFIX collector profile
     * Update an existing IPFIX collector profile with profile ID and modified properties. 
     * @param body  (required)
     * @param ipfixCollectorProfileId  (required)
     * @return IpfixCollectorUpmProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public IpfixCollectorUpmProfile updateIpfixCollectorUpmProfile(IpfixCollectorUpmProfile body, String ipfixCollectorProfileId) throws ApiException {
        ApiResponse<IpfixCollectorUpmProfile> resp = updateIpfixCollectorUpmProfileWithHttpInfo(body, ipfixCollectorProfileId);
        return resp.getData();
    }

    /**
     * Update an existing IPFIX collector profile
     * Update an existing IPFIX collector profile with profile ID and modified properties. 
     * @param body  (required)
     * @param ipfixCollectorProfileId  (required)
     * @return ApiResponse&lt;IpfixCollectorUpmProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<IpfixCollectorUpmProfile> updateIpfixCollectorUpmProfileWithHttpInfo(IpfixCollectorUpmProfile body, String ipfixCollectorProfileId) throws ApiException {
        com.squareup.okhttp.Call call = updateIpfixCollectorUpmProfileValidateBeforeCall(body, ipfixCollectorProfileId, null, null);
        Type localVarReturnType = new TypeToken<IpfixCollectorUpmProfile>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update an existing IPFIX collector profile (asynchronously)
     * Update an existing IPFIX collector profile with profile ID and modified properties. 
     * @param body  (required)
     * @param ipfixCollectorProfileId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateIpfixCollectorUpmProfileAsync(IpfixCollectorUpmProfile body, String ipfixCollectorProfileId, final ApiCallback<IpfixCollectorUpmProfile> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateIpfixCollectorUpmProfileValidateBeforeCall(body, ipfixCollectorProfileId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<IpfixCollectorUpmProfile>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateIpfixUpmProfile
     * @param body  (required)
     * @param ipfixProfileId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateIpfixUpmProfileCall(IpfixUpmProfile body, String ipfixProfileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/ipfix-profiles/{ipfix-profile-id}"
            .replaceAll("\\{" + "ipfix-profile-id" + "\\}", apiClient.escapeString(ipfixProfileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateIpfixUpmProfileValidateBeforeCall(IpfixUpmProfile body, String ipfixProfileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateIpfixUpmProfile(Async)");
        }
        // verify the required parameter 'ipfixProfileId' is set
        if (ipfixProfileId == null) {
            throw new ApiException("Missing the required parameter 'ipfixProfileId' when calling updateIpfixUpmProfile(Async)");
        }
        
        com.squareup.okhttp.Call call = updateIpfixUpmProfileCall(body, ipfixProfileId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update an existing IPFIX profile
     * Update an existing IPFIX profile with profile ID and modified properties. 
     * @param body  (required)
     * @param ipfixProfileId  (required)
     * @return IpfixUpmProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public IpfixUpmProfile updateIpfixUpmProfile(IpfixUpmProfile body, String ipfixProfileId) throws ApiException {
        ApiResponse<IpfixUpmProfile> resp = updateIpfixUpmProfileWithHttpInfo(body, ipfixProfileId);
        return resp.getData();
    }

    /**
     * Update an existing IPFIX profile
     * Update an existing IPFIX profile with profile ID and modified properties. 
     * @param body  (required)
     * @param ipfixProfileId  (required)
     * @return ApiResponse&lt;IpfixUpmProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<IpfixUpmProfile> updateIpfixUpmProfileWithHttpInfo(IpfixUpmProfile body, String ipfixProfileId) throws ApiException {
        com.squareup.okhttp.Call call = updateIpfixUpmProfileValidateBeforeCall(body, ipfixProfileId, null, null);
        Type localVarReturnType = new TypeToken<IpfixUpmProfile>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update an existing IPFIX profile (asynchronously)
     * Update an existing IPFIX profile with profile ID and modified properties. 
     * @param body  (required)
     * @param ipfixProfileId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateIpfixUpmProfileAsync(IpfixUpmProfile body, String ipfixProfileId, final ApiCallback<IpfixUpmProfile> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateIpfixUpmProfileValidateBeforeCall(body, ipfixProfileId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<IpfixUpmProfile>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
