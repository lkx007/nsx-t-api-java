/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ApiError;
import io.swagger.client.model.Notification;
import io.swagger.client.model.NotificationWatcher;
import io.swagger.client.model.NotificationWatcherListResult;
import io.swagger.client.model.NotificationsList;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ManagementPlaneApiNsxNotificationsApi {
    private ApiClient apiClient;

    public ManagementPlaneApiNsxNotificationsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ManagementPlaneApiNsxNotificationsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addNotificationWatcher
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addNotificationWatcherCall(NotificationWatcher body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/notification-watchers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addNotificationWatcherValidateBeforeCall(NotificationWatcher body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addNotificationWatcher(Async)");
        }
        
        com.squareup.okhttp.Call call = addNotificationWatcherCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add a new notification watcher.
     * Add a new notification watcher.
     * @param body  (required)
     * @return NotificationWatcher
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NotificationWatcher addNotificationWatcher(NotificationWatcher body) throws ApiException {
        ApiResponse<NotificationWatcher> resp = addNotificationWatcherWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Add a new notification watcher.
     * Add a new notification watcher.
     * @param body  (required)
     * @return ApiResponse&lt;NotificationWatcher&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NotificationWatcher> addNotificationWatcherWithHttpInfo(NotificationWatcher body) throws ApiException {
        com.squareup.okhttp.Call call = addNotificationWatcherValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<NotificationWatcher>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add a new notification watcher. (asynchronously)
     * Add a new notification watcher.
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addNotificationWatcherAsync(NotificationWatcher body, final ApiCallback<NotificationWatcher> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addNotificationWatcherValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NotificationWatcher>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addUriFiltersAddUriFilters
     * @param body  (required)
     * @param watcherId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addUriFiltersAddUriFiltersCall(Notification body, String watcherId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/notification-watchers/{watcher-id}/notifications?action=add_uri_filters"
            .replaceAll("\\{" + "watcher-id" + "\\}", apiClient.escapeString(watcherId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addUriFiltersAddUriFiltersValidateBeforeCall(Notification body, String watcherId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addUriFiltersAddUriFilters(Async)");
        }
        // verify the required parameter 'watcherId' is set
        if (watcherId == null) {
            throw new ApiException("Missing the required parameter 'watcherId' when calling addUriFiltersAddUriFilters(Async)");
        }
        
        com.squareup.okhttp.Call call = addUriFiltersAddUriFiltersCall(body, watcherId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add uri filters for the specified watcher ID.
     * Add uri filters for the specified watcher ID.
     * @param body  (required)
     * @param watcherId  (required)
     * @return NotificationsList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NotificationsList addUriFiltersAddUriFilters(Notification body, String watcherId) throws ApiException {
        ApiResponse<NotificationsList> resp = addUriFiltersAddUriFiltersWithHttpInfo(body, watcherId);
        return resp.getData();
    }

    /**
     * Add uri filters for the specified watcher ID.
     * Add uri filters for the specified watcher ID.
     * @param body  (required)
     * @param watcherId  (required)
     * @return ApiResponse&lt;NotificationsList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NotificationsList> addUriFiltersAddUriFiltersWithHttpInfo(Notification body, String watcherId) throws ApiException {
        com.squareup.okhttp.Call call = addUriFiltersAddUriFiltersValidateBeforeCall(body, watcherId, null, null);
        Type localVarReturnType = new TypeToken<NotificationsList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add uri filters for the specified watcher ID. (asynchronously)
     * Add uri filters for the specified watcher ID.
     * @param body  (required)
     * @param watcherId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addUriFiltersAddUriFiltersAsync(Notification body, String watcherId, final ApiCallback<NotificationsList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addUriFiltersAddUriFiltersValidateBeforeCall(body, watcherId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NotificationsList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteNotificationWatcher
     * @param watcherId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteNotificationWatcherCall(String watcherId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/notification-watchers/{watcher-id}"
            .replaceAll("\\{" + "watcher-id" + "\\}", apiClient.escapeString(watcherId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteNotificationWatcherValidateBeforeCall(String watcherId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'watcherId' is set
        if (watcherId == null) {
            throw new ApiException("Missing the required parameter 'watcherId' when calling deleteNotificationWatcher(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteNotificationWatcherCall(watcherId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete an existing Notification-Watcher.
     * Delete notification watcher. 
     * @param watcherId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteNotificationWatcher(String watcherId) throws ApiException {
        deleteNotificationWatcherWithHttpInfo(watcherId);
    }

    /**
     * Delete an existing Notification-Watcher.
     * Delete notification watcher. 
     * @param watcherId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteNotificationWatcherWithHttpInfo(String watcherId) throws ApiException {
        com.squareup.okhttp.Call call = deleteNotificationWatcherValidateBeforeCall(watcherId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete an existing Notification-Watcher. (asynchronously)
     * Delete notification watcher. 
     * @param watcherId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteNotificationWatcherAsync(String watcherId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteNotificationWatcherValidateBeforeCall(watcherId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteUriFiltersDeleteUriFilters
     * @param body  (required)
     * @param watcherId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteUriFiltersDeleteUriFiltersCall(Notification body, String watcherId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/notification-watchers/{watcher-id}/notifications?action=delete_uri_filters"
            .replaceAll("\\{" + "watcher-id" + "\\}", apiClient.escapeString(watcherId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteUriFiltersDeleteUriFiltersValidateBeforeCall(Notification body, String watcherId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling deleteUriFiltersDeleteUriFilters(Async)");
        }
        // verify the required parameter 'watcherId' is set
        if (watcherId == null) {
            throw new ApiException("Missing the required parameter 'watcherId' when calling deleteUriFiltersDeleteUriFilters(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteUriFiltersDeleteUriFiltersCall(body, watcherId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete uri filters for the specified watcher ID.
     * Delete uri filters for the specified watcher ID.
     * @param body  (required)
     * @param watcherId  (required)
     * @return NotificationsList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NotificationsList deleteUriFiltersDeleteUriFilters(Notification body, String watcherId) throws ApiException {
        ApiResponse<NotificationsList> resp = deleteUriFiltersDeleteUriFiltersWithHttpInfo(body, watcherId);
        return resp.getData();
    }

    /**
     * Delete uri filters for the specified watcher ID.
     * Delete uri filters for the specified watcher ID.
     * @param body  (required)
     * @param watcherId  (required)
     * @return ApiResponse&lt;NotificationsList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NotificationsList> deleteUriFiltersDeleteUriFiltersWithHttpInfo(Notification body, String watcherId) throws ApiException {
        com.squareup.okhttp.Call call = deleteUriFiltersDeleteUriFiltersValidateBeforeCall(body, watcherId, null, null);
        Type localVarReturnType = new TypeToken<NotificationsList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete uri filters for the specified watcher ID. (asynchronously)
     * Delete uri filters for the specified watcher ID.
     * @param body  (required)
     * @param watcherId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteUriFiltersDeleteUriFiltersAsync(Notification body, String watcherId, final ApiCallback<NotificationsList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteUriFiltersDeleteUriFiltersValidateBeforeCall(body, watcherId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NotificationsList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNotificationWatcher
     * @param watcherId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNotificationWatcherCall(String watcherId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/notification-watchers/{watcher-id}"
            .replaceAll("\\{" + "watcher-id" + "\\}", apiClient.escapeString(watcherId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNotificationWatcherValidateBeforeCall(String watcherId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'watcherId' is set
        if (watcherId == null) {
            throw new ApiException("Missing the required parameter 'watcherId' when calling getNotificationWatcher(Async)");
        }
        
        com.squareup.okhttp.Call call = getNotificationWatcherCall(watcherId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Returns notification watcher by watcher id.
     * Returns notification watcher by watcher id.
     * @param watcherId  (required)
     * @return NotificationWatcher
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NotificationWatcher getNotificationWatcher(String watcherId) throws ApiException {
        ApiResponse<NotificationWatcher> resp = getNotificationWatcherWithHttpInfo(watcherId);
        return resp.getData();
    }

    /**
     * Returns notification watcher by watcher id.
     * Returns notification watcher by watcher id.
     * @param watcherId  (required)
     * @return ApiResponse&lt;NotificationWatcher&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NotificationWatcher> getNotificationWatcherWithHttpInfo(String watcherId) throws ApiException {
        com.squareup.okhttp.Call call = getNotificationWatcherValidateBeforeCall(watcherId, null, null);
        Type localVarReturnType = new TypeToken<NotificationWatcher>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns notification watcher by watcher id. (asynchronously)
     * Returns notification watcher by watcher id.
     * @param watcherId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNotificationWatcherAsync(String watcherId, final ApiCallback<NotificationWatcher> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNotificationWatcherValidateBeforeCall(watcherId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NotificationWatcher>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNotifications
     * @param watcherId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNotificationsCall(String watcherId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/notification-watchers/{watcher-id}/notifications"
            .replaceAll("\\{" + "watcher-id" + "\\}", apiClient.escapeString(watcherId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNotificationsValidateBeforeCall(String watcherId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'watcherId' is set
        if (watcherId == null) {
            throw new ApiException("Missing the required parameter 'watcherId' when calling getNotifications(Async)");
        }
        
        com.squareup.okhttp.Call call = getNotificationsCall(watcherId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get notifications for the specified watcher ID.
     * Get notifications for the specified watcher ID.
     * @param watcherId  (required)
     * @return NotificationsList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NotificationsList getNotifications(String watcherId) throws ApiException {
        ApiResponse<NotificationsList> resp = getNotificationsWithHttpInfo(watcherId);
        return resp.getData();
    }

    /**
     * Get notifications for the specified watcher ID.
     * Get notifications for the specified watcher ID.
     * @param watcherId  (required)
     * @return ApiResponse&lt;NotificationsList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NotificationsList> getNotificationsWithHttpInfo(String watcherId) throws ApiException {
        com.squareup.okhttp.Call call = getNotificationsValidateBeforeCall(watcherId, null, null);
        Type localVarReturnType = new TypeToken<NotificationsList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get notifications for the specified watcher ID. (asynchronously)
     * Get notifications for the specified watcher ID.
     * @param watcherId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNotificationsAsync(String watcherId, final ApiCallback<NotificationsList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNotificationsValidateBeforeCall(watcherId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NotificationsList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listNotificationWatchers
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listNotificationWatchersCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/notification-watchers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listNotificationWatchersValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listNotificationWatchersCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Returns a list of registered notification watchers.
     * Returns a list of registered notification watchers.
     * @return NotificationWatcherListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NotificationWatcherListResult listNotificationWatchers() throws ApiException {
        ApiResponse<NotificationWatcherListResult> resp = listNotificationWatchersWithHttpInfo();
        return resp.getData();
    }

    /**
     * Returns a list of registered notification watchers.
     * Returns a list of registered notification watchers.
     * @return ApiResponse&lt;NotificationWatcherListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NotificationWatcherListResult> listNotificationWatchersWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = listNotificationWatchersValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<NotificationWatcherListResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns a list of registered notification watchers. (asynchronously)
     * Returns a list of registered notification watchers.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listNotificationWatchersAsync(final ApiCallback<NotificationWatcherListResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listNotificationWatchersValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NotificationWatcherListResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateNotificationWatcher
     * @param body  (required)
     * @param watcherId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateNotificationWatcherCall(NotificationWatcher body, String watcherId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/notification-watchers/{watcher-id}"
            .replaceAll("\\{" + "watcher-id" + "\\}", apiClient.escapeString(watcherId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateNotificationWatcherValidateBeforeCall(NotificationWatcher body, String watcherId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateNotificationWatcher(Async)");
        }
        // verify the required parameter 'watcherId' is set
        if (watcherId == null) {
            throw new ApiException("Missing the required parameter 'watcherId' when calling updateNotificationWatcher(Async)");
        }
        
        com.squareup.okhttp.Call call = updateNotificationWatcherCall(body, watcherId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update notification watcher.
     * Update notification watcher.
     * @param body  (required)
     * @param watcherId  (required)
     * @return NotificationWatcher
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NotificationWatcher updateNotificationWatcher(NotificationWatcher body, String watcherId) throws ApiException {
        ApiResponse<NotificationWatcher> resp = updateNotificationWatcherWithHttpInfo(body, watcherId);
        return resp.getData();
    }

    /**
     * Update notification watcher.
     * Update notification watcher.
     * @param body  (required)
     * @param watcherId  (required)
     * @return ApiResponse&lt;NotificationWatcher&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NotificationWatcher> updateNotificationWatcherWithHttpInfo(NotificationWatcher body, String watcherId) throws ApiException {
        com.squareup.okhttp.Call call = updateNotificationWatcherValidateBeforeCall(body, watcherId, null, null);
        Type localVarReturnType = new TypeToken<NotificationWatcher>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update notification watcher. (asynchronously)
     * Update notification watcher.
     * @param body  (required)
     * @param watcherId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateNotificationWatcherAsync(NotificationWatcher body, String watcherId, final ApiCallback<NotificationWatcher> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateNotificationWatcherValidateBeforeCall(body, watcherId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NotificationWatcher>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateNotifications
     * @param body  (required)
     * @param watcherId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateNotificationsCall(NotificationsList body, String watcherId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/notification-watchers/{watcher-id}/notifications"
            .replaceAll("\\{" + "watcher-id" + "\\}", apiClient.escapeString(watcherId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateNotificationsValidateBeforeCall(NotificationsList body, String watcherId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateNotifications(Async)");
        }
        // verify the required parameter 'watcherId' is set
        if (watcherId == null) {
            throw new ApiException("Missing the required parameter 'watcherId' when calling updateNotifications(Async)");
        }
        
        com.squareup.okhttp.Call call = updateNotificationsCall(body, watcherId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update notifications for the specified watcher ID.
     * Update notifications for the specified watcher ID.
     * @param body  (required)
     * @param watcherId  (required)
     * @return NotificationsList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NotificationsList updateNotifications(NotificationsList body, String watcherId) throws ApiException {
        ApiResponse<NotificationsList> resp = updateNotificationsWithHttpInfo(body, watcherId);
        return resp.getData();
    }

    /**
     * Update notifications for the specified watcher ID.
     * Update notifications for the specified watcher ID.
     * @param body  (required)
     * @param watcherId  (required)
     * @return ApiResponse&lt;NotificationsList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NotificationsList> updateNotificationsWithHttpInfo(NotificationsList body, String watcherId) throws ApiException {
        com.squareup.okhttp.Call call = updateNotificationsValidateBeforeCall(body, watcherId, null, null);
        Type localVarReturnType = new TypeToken<NotificationsList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update notifications for the specified watcher ID. (asynchronously)
     * Update notifications for the specified watcher ID.
     * @param body  (required)
     * @param watcherId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateNotificationsAsync(NotificationsList body, String watcherId, final ApiCallback<NotificationsList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateNotificationsValidateBeforeCall(body, watcherId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NotificationsList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
