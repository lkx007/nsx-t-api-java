/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ApiError;
import io.swagger.client.model.TransportNodeProfile;
import io.swagger.client.model.TransportNodeProfileListResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ManagementPlaneApiNetworkTransportTransportNodeProfilesApi {
    private ApiClient apiClient;

    public ManagementPlaneApiNetworkTransportTransportNodeProfilesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ManagementPlaneApiNetworkTransportTransportNodeProfilesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createTransportNodeProfile
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createTransportNodeProfileCall(TransportNodeProfile body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/transport-node-profiles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createTransportNodeProfileValidateBeforeCall(TransportNodeProfile body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createTransportNodeProfile(Async)");
        }
        
        com.squareup.okhttp.Call call = createTransportNodeProfileCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create a Transport Node Profile
     * Transport node profile captures the configuration needed to create a transport node. A transport node profile can be attached to compute collections for automatic TN creation of member hosts. 
     * @param body  (required)
     * @return TransportNodeProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TransportNodeProfile createTransportNodeProfile(TransportNodeProfile body) throws ApiException {
        ApiResponse<TransportNodeProfile> resp = createTransportNodeProfileWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create a Transport Node Profile
     * Transport node profile captures the configuration needed to create a transport node. A transport node profile can be attached to compute collections for automatic TN creation of member hosts. 
     * @param body  (required)
     * @return ApiResponse&lt;TransportNodeProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TransportNodeProfile> createTransportNodeProfileWithHttpInfo(TransportNodeProfile body) throws ApiException {
        com.squareup.okhttp.Call call = createTransportNodeProfileValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<TransportNodeProfile>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a Transport Node Profile (asynchronously)
     * Transport node profile captures the configuration needed to create a transport node. A transport node profile can be attached to compute collections for automatic TN creation of member hosts. 
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createTransportNodeProfileAsync(TransportNodeProfile body, final ApiCallback<TransportNodeProfile> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createTransportNodeProfileValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TransportNodeProfile>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteTransportNodeProfile
     * @param transportNodeProfileId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteTransportNodeProfileCall(String transportNodeProfileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/transport-node-profiles/{transport-node-profile-id}"
            .replaceAll("\\{" + "transport-node-profile-id" + "\\}", apiClient.escapeString(transportNodeProfileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteTransportNodeProfileValidateBeforeCall(String transportNodeProfileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'transportNodeProfileId' is set
        if (transportNodeProfileId == null) {
            throw new ApiException("Missing the required parameter 'transportNodeProfileId' when calling deleteTransportNodeProfile(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteTransportNodeProfileCall(transportNodeProfileId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete a Transport Node Profile
     * Deletes the specified transport node profile. A transport node profile can be deleted only when it is not attached to any compute collection. 
     * @param transportNodeProfileId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteTransportNodeProfile(String transportNodeProfileId) throws ApiException {
        deleteTransportNodeProfileWithHttpInfo(transportNodeProfileId);
    }

    /**
     * Delete a Transport Node Profile
     * Deletes the specified transport node profile. A transport node profile can be deleted only when it is not attached to any compute collection. 
     * @param transportNodeProfileId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteTransportNodeProfileWithHttpInfo(String transportNodeProfileId) throws ApiException {
        com.squareup.okhttp.Call call = deleteTransportNodeProfileValidateBeforeCall(transportNodeProfileId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a Transport Node Profile (asynchronously)
     * Deletes the specified transport node profile. A transport node profile can be deleted only when it is not attached to any compute collection. 
     * @param transportNodeProfileId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteTransportNodeProfileAsync(String transportNodeProfileId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteTransportNodeProfileValidateBeforeCall(transportNodeProfileId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getTransportNodeProfile
     * @param transportNodeProfileId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTransportNodeProfileCall(String transportNodeProfileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/transport-node-profiles/{transport-node-profile-id}"
            .replaceAll("\\{" + "transport-node-profile-id" + "\\}", apiClient.escapeString(transportNodeProfileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTransportNodeProfileValidateBeforeCall(String transportNodeProfileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'transportNodeProfileId' is set
        if (transportNodeProfileId == null) {
            throw new ApiException("Missing the required parameter 'transportNodeProfileId' when calling getTransportNodeProfile(Async)");
        }
        
        com.squareup.okhttp.Call call = getTransportNodeProfileCall(transportNodeProfileId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get a Transport Node
     * Returns information about a specified transport node profile.
     * @param transportNodeProfileId  (required)
     * @return TransportNodeProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TransportNodeProfile getTransportNodeProfile(String transportNodeProfileId) throws ApiException {
        ApiResponse<TransportNodeProfile> resp = getTransportNodeProfileWithHttpInfo(transportNodeProfileId);
        return resp.getData();
    }

    /**
     * Get a Transport Node
     * Returns information about a specified transport node profile.
     * @param transportNodeProfileId  (required)
     * @return ApiResponse&lt;TransportNodeProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TransportNodeProfile> getTransportNodeProfileWithHttpInfo(String transportNodeProfileId) throws ApiException {
        com.squareup.okhttp.Call call = getTransportNodeProfileValidateBeforeCall(transportNodeProfileId, null, null);
        Type localVarReturnType = new TypeToken<TransportNodeProfile>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a Transport Node (asynchronously)
     * Returns information about a specified transport node profile.
     * @param transportNodeProfileId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTransportNodeProfileAsync(String transportNodeProfileId, final ApiCallback<TransportNodeProfile> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTransportNodeProfileValidateBeforeCall(transportNodeProfileId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TransportNodeProfile>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listTransportNodeProfiles
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listTransportNodeProfilesCall(String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/transport-node-profiles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (includedFields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("included_fields", includedFields));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page_size", pageSize));
        if (sortAscending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_ascending", sortAscending));
        if (sortBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_by", sortBy));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listTransportNodeProfilesValidateBeforeCall(String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listTransportNodeProfilesCall(cursor, includedFields, pageSize, sortAscending, sortBy, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List Transport Nodes
     * Returns information about all transport node profiles. 
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @return TransportNodeProfileListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TransportNodeProfileListResult listTransportNodeProfiles(String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy) throws ApiException {
        ApiResponse<TransportNodeProfileListResult> resp = listTransportNodeProfilesWithHttpInfo(cursor, includedFields, pageSize, sortAscending, sortBy);
        return resp.getData();
    }

    /**
     * List Transport Nodes
     * Returns information about all transport node profiles. 
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @return ApiResponse&lt;TransportNodeProfileListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TransportNodeProfileListResult> listTransportNodeProfilesWithHttpInfo(String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy) throws ApiException {
        com.squareup.okhttp.Call call = listTransportNodeProfilesValidateBeforeCall(cursor, includedFields, pageSize, sortAscending, sortBy, null, null);
        Type localVarReturnType = new TypeToken<TransportNodeProfileListResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List Transport Nodes (asynchronously)
     * Returns information about all transport node profiles. 
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listTransportNodeProfilesAsync(String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, final ApiCallback<TransportNodeProfileListResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listTransportNodeProfilesValidateBeforeCall(cursor, includedFields, pageSize, sortAscending, sortBy, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TransportNodeProfileListResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateTransportNodeProfile
     * @param body  (required)
     * @param transportNodeProfileId  (required)
     * @param esxMgmtIfMigrationDest The network ids to which the ESX vmk interfaces will be migrated (optional)
     * @param ifId The ESX vmk interfaces to migrate (optional)
     * @param pingIp IP Addresses to ping right after ESX vmk interfaces were migrated. (optional)
     * @param vnic The ESX vmk interfaces and/or VM NIC to migrate (optional)
     * @param vnicMigrationDest The migration destinations of ESX vmk interfaces and/or VM NIC (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateTransportNodeProfileCall(TransportNodeProfile body, String transportNodeProfileId, String esxMgmtIfMigrationDest, String ifId, String pingIp, String vnic, String vnicMigrationDest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/transport-node-profiles/{transport-node-profile-id}"
            .replaceAll("\\{" + "transport-node-profile-id" + "\\}", apiClient.escapeString(transportNodeProfileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (esxMgmtIfMigrationDest != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("esx_mgmt_if_migration_dest", esxMgmtIfMigrationDest));
        if (ifId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("if_id", ifId));
        if (pingIp != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ping_ip", pingIp));
        if (vnic != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("vnic", vnic));
        if (vnicMigrationDest != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("vnic_migration_dest", vnicMigrationDest));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateTransportNodeProfileValidateBeforeCall(TransportNodeProfile body, String transportNodeProfileId, String esxMgmtIfMigrationDest, String ifId, String pingIp, String vnic, String vnicMigrationDest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateTransportNodeProfile(Async)");
        }
        // verify the required parameter 'transportNodeProfileId' is set
        if (transportNodeProfileId == null) {
            throw new ApiException("Missing the required parameter 'transportNodeProfileId' when calling updateTransportNodeProfile(Async)");
        }
        
        com.squareup.okhttp.Call call = updateTransportNodeProfileCall(body, transportNodeProfileId, esxMgmtIfMigrationDest, ifId, pingIp, vnic, vnicMigrationDest, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update a Transport Node Profile
     * When configurations of a transport node profile(TNP) is updated, all the transport nodes in all the compute collections to which this TNP is attached are updated to reflect the updated configuration. 
     * @param body  (required)
     * @param transportNodeProfileId  (required)
     * @param esxMgmtIfMigrationDest The network ids to which the ESX vmk interfaces will be migrated (optional)
     * @param ifId The ESX vmk interfaces to migrate (optional)
     * @param pingIp IP Addresses to ping right after ESX vmk interfaces were migrated. (optional)
     * @param vnic The ESX vmk interfaces and/or VM NIC to migrate (optional)
     * @param vnicMigrationDest The migration destinations of ESX vmk interfaces and/or VM NIC (optional)
     * @return TransportNodeProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TransportNodeProfile updateTransportNodeProfile(TransportNodeProfile body, String transportNodeProfileId, String esxMgmtIfMigrationDest, String ifId, String pingIp, String vnic, String vnicMigrationDest) throws ApiException {
        ApiResponse<TransportNodeProfile> resp = updateTransportNodeProfileWithHttpInfo(body, transportNodeProfileId, esxMgmtIfMigrationDest, ifId, pingIp, vnic, vnicMigrationDest);
        return resp.getData();
    }

    /**
     * Update a Transport Node Profile
     * When configurations of a transport node profile(TNP) is updated, all the transport nodes in all the compute collections to which this TNP is attached are updated to reflect the updated configuration. 
     * @param body  (required)
     * @param transportNodeProfileId  (required)
     * @param esxMgmtIfMigrationDest The network ids to which the ESX vmk interfaces will be migrated (optional)
     * @param ifId The ESX vmk interfaces to migrate (optional)
     * @param pingIp IP Addresses to ping right after ESX vmk interfaces were migrated. (optional)
     * @param vnic The ESX vmk interfaces and/or VM NIC to migrate (optional)
     * @param vnicMigrationDest The migration destinations of ESX vmk interfaces and/or VM NIC (optional)
     * @return ApiResponse&lt;TransportNodeProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TransportNodeProfile> updateTransportNodeProfileWithHttpInfo(TransportNodeProfile body, String transportNodeProfileId, String esxMgmtIfMigrationDest, String ifId, String pingIp, String vnic, String vnicMigrationDest) throws ApiException {
        com.squareup.okhttp.Call call = updateTransportNodeProfileValidateBeforeCall(body, transportNodeProfileId, esxMgmtIfMigrationDest, ifId, pingIp, vnic, vnicMigrationDest, null, null);
        Type localVarReturnType = new TypeToken<TransportNodeProfile>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a Transport Node Profile (asynchronously)
     * When configurations of a transport node profile(TNP) is updated, all the transport nodes in all the compute collections to which this TNP is attached are updated to reflect the updated configuration. 
     * @param body  (required)
     * @param transportNodeProfileId  (required)
     * @param esxMgmtIfMigrationDest The network ids to which the ESX vmk interfaces will be migrated (optional)
     * @param ifId The ESX vmk interfaces to migrate (optional)
     * @param pingIp IP Addresses to ping right after ESX vmk interfaces were migrated. (optional)
     * @param vnic The ESX vmk interfaces and/or VM NIC to migrate (optional)
     * @param vnicMigrationDest The migration destinations of ESX vmk interfaces and/or VM NIC (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateTransportNodeProfileAsync(TransportNodeProfile body, String transportNodeProfileId, String esxMgmtIfMigrationDest, String ifId, String pingIp, String vnic, String vnicMigrationDest, final ApiCallback<TransportNodeProfile> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateTransportNodeProfileValidateBeforeCall(body, transportNodeProfileId, esxMgmtIfMigrationDest, ifId, pingIp, vnic, vnicMigrationDest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TransportNodeProfile>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
