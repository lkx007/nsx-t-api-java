/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ApiError;
import io.swagger.client.model.IPSecVPNPeerEndpoint;
import io.swagger.client.model.IPSecVPNPeerEndpointListResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ManagementPlaneApiVpnIpsecPeerEndpointsApi {
    private ApiClient apiClient;

    public ManagementPlaneApiVpnIpsecPeerEndpointsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ManagementPlaneApiVpnIpsecPeerEndpointsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createIPSecVPNPeerEndPoint
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createIPSecVPNPeerEndPointCall(IPSecVPNPeerEndpoint body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/vpn/ipsec/peer-endpoints";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createIPSecVPNPeerEndPointValidateBeforeCall(IPSecVPNPeerEndpoint body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createIPSecVPNPeerEndPoint(Async)");
        }
        
        com.squareup.okhttp.Call call = createIPSecVPNPeerEndPointCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create custom peer endpoint
     * Create custom IPSec peer endpoint.
     * @param body  (required)
     * @return IPSecVPNPeerEndpoint
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public IPSecVPNPeerEndpoint createIPSecVPNPeerEndPoint(IPSecVPNPeerEndpoint body) throws ApiException {
        ApiResponse<IPSecVPNPeerEndpoint> resp = createIPSecVPNPeerEndPointWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create custom peer endpoint
     * Create custom IPSec peer endpoint.
     * @param body  (required)
     * @return ApiResponse&lt;IPSecVPNPeerEndpoint&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<IPSecVPNPeerEndpoint> createIPSecVPNPeerEndPointWithHttpInfo(IPSecVPNPeerEndpoint body) throws ApiException {
        com.squareup.okhttp.Call call = createIPSecVPNPeerEndPointValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<IPSecVPNPeerEndpoint>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create custom peer endpoint (asynchronously)
     * Create custom IPSec peer endpoint.
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createIPSecVPNPeerEndPointAsync(IPSecVPNPeerEndpoint body, final ApiCallback<IPSecVPNPeerEndpoint> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createIPSecVPNPeerEndPointValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<IPSecVPNPeerEndpoint>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteIPSecVPNPeerEndpoint
     * @param ipsecVpnPeerEndpointId  (required)
     * @param force Force delete the resource even if it is being used somewhere  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteIPSecVPNPeerEndpointCall(String ipsecVpnPeerEndpointId, Boolean force, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/vpn/ipsec/peer-endpoints/{ipsec-vpn-peer-endpoint-id}"
            .replaceAll("\\{" + "ipsec-vpn-peer-endpoint-id" + "\\}", apiClient.escapeString(ipsecVpnPeerEndpointId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (force != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("force", force));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteIPSecVPNPeerEndpointValidateBeforeCall(String ipsecVpnPeerEndpointId, Boolean force, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'ipsecVpnPeerEndpointId' is set
        if (ipsecVpnPeerEndpointId == null) {
            throw new ApiException("Missing the required parameter 'ipsecVpnPeerEndpointId' when calling deleteIPSecVPNPeerEndpoint(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteIPSecVPNPeerEndpointCall(ipsecVpnPeerEndpointId, force, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete custom IPSec VPN peer endpoint
     * Delete custom IPSec VPN peer endpoint. All references are strong references and dependent peer endpoints can not be deleted if being referenced.
     * @param ipsecVpnPeerEndpointId  (required)
     * @param force Force delete the resource even if it is being used somewhere  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteIPSecVPNPeerEndpoint(String ipsecVpnPeerEndpointId, Boolean force) throws ApiException {
        deleteIPSecVPNPeerEndpointWithHttpInfo(ipsecVpnPeerEndpointId, force);
    }

    /**
     * Delete custom IPSec VPN peer endpoint
     * Delete custom IPSec VPN peer endpoint. All references are strong references and dependent peer endpoints can not be deleted if being referenced.
     * @param ipsecVpnPeerEndpointId  (required)
     * @param force Force delete the resource even if it is being used somewhere  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteIPSecVPNPeerEndpointWithHttpInfo(String ipsecVpnPeerEndpointId, Boolean force) throws ApiException {
        com.squareup.okhttp.Call call = deleteIPSecVPNPeerEndpointValidateBeforeCall(ipsecVpnPeerEndpointId, force, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete custom IPSec VPN peer endpoint (asynchronously)
     * Delete custom IPSec VPN peer endpoint. All references are strong references and dependent peer endpoints can not be deleted if being referenced.
     * @param ipsecVpnPeerEndpointId  (required)
     * @param force Force delete the resource even if it is being used somewhere  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteIPSecVPNPeerEndpointAsync(String ipsecVpnPeerEndpointId, Boolean force, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteIPSecVPNPeerEndpointValidateBeforeCall(ipsecVpnPeerEndpointId, force, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getIPSecVPNPeerEndpoint
     * @param ipsecVpnPeerEndpointId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getIPSecVPNPeerEndpointCall(String ipsecVpnPeerEndpointId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/vpn/ipsec/peer-endpoints/{ipsec-vpn-peer-endpoint-id}"
            .replaceAll("\\{" + "ipsec-vpn-peer-endpoint-id" + "\\}", apiClient.escapeString(ipsecVpnPeerEndpointId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getIPSecVPNPeerEndpointValidateBeforeCall(String ipsecVpnPeerEndpointId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'ipsecVpnPeerEndpointId' is set
        if (ipsecVpnPeerEndpointId == null) {
            throw new ApiException("Missing the required parameter 'ipsecVpnPeerEndpointId' when calling getIPSecVPNPeerEndpoint(Async)");
        }
        
        com.squareup.okhttp.Call call = getIPSecVPNPeerEndpointCall(ipsecVpnPeerEndpointId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get IPSec VPN peer endpoint
     * Get custom IPSec VPN peer endpoint.
     * @param ipsecVpnPeerEndpointId  (required)
     * @return IPSecVPNPeerEndpoint
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public IPSecVPNPeerEndpoint getIPSecVPNPeerEndpoint(String ipsecVpnPeerEndpointId) throws ApiException {
        ApiResponse<IPSecVPNPeerEndpoint> resp = getIPSecVPNPeerEndpointWithHttpInfo(ipsecVpnPeerEndpointId);
        return resp.getData();
    }

    /**
     * Get IPSec VPN peer endpoint
     * Get custom IPSec VPN peer endpoint.
     * @param ipsecVpnPeerEndpointId  (required)
     * @return ApiResponse&lt;IPSecVPNPeerEndpoint&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<IPSecVPNPeerEndpoint> getIPSecVPNPeerEndpointWithHttpInfo(String ipsecVpnPeerEndpointId) throws ApiException {
        com.squareup.okhttp.Call call = getIPSecVPNPeerEndpointValidateBeforeCall(ipsecVpnPeerEndpointId, null, null);
        Type localVarReturnType = new TypeToken<IPSecVPNPeerEndpoint>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get IPSec VPN peer endpoint (asynchronously)
     * Get custom IPSec VPN peer endpoint.
     * @param ipsecVpnPeerEndpointId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getIPSecVPNPeerEndpointAsync(String ipsecVpnPeerEndpointId, final ApiCallback<IPSecVPNPeerEndpoint> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getIPSecVPNPeerEndpointValidateBeforeCall(ipsecVpnPeerEndpointId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<IPSecVPNPeerEndpoint>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getIPSecVPNPeerEndpointWithPSKShowSensitiveData
     * @param ipsecVpnPeerEndpointId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getIPSecVPNPeerEndpointWithPSKShowSensitiveDataCall(String ipsecVpnPeerEndpointId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/vpn/ipsec/peer-endpoints/{ipsec-vpn-peer-endpoint-id}?action=show-sensitive-data"
            .replaceAll("\\{" + "ipsec-vpn-peer-endpoint-id" + "\\}", apiClient.escapeString(ipsecVpnPeerEndpointId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getIPSecVPNPeerEndpointWithPSKShowSensitiveDataValidateBeforeCall(String ipsecVpnPeerEndpointId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'ipsecVpnPeerEndpointId' is set
        if (ipsecVpnPeerEndpointId == null) {
            throw new ApiException("Missing the required parameter 'ipsecVpnPeerEndpointId' when calling getIPSecVPNPeerEndpointWithPSKShowSensitiveData(Async)");
        }
        
        com.squareup.okhttp.Call call = getIPSecVPNPeerEndpointWithPSKShowSensitiveDataCall(ipsecVpnPeerEndpointId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get IPSec VPN peer endpoint with PSK
     * Get custom IPSec VPN peer endpoint with PSK.
     * @param ipsecVpnPeerEndpointId  (required)
     * @return IPSecVPNPeerEndpoint
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public IPSecVPNPeerEndpoint getIPSecVPNPeerEndpointWithPSKShowSensitiveData(String ipsecVpnPeerEndpointId) throws ApiException {
        ApiResponse<IPSecVPNPeerEndpoint> resp = getIPSecVPNPeerEndpointWithPSKShowSensitiveDataWithHttpInfo(ipsecVpnPeerEndpointId);
        return resp.getData();
    }

    /**
     * Get IPSec VPN peer endpoint with PSK
     * Get custom IPSec VPN peer endpoint with PSK.
     * @param ipsecVpnPeerEndpointId  (required)
     * @return ApiResponse&lt;IPSecVPNPeerEndpoint&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<IPSecVPNPeerEndpoint> getIPSecVPNPeerEndpointWithPSKShowSensitiveDataWithHttpInfo(String ipsecVpnPeerEndpointId) throws ApiException {
        com.squareup.okhttp.Call call = getIPSecVPNPeerEndpointWithPSKShowSensitiveDataValidateBeforeCall(ipsecVpnPeerEndpointId, null, null);
        Type localVarReturnType = new TypeToken<IPSecVPNPeerEndpoint>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get IPSec VPN peer endpoint with PSK (asynchronously)
     * Get custom IPSec VPN peer endpoint with PSK.
     * @param ipsecVpnPeerEndpointId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getIPSecVPNPeerEndpointWithPSKShowSensitiveDataAsync(String ipsecVpnPeerEndpointId, final ApiCallback<IPSecVPNPeerEndpoint> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getIPSecVPNPeerEndpointWithPSKShowSensitiveDataValidateBeforeCall(ipsecVpnPeerEndpointId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<IPSecVPNPeerEndpoint>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listIPSecVPNPeerEndpoints
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listIPSecVPNPeerEndpointsCall(String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/vpn/ipsec/peer-endpoints";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (includedFields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("included_fields", includedFields));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page_size", pageSize));
        if (sortAscending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_ascending", sortAscending));
        if (sortBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_by", sortBy));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listIPSecVPNPeerEndpointsValidateBeforeCall(String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listIPSecVPNPeerEndpointsCall(cursor, includedFields, pageSize, sortAscending, sortBy, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get IPSecVPNPeerEndpoint List Result
     * Get paginated list of all peer endpoint.
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @return IPSecVPNPeerEndpointListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public IPSecVPNPeerEndpointListResult listIPSecVPNPeerEndpoints(String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy) throws ApiException {
        ApiResponse<IPSecVPNPeerEndpointListResult> resp = listIPSecVPNPeerEndpointsWithHttpInfo(cursor, includedFields, pageSize, sortAscending, sortBy);
        return resp.getData();
    }

    /**
     * Get IPSecVPNPeerEndpoint List Result
     * Get paginated list of all peer endpoint.
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @return ApiResponse&lt;IPSecVPNPeerEndpointListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<IPSecVPNPeerEndpointListResult> listIPSecVPNPeerEndpointsWithHttpInfo(String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy) throws ApiException {
        com.squareup.okhttp.Call call = listIPSecVPNPeerEndpointsValidateBeforeCall(cursor, includedFields, pageSize, sortAscending, sortBy, null, null);
        Type localVarReturnType = new TypeToken<IPSecVPNPeerEndpointListResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get IPSecVPNPeerEndpoint List Result (asynchronously)
     * Get paginated list of all peer endpoint.
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listIPSecVPNPeerEndpointsAsync(String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, final ApiCallback<IPSecVPNPeerEndpointListResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listIPSecVPNPeerEndpointsValidateBeforeCall(cursor, includedFields, pageSize, sortAscending, sortBy, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<IPSecVPNPeerEndpointListResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateIPSecVPNPeerEndpoint
     * @param body  (required)
     * @param ipsecVpnPeerEndpointId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateIPSecVPNPeerEndpointCall(IPSecVPNPeerEndpoint body, String ipsecVpnPeerEndpointId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/vpn/ipsec/peer-endpoints/{ipsec-vpn-peer-endpoint-id}"
            .replaceAll("\\{" + "ipsec-vpn-peer-endpoint-id" + "\\}", apiClient.escapeString(ipsecVpnPeerEndpointId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateIPSecVPNPeerEndpointValidateBeforeCall(IPSecVPNPeerEndpoint body, String ipsecVpnPeerEndpointId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateIPSecVPNPeerEndpoint(Async)");
        }
        // verify the required parameter 'ipsecVpnPeerEndpointId' is set
        if (ipsecVpnPeerEndpointId == null) {
            throw new ApiException("Missing the required parameter 'ipsecVpnPeerEndpointId' when calling updateIPSecVPNPeerEndpoint(Async)");
        }
        
        com.squareup.okhttp.Call call = updateIPSecVPNPeerEndpointCall(body, ipsecVpnPeerEndpointId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Edit custom IPSecPeerEndpoint
     * Edit custom IPSec peer endpoint. System owned endpoints are non editable.
     * @param body  (required)
     * @param ipsecVpnPeerEndpointId  (required)
     * @return IPSecVPNPeerEndpoint
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public IPSecVPNPeerEndpoint updateIPSecVPNPeerEndpoint(IPSecVPNPeerEndpoint body, String ipsecVpnPeerEndpointId) throws ApiException {
        ApiResponse<IPSecVPNPeerEndpoint> resp = updateIPSecVPNPeerEndpointWithHttpInfo(body, ipsecVpnPeerEndpointId);
        return resp.getData();
    }

    /**
     * Edit custom IPSecPeerEndpoint
     * Edit custom IPSec peer endpoint. System owned endpoints are non editable.
     * @param body  (required)
     * @param ipsecVpnPeerEndpointId  (required)
     * @return ApiResponse&lt;IPSecVPNPeerEndpoint&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<IPSecVPNPeerEndpoint> updateIPSecVPNPeerEndpointWithHttpInfo(IPSecVPNPeerEndpoint body, String ipsecVpnPeerEndpointId) throws ApiException {
        com.squareup.okhttp.Call call = updateIPSecVPNPeerEndpointValidateBeforeCall(body, ipsecVpnPeerEndpointId, null, null);
        Type localVarReturnType = new TypeToken<IPSecVPNPeerEndpoint>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Edit custom IPSecPeerEndpoint (asynchronously)
     * Edit custom IPSec peer endpoint. System owned endpoints are non editable.
     * @param body  (required)
     * @param ipsecVpnPeerEndpointId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateIPSecVPNPeerEndpointAsync(IPSecVPNPeerEndpoint body, String ipsecVpnPeerEndpointId, final ApiCallback<IPSecVPNPeerEndpoint> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateIPSecVPNPeerEndpointValidateBeforeCall(body, ipsecVpnPeerEndpointId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<IPSecVPNPeerEndpoint>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
