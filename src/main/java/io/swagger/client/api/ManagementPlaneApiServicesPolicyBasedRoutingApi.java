/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ApiError;
import io.swagger.client.model.PBRRule;
import io.swagger.client.model.PBRRuleList;
import io.swagger.client.model.PBRRuleListResult;
import io.swagger.client.model.PBRSection;
import io.swagger.client.model.PBRSectionListResult;
import io.swagger.client.model.PBRSectionRuleList;
import io.swagger.client.model.PBRStats;
import io.swagger.client.model.PBRStatsList;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ManagementPlaneApiServicesPolicyBasedRoutingApi {
    private ApiClient apiClient;

    public ManagementPlaneApiServicesPolicyBasedRoutingApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ManagementPlaneApiServicesPolicyBasedRoutingApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addPBRRuleInSection
     * @param body  (required)
     * @param sectionId  (required)
     * @param id Identifier of the anchor rule or section. This is a required field in case operation like &#x27;insert_before&#x27; and &#x27;insert_after&#x27;. (optional)
     * @param operation Operation (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addPBRRuleInSectionCall(PBRRule body, String sectionId, String id, String operation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/pbr/sections/{section-id}/rules"
            .replaceAll("\\{" + "section-id" + "\\}", apiClient.escapeString(sectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (id != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("id", id));
        if (operation != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("operation", operation));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addPBRRuleInSectionValidateBeforeCall(PBRRule body, String sectionId, String id, String operation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addPBRRuleInSection(Async)");
        }
        // verify the required parameter 'sectionId' is set
        if (sectionId == null) {
            throw new ApiException("Missing the required parameter 'sectionId' when calling addPBRRuleInSection(Async)");
        }
        
        com.squareup.okhttp.Call call = addPBRRuleInSectionCall(body, sectionId, id, operation, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add a Single Rule in a Section
     * Adds a new PBR rule in existing PBR section. 
     * @param body  (required)
     * @param sectionId  (required)
     * @param id Identifier of the anchor rule or section. This is a required field in case operation like &#x27;insert_before&#x27; and &#x27;insert_after&#x27;. (optional)
     * @param operation Operation (optional)
     * @return PBRRule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PBRRule addPBRRuleInSection(PBRRule body, String sectionId, String id, String operation) throws ApiException {
        ApiResponse<PBRRule> resp = addPBRRuleInSectionWithHttpInfo(body, sectionId, id, operation);
        return resp.getData();
    }

    /**
     * Add a Single Rule in a Section
     * Adds a new PBR rule in existing PBR section. 
     * @param body  (required)
     * @param sectionId  (required)
     * @param id Identifier of the anchor rule or section. This is a required field in case operation like &#x27;insert_before&#x27; and &#x27;insert_after&#x27;. (optional)
     * @param operation Operation (optional)
     * @return ApiResponse&lt;PBRRule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PBRRule> addPBRRuleInSectionWithHttpInfo(PBRRule body, String sectionId, String id, String operation) throws ApiException {
        com.squareup.okhttp.Call call = addPBRRuleInSectionValidateBeforeCall(body, sectionId, id, operation, null, null);
        Type localVarReturnType = new TypeToken<PBRRule>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add a Single Rule in a Section (asynchronously)
     * Adds a new PBR rule in existing PBR section. 
     * @param body  (required)
     * @param sectionId  (required)
     * @param id Identifier of the anchor rule or section. This is a required field in case operation like &#x27;insert_before&#x27; and &#x27;insert_after&#x27;. (optional)
     * @param operation Operation (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addPBRRuleInSectionAsync(PBRRule body, String sectionId, String id, String operation, final ApiCallback<PBRRule> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addPBRRuleInSectionValidateBeforeCall(body, sectionId, id, operation, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PBRRule>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addPBRRulesInSectionCreateMultiple
     * @param body  (required)
     * @param sectionId  (required)
     * @param id Identifier of the anchor rule or section. This is a required field in case operation like &#x27;insert_before&#x27; and &#x27;insert_after&#x27;. (optional)
     * @param operation Operation (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addPBRRulesInSectionCreateMultipleCall(PBRRuleList body, String sectionId, String id, String operation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/pbr/sections/{section-id}/rules?action=create_multiple"
            .replaceAll("\\{" + "section-id" + "\\}", apiClient.escapeString(sectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (id != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("id", id));
        if (operation != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("operation", operation));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addPBRRulesInSectionCreateMultipleValidateBeforeCall(PBRRuleList body, String sectionId, String id, String operation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addPBRRulesInSectionCreateMultiple(Async)");
        }
        // verify the required parameter 'sectionId' is set
        if (sectionId == null) {
            throw new ApiException("Missing the required parameter 'sectionId' when calling addPBRRulesInSectionCreateMultiple(Async)");
        }
        
        com.squareup.okhttp.Call call = addPBRRulesInSectionCreateMultipleCall(body, sectionId, id, operation, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add Multiple Rules in a Section
     * Create multiple PBR rules in existing PBR section bounded by limit of 1000 PBR rules per section. 
     * @param body  (required)
     * @param sectionId  (required)
     * @param id Identifier of the anchor rule or section. This is a required field in case operation like &#x27;insert_before&#x27; and &#x27;insert_after&#x27;. (optional)
     * @param operation Operation (optional)
     * @return PBRRuleList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PBRRuleList addPBRRulesInSectionCreateMultiple(PBRRuleList body, String sectionId, String id, String operation) throws ApiException {
        ApiResponse<PBRRuleList> resp = addPBRRulesInSectionCreateMultipleWithHttpInfo(body, sectionId, id, operation);
        return resp.getData();
    }

    /**
     * Add Multiple Rules in a Section
     * Create multiple PBR rules in existing PBR section bounded by limit of 1000 PBR rules per section. 
     * @param body  (required)
     * @param sectionId  (required)
     * @param id Identifier of the anchor rule or section. This is a required field in case operation like &#x27;insert_before&#x27; and &#x27;insert_after&#x27;. (optional)
     * @param operation Operation (optional)
     * @return ApiResponse&lt;PBRRuleList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PBRRuleList> addPBRRulesInSectionCreateMultipleWithHttpInfo(PBRRuleList body, String sectionId, String id, String operation) throws ApiException {
        com.squareup.okhttp.Call call = addPBRRulesInSectionCreateMultipleValidateBeforeCall(body, sectionId, id, operation, null, null);
        Type localVarReturnType = new TypeToken<PBRRuleList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add Multiple Rules in a Section (asynchronously)
     * Create multiple PBR rules in existing PBR section bounded by limit of 1000 PBR rules per section. 
     * @param body  (required)
     * @param sectionId  (required)
     * @param id Identifier of the anchor rule or section. This is a required field in case operation like &#x27;insert_before&#x27; and &#x27;insert_after&#x27;. (optional)
     * @param operation Operation (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addPBRRulesInSectionCreateMultipleAsync(PBRRuleList body, String sectionId, String id, String operation, final ApiCallback<PBRRuleList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addPBRRulesInSectionCreateMultipleValidateBeforeCall(body, sectionId, id, operation, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PBRRuleList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addPBRSection
     * @param body  (required)
     * @param id Identifier of the anchor rule or section. This is a required field in case operation like &#x27;insert_before&#x27; and &#x27;insert_after&#x27;. (optional)
     * @param operation Operation (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addPBRSectionCall(PBRSection body, String id, String operation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/pbr/sections";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (id != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("id", id));
        if (operation != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("operation", operation));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addPBRSectionValidateBeforeCall(PBRSection body, String id, String operation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addPBRSection(Async)");
        }
        
        com.squareup.okhttp.Call call = addPBRSectionCall(body, id, operation, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create a New Empty Section
     * Creates new empty PBR section in the system. 
     * @param body  (required)
     * @param id Identifier of the anchor rule or section. This is a required field in case operation like &#x27;insert_before&#x27; and &#x27;insert_after&#x27;. (optional)
     * @param operation Operation (optional)
     * @return PBRSection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PBRSection addPBRSection(PBRSection body, String id, String operation) throws ApiException {
        ApiResponse<PBRSection> resp = addPBRSectionWithHttpInfo(body, id, operation);
        return resp.getData();
    }

    /**
     * Create a New Empty Section
     * Creates new empty PBR section in the system. 
     * @param body  (required)
     * @param id Identifier of the anchor rule or section. This is a required field in case operation like &#x27;insert_before&#x27; and &#x27;insert_after&#x27;. (optional)
     * @param operation Operation (optional)
     * @return ApiResponse&lt;PBRSection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PBRSection> addPBRSectionWithHttpInfo(PBRSection body, String id, String operation) throws ApiException {
        com.squareup.okhttp.Call call = addPBRSectionValidateBeforeCall(body, id, operation, null, null);
        Type localVarReturnType = new TypeToken<PBRSection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a New Empty Section (asynchronously)
     * Creates new empty PBR section in the system. 
     * @param body  (required)
     * @param id Identifier of the anchor rule or section. This is a required field in case operation like &#x27;insert_before&#x27; and &#x27;insert_after&#x27;. (optional)
     * @param operation Operation (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addPBRSectionAsync(PBRSection body, String id, String operation, final ApiCallback<PBRSection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addPBRSectionValidateBeforeCall(body, id, operation, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PBRSection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addPBRSectionWithRulesCreateWithRules
     * @param body  (required)
     * @param id Identifier of the anchor rule or section. This is a required field in case operation like &#x27;insert_before&#x27; and &#x27;insert_after&#x27;. (optional)
     * @param operation Operation (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addPBRSectionWithRulesCreateWithRulesCall(PBRSectionRuleList body, String id, String operation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/pbr/sections?action=create_with_rules";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (id != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("id", id));
        if (operation != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("operation", operation));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addPBRSectionWithRulesCreateWithRulesValidateBeforeCall(PBRSectionRuleList body, String id, String operation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addPBRSectionWithRulesCreateWithRules(Async)");
        }
        
        com.squareup.okhttp.Call call = addPBRSectionWithRulesCreateWithRulesCall(body, id, operation, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create a Section with Rules
     * Creates a new PBR section with rules. The limit on the number of rules is defined by maxItems in collection types for PBRRule (PBRRuleXXXList types). When invoked on a section with a large number of rules, this API is supported only at low rates of invocation (not more than 4-5 times per minute). The typical latency of this API with about 1024 rules is about 4-5 seconds. This API should not be invoked with large payloads at automation speeds. More than 50 rules with a large number of rule references is not supported.  Instead, to create sections, use: POST /api/v1/pbr/sections  To create rules, use: POST /api/v1/pbr/sections/&amp;lt;section-id&amp;gt;/rules 
     * @param body  (required)
     * @param id Identifier of the anchor rule or section. This is a required field in case operation like &#x27;insert_before&#x27; and &#x27;insert_after&#x27;. (optional)
     * @param operation Operation (optional)
     * @return PBRSectionRuleList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PBRSectionRuleList addPBRSectionWithRulesCreateWithRules(PBRSectionRuleList body, String id, String operation) throws ApiException {
        ApiResponse<PBRSectionRuleList> resp = addPBRSectionWithRulesCreateWithRulesWithHttpInfo(body, id, operation);
        return resp.getData();
    }

    /**
     * Create a Section with Rules
     * Creates a new PBR section with rules. The limit on the number of rules is defined by maxItems in collection types for PBRRule (PBRRuleXXXList types). When invoked on a section with a large number of rules, this API is supported only at low rates of invocation (not more than 4-5 times per minute). The typical latency of this API with about 1024 rules is about 4-5 seconds. This API should not be invoked with large payloads at automation speeds. More than 50 rules with a large number of rule references is not supported.  Instead, to create sections, use: POST /api/v1/pbr/sections  To create rules, use: POST /api/v1/pbr/sections/&amp;lt;section-id&amp;gt;/rules 
     * @param body  (required)
     * @param id Identifier of the anchor rule or section. This is a required field in case operation like &#x27;insert_before&#x27; and &#x27;insert_after&#x27;. (optional)
     * @param operation Operation (optional)
     * @return ApiResponse&lt;PBRSectionRuleList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PBRSectionRuleList> addPBRSectionWithRulesCreateWithRulesWithHttpInfo(PBRSectionRuleList body, String id, String operation) throws ApiException {
        com.squareup.okhttp.Call call = addPBRSectionWithRulesCreateWithRulesValidateBeforeCall(body, id, operation, null, null);
        Type localVarReturnType = new TypeToken<PBRSectionRuleList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a Section with Rules (asynchronously)
     * Creates a new PBR section with rules. The limit on the number of rules is defined by maxItems in collection types for PBRRule (PBRRuleXXXList types). When invoked on a section with a large number of rules, this API is supported only at low rates of invocation (not more than 4-5 times per minute). The typical latency of this API with about 1024 rules is about 4-5 seconds. This API should not be invoked with large payloads at automation speeds. More than 50 rules with a large number of rule references is not supported.  Instead, to create sections, use: POST /api/v1/pbr/sections  To create rules, use: POST /api/v1/pbr/sections/&amp;lt;section-id&amp;gt;/rules 
     * @param body  (required)
     * @param id Identifier of the anchor rule or section. This is a required field in case operation like &#x27;insert_before&#x27; and &#x27;insert_after&#x27;. (optional)
     * @param operation Operation (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addPBRSectionWithRulesCreateWithRulesAsync(PBRSectionRuleList body, String id, String operation, final ApiCallback<PBRSectionRuleList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addPBRSectionWithRulesCreateWithRulesValidateBeforeCall(body, id, operation, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PBRSectionRuleList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deletePBRRule
     * @param sectionId  (required)
     * @param ruleId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deletePBRRuleCall(String sectionId, String ruleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pbr/sections/{section-id}/rules/{rule-id}"
            .replaceAll("\\{" + "section-id" + "\\}", apiClient.escapeString(sectionId.toString()))
            .replaceAll("\\{" + "rule-id" + "\\}", apiClient.escapeString(ruleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deletePBRRuleValidateBeforeCall(String sectionId, String ruleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'sectionId' is set
        if (sectionId == null) {
            throw new ApiException("Missing the required parameter 'sectionId' when calling deletePBRRule(Async)");
        }
        // verify the required parameter 'ruleId' is set
        if (ruleId == null) {
            throw new ApiException("Missing the required parameter 'ruleId' when calling deletePBRRule(Async)");
        }
        
        com.squareup.okhttp.Call call = deletePBRRuleCall(sectionId, ruleId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete an Existing Rule
     * Delete existing PBR rule in a PBR section. 
     * @param sectionId  (required)
     * @param ruleId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deletePBRRule(String sectionId, String ruleId) throws ApiException {
        deletePBRRuleWithHttpInfo(sectionId, ruleId);
    }

    /**
     * Delete an Existing Rule
     * Delete existing PBR rule in a PBR section. 
     * @param sectionId  (required)
     * @param ruleId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deletePBRRuleWithHttpInfo(String sectionId, String ruleId) throws ApiException {
        com.squareup.okhttp.Call call = deletePBRRuleValidateBeforeCall(sectionId, ruleId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete an Existing Rule (asynchronously)
     * Delete existing PBR rule in a PBR section. 
     * @param sectionId  (required)
     * @param ruleId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deletePBRRuleAsync(String sectionId, String ruleId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deletePBRRuleValidateBeforeCall(sectionId, ruleId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deletePBRSection
     * @param sectionId  (required)
     * @param cascade Flag to cascade delete of this object to all it&#x27;s child objects. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deletePBRSectionCall(String sectionId, Boolean cascade, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pbr/sections/{section-id}"
            .replaceAll("\\{" + "section-id" + "\\}", apiClient.escapeString(sectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (cascade != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cascade", cascade));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deletePBRSectionValidateBeforeCall(String sectionId, Boolean cascade, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'sectionId' is set
        if (sectionId == null) {
            throw new ApiException("Missing the required parameter 'sectionId' when calling deletePBRSection(Async)");
        }
        
        com.squareup.okhttp.Call call = deletePBRSectionCall(sectionId, cascade, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete an Existing Section and Its Associated Rules
     * Removes PBR section from the system. PBR section with rules can only be deleted by passing \&quot;cascade&#x3D;true\&quot; parameter. 
     * @param sectionId  (required)
     * @param cascade Flag to cascade delete of this object to all it&#x27;s child objects. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deletePBRSection(String sectionId, Boolean cascade) throws ApiException {
        deletePBRSectionWithHttpInfo(sectionId, cascade);
    }

    /**
     * Delete an Existing Section and Its Associated Rules
     * Removes PBR section from the system. PBR section with rules can only be deleted by passing \&quot;cascade&#x3D;true\&quot; parameter. 
     * @param sectionId  (required)
     * @param cascade Flag to cascade delete of this object to all it&#x27;s child objects. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deletePBRSectionWithHttpInfo(String sectionId, Boolean cascade) throws ApiException {
        com.squareup.okhttp.Call call = deletePBRSectionValidateBeforeCall(sectionId, cascade, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete an Existing Section and Its Associated Rules (asynchronously)
     * Removes PBR section from the system. PBR section with rules can only be deleted by passing \&quot;cascade&#x3D;true\&quot; parameter. 
     * @param sectionId  (required)
     * @param cascade Flag to cascade delete of this object to all it&#x27;s child objects. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deletePBRSectionAsync(String sectionId, Boolean cascade, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deletePBRSectionValidateBeforeCall(sectionId, cascade, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getPBRRule
     * @param sectionId  (required)
     * @param ruleId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPBRRuleCall(String sectionId, String ruleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pbr/sections/{section-id}/rules/{rule-id}"
            .replaceAll("\\{" + "section-id" + "\\}", apiClient.escapeString(sectionId.toString()))
            .replaceAll("\\{" + "rule-id" + "\\}", apiClient.escapeString(ruleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPBRRuleValidateBeforeCall(String sectionId, String ruleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'sectionId' is set
        if (sectionId == null) {
            throw new ApiException("Missing the required parameter 'sectionId' when calling getPBRRule(Async)");
        }
        // verify the required parameter 'ruleId' is set
        if (ruleId == null) {
            throw new ApiException("Missing the required parameter 'ruleId' when calling getPBRRule(Async)");
        }
        
        com.squareup.okhttp.Call call = getPBRRuleCall(sectionId, ruleId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read an Existing Rule
     * Return existing PBR rule information in a PBR section. 
     * @param sectionId  (required)
     * @param ruleId  (required)
     * @return PBRRule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PBRRule getPBRRule(String sectionId, String ruleId) throws ApiException {
        ApiResponse<PBRRule> resp = getPBRRuleWithHttpInfo(sectionId, ruleId);
        return resp.getData();
    }

    /**
     * Read an Existing Rule
     * Return existing PBR rule information in a PBR section. 
     * @param sectionId  (required)
     * @param ruleId  (required)
     * @return ApiResponse&lt;PBRRule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PBRRule> getPBRRuleWithHttpInfo(String sectionId, String ruleId) throws ApiException {
        com.squareup.okhttp.Call call = getPBRRuleValidateBeforeCall(sectionId, ruleId, null, null);
        Type localVarReturnType = new TypeToken<PBRRule>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read an Existing Rule (asynchronously)
     * Return existing PBR rule information in a PBR section. 
     * @param sectionId  (required)
     * @param ruleId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPBRRuleAsync(String sectionId, String ruleId, final ApiCallback<PBRRule> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPBRRuleValidateBeforeCall(sectionId, ruleId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PBRRule>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPBRRuleStats
     * @param sectionId  (required)
     * @param ruleId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPBRRuleStatsCall(String sectionId, String ruleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pbr/sections/{section-id}/rules/{rule-id}/stats"
            .replaceAll("\\{" + "section-id" + "\\}", apiClient.escapeString(sectionId.toString()))
            .replaceAll("\\{" + "rule-id" + "\\}", apiClient.escapeString(ruleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPBRRuleStatsValidateBeforeCall(String sectionId, String ruleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'sectionId' is set
        if (sectionId == null) {
            throw new ApiException("Missing the required parameter 'sectionId' when calling getPBRRuleStats(Async)");
        }
        // verify the required parameter 'ruleId' is set
        if (ruleId == null) {
            throw new ApiException("Missing the required parameter 'ruleId' when calling getPBRRuleStats(Async)");
        }
        
        com.squareup.okhttp.Call call = getPBRRuleStatsCall(sectionId, ruleId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get PBR rule level statistics.
     * Get aggregated statistics for a rule for given PBR rule. Stats include total number of packets and total number of bytes for the PBR rule. 
     * @param sectionId  (required)
     * @param ruleId  (required)
     * @return PBRStats
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PBRStats getPBRRuleStats(String sectionId, String ruleId) throws ApiException {
        ApiResponse<PBRStats> resp = getPBRRuleStatsWithHttpInfo(sectionId, ruleId);
        return resp.getData();
    }

    /**
     * Get PBR rule level statistics.
     * Get aggregated statistics for a rule for given PBR rule. Stats include total number of packets and total number of bytes for the PBR rule. 
     * @param sectionId  (required)
     * @param ruleId  (required)
     * @return ApiResponse&lt;PBRStats&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PBRStats> getPBRRuleStatsWithHttpInfo(String sectionId, String ruleId) throws ApiException {
        com.squareup.okhttp.Call call = getPBRRuleStatsValidateBeforeCall(sectionId, ruleId, null, null);
        Type localVarReturnType = new TypeToken<PBRStats>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get PBR rule level statistics. (asynchronously)
     * Get aggregated statistics for a rule for given PBR rule. Stats include total number of packets and total number of bytes for the PBR rule. 
     * @param sectionId  (required)
     * @param ruleId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPBRRuleStatsAsync(String sectionId, String ruleId, final ApiCallback<PBRStats> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPBRRuleStatsValidateBeforeCall(sectionId, ruleId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PBRStats>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPBRRules
     * @param sectionId  (required)
     * @param appliedTos AppliedTo&#x27;s referenced by this section or section&#x27;s Distributed Service Rules . (optional)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param destinations Destinations referenced by this section&#x27;s Distributed Service Rules . (optional)
     * @param filterType Filter type (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param services NSService referenced by this section&#x27;s Distributed Service Rules . (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param sources Sources referenced by this section&#x27;s Distributed Service Rules . (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPBRRulesCall(String sectionId, String appliedTos, String cursor, String destinations, String filterType, String includedFields, Long pageSize, String services, Boolean sortAscending, String sortBy, String sources, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pbr/sections/{section-id}/rules"
            .replaceAll("\\{" + "section-id" + "\\}", apiClient.escapeString(sectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (appliedTos != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("applied_tos", appliedTos));
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (destinations != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("destinations", destinations));
        if (filterType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter_type", filterType));
        if (includedFields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("included_fields", includedFields));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page_size", pageSize));
        if (services != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("services", services));
        if (sortAscending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_ascending", sortAscending));
        if (sortBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_by", sortBy));
        if (sources != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sources", sources));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPBRRulesValidateBeforeCall(String sectionId, String appliedTos, String cursor, String destinations, String filterType, String includedFields, Long pageSize, String services, Boolean sortAscending, String sortBy, String sources, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'sectionId' is set
        if (sectionId == null) {
            throw new ApiException("Missing the required parameter 'sectionId' when calling getPBRRules(Async)");
        }
        
        com.squareup.okhttp.Call call = getPBRRulesCall(sectionId, appliedTos, cursor, destinations, filterType, includedFields, pageSize, services, sortAscending, sortBy, sources, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get All the Rules for a Section
     * Return all PBR rule(s) information for a given PBR section. 
     * @param sectionId  (required)
     * @param appliedTos AppliedTo&#x27;s referenced by this section or section&#x27;s Distributed Service Rules . (optional)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param destinations Destinations referenced by this section&#x27;s Distributed Service Rules . (optional)
     * @param filterType Filter type (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param services NSService referenced by this section&#x27;s Distributed Service Rules . (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param sources Sources referenced by this section&#x27;s Distributed Service Rules . (optional)
     * @return PBRRuleListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PBRRuleListResult getPBRRules(String sectionId, String appliedTos, String cursor, String destinations, String filterType, String includedFields, Long pageSize, String services, Boolean sortAscending, String sortBy, String sources) throws ApiException {
        ApiResponse<PBRRuleListResult> resp = getPBRRulesWithHttpInfo(sectionId, appliedTos, cursor, destinations, filterType, includedFields, pageSize, services, sortAscending, sortBy, sources);
        return resp.getData();
    }

    /**
     * Get All the Rules for a Section
     * Return all PBR rule(s) information for a given PBR section. 
     * @param sectionId  (required)
     * @param appliedTos AppliedTo&#x27;s referenced by this section or section&#x27;s Distributed Service Rules . (optional)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param destinations Destinations referenced by this section&#x27;s Distributed Service Rules . (optional)
     * @param filterType Filter type (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param services NSService referenced by this section&#x27;s Distributed Service Rules . (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param sources Sources referenced by this section&#x27;s Distributed Service Rules . (optional)
     * @return ApiResponse&lt;PBRRuleListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PBRRuleListResult> getPBRRulesWithHttpInfo(String sectionId, String appliedTos, String cursor, String destinations, String filterType, String includedFields, Long pageSize, String services, Boolean sortAscending, String sortBy, String sources) throws ApiException {
        com.squareup.okhttp.Call call = getPBRRulesValidateBeforeCall(sectionId, appliedTos, cursor, destinations, filterType, includedFields, pageSize, services, sortAscending, sortBy, sources, null, null);
        Type localVarReturnType = new TypeToken<PBRRuleListResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get All the Rules for a Section (asynchronously)
     * Return all PBR rule(s) information for a given PBR section. 
     * @param sectionId  (required)
     * @param appliedTos AppliedTo&#x27;s referenced by this section or section&#x27;s Distributed Service Rules . (optional)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param destinations Destinations referenced by this section&#x27;s Distributed Service Rules . (optional)
     * @param filterType Filter type (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param services NSService referenced by this section&#x27;s Distributed Service Rules . (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param sources Sources referenced by this section&#x27;s Distributed Service Rules . (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPBRRulesAsync(String sectionId, String appliedTos, String cursor, String destinations, String filterType, String includedFields, Long pageSize, String services, Boolean sortAscending, String sortBy, String sources, final ApiCallback<PBRRuleListResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPBRRulesValidateBeforeCall(sectionId, appliedTos, cursor, destinations, filterType, includedFields, pageSize, services, sortAscending, sortBy, sources, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PBRRuleListResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPBRSection
     * @param sectionId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPBRSectionCall(String sectionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pbr/sections/{section-id}"
            .replaceAll("\\{" + "section-id" + "\\}", apiClient.escapeString(sectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPBRSectionValidateBeforeCall(String sectionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'sectionId' is set
        if (sectionId == null) {
            throw new ApiException("Missing the required parameter 'sectionId' when calling getPBRSection(Async)");
        }
        
        com.squareup.okhttp.Call call = getPBRSectionCall(sectionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get an Existing Section
     * Returns information about PBR section for the identifier. 
     * @param sectionId  (required)
     * @return PBRSection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PBRSection getPBRSection(String sectionId) throws ApiException {
        ApiResponse<PBRSection> resp = getPBRSectionWithHttpInfo(sectionId);
        return resp.getData();
    }

    /**
     * Get an Existing Section
     * Returns information about PBR section for the identifier. 
     * @param sectionId  (required)
     * @return ApiResponse&lt;PBRSection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PBRSection> getPBRSectionWithHttpInfo(String sectionId) throws ApiException {
        com.squareup.okhttp.Call call = getPBRSectionValidateBeforeCall(sectionId, null, null);
        Type localVarReturnType = new TypeToken<PBRSection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get an Existing Section (asynchronously)
     * Returns information about PBR section for the identifier. 
     * @param sectionId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPBRSectionAsync(String sectionId, final ApiCallback<PBRSection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPBRSectionValidateBeforeCall(sectionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PBRSection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPBRSectionStats
     * @param sectionId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPBRSectionStatsCall(String sectionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pbr/sections/{section-id}/rules/stats"
            .replaceAll("\\{" + "section-id" + "\\}", apiClient.escapeString(sectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPBRSectionStatsValidateBeforeCall(String sectionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'sectionId' is set
        if (sectionId == null) {
            throw new ApiException("Missing the required parameter 'sectionId' when calling getPBRSectionStats(Async)");
        }
        
        com.squareup.okhttp.Call call = getPBRSectionStatsCall(sectionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get PBR section level statistics.
     * Get aggregated statistics for all rules for a given pbr section. Data includes total number of packets, and total number of bytes for all PBR rules in the given section. 
     * @param sectionId  (required)
     * @return PBRStatsList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PBRStatsList getPBRSectionStats(String sectionId) throws ApiException {
        ApiResponse<PBRStatsList> resp = getPBRSectionStatsWithHttpInfo(sectionId);
        return resp.getData();
    }

    /**
     * Get PBR section level statistics.
     * Get aggregated statistics for all rules for a given pbr section. Data includes total number of packets, and total number of bytes for all PBR rules in the given section. 
     * @param sectionId  (required)
     * @return ApiResponse&lt;PBRStatsList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PBRStatsList> getPBRSectionStatsWithHttpInfo(String sectionId) throws ApiException {
        com.squareup.okhttp.Call call = getPBRSectionStatsValidateBeforeCall(sectionId, null, null);
        Type localVarReturnType = new TypeToken<PBRStatsList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get PBR section level statistics. (asynchronously)
     * Get aggregated statistics for all rules for a given pbr section. Data includes total number of packets, and total number of bytes for all PBR rules in the given section. 
     * @param sectionId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPBRSectionStatsAsync(String sectionId, final ApiCallback<PBRStatsList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPBRSectionStatsValidateBeforeCall(sectionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PBRStatsList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPBRSectionWithRulesListWithRules
     * @param sectionId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPBRSectionWithRulesListWithRulesCall(String sectionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pbr/sections/{section-id}?action=list_with_rules"
            .replaceAll("\\{" + "section-id" + "\\}", apiClient.escapeString(sectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPBRSectionWithRulesListWithRulesValidateBeforeCall(String sectionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'sectionId' is set
        if (sectionId == null) {
            throw new ApiException("Missing the required parameter 'sectionId' when calling getPBRSectionWithRulesListWithRules(Async)");
        }
        
        com.squareup.okhttp.Call call = getPBRSectionWithRulesListWithRulesCall(sectionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get an Existing Section, Including Rules
     * Returns PBR section information with rules for a section identifier. When invoked on a section with a large number of rules, this API is supported only at low rates of invocation (not more than 4-5 times per minute). The typical latency of this API with about 1024 rules is about 4-5 seconds. This API should not be invoked with large payloads at automation speeds. More than 50 rules with a large number rule references is not supported.  Instead, to read PBR rules, use: GET /api/v1/pbr/sections/&amp;lt;section-id&amp;gt;/rules with the appropriate page_size. 
     * @param sectionId  (required)
     * @return PBRSectionRuleList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PBRSectionRuleList getPBRSectionWithRulesListWithRules(String sectionId) throws ApiException {
        ApiResponse<PBRSectionRuleList> resp = getPBRSectionWithRulesListWithRulesWithHttpInfo(sectionId);
        return resp.getData();
    }

    /**
     * Get an Existing Section, Including Rules
     * Returns PBR section information with rules for a section identifier. When invoked on a section with a large number of rules, this API is supported only at low rates of invocation (not more than 4-5 times per minute). The typical latency of this API with about 1024 rules is about 4-5 seconds. This API should not be invoked with large payloads at automation speeds. More than 50 rules with a large number rule references is not supported.  Instead, to read PBR rules, use: GET /api/v1/pbr/sections/&amp;lt;section-id&amp;gt;/rules with the appropriate page_size. 
     * @param sectionId  (required)
     * @return ApiResponse&lt;PBRSectionRuleList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PBRSectionRuleList> getPBRSectionWithRulesListWithRulesWithHttpInfo(String sectionId) throws ApiException {
        com.squareup.okhttp.Call call = getPBRSectionWithRulesListWithRulesValidateBeforeCall(sectionId, null, null);
        Type localVarReturnType = new TypeToken<PBRSectionRuleList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get an Existing Section, Including Rules (asynchronously)
     * Returns PBR section information with rules for a section identifier. When invoked on a section with a large number of rules, this API is supported only at low rates of invocation (not more than 4-5 times per minute). The typical latency of this API with about 1024 rules is about 4-5 seconds. This API should not be invoked with large payloads at automation speeds. More than 50 rules with a large number rule references is not supported.  Instead, to read PBR rules, use: GET /api/v1/pbr/sections/&amp;lt;section-id&amp;gt;/rules with the appropriate page_size. 
     * @param sectionId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPBRSectionWithRulesListWithRulesAsync(String sectionId, final ApiCallback<PBRSectionRuleList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPBRSectionWithRulesListWithRulesValidateBeforeCall(sectionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PBRSectionRuleList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listPBRSections
     * @param appliedTos AppliedTo&#x27;s referenced by this section or section&#x27;s Distributed Service Rules . (optional)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param destinations Destinations referenced by this section&#x27;s Distributed Service Rules . (optional)
     * @param excludeAppliedToType Resource type valid for use as AppliedTo filter in section API (optional)
     * @param filterType Filter type (optional)
     * @param includeAppliedToType Resource type valid for use as AppliedTo filter in section API (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param services NSService referenced by this section&#x27;s Distributed Service Rules . (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param sources Sources referenced by this section&#x27;s Distributed Service Rules . (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listPBRSectionsCall(String appliedTos, String cursor, String destinations, String excludeAppliedToType, String filterType, String includeAppliedToType, String includedFields, Long pageSize, String services, Boolean sortAscending, String sortBy, String sources, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pbr/sections";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (appliedTos != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("applied_tos", appliedTos));
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (destinations != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("destinations", destinations));
        if (excludeAppliedToType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("exclude_applied_to_type", excludeAppliedToType));
        if (filterType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter_type", filterType));
        if (includeAppliedToType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("include_applied_to_type", includeAppliedToType));
        if (includedFields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("included_fields", includedFields));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page_size", pageSize));
        if (services != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("services", services));
        if (sortAscending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_ascending", sortAscending));
        if (sortBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_by", sortBy));
        if (sources != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sources", sources));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listPBRSectionsValidateBeforeCall(String appliedTos, String cursor, String destinations, String excludeAppliedToType, String filterType, String includeAppliedToType, String includedFields, Long pageSize, String services, Boolean sortAscending, String sortBy, String sources, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listPBRSectionsCall(appliedTos, cursor, destinations, excludeAppliedToType, filterType, includeAppliedToType, includedFields, pageSize, services, sortAscending, sortBy, sources, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List All PBR Sections
     * List all PBR section in paginated form. A default page size is limited to 1000 PBR sections. 
     * @param appliedTos AppliedTo&#x27;s referenced by this section or section&#x27;s Distributed Service Rules . (optional)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param destinations Destinations referenced by this section&#x27;s Distributed Service Rules . (optional)
     * @param excludeAppliedToType Resource type valid for use as AppliedTo filter in section API (optional)
     * @param filterType Filter type (optional)
     * @param includeAppliedToType Resource type valid for use as AppliedTo filter in section API (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param services NSService referenced by this section&#x27;s Distributed Service Rules . (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param sources Sources referenced by this section&#x27;s Distributed Service Rules . (optional)
     * @return PBRSectionListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PBRSectionListResult listPBRSections(String appliedTos, String cursor, String destinations, String excludeAppliedToType, String filterType, String includeAppliedToType, String includedFields, Long pageSize, String services, Boolean sortAscending, String sortBy, String sources) throws ApiException {
        ApiResponse<PBRSectionListResult> resp = listPBRSectionsWithHttpInfo(appliedTos, cursor, destinations, excludeAppliedToType, filterType, includeAppliedToType, includedFields, pageSize, services, sortAscending, sortBy, sources);
        return resp.getData();
    }

    /**
     * List All PBR Sections
     * List all PBR section in paginated form. A default page size is limited to 1000 PBR sections. 
     * @param appliedTos AppliedTo&#x27;s referenced by this section or section&#x27;s Distributed Service Rules . (optional)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param destinations Destinations referenced by this section&#x27;s Distributed Service Rules . (optional)
     * @param excludeAppliedToType Resource type valid for use as AppliedTo filter in section API (optional)
     * @param filterType Filter type (optional)
     * @param includeAppliedToType Resource type valid for use as AppliedTo filter in section API (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param services NSService referenced by this section&#x27;s Distributed Service Rules . (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param sources Sources referenced by this section&#x27;s Distributed Service Rules . (optional)
     * @return ApiResponse&lt;PBRSectionListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PBRSectionListResult> listPBRSectionsWithHttpInfo(String appliedTos, String cursor, String destinations, String excludeAppliedToType, String filterType, String includeAppliedToType, String includedFields, Long pageSize, String services, Boolean sortAscending, String sortBy, String sources) throws ApiException {
        com.squareup.okhttp.Call call = listPBRSectionsValidateBeforeCall(appliedTos, cursor, destinations, excludeAppliedToType, filterType, includeAppliedToType, includedFields, pageSize, services, sortAscending, sortBy, sources, null, null);
        Type localVarReturnType = new TypeToken<PBRSectionListResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List All PBR Sections (asynchronously)
     * List all PBR section in paginated form. A default page size is limited to 1000 PBR sections. 
     * @param appliedTos AppliedTo&#x27;s referenced by this section or section&#x27;s Distributed Service Rules . (optional)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param destinations Destinations referenced by this section&#x27;s Distributed Service Rules . (optional)
     * @param excludeAppliedToType Resource type valid for use as AppliedTo filter in section API (optional)
     * @param filterType Filter type (optional)
     * @param includeAppliedToType Resource type valid for use as AppliedTo filter in section API (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param services NSService referenced by this section&#x27;s Distributed Service Rules . (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param sources Sources referenced by this section&#x27;s Distributed Service Rules . (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listPBRSectionsAsync(String appliedTos, String cursor, String destinations, String excludeAppliedToType, String filterType, String includeAppliedToType, String includedFields, Long pageSize, String services, Boolean sortAscending, String sortBy, String sources, final ApiCallback<PBRSectionListResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listPBRSectionsValidateBeforeCall(appliedTos, cursor, destinations, excludeAppliedToType, filterType, includeAppliedToType, includedFields, pageSize, services, sortAscending, sortBy, sources, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PBRSectionListResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for revisePBRRuleRevise
     * @param body  (required)
     * @param sectionId  (required)
     * @param ruleId  (required)
     * @param id Identifier of the anchor rule or section. This is a required field in case operation like &#x27;insert_before&#x27; and &#x27;insert_after&#x27;. (optional)
     * @param operation Operation (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call revisePBRRuleReviseCall(PBRRule body, String sectionId, String ruleId, String id, String operation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/pbr/sections/{section-id}/rules/{rule-id}?action=revise"
            .replaceAll("\\{" + "section-id" + "\\}", apiClient.escapeString(sectionId.toString()))
            .replaceAll("\\{" + "rule-id" + "\\}", apiClient.escapeString(ruleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (id != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("id", id));
        if (operation != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("operation", operation));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call revisePBRRuleReviseValidateBeforeCall(PBRRule body, String sectionId, String ruleId, String id, String operation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling revisePBRRuleRevise(Async)");
        }
        // verify the required parameter 'sectionId' is set
        if (sectionId == null) {
            throw new ApiException("Missing the required parameter 'sectionId' when calling revisePBRRuleRevise(Async)");
        }
        // verify the required parameter 'ruleId' is set
        if (ruleId == null) {
            throw new ApiException("Missing the required parameter 'ruleId' when calling revisePBRRuleRevise(Async)");
        }
        
        com.squareup.okhttp.Call call = revisePBRRuleReviseCall(body, sectionId, ruleId, id, operation, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update an Existing Rule and Reorder the Rule
     * Modifies existing PBR rule along with relative position among other PBR rules inside a PBR section. 
     * @param body  (required)
     * @param sectionId  (required)
     * @param ruleId  (required)
     * @param id Identifier of the anchor rule or section. This is a required field in case operation like &#x27;insert_before&#x27; and &#x27;insert_after&#x27;. (optional)
     * @param operation Operation (optional)
     * @return PBRRule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PBRRule revisePBRRuleRevise(PBRRule body, String sectionId, String ruleId, String id, String operation) throws ApiException {
        ApiResponse<PBRRule> resp = revisePBRRuleReviseWithHttpInfo(body, sectionId, ruleId, id, operation);
        return resp.getData();
    }

    /**
     * Update an Existing Rule and Reorder the Rule
     * Modifies existing PBR rule along with relative position among other PBR rules inside a PBR section. 
     * @param body  (required)
     * @param sectionId  (required)
     * @param ruleId  (required)
     * @param id Identifier of the anchor rule or section. This is a required field in case operation like &#x27;insert_before&#x27; and &#x27;insert_after&#x27;. (optional)
     * @param operation Operation (optional)
     * @return ApiResponse&lt;PBRRule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PBRRule> revisePBRRuleReviseWithHttpInfo(PBRRule body, String sectionId, String ruleId, String id, String operation) throws ApiException {
        com.squareup.okhttp.Call call = revisePBRRuleReviseValidateBeforeCall(body, sectionId, ruleId, id, operation, null, null);
        Type localVarReturnType = new TypeToken<PBRRule>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update an Existing Rule and Reorder the Rule (asynchronously)
     * Modifies existing PBR rule along with relative position among other PBR rules inside a PBR section. 
     * @param body  (required)
     * @param sectionId  (required)
     * @param ruleId  (required)
     * @param id Identifier of the anchor rule or section. This is a required field in case operation like &#x27;insert_before&#x27; and &#x27;insert_after&#x27;. (optional)
     * @param operation Operation (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call revisePBRRuleReviseAsync(PBRRule body, String sectionId, String ruleId, String id, String operation, final ApiCallback<PBRRule> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = revisePBRRuleReviseValidateBeforeCall(body, sectionId, ruleId, id, operation, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PBRRule>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for revisePBRSectionRevise
     * @param body  (required)
     * @param sectionId  (required)
     * @param id Identifier of the anchor rule or section. This is a required field in case operation like &#x27;insert_before&#x27; and &#x27;insert_after&#x27;. (optional)
     * @param operation Operation (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call revisePBRSectionReviseCall(PBRSection body, String sectionId, String id, String operation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/pbr/sections/{section-id}?action=revise"
            .replaceAll("\\{" + "section-id" + "\\}", apiClient.escapeString(sectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (id != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("id", id));
        if (operation != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("operation", operation));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call revisePBRSectionReviseValidateBeforeCall(PBRSection body, String sectionId, String id, String operation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling revisePBRSectionRevise(Async)");
        }
        // verify the required parameter 'sectionId' is set
        if (sectionId == null) {
            throw new ApiException("Missing the required parameter 'sectionId' when calling revisePBRSectionRevise(Async)");
        }
        
        com.squareup.okhttp.Call call = revisePBRSectionReviseCall(body, sectionId, id, operation, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update an Existing Section, including Its Position
     * Modifies an existing PBR section along with its relative position among other PBR sections in the system. 
     * @param body  (required)
     * @param sectionId  (required)
     * @param id Identifier of the anchor rule or section. This is a required field in case operation like &#x27;insert_before&#x27; and &#x27;insert_after&#x27;. (optional)
     * @param operation Operation (optional)
     * @return PBRSection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PBRSection revisePBRSectionRevise(PBRSection body, String sectionId, String id, String operation) throws ApiException {
        ApiResponse<PBRSection> resp = revisePBRSectionReviseWithHttpInfo(body, sectionId, id, operation);
        return resp.getData();
    }

    /**
     * Update an Existing Section, including Its Position
     * Modifies an existing PBR section along with its relative position among other PBR sections in the system. 
     * @param body  (required)
     * @param sectionId  (required)
     * @param id Identifier of the anchor rule or section. This is a required field in case operation like &#x27;insert_before&#x27; and &#x27;insert_after&#x27;. (optional)
     * @param operation Operation (optional)
     * @return ApiResponse&lt;PBRSection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PBRSection> revisePBRSectionReviseWithHttpInfo(PBRSection body, String sectionId, String id, String operation) throws ApiException {
        com.squareup.okhttp.Call call = revisePBRSectionReviseValidateBeforeCall(body, sectionId, id, operation, null, null);
        Type localVarReturnType = new TypeToken<PBRSection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update an Existing Section, including Its Position (asynchronously)
     * Modifies an existing PBR section along with its relative position among other PBR sections in the system. 
     * @param body  (required)
     * @param sectionId  (required)
     * @param id Identifier of the anchor rule or section. This is a required field in case operation like &#x27;insert_before&#x27; and &#x27;insert_after&#x27;. (optional)
     * @param operation Operation (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call revisePBRSectionReviseAsync(PBRSection body, String sectionId, String id, String operation, final ApiCallback<PBRSection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = revisePBRSectionReviseValidateBeforeCall(body, sectionId, id, operation, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PBRSection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for revisePBRSectionWithRulesReviseWithRules
     * @param body  (required)
     * @param sectionId  (required)
     * @param id Identifier of the anchor rule or section. This is a required field in case operation like &#x27;insert_before&#x27; and &#x27;insert_after&#x27;. (optional)
     * @param operation Operation (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call revisePBRSectionWithRulesReviseWithRulesCall(PBRSectionRuleList body, String sectionId, String id, String operation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/pbr/sections/{section-id}?action=revise_with_rules"
            .replaceAll("\\{" + "section-id" + "\\}", apiClient.escapeString(sectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (id != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("id", id));
        if (operation != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("operation", operation));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call revisePBRSectionWithRulesReviseWithRulesValidateBeforeCall(PBRSectionRuleList body, String sectionId, String id, String operation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling revisePBRSectionWithRulesReviseWithRules(Async)");
        }
        // verify the required parameter 'sectionId' is set
        if (sectionId == null) {
            throw new ApiException("Missing the required parameter 'sectionId' when calling revisePBRSectionWithRulesReviseWithRules(Async)");
        }
        
        com.squareup.okhttp.Call call = revisePBRSectionWithRulesReviseWithRulesCall(body, sectionId, id, operation, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update an Existing Section with Rules
     * Modifies an existing PBR section along with its relative position among other PBR sections with rules. When invoked on a large number of rules, this API is supported only at low rates of invocation (not more than 2 times per minute). The typical latency of this API with about 1024 rules is about 15 seconds in a cluster setup. This API should not be invoked with large payloads at automation speeds.  Instead, to move a section above or below another section, use: POST /api/v1/pbr/sections/&amp;lt;section-id&amp;gt;?action&#x3D;revise  To modify rules, use: PUT /api/v1/pbr/sections/&amp;lt;section-id&amp;gt;/rules/&amp;lt;rule-id&amp;gt; 
     * @param body  (required)
     * @param sectionId  (required)
     * @param id Identifier of the anchor rule or section. This is a required field in case operation like &#x27;insert_before&#x27; and &#x27;insert_after&#x27;. (optional)
     * @param operation Operation (optional)
     * @return PBRSectionRuleList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PBRSectionRuleList revisePBRSectionWithRulesReviseWithRules(PBRSectionRuleList body, String sectionId, String id, String operation) throws ApiException {
        ApiResponse<PBRSectionRuleList> resp = revisePBRSectionWithRulesReviseWithRulesWithHttpInfo(body, sectionId, id, operation);
        return resp.getData();
    }

    /**
     * Update an Existing Section with Rules
     * Modifies an existing PBR section along with its relative position among other PBR sections with rules. When invoked on a large number of rules, this API is supported only at low rates of invocation (not more than 2 times per minute). The typical latency of this API with about 1024 rules is about 15 seconds in a cluster setup. This API should not be invoked with large payloads at automation speeds.  Instead, to move a section above or below another section, use: POST /api/v1/pbr/sections/&amp;lt;section-id&amp;gt;?action&#x3D;revise  To modify rules, use: PUT /api/v1/pbr/sections/&amp;lt;section-id&amp;gt;/rules/&amp;lt;rule-id&amp;gt; 
     * @param body  (required)
     * @param sectionId  (required)
     * @param id Identifier of the anchor rule or section. This is a required field in case operation like &#x27;insert_before&#x27; and &#x27;insert_after&#x27;. (optional)
     * @param operation Operation (optional)
     * @return ApiResponse&lt;PBRSectionRuleList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PBRSectionRuleList> revisePBRSectionWithRulesReviseWithRulesWithHttpInfo(PBRSectionRuleList body, String sectionId, String id, String operation) throws ApiException {
        com.squareup.okhttp.Call call = revisePBRSectionWithRulesReviseWithRulesValidateBeforeCall(body, sectionId, id, operation, null, null);
        Type localVarReturnType = new TypeToken<PBRSectionRuleList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update an Existing Section with Rules (asynchronously)
     * Modifies an existing PBR section along with its relative position among other PBR sections with rules. When invoked on a large number of rules, this API is supported only at low rates of invocation (not more than 2 times per minute). The typical latency of this API with about 1024 rules is about 15 seconds in a cluster setup. This API should not be invoked with large payloads at automation speeds.  Instead, to move a section above or below another section, use: POST /api/v1/pbr/sections/&amp;lt;section-id&amp;gt;?action&#x3D;revise  To modify rules, use: PUT /api/v1/pbr/sections/&amp;lt;section-id&amp;gt;/rules/&amp;lt;rule-id&amp;gt; 
     * @param body  (required)
     * @param sectionId  (required)
     * @param id Identifier of the anchor rule or section. This is a required field in case operation like &#x27;insert_before&#x27; and &#x27;insert_after&#x27;. (optional)
     * @param operation Operation (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call revisePBRSectionWithRulesReviseWithRulesAsync(PBRSectionRuleList body, String sectionId, String id, String operation, final ApiCallback<PBRSectionRuleList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = revisePBRSectionWithRulesReviseWithRulesValidateBeforeCall(body, sectionId, id, operation, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PBRSectionRuleList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updatePBRRule
     * @param body  (required)
     * @param sectionId  (required)
     * @param ruleId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updatePBRRuleCall(PBRRule body, String sectionId, String ruleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/pbr/sections/{section-id}/rules/{rule-id}"
            .replaceAll("\\{" + "section-id" + "\\}", apiClient.escapeString(sectionId.toString()))
            .replaceAll("\\{" + "rule-id" + "\\}", apiClient.escapeString(ruleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updatePBRRuleValidateBeforeCall(PBRRule body, String sectionId, String ruleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updatePBRRule(Async)");
        }
        // verify the required parameter 'sectionId' is set
        if (sectionId == null) {
            throw new ApiException("Missing the required parameter 'sectionId' when calling updatePBRRule(Async)");
        }
        // verify the required parameter 'ruleId' is set
        if (ruleId == null) {
            throw new ApiException("Missing the required parameter 'ruleId' when calling updatePBRRule(Async)");
        }
        
        com.squareup.okhttp.Call call = updatePBRRuleCall(body, sectionId, ruleId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update an Existing Rule
     * Modifies existing rule in a PBR section. 
     * @param body  (required)
     * @param sectionId  (required)
     * @param ruleId  (required)
     * @return PBRRule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PBRRule updatePBRRule(PBRRule body, String sectionId, String ruleId) throws ApiException {
        ApiResponse<PBRRule> resp = updatePBRRuleWithHttpInfo(body, sectionId, ruleId);
        return resp.getData();
    }

    /**
     * Update an Existing Rule
     * Modifies existing rule in a PBR section. 
     * @param body  (required)
     * @param sectionId  (required)
     * @param ruleId  (required)
     * @return ApiResponse&lt;PBRRule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PBRRule> updatePBRRuleWithHttpInfo(PBRRule body, String sectionId, String ruleId) throws ApiException {
        com.squareup.okhttp.Call call = updatePBRRuleValidateBeforeCall(body, sectionId, ruleId, null, null);
        Type localVarReturnType = new TypeToken<PBRRule>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update an Existing Rule (asynchronously)
     * Modifies existing rule in a PBR section. 
     * @param body  (required)
     * @param sectionId  (required)
     * @param ruleId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updatePBRRuleAsync(PBRRule body, String sectionId, String ruleId, final ApiCallback<PBRRule> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updatePBRRuleValidateBeforeCall(body, sectionId, ruleId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PBRRule>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updatePBRSection
     * @param body  (required)
     * @param sectionId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updatePBRSectionCall(PBRSection body, String sectionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/pbr/sections/{section-id}"
            .replaceAll("\\{" + "section-id" + "\\}", apiClient.escapeString(sectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updatePBRSectionValidateBeforeCall(PBRSection body, String sectionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updatePBRSection(Async)");
        }
        // verify the required parameter 'sectionId' is set
        if (sectionId == null) {
            throw new ApiException("Missing the required parameter 'sectionId' when calling updatePBRSection(Async)");
        }
        
        com.squareup.okhttp.Call call = updatePBRSectionCall(body, sectionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update an Existing Section
     * Modifies the specified section, but does not modify the section&#x27;s associated rules. 
     * @param body  (required)
     * @param sectionId  (required)
     * @return PBRSection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PBRSection updatePBRSection(PBRSection body, String sectionId) throws ApiException {
        ApiResponse<PBRSection> resp = updatePBRSectionWithHttpInfo(body, sectionId);
        return resp.getData();
    }

    /**
     * Update an Existing Section
     * Modifies the specified section, but does not modify the section&#x27;s associated rules. 
     * @param body  (required)
     * @param sectionId  (required)
     * @return ApiResponse&lt;PBRSection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PBRSection> updatePBRSectionWithHttpInfo(PBRSection body, String sectionId) throws ApiException {
        com.squareup.okhttp.Call call = updatePBRSectionValidateBeforeCall(body, sectionId, null, null);
        Type localVarReturnType = new TypeToken<PBRSection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update an Existing Section (asynchronously)
     * Modifies the specified section, but does not modify the section&#x27;s associated rules. 
     * @param body  (required)
     * @param sectionId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updatePBRSectionAsync(PBRSection body, String sectionId, final ApiCallback<PBRSection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updatePBRSectionValidateBeforeCall(body, sectionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PBRSection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updatePBRSectionWithRulesUpdateWithRules
     * @param body  (required)
     * @param sectionId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updatePBRSectionWithRulesUpdateWithRulesCall(PBRSectionRuleList body, String sectionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/pbr/sections/{section-id}?action=update_with_rules"
            .replaceAll("\\{" + "section-id" + "\\}", apiClient.escapeString(sectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updatePBRSectionWithRulesUpdateWithRulesValidateBeforeCall(PBRSectionRuleList body, String sectionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updatePBRSectionWithRulesUpdateWithRules(Async)");
        }
        // verify the required parameter 'sectionId' is set
        if (sectionId == null) {
            throw new ApiException("Missing the required parameter 'sectionId' when calling updatePBRSectionWithRulesUpdateWithRules(Async)");
        }
        
        com.squareup.okhttp.Call call = updatePBRSectionWithRulesUpdateWithRulesCall(body, sectionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update an Existing Section, Including Its Rules
     * Modifies existing PBR section along with its association with rules. When invoked on a large number of rules, this API is supported only at low rates of invocation (not more than 2 times per minute). The typical latency of this API with about 1024 rules is about 15 seconds in a cluster setup. This API should not be invoked with large payloads at automation speeds.  Instead, to update rule content, use: PUT /api/v1/pbr/sections/&amp;lt;section-id&amp;gt;/rules/&amp;lt;rule-id&amp;gt; 
     * @param body  (required)
     * @param sectionId  (required)
     * @return PBRSectionRuleList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PBRSectionRuleList updatePBRSectionWithRulesUpdateWithRules(PBRSectionRuleList body, String sectionId) throws ApiException {
        ApiResponse<PBRSectionRuleList> resp = updatePBRSectionWithRulesUpdateWithRulesWithHttpInfo(body, sectionId);
        return resp.getData();
    }

    /**
     * Update an Existing Section, Including Its Rules
     * Modifies existing PBR section along with its association with rules. When invoked on a large number of rules, this API is supported only at low rates of invocation (not more than 2 times per minute). The typical latency of this API with about 1024 rules is about 15 seconds in a cluster setup. This API should not be invoked with large payloads at automation speeds.  Instead, to update rule content, use: PUT /api/v1/pbr/sections/&amp;lt;section-id&amp;gt;/rules/&amp;lt;rule-id&amp;gt; 
     * @param body  (required)
     * @param sectionId  (required)
     * @return ApiResponse&lt;PBRSectionRuleList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PBRSectionRuleList> updatePBRSectionWithRulesUpdateWithRulesWithHttpInfo(PBRSectionRuleList body, String sectionId) throws ApiException {
        com.squareup.okhttp.Call call = updatePBRSectionWithRulesUpdateWithRulesValidateBeforeCall(body, sectionId, null, null);
        Type localVarReturnType = new TypeToken<PBRSectionRuleList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update an Existing Section, Including Its Rules (asynchronously)
     * Modifies existing PBR section along with its association with rules. When invoked on a large number of rules, this API is supported only at low rates of invocation (not more than 2 times per minute). The typical latency of this API with about 1024 rules is about 15 seconds in a cluster setup. This API should not be invoked with large payloads at automation speeds.  Instead, to update rule content, use: PUT /api/v1/pbr/sections/&amp;lt;section-id&amp;gt;/rules/&amp;lt;rule-id&amp;gt; 
     * @param body  (required)
     * @param sectionId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updatePBRSectionWithRulesUpdateWithRulesAsync(PBRSectionRuleList body, String sectionId, final ApiCallback<PBRSectionRuleList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updatePBRSectionWithRulesUpdateWithRulesValidateBeforeCall(body, sectionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PBRSectionRuleList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
