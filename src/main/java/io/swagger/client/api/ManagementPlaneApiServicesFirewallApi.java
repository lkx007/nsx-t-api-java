/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ApiError;
import io.swagger.client.model.BaseFirewallProfile;
import io.swagger.client.model.ExcludeList;
import io.swagger.client.model.FirewallProfileListResult;
import io.swagger.client.model.FirewallRule;
import io.swagger.client.model.FirewallRuleList;
import io.swagger.client.model.FirewallRuleListResult;
import io.swagger.client.model.FirewallSection;
import io.swagger.client.model.FirewallSectionListResult;
import io.swagger.client.model.FirewallSectionLock;
import io.swagger.client.model.FirewallSectionRuleList;
import io.swagger.client.model.FirewallSectionState;
import io.swagger.client.model.FirewallSectionsSummaryList;
import io.swagger.client.model.FirewallStats;
import io.swagger.client.model.FirewallStatsList;
import io.swagger.client.model.FirewallStatus;
import io.swagger.client.model.FirewallStatusListResult;
import io.swagger.client.model.ResourceReference;
import io.swagger.client.model.RuleState;
import io.swagger.client.model.TargetResourceStatus;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ManagementPlaneApiServicesFirewallApi {
    private ApiClient apiClient;

    public ManagementPlaneApiServicesFirewallApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ManagementPlaneApiServicesFirewallApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addMemberAddMember
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addMemberAddMemberCall(ResourceReference body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/firewall/excludelist?action=add_member";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addMemberAddMemberValidateBeforeCall(ResourceReference body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addMemberAddMember(Async)");
        }
        
        com.squareup.okhttp.Call call = addMemberAddMemberCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add a new object in the exclude list
     * Add a new object in the exclude list
     * @param body  (required)
     * @return ResourceReference
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResourceReference addMemberAddMember(ResourceReference body) throws ApiException {
        ApiResponse<ResourceReference> resp = addMemberAddMemberWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Add a new object in the exclude list
     * Add a new object in the exclude list
     * @param body  (required)
     * @return ApiResponse&lt;ResourceReference&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResourceReference> addMemberAddMemberWithHttpInfo(ResourceReference body) throws ApiException {
        com.squareup.okhttp.Call call = addMemberAddMemberValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<ResourceReference>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add a new object in the exclude list (asynchronously)
     * Add a new object in the exclude list
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addMemberAddMemberAsync(ResourceReference body, final ApiCallback<ResourceReference> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addMemberAddMemberValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResourceReference>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addRuleInSection
     * @param body  (required)
     * @param sectionId  (required)
     * @param id Identifier of the anchor rule or section. This is a required field in case operation like &#x27;insert_before&#x27; and &#x27;insert_after&#x27;. (optional)
     * @param operation Operation (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addRuleInSectionCall(FirewallRule body, String sectionId, String id, String operation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/firewall/sections/{section-id}/rules"
            .replaceAll("\\{" + "section-id" + "\\}", apiClient.escapeString(sectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (id != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("id", id));
        if (operation != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("operation", operation));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addRuleInSectionValidateBeforeCall(FirewallRule body, String sectionId, String id, String operation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addRuleInSection(Async)");
        }
        // verify the required parameter 'sectionId' is set
        if (sectionId == null) {
            throw new ApiException("Missing the required parameter 'sectionId' when calling addRuleInSection(Async)");
        }
        
        com.squareup.okhttp.Call call = addRuleInSectionCall(body, sectionId, id, operation, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add a Single Rule in a Section
     * Adds a new firewall rule in existing firewall section. Adding firewall rule to a section modifies parent section entity and simultaneous update (modify) operations on same section are not allowed to prevent overwriting stale content to firewall section. If a concurrent update is performed, HTTP response code 409 will be returned to the client operating on stale data. That client should retrieve the firewall section again and re-apply its update. 
     * @param body  (required)
     * @param sectionId  (required)
     * @param id Identifier of the anchor rule or section. This is a required field in case operation like &#x27;insert_before&#x27; and &#x27;insert_after&#x27;. (optional)
     * @param operation Operation (optional)
     * @return FirewallRule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FirewallRule addRuleInSection(FirewallRule body, String sectionId, String id, String operation) throws ApiException {
        ApiResponse<FirewallRule> resp = addRuleInSectionWithHttpInfo(body, sectionId, id, operation);
        return resp.getData();
    }

    /**
     * Add a Single Rule in a Section
     * Adds a new firewall rule in existing firewall section. Adding firewall rule to a section modifies parent section entity and simultaneous update (modify) operations on same section are not allowed to prevent overwriting stale content to firewall section. If a concurrent update is performed, HTTP response code 409 will be returned to the client operating on stale data. That client should retrieve the firewall section again and re-apply its update. 
     * @param body  (required)
     * @param sectionId  (required)
     * @param id Identifier of the anchor rule or section. This is a required field in case operation like &#x27;insert_before&#x27; and &#x27;insert_after&#x27;. (optional)
     * @param operation Operation (optional)
     * @return ApiResponse&lt;FirewallRule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FirewallRule> addRuleInSectionWithHttpInfo(FirewallRule body, String sectionId, String id, String operation) throws ApiException {
        com.squareup.okhttp.Call call = addRuleInSectionValidateBeforeCall(body, sectionId, id, operation, null, null);
        Type localVarReturnType = new TypeToken<FirewallRule>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add a Single Rule in a Section (asynchronously)
     * Adds a new firewall rule in existing firewall section. Adding firewall rule to a section modifies parent section entity and simultaneous update (modify) operations on same section are not allowed to prevent overwriting stale content to firewall section. If a concurrent update is performed, HTTP response code 409 will be returned to the client operating on stale data. That client should retrieve the firewall section again and re-apply its update. 
     * @param body  (required)
     * @param sectionId  (required)
     * @param id Identifier of the anchor rule or section. This is a required field in case operation like &#x27;insert_before&#x27; and &#x27;insert_after&#x27;. (optional)
     * @param operation Operation (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addRuleInSectionAsync(FirewallRule body, String sectionId, String id, String operation, final ApiCallback<FirewallRule> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addRuleInSectionValidateBeforeCall(body, sectionId, id, operation, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FirewallRule>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addRulesInSectionCreateMultiple
     * @param body  (required)
     * @param sectionId  (required)
     * @param id Identifier of the anchor rule or section. This is a required field in case operation like &#x27;insert_before&#x27; and &#x27;insert_after&#x27;. (optional)
     * @param operation Operation (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addRulesInSectionCreateMultipleCall(FirewallRuleList body, String sectionId, String id, String operation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/firewall/sections/{section-id}/rules?action=create_multiple"
            .replaceAll("\\{" + "section-id" + "\\}", apiClient.escapeString(sectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (id != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("id", id));
        if (operation != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("operation", operation));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addRulesInSectionCreateMultipleValidateBeforeCall(FirewallRuleList body, String sectionId, String id, String operation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addRulesInSectionCreateMultiple(Async)");
        }
        // verify the required parameter 'sectionId' is set
        if (sectionId == null) {
            throw new ApiException("Missing the required parameter 'sectionId' when calling addRulesInSectionCreateMultiple(Async)");
        }
        
        com.squareup.okhttp.Call call = addRulesInSectionCreateMultipleCall(body, sectionId, id, operation, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add Multiple Rules in a Section
     * Create multiple firewall rules in existing firewall section bounded by limit of 1000 firewall rules per section. Adding multiple firewall rules in a section modifies parent section entity and simultaneous update (modify) operations on same section are not allowed to prevent overwriting stale contents to firewall section. If a concurrent update is performed, HTTP response code 409 will be returned to the client operating on stale data. That client should retrieve the firewall section again and re-apply its update. 
     * @param body  (required)
     * @param sectionId  (required)
     * @param id Identifier of the anchor rule or section. This is a required field in case operation like &#x27;insert_before&#x27; and &#x27;insert_after&#x27;. (optional)
     * @param operation Operation (optional)
     * @return FirewallRuleList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FirewallRuleList addRulesInSectionCreateMultiple(FirewallRuleList body, String sectionId, String id, String operation) throws ApiException {
        ApiResponse<FirewallRuleList> resp = addRulesInSectionCreateMultipleWithHttpInfo(body, sectionId, id, operation);
        return resp.getData();
    }

    /**
     * Add Multiple Rules in a Section
     * Create multiple firewall rules in existing firewall section bounded by limit of 1000 firewall rules per section. Adding multiple firewall rules in a section modifies parent section entity and simultaneous update (modify) operations on same section are not allowed to prevent overwriting stale contents to firewall section. If a concurrent update is performed, HTTP response code 409 will be returned to the client operating on stale data. That client should retrieve the firewall section again and re-apply its update. 
     * @param body  (required)
     * @param sectionId  (required)
     * @param id Identifier of the anchor rule or section. This is a required field in case operation like &#x27;insert_before&#x27; and &#x27;insert_after&#x27;. (optional)
     * @param operation Operation (optional)
     * @return ApiResponse&lt;FirewallRuleList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FirewallRuleList> addRulesInSectionCreateMultipleWithHttpInfo(FirewallRuleList body, String sectionId, String id, String operation) throws ApiException {
        com.squareup.okhttp.Call call = addRulesInSectionCreateMultipleValidateBeforeCall(body, sectionId, id, operation, null, null);
        Type localVarReturnType = new TypeToken<FirewallRuleList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add Multiple Rules in a Section (asynchronously)
     * Create multiple firewall rules in existing firewall section bounded by limit of 1000 firewall rules per section. Adding multiple firewall rules in a section modifies parent section entity and simultaneous update (modify) operations on same section are not allowed to prevent overwriting stale contents to firewall section. If a concurrent update is performed, HTTP response code 409 will be returned to the client operating on stale data. That client should retrieve the firewall section again and re-apply its update. 
     * @param body  (required)
     * @param sectionId  (required)
     * @param id Identifier of the anchor rule or section. This is a required field in case operation like &#x27;insert_before&#x27; and &#x27;insert_after&#x27;. (optional)
     * @param operation Operation (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addRulesInSectionCreateMultipleAsync(FirewallRuleList body, String sectionId, String id, String operation, final ApiCallback<FirewallRuleList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addRulesInSectionCreateMultipleValidateBeforeCall(body, sectionId, id, operation, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FirewallRuleList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addSection
     * @param body  (required)
     * @param id Identifier of the anchor rule or section. This is a required field in case operation like &#x27;insert_before&#x27; and &#x27;insert_after&#x27;. (optional)
     * @param operation Operation (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addSectionCall(FirewallSection body, String id, String operation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/firewall/sections";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (id != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("id", id));
        if (operation != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("operation", operation));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addSectionValidateBeforeCall(FirewallSection body, String id, String operation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addSection(Async)");
        }
        
        com.squareup.okhttp.Call call = addSectionCall(body, id, operation, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create a New Empty Section
     * Creates new empty firewall section in the system. 
     * @param body  (required)
     * @param id Identifier of the anchor rule or section. This is a required field in case operation like &#x27;insert_before&#x27; and &#x27;insert_after&#x27;. (optional)
     * @param operation Operation (optional)
     * @return FirewallSection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FirewallSection addSection(FirewallSection body, String id, String operation) throws ApiException {
        ApiResponse<FirewallSection> resp = addSectionWithHttpInfo(body, id, operation);
        return resp.getData();
    }

    /**
     * Create a New Empty Section
     * Creates new empty firewall section in the system. 
     * @param body  (required)
     * @param id Identifier of the anchor rule or section. This is a required field in case operation like &#x27;insert_before&#x27; and &#x27;insert_after&#x27;. (optional)
     * @param operation Operation (optional)
     * @return ApiResponse&lt;FirewallSection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FirewallSection> addSectionWithHttpInfo(FirewallSection body, String id, String operation) throws ApiException {
        com.squareup.okhttp.Call call = addSectionValidateBeforeCall(body, id, operation, null, null);
        Type localVarReturnType = new TypeToken<FirewallSection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a New Empty Section (asynchronously)
     * Creates new empty firewall section in the system. 
     * @param body  (required)
     * @param id Identifier of the anchor rule or section. This is a required field in case operation like &#x27;insert_before&#x27; and &#x27;insert_after&#x27;. (optional)
     * @param operation Operation (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addSectionAsync(FirewallSection body, String id, String operation, final ApiCallback<FirewallSection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addSectionValidateBeforeCall(body, id, operation, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FirewallSection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addSectionWithRulesCreateWithRules
     * @param body  (required)
     * @param id Identifier of the anchor rule or section. This is a required field in case operation like &#x27;insert_before&#x27; and &#x27;insert_after&#x27;. (optional)
     * @param operation Operation (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addSectionWithRulesCreateWithRulesCall(FirewallSectionRuleList body, String id, String operation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/firewall/sections?action=create_with_rules";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (id != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("id", id));
        if (operation != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("operation", operation));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addSectionWithRulesCreateWithRulesValidateBeforeCall(FirewallSectionRuleList body, String id, String operation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addSectionWithRulesCreateWithRules(Async)");
        }
        
        com.squareup.okhttp.Call call = addSectionWithRulesCreateWithRulesCall(body, id, operation, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create a Section with Rules
     * Creates a new firewall section with rules. The limit on the number of rules is defined by maxItems in collection types for FirewallRule (FirewallRuleXXXList types). When invoked on a section with a large number of rules, this API is supported only at low rates of invocation (not more than 4-5 times per minute). The typical latency of this API with about 1024 rules is about 4-5 seconds. This API should not be invoked with large payloads at automation speeds. More than 50 rules with a large number of rule references is not supported.  Instead, to create sections, use: POST /api/v1/firewall/sections  To create rules, use: POST /api/v1/firewall/sections/&amp;lt;section-id&amp;gt;/rules 
     * @param body  (required)
     * @param id Identifier of the anchor rule or section. This is a required field in case operation like &#x27;insert_before&#x27; and &#x27;insert_after&#x27;. (optional)
     * @param operation Operation (optional)
     * @return FirewallSectionRuleList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FirewallSectionRuleList addSectionWithRulesCreateWithRules(FirewallSectionRuleList body, String id, String operation) throws ApiException {
        ApiResponse<FirewallSectionRuleList> resp = addSectionWithRulesCreateWithRulesWithHttpInfo(body, id, operation);
        return resp.getData();
    }

    /**
     * Create a Section with Rules
     * Creates a new firewall section with rules. The limit on the number of rules is defined by maxItems in collection types for FirewallRule (FirewallRuleXXXList types). When invoked on a section with a large number of rules, this API is supported only at low rates of invocation (not more than 4-5 times per minute). The typical latency of this API with about 1024 rules is about 4-5 seconds. This API should not be invoked with large payloads at automation speeds. More than 50 rules with a large number of rule references is not supported.  Instead, to create sections, use: POST /api/v1/firewall/sections  To create rules, use: POST /api/v1/firewall/sections/&amp;lt;section-id&amp;gt;/rules 
     * @param body  (required)
     * @param id Identifier of the anchor rule or section. This is a required field in case operation like &#x27;insert_before&#x27; and &#x27;insert_after&#x27;. (optional)
     * @param operation Operation (optional)
     * @return ApiResponse&lt;FirewallSectionRuleList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FirewallSectionRuleList> addSectionWithRulesCreateWithRulesWithHttpInfo(FirewallSectionRuleList body, String id, String operation) throws ApiException {
        com.squareup.okhttp.Call call = addSectionWithRulesCreateWithRulesValidateBeforeCall(body, id, operation, null, null);
        Type localVarReturnType = new TypeToken<FirewallSectionRuleList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a Section with Rules (asynchronously)
     * Creates a new firewall section with rules. The limit on the number of rules is defined by maxItems in collection types for FirewallRule (FirewallRuleXXXList types). When invoked on a section with a large number of rules, this API is supported only at low rates of invocation (not more than 4-5 times per minute). The typical latency of this API with about 1024 rules is about 4-5 seconds. This API should not be invoked with large payloads at automation speeds. More than 50 rules with a large number of rule references is not supported.  Instead, to create sections, use: POST /api/v1/firewall/sections  To create rules, use: POST /api/v1/firewall/sections/&amp;lt;section-id&amp;gt;/rules 
     * @param body  (required)
     * @param id Identifier of the anchor rule or section. This is a required field in case operation like &#x27;insert_before&#x27; and &#x27;insert_after&#x27;. (optional)
     * @param operation Operation (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addSectionWithRulesCreateWithRulesAsync(FirewallSectionRuleList body, String id, String operation, final ApiCallback<FirewallSectionRuleList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addSectionWithRulesCreateWithRulesValidateBeforeCall(body, id, operation, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FirewallSectionRuleList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for checkMemberIfExistsCheckIfExists
     * @param objectId identifier of the object (required)
     * @param deepCheck Check all parents (optional)
     * @param objectType Object type of an entity (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call checkMemberIfExistsCheckIfExistsCall(String objectId, Boolean deepCheck, String objectType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/firewall/excludelist?action=check_if_exists";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (deepCheck != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("deep_check", deepCheck));
        if (objectId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("object_id", objectId));
        if (objectType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("object_type", objectType));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call checkMemberIfExistsCheckIfExistsValidateBeforeCall(String objectId, Boolean deepCheck, String objectType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling checkMemberIfExistsCheckIfExists(Async)");
        }
        
        com.squareup.okhttp.Call call = checkMemberIfExistsCheckIfExistsCall(objectId, deepCheck, objectType, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Check if the object a member of the exclude list
     * Check if the object a member of the exclude list
     * @param objectId identifier of the object (required)
     * @param deepCheck Check all parents (optional)
     * @param objectType Object type of an entity (optional)
     * @return ResourceReference
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResourceReference checkMemberIfExistsCheckIfExists(String objectId, Boolean deepCheck, String objectType) throws ApiException {
        ApiResponse<ResourceReference> resp = checkMemberIfExistsCheckIfExistsWithHttpInfo(objectId, deepCheck, objectType);
        return resp.getData();
    }

    /**
     * Check if the object a member of the exclude list
     * Check if the object a member of the exclude list
     * @param objectId identifier of the object (required)
     * @param deepCheck Check all parents (optional)
     * @param objectType Object type of an entity (optional)
     * @return ApiResponse&lt;ResourceReference&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResourceReference> checkMemberIfExistsCheckIfExistsWithHttpInfo(String objectId, Boolean deepCheck, String objectType) throws ApiException {
        com.squareup.okhttp.Call call = checkMemberIfExistsCheckIfExistsValidateBeforeCall(objectId, deepCheck, objectType, null, null);
        Type localVarReturnType = new TypeToken<ResourceReference>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Check if the object a member of the exclude list (asynchronously)
     * Check if the object a member of the exclude list
     * @param objectId identifier of the object (required)
     * @param deepCheck Check all parents (optional)
     * @param objectType Object type of an entity (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call checkMemberIfExistsCheckIfExistsAsync(String objectId, Boolean deepCheck, String objectType, final ApiCallback<ResourceReference> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = checkMemberIfExistsCheckIfExistsValidateBeforeCall(objectId, deepCheck, objectType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResourceReference>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createFirewallProfile
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createFirewallProfileCall(BaseFirewallProfile body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/firewall/profiles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createFirewallProfileValidateBeforeCall(BaseFirewallProfile body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createFirewallProfile(Async)");
        }
        
        com.squareup.okhttp.Call call = createFirewallProfileCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create a firewall profile.
     * Create a firewall profile with values provided. It creates profile based resource_type in the payload. 
     * @param body  (required)
     * @return BaseFirewallProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BaseFirewallProfile createFirewallProfile(BaseFirewallProfile body) throws ApiException {
        ApiResponse<BaseFirewallProfile> resp = createFirewallProfileWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create a firewall profile.
     * Create a firewall profile with values provided. It creates profile based resource_type in the payload. 
     * @param body  (required)
     * @return ApiResponse&lt;BaseFirewallProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BaseFirewallProfile> createFirewallProfileWithHttpInfo(BaseFirewallProfile body) throws ApiException {
        com.squareup.okhttp.Call call = createFirewallProfileValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<BaseFirewallProfile>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a firewall profile. (asynchronously)
     * Create a firewall profile with values provided. It creates profile based resource_type in the payload. 
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createFirewallProfileAsync(BaseFirewallProfile body, final ApiCallback<BaseFirewallProfile> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createFirewallProfileValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BaseFirewallProfile>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteFirewallProfile
     * @param profileId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteFirewallProfileCall(String profileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/firewall/profiles/{profile-id}"
            .replaceAll("\\{" + "profile-id" + "\\}", apiClient.escapeString(profileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteFirewallProfileValidateBeforeCall(String profileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'profileId' is set
        if (profileId == null) {
            throw new ApiException("Missing the required parameter 'profileId' when calling deleteFirewallProfile(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteFirewallProfileCall(profileId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete a firewall profile.
     * Deletes a firewall profile. 
     * @param profileId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteFirewallProfile(String profileId) throws ApiException {
        deleteFirewallProfileWithHttpInfo(profileId);
    }

    /**
     * Delete a firewall profile.
     * Deletes a firewall profile. 
     * @param profileId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteFirewallProfileWithHttpInfo(String profileId) throws ApiException {
        com.squareup.okhttp.Call call = deleteFirewallProfileValidateBeforeCall(profileId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a firewall profile. (asynchronously)
     * Deletes a firewall profile. 
     * @param profileId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteFirewallProfileAsync(String profileId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteFirewallProfileValidateBeforeCall(profileId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteRule
     * @param sectionId  (required)
     * @param ruleId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteRuleCall(String sectionId, String ruleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/firewall/sections/{section-id}/rules/{rule-id}"
            .replaceAll("\\{" + "section-id" + "\\}", apiClient.escapeString(sectionId.toString()))
            .replaceAll("\\{" + "rule-id" + "\\}", apiClient.escapeString(ruleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteRuleValidateBeforeCall(String sectionId, String ruleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'sectionId' is set
        if (sectionId == null) {
            throw new ApiException("Missing the required parameter 'sectionId' when calling deleteRule(Async)");
        }
        // verify the required parameter 'ruleId' is set
        if (ruleId == null) {
            throw new ApiException("Missing the required parameter 'ruleId' when calling deleteRule(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteRuleCall(sectionId, ruleId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete an Existing Rule
     * Delete existing firewall rule in a firewall section. Deleting firewall rule in a section modifies parent section and simultaneous update (modify) operations on same section are not allowed to prevent overwriting stale contents to firewall section. If a concurrent update is performed, HTTP response code 409 will be returned to the client operating on stale data. That client should retrieve the firewall section again and re-apply its update. 
     * @param sectionId  (required)
     * @param ruleId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteRule(String sectionId, String ruleId) throws ApiException {
        deleteRuleWithHttpInfo(sectionId, ruleId);
    }

    /**
     * Delete an Existing Rule
     * Delete existing firewall rule in a firewall section. Deleting firewall rule in a section modifies parent section and simultaneous update (modify) operations on same section are not allowed to prevent overwriting stale contents to firewall section. If a concurrent update is performed, HTTP response code 409 will be returned to the client operating on stale data. That client should retrieve the firewall section again and re-apply its update. 
     * @param sectionId  (required)
     * @param ruleId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteRuleWithHttpInfo(String sectionId, String ruleId) throws ApiException {
        com.squareup.okhttp.Call call = deleteRuleValidateBeforeCall(sectionId, ruleId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete an Existing Rule (asynchronously)
     * Delete existing firewall rule in a firewall section. Deleting firewall rule in a section modifies parent section and simultaneous update (modify) operations on same section are not allowed to prevent overwriting stale contents to firewall section. If a concurrent update is performed, HTTP response code 409 will be returned to the client operating on stale data. That client should retrieve the firewall section again and re-apply its update. 
     * @param sectionId  (required)
     * @param ruleId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteRuleAsync(String sectionId, String ruleId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteRuleValidateBeforeCall(sectionId, ruleId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteSection
     * @param sectionId  (required)
     * @param cascade Flag to cascade delete of this object to all it&#x27;s child objects. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteSectionCall(String sectionId, Boolean cascade, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/firewall/sections/{section-id}"
            .replaceAll("\\{" + "section-id" + "\\}", apiClient.escapeString(sectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (cascade != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cascade", cascade));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteSectionValidateBeforeCall(String sectionId, Boolean cascade, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'sectionId' is set
        if (sectionId == null) {
            throw new ApiException("Missing the required parameter 'sectionId' when calling deleteSection(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteSectionCall(sectionId, cascade, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete an Existing Section and Its Associated Rules
     * Removes firewall section from the system. Firewall section with rules can only be deleted by passing \&quot;cascade&#x3D;true\&quot; parameter. 
     * @param sectionId  (required)
     * @param cascade Flag to cascade delete of this object to all it&#x27;s child objects. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteSection(String sectionId, Boolean cascade) throws ApiException {
        deleteSectionWithHttpInfo(sectionId, cascade);
    }

    /**
     * Delete an Existing Section and Its Associated Rules
     * Removes firewall section from the system. Firewall section with rules can only be deleted by passing \&quot;cascade&#x3D;true\&quot; parameter. 
     * @param sectionId  (required)
     * @param cascade Flag to cascade delete of this object to all it&#x27;s child objects. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteSectionWithHttpInfo(String sectionId, Boolean cascade) throws ApiException {
        com.squareup.okhttp.Call call = deleteSectionValidateBeforeCall(sectionId, cascade, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete an Existing Section and Its Associated Rules (asynchronously)
     * Removes firewall section from the system. Firewall section with rules can only be deleted by passing \&quot;cascade&#x3D;true\&quot; parameter. 
     * @param sectionId  (required)
     * @param cascade Flag to cascade delete of this object to all it&#x27;s child objects. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteSectionAsync(String sectionId, Boolean cascade, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteSectionValidateBeforeCall(sectionId, cascade, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for disableFirewallOnTargetResourceDisableFirewall
     * @param contextType  (required)
     * @param id  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call disableFirewallOnTargetResourceDisableFirewallCall(String contextType, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/firewall/status/{context-type}/{id}?action=disable_firewall"
            .replaceAll("\\{" + "context-type" + "\\}", apiClient.escapeString(contextType.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call disableFirewallOnTargetResourceDisableFirewallValidateBeforeCall(String contextType, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'contextType' is set
        if (contextType == null) {
            throw new ApiException("Missing the required parameter 'contextType' when calling disableFirewallOnTargetResourceDisableFirewall(Async)");
        }
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling disableFirewallOnTargetResourceDisableFirewall(Async)");
        }
        
        com.squareup.okhttp.Call call = disableFirewallOnTargetResourceDisableFirewallCall(contextType, id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Disable firewall on target resource in dfw context
     * Disable firewall on target resource in dfw context
     * @param contextType  (required)
     * @param id  (required)
     * @return TargetResourceStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TargetResourceStatus disableFirewallOnTargetResourceDisableFirewall(String contextType, String id) throws ApiException {
        ApiResponse<TargetResourceStatus> resp = disableFirewallOnTargetResourceDisableFirewallWithHttpInfo(contextType, id);
        return resp.getData();
    }

    /**
     * Disable firewall on target resource in dfw context
     * Disable firewall on target resource in dfw context
     * @param contextType  (required)
     * @param id  (required)
     * @return ApiResponse&lt;TargetResourceStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TargetResourceStatus> disableFirewallOnTargetResourceDisableFirewallWithHttpInfo(String contextType, String id) throws ApiException {
        com.squareup.okhttp.Call call = disableFirewallOnTargetResourceDisableFirewallValidateBeforeCall(contextType, id, null, null);
        Type localVarReturnType = new TypeToken<TargetResourceStatus>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Disable firewall on target resource in dfw context (asynchronously)
     * Disable firewall on target resource in dfw context
     * @param contextType  (required)
     * @param id  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call disableFirewallOnTargetResourceDisableFirewallAsync(String contextType, String id, final ApiCallback<TargetResourceStatus> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = disableFirewallOnTargetResourceDisableFirewallValidateBeforeCall(contextType, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TargetResourceStatus>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for enableFirewallOnTargetResourceEnableFirewall
     * @param contextType  (required)
     * @param id  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call enableFirewallOnTargetResourceEnableFirewallCall(String contextType, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/firewall/status/{context-type}/{id}?action=enable_firewall"
            .replaceAll("\\{" + "context-type" + "\\}", apiClient.escapeString(contextType.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call enableFirewallOnTargetResourceEnableFirewallValidateBeforeCall(String contextType, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'contextType' is set
        if (contextType == null) {
            throw new ApiException("Missing the required parameter 'contextType' when calling enableFirewallOnTargetResourceEnableFirewall(Async)");
        }
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling enableFirewallOnTargetResourceEnableFirewall(Async)");
        }
        
        com.squareup.okhttp.Call call = enableFirewallOnTargetResourceEnableFirewallCall(contextType, id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Enable firewall on target resource in dfw context
     * Enable firewall on target resource in dfw context
     * @param contextType  (required)
     * @param id  (required)
     * @return TargetResourceStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TargetResourceStatus enableFirewallOnTargetResourceEnableFirewall(String contextType, String id) throws ApiException {
        ApiResponse<TargetResourceStatus> resp = enableFirewallOnTargetResourceEnableFirewallWithHttpInfo(contextType, id);
        return resp.getData();
    }

    /**
     * Enable firewall on target resource in dfw context
     * Enable firewall on target resource in dfw context
     * @param contextType  (required)
     * @param id  (required)
     * @return ApiResponse&lt;TargetResourceStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TargetResourceStatus> enableFirewallOnTargetResourceEnableFirewallWithHttpInfo(String contextType, String id) throws ApiException {
        com.squareup.okhttp.Call call = enableFirewallOnTargetResourceEnableFirewallValidateBeforeCall(contextType, id, null, null);
        Type localVarReturnType = new TypeToken<TargetResourceStatus>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Enable firewall on target resource in dfw context (asynchronously)
     * Enable firewall on target resource in dfw context
     * @param contextType  (required)
     * @param id  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call enableFirewallOnTargetResourceEnableFirewallAsync(String contextType, String id, final ApiCallback<TargetResourceStatus> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = enableFirewallOnTargetResourceEnableFirewallValidateBeforeCall(contextType, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TargetResourceStatus>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getExcludeList
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getExcludeListCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/firewall/excludelist";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getExcludeListValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getExcludeListCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get list of entities in exclude list
     * Get list of entities in exclude list
     * @return ExcludeList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ExcludeList getExcludeList() throws ApiException {
        ApiResponse<ExcludeList> resp = getExcludeListWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get list of entities in exclude list
     * Get list of entities in exclude list
     * @return ApiResponse&lt;ExcludeList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ExcludeList> getExcludeListWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getExcludeListValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<ExcludeList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get list of entities in exclude list (asynchronously)
     * Get list of entities in exclude list
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getExcludeListAsync(final ApiCallback<ExcludeList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getExcludeListValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ExcludeList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFirewallProfile
     * @param profileId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFirewallProfileCall(String profileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/firewall/profiles/{profile-id}"
            .replaceAll("\\{" + "profile-id" + "\\}", apiClient.escapeString(profileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFirewallProfileValidateBeforeCall(String profileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'profileId' is set
        if (profileId == null) {
            throw new ApiException("Missing the required parameter 'profileId' when calling getFirewallProfile(Async)");
        }
        
        com.squareup.okhttp.Call call = getFirewallProfileCall(profileId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get all firewall session timer profiles.
     * Return firewall session timer profile. 
     * @param profileId  (required)
     * @return BaseFirewallProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BaseFirewallProfile getFirewallProfile(String profileId) throws ApiException {
        ApiResponse<BaseFirewallProfile> resp = getFirewallProfileWithHttpInfo(profileId);
        return resp.getData();
    }

    /**
     * Get all firewall session timer profiles.
     * Return firewall session timer profile. 
     * @param profileId  (required)
     * @return ApiResponse&lt;BaseFirewallProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BaseFirewallProfile> getFirewallProfileWithHttpInfo(String profileId) throws ApiException {
        com.squareup.okhttp.Call call = getFirewallProfileValidateBeforeCall(profileId, null, null);
        Type localVarReturnType = new TypeToken<BaseFirewallProfile>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all firewall session timer profiles. (asynchronously)
     * Return firewall session timer profile. 
     * @param profileId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFirewallProfileAsync(String profileId, final ApiCallback<BaseFirewallProfile> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFirewallProfileValidateBeforeCall(profileId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BaseFirewallProfile>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFirewallSectionStats
     * @param sectionId  (required)
     * @param source Data source type. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFirewallSectionStatsCall(String sectionId, String source, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/firewall/sections/{section-id}/rules/stats"
            .replaceAll("\\{" + "section-id" + "\\}", apiClient.escapeString(sectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (source != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("source", source));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFirewallSectionStatsValidateBeforeCall(String sectionId, String source, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'sectionId' is set
        if (sectionId == null) {
            throw new ApiException("Missing the required parameter 'sectionId' when calling getFirewallSectionStats(Async)");
        }
        
        com.squareup.okhttp.Call call = getFirewallSectionStatsCall(sectionId, source, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Firewall section level statistics section
     * Get aggregated statistics for all rules for a given firewall section. The API only supports access to cached (source&#x3D;cached) statistical data collected offline in the system. Data includes total number of packets, bytes, sessions counters and popularity index for a firewall rule and overall session count, max session count and max popularity index for all firewall rules on transport nodes or edge nodes. Aggregated statistics like maximum popularity index, maximum session count and total session count are computed with lower frequency compared to individual generic rule statistics, hence they may have a computation delay up to 15 minutes to reflect in response to this API. 
     * @param sectionId  (required)
     * @param source Data source type. (optional)
     * @return FirewallStatsList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FirewallStatsList getFirewallSectionStats(String sectionId, String source) throws ApiException {
        ApiResponse<FirewallStatsList> resp = getFirewallSectionStatsWithHttpInfo(sectionId, source);
        return resp.getData();
    }

    /**
     * Get Firewall section level statistics section
     * Get aggregated statistics for all rules for a given firewall section. The API only supports access to cached (source&#x3D;cached) statistical data collected offline in the system. Data includes total number of packets, bytes, sessions counters and popularity index for a firewall rule and overall session count, max session count and max popularity index for all firewall rules on transport nodes or edge nodes. Aggregated statistics like maximum popularity index, maximum session count and total session count are computed with lower frequency compared to individual generic rule statistics, hence they may have a computation delay up to 15 minutes to reflect in response to this API. 
     * @param sectionId  (required)
     * @param source Data source type. (optional)
     * @return ApiResponse&lt;FirewallStatsList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FirewallStatsList> getFirewallSectionStatsWithHttpInfo(String sectionId, String source) throws ApiException {
        com.squareup.okhttp.Call call = getFirewallSectionStatsValidateBeforeCall(sectionId, source, null, null);
        Type localVarReturnType = new TypeToken<FirewallStatsList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Firewall section level statistics section (asynchronously)
     * Get aggregated statistics for all rules for a given firewall section. The API only supports access to cached (source&#x3D;cached) statistical data collected offline in the system. Data includes total number of packets, bytes, sessions counters and popularity index for a firewall rule and overall session count, max session count and max popularity index for all firewall rules on transport nodes or edge nodes. Aggregated statistics like maximum popularity index, maximum session count and total session count are computed with lower frequency compared to individual generic rule statistics, hence they may have a computation delay up to 15 minutes to reflect in response to this API. 
     * @param sectionId  (required)
     * @param source Data source type. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFirewallSectionStatsAsync(String sectionId, String source, final ApiCallback<FirewallStatsList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFirewallSectionStatsValidateBeforeCall(sectionId, source, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FirewallStatsList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFirewallStats
     * @param sectionId  (required)
     * @param ruleId  (required)
     * @param source Data source type. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFirewallStatsCall(String sectionId, String ruleId, String source, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/firewall/sections/{section-id}/rules/{rule-id}/stats"
            .replaceAll("\\{" + "section-id" + "\\}", apiClient.escapeString(sectionId.toString()))
            .replaceAll("\\{" + "rule-id" + "\\}", apiClient.escapeString(ruleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (source != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("source", source));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFirewallStatsValidateBeforeCall(String sectionId, String ruleId, String source, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'sectionId' is set
        if (sectionId == null) {
            throw new ApiException("Missing the required parameter 'sectionId' when calling getFirewallStats(Async)");
        }
        // verify the required parameter 'ruleId' is set
        if (ruleId == null) {
            throw new ApiException("Missing the required parameter 'ruleId' when calling getFirewallStats(Async)");
        }
        
        com.squareup.okhttp.Call call = getFirewallStatsCall(sectionId, ruleId, source, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Firewall rule level statistics
     * Get aggregated statistics for a rule for given firewall section. The API only supports access to cached (source&#x3D;cached) statistical data collected offline in the system. Data includes total number of packets, bytes, sessions counters and popularity index for a firewall rule and overall session count, max session count and max popularity index for all firewall rules on transport nodes or edge nodes. Aggregated statistics like maximum popularity index, maximum session count and total session count are computed with lower frequency compared to individual generic rule statistics, hence they may have a computation delay up to 15 minutes to reflect in response to this API. 
     * @param sectionId  (required)
     * @param ruleId  (required)
     * @param source Data source type. (optional)
     * @return FirewallStats
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FirewallStats getFirewallStats(String sectionId, String ruleId, String source) throws ApiException {
        ApiResponse<FirewallStats> resp = getFirewallStatsWithHttpInfo(sectionId, ruleId, source);
        return resp.getData();
    }

    /**
     * Get Firewall rule level statistics
     * Get aggregated statistics for a rule for given firewall section. The API only supports access to cached (source&#x3D;cached) statistical data collected offline in the system. Data includes total number of packets, bytes, sessions counters and popularity index for a firewall rule and overall session count, max session count and max popularity index for all firewall rules on transport nodes or edge nodes. Aggregated statistics like maximum popularity index, maximum session count and total session count are computed with lower frequency compared to individual generic rule statistics, hence they may have a computation delay up to 15 minutes to reflect in response to this API. 
     * @param sectionId  (required)
     * @param ruleId  (required)
     * @param source Data source type. (optional)
     * @return ApiResponse&lt;FirewallStats&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FirewallStats> getFirewallStatsWithHttpInfo(String sectionId, String ruleId, String source) throws ApiException {
        com.squareup.okhttp.Call call = getFirewallStatsValidateBeforeCall(sectionId, ruleId, source, null, null);
        Type localVarReturnType = new TypeToken<FirewallStats>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Firewall rule level statistics (asynchronously)
     * Get aggregated statistics for a rule for given firewall section. The API only supports access to cached (source&#x3D;cached) statistical data collected offline in the system. Data includes total number of packets, bytes, sessions counters and popularity index for a firewall rule and overall session count, max session count and max popularity index for all firewall rules on transport nodes or edge nodes. Aggregated statistics like maximum popularity index, maximum session count and total session count are computed with lower frequency compared to individual generic rule statistics, hence they may have a computation delay up to 15 minutes to reflect in response to this API. 
     * @param sectionId  (required)
     * @param ruleId  (required)
     * @param source Data source type. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFirewallStatsAsync(String sectionId, String ruleId, String source, final ApiCallback<FirewallStats> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFirewallStatsValidateBeforeCall(sectionId, ruleId, source, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FirewallStats>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFirewallStatus
     * @param contextType  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFirewallStatusCall(String contextType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/firewall/status/{context-type}"
            .replaceAll("\\{" + "context-type" + "\\}", apiClient.escapeString(contextType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFirewallStatusValidateBeforeCall(String contextType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'contextType' is set
        if (contextType == null) {
            throw new ApiException("Missing the required parameter 'contextType' when calling getFirewallStatus(Async)");
        }
        
        com.squareup.okhttp.Call call = getFirewallStatusCall(contextType, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get firewall global status for dfw context
     * Get firewall global status for dfw context
     * @param contextType  (required)
     * @return FirewallStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FirewallStatus getFirewallStatus(String contextType) throws ApiException {
        ApiResponse<FirewallStatus> resp = getFirewallStatusWithHttpInfo(contextType);
        return resp.getData();
    }

    /**
     * Get firewall global status for dfw context
     * Get firewall global status for dfw context
     * @param contextType  (required)
     * @return ApiResponse&lt;FirewallStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FirewallStatus> getFirewallStatusWithHttpInfo(String contextType) throws ApiException {
        com.squareup.okhttp.Call call = getFirewallStatusValidateBeforeCall(contextType, null, null);
        Type localVarReturnType = new TypeToken<FirewallStatus>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get firewall global status for dfw context (asynchronously)
     * Get firewall global status for dfw context
     * @param contextType  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFirewallStatusAsync(String contextType, final ApiCallback<FirewallStatus> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFirewallStatusValidateBeforeCall(contextType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FirewallStatus>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFirewallStatusOnTargetResource
     * @param contextType  (required)
     * @param id  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFirewallStatusOnTargetResourceCall(String contextType, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/firewall/status/{context-type}/{id}"
            .replaceAll("\\{" + "context-type" + "\\}", apiClient.escapeString(contextType.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFirewallStatusOnTargetResourceValidateBeforeCall(String contextType, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'contextType' is set
        if (contextType == null) {
            throw new ApiException("Missing the required parameter 'contextType' when calling getFirewallStatusOnTargetResource(Async)");
        }
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getFirewallStatusOnTargetResource(Async)");
        }
        
        com.squareup.okhttp.Call call = getFirewallStatusOnTargetResourceCall(contextType, id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get firewall status for target resource in dfw context
     * Get firewall status for target resource in dfw context
     * @param contextType  (required)
     * @param id  (required)
     * @return TargetResourceStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TargetResourceStatus getFirewallStatusOnTargetResource(String contextType, String id) throws ApiException {
        ApiResponse<TargetResourceStatus> resp = getFirewallStatusOnTargetResourceWithHttpInfo(contextType, id);
        return resp.getData();
    }

    /**
     * Get firewall status for target resource in dfw context
     * Get firewall status for target resource in dfw context
     * @param contextType  (required)
     * @param id  (required)
     * @return ApiResponse&lt;TargetResourceStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TargetResourceStatus> getFirewallStatusOnTargetResourceWithHttpInfo(String contextType, String id) throws ApiException {
        com.squareup.okhttp.Call call = getFirewallStatusOnTargetResourceValidateBeforeCall(contextType, id, null, null);
        Type localVarReturnType = new TypeToken<TargetResourceStatus>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get firewall status for target resource in dfw context (asynchronously)
     * Get firewall status for target resource in dfw context
     * @param contextType  (required)
     * @param id  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFirewallStatusOnTargetResourceAsync(String contextType, String id, final ApiCallback<TargetResourceStatus> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFirewallStatusOnTargetResourceValidateBeforeCall(contextType, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TargetResourceStatus>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getRule
     * @param sectionId  (required)
     * @param ruleId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getRuleCall(String sectionId, String ruleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/firewall/sections/{section-id}/rules/{rule-id}"
            .replaceAll("\\{" + "section-id" + "\\}", apiClient.escapeString(sectionId.toString()))
            .replaceAll("\\{" + "rule-id" + "\\}", apiClient.escapeString(ruleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getRuleValidateBeforeCall(String sectionId, String ruleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'sectionId' is set
        if (sectionId == null) {
            throw new ApiException("Missing the required parameter 'sectionId' when calling getRule(Async)");
        }
        // verify the required parameter 'ruleId' is set
        if (ruleId == null) {
            throw new ApiException("Missing the required parameter 'ruleId' when calling getRule(Async)");
        }
        
        com.squareup.okhttp.Call call = getRuleCall(sectionId, ruleId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read an Existing Rule
     * Return existing firewall rule information in a firewall section. 
     * @param sectionId  (required)
     * @param ruleId  (required)
     * @return FirewallRule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FirewallRule getRule(String sectionId, String ruleId) throws ApiException {
        ApiResponse<FirewallRule> resp = getRuleWithHttpInfo(sectionId, ruleId);
        return resp.getData();
    }

    /**
     * Read an Existing Rule
     * Return existing firewall rule information in a firewall section. 
     * @param sectionId  (required)
     * @param ruleId  (required)
     * @return ApiResponse&lt;FirewallRule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FirewallRule> getRuleWithHttpInfo(String sectionId, String ruleId) throws ApiException {
        com.squareup.okhttp.Call call = getRuleValidateBeforeCall(sectionId, ruleId, null, null);
        Type localVarReturnType = new TypeToken<FirewallRule>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read an Existing Rule (asynchronously)
     * Return existing firewall rule information in a firewall section. 
     * @param sectionId  (required)
     * @param ruleId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getRuleAsync(String sectionId, String ruleId, final ApiCallback<FirewallRule> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getRuleValidateBeforeCall(sectionId, ruleId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FirewallRule>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getRuleState
     * @param ruleId  (required)
     * @param barrierId  (optional)
     * @param requestId Realization request ID (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getRuleStateCall(String ruleId, Long barrierId, String requestId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/firewall/rules/{rule-id}/state"
            .replaceAll("\\{" + "rule-id" + "\\}", apiClient.escapeString(ruleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (barrierId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("barrier_id", barrierId));
        if (requestId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("request_id", requestId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getRuleStateValidateBeforeCall(String ruleId, Long barrierId, String requestId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'ruleId' is set
        if (ruleId == null) {
            throw new ApiException("Missing the required parameter 'ruleId' when calling getRuleState(Async)");
        }
        
        com.squareup.okhttp.Call call = getRuleStateCall(ruleId, barrierId, requestId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the Realized State of a Firewall Rule
     * Return realized state information of a firewall rule. Returned response is same as rule&#x27;s section realization state response. 
     * @param ruleId  (required)
     * @param barrierId  (optional)
     * @param requestId Realization request ID (optional)
     * @return RuleState
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RuleState getRuleState(String ruleId, Long barrierId, String requestId) throws ApiException {
        ApiResponse<RuleState> resp = getRuleStateWithHttpInfo(ruleId, barrierId, requestId);
        return resp.getData();
    }

    /**
     * Get the Realized State of a Firewall Rule
     * Return realized state information of a firewall rule. Returned response is same as rule&#x27;s section realization state response. 
     * @param ruleId  (required)
     * @param barrierId  (optional)
     * @param requestId Realization request ID (optional)
     * @return ApiResponse&lt;RuleState&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RuleState> getRuleStateWithHttpInfo(String ruleId, Long barrierId, String requestId) throws ApiException {
        com.squareup.okhttp.Call call = getRuleStateValidateBeforeCall(ruleId, barrierId, requestId, null, null);
        Type localVarReturnType = new TypeToken<RuleState>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the Realized State of a Firewall Rule (asynchronously)
     * Return realized state information of a firewall rule. Returned response is same as rule&#x27;s section realization state response. 
     * @param ruleId  (required)
     * @param barrierId  (optional)
     * @param requestId Realization request ID (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getRuleStateAsync(String ruleId, Long barrierId, String requestId, final ApiCallback<RuleState> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getRuleStateValidateBeforeCall(ruleId, barrierId, requestId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RuleState>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getRules
     * @param sectionId  (required)
     * @param appliedTos AppliedTo&#x27;s referenced by this section or section&#x27;s Distributed Service Rules . (optional)
     * @param contextProfiles Limits results to sections having rules with specific Context Profiles. (optional)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param deepSearch Toggle to search with direct or indirect references. (optional)
     * @param destinations Destinations referenced by this section&#x27;s Distributed Service Rules . (optional)
     * @param extendedSources Limits results to sections having rules with specific Extended Sources. (optional)
     * @param filterType Filter type (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param searchInvalidReferences Return invalid references in results. (optional)
     * @param services NSService referenced by this section&#x27;s Distributed Service Rules . (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param sources Sources referenced by this section&#x27;s Distributed Service Rules . (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getRulesCall(String sectionId, String appliedTos, String contextProfiles, String cursor, Boolean deepSearch, String destinations, String extendedSources, String filterType, String includedFields, Long pageSize, Boolean searchInvalidReferences, String services, Boolean sortAscending, String sortBy, String sources, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/firewall/sections/{section-id}/rules"
            .replaceAll("\\{" + "section-id" + "\\}", apiClient.escapeString(sectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (appliedTos != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("applied_tos", appliedTos));
        if (contextProfiles != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("context_profiles", contextProfiles));
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (deepSearch != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("deep_search", deepSearch));
        if (destinations != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("destinations", destinations));
        if (extendedSources != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("extended_sources", extendedSources));
        if (filterType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter_type", filterType));
        if (includedFields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("included_fields", includedFields));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page_size", pageSize));
        if (searchInvalidReferences != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("search_invalid_references", searchInvalidReferences));
        if (services != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("services", services));
        if (sortAscending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_ascending", sortAscending));
        if (sortBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_by", sortBy));
        if (sources != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sources", sources));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getRulesValidateBeforeCall(String sectionId, String appliedTos, String contextProfiles, String cursor, Boolean deepSearch, String destinations, String extendedSources, String filterType, String includedFields, Long pageSize, Boolean searchInvalidReferences, String services, Boolean sortAscending, String sortBy, String sources, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'sectionId' is set
        if (sectionId == null) {
            throw new ApiException("Missing the required parameter 'sectionId' when calling getRules(Async)");
        }
        
        com.squareup.okhttp.Call call = getRulesCall(sectionId, appliedTos, contextProfiles, cursor, deepSearch, destinations, extendedSources, filterType, includedFields, pageSize, searchInvalidReferences, services, sortAscending, sortBy, sources, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get All the Rules for a Section
     * Return all firewall rule(s) information for a given firewall section. 
     * @param sectionId  (required)
     * @param appliedTos AppliedTo&#x27;s referenced by this section or section&#x27;s Distributed Service Rules . (optional)
     * @param contextProfiles Limits results to sections having rules with specific Context Profiles. (optional)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param deepSearch Toggle to search with direct or indirect references. (optional)
     * @param destinations Destinations referenced by this section&#x27;s Distributed Service Rules . (optional)
     * @param extendedSources Limits results to sections having rules with specific Extended Sources. (optional)
     * @param filterType Filter type (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param searchInvalidReferences Return invalid references in results. (optional)
     * @param services NSService referenced by this section&#x27;s Distributed Service Rules . (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param sources Sources referenced by this section&#x27;s Distributed Service Rules . (optional)
     * @return FirewallRuleListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FirewallRuleListResult getRules(String sectionId, String appliedTos, String contextProfiles, String cursor, Boolean deepSearch, String destinations, String extendedSources, String filterType, String includedFields, Long pageSize, Boolean searchInvalidReferences, String services, Boolean sortAscending, String sortBy, String sources) throws ApiException {
        ApiResponse<FirewallRuleListResult> resp = getRulesWithHttpInfo(sectionId, appliedTos, contextProfiles, cursor, deepSearch, destinations, extendedSources, filterType, includedFields, pageSize, searchInvalidReferences, services, sortAscending, sortBy, sources);
        return resp.getData();
    }

    /**
     * Get All the Rules for a Section
     * Return all firewall rule(s) information for a given firewall section. 
     * @param sectionId  (required)
     * @param appliedTos AppliedTo&#x27;s referenced by this section or section&#x27;s Distributed Service Rules . (optional)
     * @param contextProfiles Limits results to sections having rules with specific Context Profiles. (optional)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param deepSearch Toggle to search with direct or indirect references. (optional)
     * @param destinations Destinations referenced by this section&#x27;s Distributed Service Rules . (optional)
     * @param extendedSources Limits results to sections having rules with specific Extended Sources. (optional)
     * @param filterType Filter type (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param searchInvalidReferences Return invalid references in results. (optional)
     * @param services NSService referenced by this section&#x27;s Distributed Service Rules . (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param sources Sources referenced by this section&#x27;s Distributed Service Rules . (optional)
     * @return ApiResponse&lt;FirewallRuleListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FirewallRuleListResult> getRulesWithHttpInfo(String sectionId, String appliedTos, String contextProfiles, String cursor, Boolean deepSearch, String destinations, String extendedSources, String filterType, String includedFields, Long pageSize, Boolean searchInvalidReferences, String services, Boolean sortAscending, String sortBy, String sources) throws ApiException {
        com.squareup.okhttp.Call call = getRulesValidateBeforeCall(sectionId, appliedTos, contextProfiles, cursor, deepSearch, destinations, extendedSources, filterType, includedFields, pageSize, searchInvalidReferences, services, sortAscending, sortBy, sources, null, null);
        Type localVarReturnType = new TypeToken<FirewallRuleListResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get All the Rules for a Section (asynchronously)
     * Return all firewall rule(s) information for a given firewall section. 
     * @param sectionId  (required)
     * @param appliedTos AppliedTo&#x27;s referenced by this section or section&#x27;s Distributed Service Rules . (optional)
     * @param contextProfiles Limits results to sections having rules with specific Context Profiles. (optional)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param deepSearch Toggle to search with direct or indirect references. (optional)
     * @param destinations Destinations referenced by this section&#x27;s Distributed Service Rules . (optional)
     * @param extendedSources Limits results to sections having rules with specific Extended Sources. (optional)
     * @param filterType Filter type (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param searchInvalidReferences Return invalid references in results. (optional)
     * @param services NSService referenced by this section&#x27;s Distributed Service Rules . (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param sources Sources referenced by this section&#x27;s Distributed Service Rules . (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getRulesAsync(String sectionId, String appliedTos, String contextProfiles, String cursor, Boolean deepSearch, String destinations, String extendedSources, String filterType, String includedFields, Long pageSize, Boolean searchInvalidReferences, String services, Boolean sortAscending, String sortBy, String sources, final ApiCallback<FirewallRuleListResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getRulesValidateBeforeCall(sectionId, appliedTos, contextProfiles, cursor, deepSearch, destinations, extendedSources, filterType, includedFields, pageSize, searchInvalidReferences, services, sortAscending, sortBy, sources, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FirewallRuleListResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSection
     * @param sectionId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSectionCall(String sectionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/firewall/sections/{section-id}"
            .replaceAll("\\{" + "section-id" + "\\}", apiClient.escapeString(sectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSectionValidateBeforeCall(String sectionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'sectionId' is set
        if (sectionId == null) {
            throw new ApiException("Missing the required parameter 'sectionId' when calling getSection(Async)");
        }
        
        com.squareup.okhttp.Call call = getSectionCall(sectionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get an Existing Section
     * Returns information about firewall section for the identifier. 
     * @param sectionId  (required)
     * @return FirewallSection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FirewallSection getSection(String sectionId) throws ApiException {
        ApiResponse<FirewallSection> resp = getSectionWithHttpInfo(sectionId);
        return resp.getData();
    }

    /**
     * Get an Existing Section
     * Returns information about firewall section for the identifier. 
     * @param sectionId  (required)
     * @return ApiResponse&lt;FirewallSection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FirewallSection> getSectionWithHttpInfo(String sectionId) throws ApiException {
        com.squareup.okhttp.Call call = getSectionValidateBeforeCall(sectionId, null, null);
        Type localVarReturnType = new TypeToken<FirewallSection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get an Existing Section (asynchronously)
     * Returns information about firewall section for the identifier. 
     * @param sectionId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSectionAsync(String sectionId, final ApiCallback<FirewallSection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSectionValidateBeforeCall(sectionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FirewallSection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSectionState
     * @param sectionId  (required)
     * @param barrierId  (optional)
     * @param requestId Realization request ID (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSectionStateCall(String sectionId, Long barrierId, String requestId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/firewall/sections/{section-id}/state"
            .replaceAll("\\{" + "section-id" + "\\}", apiClient.escapeString(sectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (barrierId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("barrier_id", barrierId));
        if (requestId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("request_id", requestId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSectionStateValidateBeforeCall(String sectionId, Long barrierId, String requestId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'sectionId' is set
        if (sectionId == null) {
            throw new ApiException("Missing the required parameter 'sectionId' when calling getSectionState(Async)");
        }
        
        com.squareup.okhttp.Call call = getSectionStateCall(sectionId, barrierId, requestId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the Realized State of a Firewall Section
     * Return realized state information of a firewall section. 
     * @param sectionId  (required)
     * @param barrierId  (optional)
     * @param requestId Realization request ID (optional)
     * @return FirewallSectionState
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FirewallSectionState getSectionState(String sectionId, Long barrierId, String requestId) throws ApiException {
        ApiResponse<FirewallSectionState> resp = getSectionStateWithHttpInfo(sectionId, barrierId, requestId);
        return resp.getData();
    }

    /**
     * Get the Realized State of a Firewall Section
     * Return realized state information of a firewall section. 
     * @param sectionId  (required)
     * @param barrierId  (optional)
     * @param requestId Realization request ID (optional)
     * @return ApiResponse&lt;FirewallSectionState&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FirewallSectionState> getSectionStateWithHttpInfo(String sectionId, Long barrierId, String requestId) throws ApiException {
        com.squareup.okhttp.Call call = getSectionStateValidateBeforeCall(sectionId, barrierId, requestId, null, null);
        Type localVarReturnType = new TypeToken<FirewallSectionState>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the Realized State of a Firewall Section (asynchronously)
     * Return realized state information of a firewall section. 
     * @param sectionId  (required)
     * @param barrierId  (optional)
     * @param requestId Realization request ID (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSectionStateAsync(String sectionId, Long barrierId, String requestId, final ApiCallback<FirewallSectionState> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSectionStateValidateBeforeCall(sectionId, barrierId, requestId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FirewallSectionState>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSectionWithRulesListWithRules
     * @param sectionId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSectionWithRulesListWithRulesCall(String sectionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/firewall/sections/{section-id}?action=list_with_rules"
            .replaceAll("\\{" + "section-id" + "\\}", apiClient.escapeString(sectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSectionWithRulesListWithRulesValidateBeforeCall(String sectionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'sectionId' is set
        if (sectionId == null) {
            throw new ApiException("Missing the required parameter 'sectionId' when calling getSectionWithRulesListWithRules(Async)");
        }
        
        com.squareup.okhttp.Call call = getSectionWithRulesListWithRulesCall(sectionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get an Existing Section, Including Rules
     * Returns firewall section information with rules for a section identifier. When invoked on a section with a large number of rules, this API is supported only at low rates of invocation (not more than 4-5 times per minute). The typical latency of this API with about 1024 rules is about 4-5 seconds. This API should not be invoked with large payloads at automation speeds. More than 50 rules with a large number rule references is not supported.  Instead, to read firewall rules, use: GET /api/v1/firewall/sections/&amp;lt;section-id&amp;gt;/rules with the appropriate page_size. 
     * @param sectionId  (required)
     * @return FirewallSectionRuleList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FirewallSectionRuleList getSectionWithRulesListWithRules(String sectionId) throws ApiException {
        ApiResponse<FirewallSectionRuleList> resp = getSectionWithRulesListWithRulesWithHttpInfo(sectionId);
        return resp.getData();
    }

    /**
     * Get an Existing Section, Including Rules
     * Returns firewall section information with rules for a section identifier. When invoked on a section with a large number of rules, this API is supported only at low rates of invocation (not more than 4-5 times per minute). The typical latency of this API with about 1024 rules is about 4-5 seconds. This API should not be invoked with large payloads at automation speeds. More than 50 rules with a large number rule references is not supported.  Instead, to read firewall rules, use: GET /api/v1/firewall/sections/&amp;lt;section-id&amp;gt;/rules with the appropriate page_size. 
     * @param sectionId  (required)
     * @return ApiResponse&lt;FirewallSectionRuleList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FirewallSectionRuleList> getSectionWithRulesListWithRulesWithHttpInfo(String sectionId) throws ApiException {
        com.squareup.okhttp.Call call = getSectionWithRulesListWithRulesValidateBeforeCall(sectionId, null, null);
        Type localVarReturnType = new TypeToken<FirewallSectionRuleList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get an Existing Section, Including Rules (asynchronously)
     * Returns firewall section information with rules for a section identifier. When invoked on a section with a large number of rules, this API is supported only at low rates of invocation (not more than 4-5 times per minute). The typical latency of this API with about 1024 rules is about 4-5 seconds. This API should not be invoked with large payloads at automation speeds. More than 50 rules with a large number rule references is not supported.  Instead, to read firewall rules, use: GET /api/v1/firewall/sections/&amp;lt;section-id&amp;gt;/rules with the appropriate page_size. 
     * @param sectionId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSectionWithRulesListWithRulesAsync(String sectionId, final ApiCallback<FirewallSectionRuleList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSectionWithRulesListWithRulesValidateBeforeCall(sectionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FirewallSectionRuleList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSectionsSummary
     * @param source Data source type. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSectionsSummaryCall(String source, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/firewall/sections/summary";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (source != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("source", source));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSectionsSummaryValidateBeforeCall(String source, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getSectionsSummaryCall(source, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the summary of sections in the firewall configuration.
     * List the summary of number of sections and number of rules for each firewall category (L2DFW, L3DFW). 
     * @param source Data source type. (optional)
     * @return FirewallSectionsSummaryList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FirewallSectionsSummaryList getSectionsSummary(String source) throws ApiException {
        ApiResponse<FirewallSectionsSummaryList> resp = getSectionsSummaryWithHttpInfo(source);
        return resp.getData();
    }

    /**
     * Get the summary of sections in the firewall configuration.
     * List the summary of number of sections and number of rules for each firewall category (L2DFW, L3DFW). 
     * @param source Data source type. (optional)
     * @return ApiResponse&lt;FirewallSectionsSummaryList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FirewallSectionsSummaryList> getSectionsSummaryWithHttpInfo(String source) throws ApiException {
        com.squareup.okhttp.Call call = getSectionsSummaryValidateBeforeCall(source, null, null);
        Type localVarReturnType = new TypeToken<FirewallSectionsSummaryList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the summary of sections in the firewall configuration. (asynchronously)
     * List the summary of number of sections and number of rules for each firewall category (L2DFW, L3DFW). 
     * @param source Data source type. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSectionsSummaryAsync(String source, final ApiCallback<FirewallSectionsSummaryList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSectionsSummaryValidateBeforeCall(source, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FirewallSectionsSummaryList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listFirewallProfiles
     * @param resourceType Profile resource type (required)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listFirewallProfilesCall(String resourceType, String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/firewall/profiles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (includedFields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("included_fields", includedFields));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page_size", pageSize));
        if (resourceType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("resource_type", resourceType));
        if (sortAscending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_ascending", sortAscending));
        if (sortBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_by", sortBy));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listFirewallProfilesValidateBeforeCall(String resourceType, String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'resourceType' is set
        if (resourceType == null) {
            throw new ApiException("Missing the required parameter 'resourceType' when calling listFirewallProfiles(Async)");
        }
        
        com.squareup.okhttp.Call call = listFirewallProfilesCall(resourceType, cursor, includedFields, pageSize, sortAscending, sortBy, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get firewall profiles available.
     * List all the firewall profiles available by requested resource_type. 
     * @param resourceType Profile resource type (required)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @return FirewallProfileListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FirewallProfileListResult listFirewallProfiles(String resourceType, String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy) throws ApiException {
        ApiResponse<FirewallProfileListResult> resp = listFirewallProfilesWithHttpInfo(resourceType, cursor, includedFields, pageSize, sortAscending, sortBy);
        return resp.getData();
    }

    /**
     * Get firewall profiles available.
     * List all the firewall profiles available by requested resource_type. 
     * @param resourceType Profile resource type (required)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @return ApiResponse&lt;FirewallProfileListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FirewallProfileListResult> listFirewallProfilesWithHttpInfo(String resourceType, String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy) throws ApiException {
        com.squareup.okhttp.Call call = listFirewallProfilesValidateBeforeCall(resourceType, cursor, includedFields, pageSize, sortAscending, sortBy, null, null);
        Type localVarReturnType = new TypeToken<FirewallProfileListResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get firewall profiles available. (asynchronously)
     * List all the firewall profiles available by requested resource_type. 
     * @param resourceType Profile resource type (required)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listFirewallProfilesAsync(String resourceType, String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, final ApiCallback<FirewallProfileListResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listFirewallProfilesValidateBeforeCall(resourceType, cursor, includedFields, pageSize, sortAscending, sortBy, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FirewallProfileListResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listFirewallStatus
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listFirewallStatusCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/firewall/status";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listFirewallStatusValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listFirewallStatusCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List all firewall status for supported contexts
     * List all firewall status for supported contexts
     * @return FirewallStatusListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FirewallStatusListResult listFirewallStatus() throws ApiException {
        ApiResponse<FirewallStatusListResult> resp = listFirewallStatusWithHttpInfo();
        return resp.getData();
    }

    /**
     * List all firewall status for supported contexts
     * List all firewall status for supported contexts
     * @return ApiResponse&lt;FirewallStatusListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FirewallStatusListResult> listFirewallStatusWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = listFirewallStatusValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<FirewallStatusListResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all firewall status for supported contexts (asynchronously)
     * List all firewall status for supported contexts
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listFirewallStatusAsync(final ApiCallback<FirewallStatusListResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listFirewallStatusValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FirewallStatusListResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listSections
     * @param appliedTos AppliedTo&#x27;s referenced by this section or section&#x27;s Distributed Service Rules . (optional)
     * @param contextProfiles Limits results to sections having rules with specific Context Profiles. (optional)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param deepSearch Toggle to search with direct or indirect references. (optional)
     * @param destinations Destinations referenced by this section&#x27;s Distributed Service Rules . (optional)
     * @param enforcedOn Type of attachment for logical port; for query only. (optional)
     * @param excludeAppliedToType Resource type valid for use as AppliedTo filter in section API (optional)
     * @param extendedSources Limits results to sections having rules with specific Extended Sources. (optional)
     * @param filterType Filter type (optional)
     * @param includeAppliedToType Resource type valid for use as AppliedTo filter in section API (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param locked Limit results to sections which are locked/unlocked (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param searchInvalidReferences Return invalid references in results. (optional)
     * @param searchScope Limit result to sections of a specific enforcement point (optional)
     * @param services NSService referenced by this section&#x27;s Distributed Service Rules . (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param sources Sources referenced by this section&#x27;s Distributed Service Rules . (optional)
     * @param type Section Type (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listSectionsCall(String appliedTos, String contextProfiles, String cursor, Boolean deepSearch, String destinations, String enforcedOn, String excludeAppliedToType, String extendedSources, String filterType, String includeAppliedToType, String includedFields, Boolean locked, Long pageSize, Boolean searchInvalidReferences, String searchScope, String services, Boolean sortAscending, String sortBy, String sources, String type, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/firewall/sections";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (appliedTos != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("applied_tos", appliedTos));
        if (contextProfiles != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("context_profiles", contextProfiles));
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (deepSearch != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("deep_search", deepSearch));
        if (destinations != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("destinations", destinations));
        if (enforcedOn != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("enforced_on", enforcedOn));
        if (excludeAppliedToType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("exclude_applied_to_type", excludeAppliedToType));
        if (extendedSources != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("extended_sources", extendedSources));
        if (filterType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter_type", filterType));
        if (includeAppliedToType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("include_applied_to_type", includeAppliedToType));
        if (includedFields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("included_fields", includedFields));
        if (locked != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("locked", locked));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page_size", pageSize));
        if (searchInvalidReferences != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("search_invalid_references", searchInvalidReferences));
        if (searchScope != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("search_scope", searchScope));
        if (services != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("services", services));
        if (sortAscending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_ascending", sortAscending));
        if (sortBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_by", sortBy));
        if (sources != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sources", sources));
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("type", type));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listSectionsValidateBeforeCall(String appliedTos, String contextProfiles, String cursor, Boolean deepSearch, String destinations, String enforcedOn, String excludeAppliedToType, String extendedSources, String filterType, String includeAppliedToType, String includedFields, Boolean locked, Long pageSize, Boolean searchInvalidReferences, String searchScope, String services, Boolean sortAscending, String sortBy, String sources, String type, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listSectionsCall(appliedTos, contextProfiles, cursor, deepSearch, destinations, enforcedOn, excludeAppliedToType, extendedSources, filterType, includeAppliedToType, includedFields, locked, pageSize, searchInvalidReferences, searchScope, services, sortAscending, sortBy, sources, type, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List All Firewall Sections
     * List all firewall section in paginated form. A default page size is limited to 1000 firewall sections. By default list of section is filtered by LAYER3 type. 
     * @param appliedTos AppliedTo&#x27;s referenced by this section or section&#x27;s Distributed Service Rules . (optional)
     * @param contextProfiles Limits results to sections having rules with specific Context Profiles. (optional)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param deepSearch Toggle to search with direct or indirect references. (optional)
     * @param destinations Destinations referenced by this section&#x27;s Distributed Service Rules . (optional)
     * @param enforcedOn Type of attachment for logical port; for query only. (optional)
     * @param excludeAppliedToType Resource type valid for use as AppliedTo filter in section API (optional)
     * @param extendedSources Limits results to sections having rules with specific Extended Sources. (optional)
     * @param filterType Filter type (optional)
     * @param includeAppliedToType Resource type valid for use as AppliedTo filter in section API (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param locked Limit results to sections which are locked/unlocked (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param searchInvalidReferences Return invalid references in results. (optional)
     * @param searchScope Limit result to sections of a specific enforcement point (optional)
     * @param services NSService referenced by this section&#x27;s Distributed Service Rules . (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param sources Sources referenced by this section&#x27;s Distributed Service Rules . (optional)
     * @param type Section Type (optional)
     * @return FirewallSectionListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FirewallSectionListResult listSections(String appliedTos, String contextProfiles, String cursor, Boolean deepSearch, String destinations, String enforcedOn, String excludeAppliedToType, String extendedSources, String filterType, String includeAppliedToType, String includedFields, Boolean locked, Long pageSize, Boolean searchInvalidReferences, String searchScope, String services, Boolean sortAscending, String sortBy, String sources, String type) throws ApiException {
        ApiResponse<FirewallSectionListResult> resp = listSectionsWithHttpInfo(appliedTos, contextProfiles, cursor, deepSearch, destinations, enforcedOn, excludeAppliedToType, extendedSources, filterType, includeAppliedToType, includedFields, locked, pageSize, searchInvalidReferences, searchScope, services, sortAscending, sortBy, sources, type);
        return resp.getData();
    }

    /**
     * List All Firewall Sections
     * List all firewall section in paginated form. A default page size is limited to 1000 firewall sections. By default list of section is filtered by LAYER3 type. 
     * @param appliedTos AppliedTo&#x27;s referenced by this section or section&#x27;s Distributed Service Rules . (optional)
     * @param contextProfiles Limits results to sections having rules with specific Context Profiles. (optional)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param deepSearch Toggle to search with direct or indirect references. (optional)
     * @param destinations Destinations referenced by this section&#x27;s Distributed Service Rules . (optional)
     * @param enforcedOn Type of attachment for logical port; for query only. (optional)
     * @param excludeAppliedToType Resource type valid for use as AppliedTo filter in section API (optional)
     * @param extendedSources Limits results to sections having rules with specific Extended Sources. (optional)
     * @param filterType Filter type (optional)
     * @param includeAppliedToType Resource type valid for use as AppliedTo filter in section API (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param locked Limit results to sections which are locked/unlocked (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param searchInvalidReferences Return invalid references in results. (optional)
     * @param searchScope Limit result to sections of a specific enforcement point (optional)
     * @param services NSService referenced by this section&#x27;s Distributed Service Rules . (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param sources Sources referenced by this section&#x27;s Distributed Service Rules . (optional)
     * @param type Section Type (optional)
     * @return ApiResponse&lt;FirewallSectionListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FirewallSectionListResult> listSectionsWithHttpInfo(String appliedTos, String contextProfiles, String cursor, Boolean deepSearch, String destinations, String enforcedOn, String excludeAppliedToType, String extendedSources, String filterType, String includeAppliedToType, String includedFields, Boolean locked, Long pageSize, Boolean searchInvalidReferences, String searchScope, String services, Boolean sortAscending, String sortBy, String sources, String type) throws ApiException {
        com.squareup.okhttp.Call call = listSectionsValidateBeforeCall(appliedTos, contextProfiles, cursor, deepSearch, destinations, enforcedOn, excludeAppliedToType, extendedSources, filterType, includeAppliedToType, includedFields, locked, pageSize, searchInvalidReferences, searchScope, services, sortAscending, sortBy, sources, type, null, null);
        Type localVarReturnType = new TypeToken<FirewallSectionListResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List All Firewall Sections (asynchronously)
     * List all firewall section in paginated form. A default page size is limited to 1000 firewall sections. By default list of section is filtered by LAYER3 type. 
     * @param appliedTos AppliedTo&#x27;s referenced by this section or section&#x27;s Distributed Service Rules . (optional)
     * @param contextProfiles Limits results to sections having rules with specific Context Profiles. (optional)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param deepSearch Toggle to search with direct or indirect references. (optional)
     * @param destinations Destinations referenced by this section&#x27;s Distributed Service Rules . (optional)
     * @param enforcedOn Type of attachment for logical port; for query only. (optional)
     * @param excludeAppliedToType Resource type valid for use as AppliedTo filter in section API (optional)
     * @param extendedSources Limits results to sections having rules with specific Extended Sources. (optional)
     * @param filterType Filter type (optional)
     * @param includeAppliedToType Resource type valid for use as AppliedTo filter in section API (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param locked Limit results to sections which are locked/unlocked (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param searchInvalidReferences Return invalid references in results. (optional)
     * @param searchScope Limit result to sections of a specific enforcement point (optional)
     * @param services NSService referenced by this section&#x27;s Distributed Service Rules . (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param sources Sources referenced by this section&#x27;s Distributed Service Rules . (optional)
     * @param type Section Type (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listSectionsAsync(String appliedTos, String contextProfiles, String cursor, Boolean deepSearch, String destinations, String enforcedOn, String excludeAppliedToType, String extendedSources, String filterType, String includeAppliedToType, String includedFields, Boolean locked, Long pageSize, Boolean searchInvalidReferences, String searchScope, String services, Boolean sortAscending, String sortBy, String sources, String type, final ApiCallback<FirewallSectionListResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listSectionsValidateBeforeCall(appliedTos, contextProfiles, cursor, deepSearch, destinations, enforcedOn, excludeAppliedToType, extendedSources, filterType, includeAppliedToType, includedFields, locked, pageSize, searchInvalidReferences, searchScope, services, sortAscending, sortBy, sources, type, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FirewallSectionListResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for lockSectionLock
     * @param body  (required)
     * @param sectionId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call lockSectionLockCall(FirewallSectionLock body, String sectionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/firewall/sections/{section-id}?action=lock"
            .replaceAll("\\{" + "section-id" + "\\}", apiClient.escapeString(sectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call lockSectionLockValidateBeforeCall(FirewallSectionLock body, String sectionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling lockSectionLock(Async)");
        }
        // verify the required parameter 'sectionId' is set
        if (sectionId == null) {
            throw new ApiException("Missing the required parameter 'sectionId' when calling lockSectionLock(Async)");
        }
        
        com.squareup.okhttp.Call call = lockSectionLockCall(body, sectionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Lock a section
     * Lock a section 
     * @param body  (required)
     * @param sectionId  (required)
     * @return FirewallSection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FirewallSection lockSectionLock(FirewallSectionLock body, String sectionId) throws ApiException {
        ApiResponse<FirewallSection> resp = lockSectionLockWithHttpInfo(body, sectionId);
        return resp.getData();
    }

    /**
     * Lock a section
     * Lock a section 
     * @param body  (required)
     * @param sectionId  (required)
     * @return ApiResponse&lt;FirewallSection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FirewallSection> lockSectionLockWithHttpInfo(FirewallSectionLock body, String sectionId) throws ApiException {
        com.squareup.okhttp.Call call = lockSectionLockValidateBeforeCall(body, sectionId, null, null);
        Type localVarReturnType = new TypeToken<FirewallSection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Lock a section (asynchronously)
     * Lock a section 
     * @param body  (required)
     * @param sectionId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call lockSectionLockAsync(FirewallSectionLock body, String sectionId, final ApiCallback<FirewallSection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = lockSectionLockValidateBeforeCall(body, sectionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FirewallSection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for readFirewallRule
     * @param ruleId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call readFirewallRuleCall(String ruleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/firewall/rules/{rule-id}"
            .replaceAll("\\{" + "rule-id" + "\\}", apiClient.escapeString(ruleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call readFirewallRuleValidateBeforeCall(String ruleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'ruleId' is set
        if (ruleId == null) {
            throw new ApiException("Missing the required parameter 'ruleId' when calling readFirewallRule(Async)");
        }
        
        com.squareup.okhttp.Call call = readFirewallRuleCall(ruleId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read an Existing Rule
     * Return existing firewall rule information. 
     * @param ruleId  (required)
     * @return FirewallRule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FirewallRule readFirewallRule(String ruleId) throws ApiException {
        ApiResponse<FirewallRule> resp = readFirewallRuleWithHttpInfo(ruleId);
        return resp.getData();
    }

    /**
     * Read an Existing Rule
     * Return existing firewall rule information. 
     * @param ruleId  (required)
     * @return ApiResponse&lt;FirewallRule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FirewallRule> readFirewallRuleWithHttpInfo(String ruleId) throws ApiException {
        com.squareup.okhttp.Call call = readFirewallRuleValidateBeforeCall(ruleId, null, null);
        Type localVarReturnType = new TypeToken<FirewallRule>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read an Existing Rule (asynchronously)
     * Return existing firewall rule information. 
     * @param ruleId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call readFirewallRuleAsync(String ruleId, final ApiCallback<FirewallRule> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = readFirewallRuleValidateBeforeCall(ruleId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FirewallRule>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for removeMemberRemoveMember
     * @param objectId identifier of the object (required)
     * @param deepCheck Check all parents (optional)
     * @param objectType Object type of an entity (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call removeMemberRemoveMemberCall(String objectId, Boolean deepCheck, String objectType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/firewall/excludelist?action=remove_member";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (deepCheck != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("deep_check", deepCheck));
        if (objectId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("object_id", objectId));
        if (objectType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("object_type", objectType));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call removeMemberRemoveMemberValidateBeforeCall(String objectId, Boolean deepCheck, String objectType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling removeMemberRemoveMember(Async)");
        }
        
        com.squareup.okhttp.Call call = removeMemberRemoveMemberCall(objectId, deepCheck, objectType, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Remove an existing object from the exclude list
     * Remove an existing object from the exclude list
     * @param objectId identifier of the object (required)
     * @param deepCheck Check all parents (optional)
     * @param objectType Object type of an entity (optional)
     * @return ResourceReference
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResourceReference removeMemberRemoveMember(String objectId, Boolean deepCheck, String objectType) throws ApiException {
        ApiResponse<ResourceReference> resp = removeMemberRemoveMemberWithHttpInfo(objectId, deepCheck, objectType);
        return resp.getData();
    }

    /**
     * Remove an existing object from the exclude list
     * Remove an existing object from the exclude list
     * @param objectId identifier of the object (required)
     * @param deepCheck Check all parents (optional)
     * @param objectType Object type of an entity (optional)
     * @return ApiResponse&lt;ResourceReference&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResourceReference> removeMemberRemoveMemberWithHttpInfo(String objectId, Boolean deepCheck, String objectType) throws ApiException {
        com.squareup.okhttp.Call call = removeMemberRemoveMemberValidateBeforeCall(objectId, deepCheck, objectType, null, null);
        Type localVarReturnType = new TypeToken<ResourceReference>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Remove an existing object from the exclude list (asynchronously)
     * Remove an existing object from the exclude list
     * @param objectId identifier of the object (required)
     * @param deepCheck Check all parents (optional)
     * @param objectType Object type of an entity (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call removeMemberRemoveMemberAsync(String objectId, Boolean deepCheck, String objectType, final ApiCallback<ResourceReference> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = removeMemberRemoveMemberValidateBeforeCall(objectId, deepCheck, objectType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResourceReference>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for resetFirewallRuleStatsReset
     * @param category Aggregation statistic category (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call resetFirewallRuleStatsResetCall(String category, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/firewall/stats?action=reset";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (category != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("category", category));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call resetFirewallRuleStatsResetValidateBeforeCall(String category, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'category' is set
        if (category == null) {
            throw new ApiException("Missing the required parameter 'category' when calling resetFirewallRuleStatsReset(Async)");
        }
        
        com.squareup.okhttp.Call call = resetFirewallRuleStatsResetCall(category, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Reset firewall rule statistics
     * Sets firewall rule statistics counter to zero. This operation is supported for given category, for example: L3DFW i.e. for all layer3 firewall (transport nodes only) rules or L3EDGE i.e. for all layer3 edge firewall (edge nodes only) rules or L3BRIDGEPORT i.e. for all layer3 bridge port firewall (bridge ports only) rules. 
     * @param category Aggregation statistic category (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void resetFirewallRuleStatsReset(String category) throws ApiException {
        resetFirewallRuleStatsResetWithHttpInfo(category);
    }

    /**
     * Reset firewall rule statistics
     * Sets firewall rule statistics counter to zero. This operation is supported for given category, for example: L3DFW i.e. for all layer3 firewall (transport nodes only) rules or L3EDGE i.e. for all layer3 edge firewall (edge nodes only) rules or L3BRIDGEPORT i.e. for all layer3 bridge port firewall (bridge ports only) rules. 
     * @param category Aggregation statistic category (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> resetFirewallRuleStatsResetWithHttpInfo(String category) throws ApiException {
        com.squareup.okhttp.Call call = resetFirewallRuleStatsResetValidateBeforeCall(category, null, null);
        return apiClient.execute(call);
    }

    /**
     * Reset firewall rule statistics (asynchronously)
     * Sets firewall rule statistics counter to zero. This operation is supported for given category, for example: L3DFW i.e. for all layer3 firewall (transport nodes only) rules or L3EDGE i.e. for all layer3 edge firewall (edge nodes only) rules or L3BRIDGEPORT i.e. for all layer3 bridge port firewall (bridge ports only) rules. 
     * @param category Aggregation statistic category (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call resetFirewallRuleStatsResetAsync(String category, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = resetFirewallRuleStatsResetValidateBeforeCall(category, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for reviseRuleRevise
     * @param body  (required)
     * @param sectionId  (required)
     * @param ruleId  (required)
     * @param id Identifier of the anchor rule or section. This is a required field in case operation like &#x27;insert_before&#x27; and &#x27;insert_after&#x27;. (optional)
     * @param operation Operation (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call reviseRuleReviseCall(FirewallRule body, String sectionId, String ruleId, String id, String operation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/firewall/sections/{section-id}/rules/{rule-id}?action=revise"
            .replaceAll("\\{" + "section-id" + "\\}", apiClient.escapeString(sectionId.toString()))
            .replaceAll("\\{" + "rule-id" + "\\}", apiClient.escapeString(ruleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (id != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("id", id));
        if (operation != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("operation", operation));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call reviseRuleReviseValidateBeforeCall(FirewallRule body, String sectionId, String ruleId, String id, String operation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling reviseRuleRevise(Async)");
        }
        // verify the required parameter 'sectionId' is set
        if (sectionId == null) {
            throw new ApiException("Missing the required parameter 'sectionId' when calling reviseRuleRevise(Async)");
        }
        // verify the required parameter 'ruleId' is set
        if (ruleId == null) {
            throw new ApiException("Missing the required parameter 'ruleId' when calling reviseRuleRevise(Async)");
        }
        
        com.squareup.okhttp.Call call = reviseRuleReviseCall(body, sectionId, ruleId, id, operation, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update an Existing Rule and Reorder the Rule
     * Modifies existing firewall rule along with relative position among other firewall rules inside a firewall section. Revising firewall rule in a section modifies parent section entity and simultaneous update (modify) operations on same section are not allowed to prevent overwriting stale contents to firewall section. If a concurrent update is performed, HTTP response code 409 will be returned to the client operating on stale data. That client should retrieve the firewall section again and re-apply its update. 
     * @param body  (required)
     * @param sectionId  (required)
     * @param ruleId  (required)
     * @param id Identifier of the anchor rule or section. This is a required field in case operation like &#x27;insert_before&#x27; and &#x27;insert_after&#x27;. (optional)
     * @param operation Operation (optional)
     * @return FirewallRule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FirewallRule reviseRuleRevise(FirewallRule body, String sectionId, String ruleId, String id, String operation) throws ApiException {
        ApiResponse<FirewallRule> resp = reviseRuleReviseWithHttpInfo(body, sectionId, ruleId, id, operation);
        return resp.getData();
    }

    /**
     * Update an Existing Rule and Reorder the Rule
     * Modifies existing firewall rule along with relative position among other firewall rules inside a firewall section. Revising firewall rule in a section modifies parent section entity and simultaneous update (modify) operations on same section are not allowed to prevent overwriting stale contents to firewall section. If a concurrent update is performed, HTTP response code 409 will be returned to the client operating on stale data. That client should retrieve the firewall section again and re-apply its update. 
     * @param body  (required)
     * @param sectionId  (required)
     * @param ruleId  (required)
     * @param id Identifier of the anchor rule or section. This is a required field in case operation like &#x27;insert_before&#x27; and &#x27;insert_after&#x27;. (optional)
     * @param operation Operation (optional)
     * @return ApiResponse&lt;FirewallRule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FirewallRule> reviseRuleReviseWithHttpInfo(FirewallRule body, String sectionId, String ruleId, String id, String operation) throws ApiException {
        com.squareup.okhttp.Call call = reviseRuleReviseValidateBeforeCall(body, sectionId, ruleId, id, operation, null, null);
        Type localVarReturnType = new TypeToken<FirewallRule>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update an Existing Rule and Reorder the Rule (asynchronously)
     * Modifies existing firewall rule along with relative position among other firewall rules inside a firewall section. Revising firewall rule in a section modifies parent section entity and simultaneous update (modify) operations on same section are not allowed to prevent overwriting stale contents to firewall section. If a concurrent update is performed, HTTP response code 409 will be returned to the client operating on stale data. That client should retrieve the firewall section again and re-apply its update. 
     * @param body  (required)
     * @param sectionId  (required)
     * @param ruleId  (required)
     * @param id Identifier of the anchor rule or section. This is a required field in case operation like &#x27;insert_before&#x27; and &#x27;insert_after&#x27;. (optional)
     * @param operation Operation (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call reviseRuleReviseAsync(FirewallRule body, String sectionId, String ruleId, String id, String operation, final ApiCallback<FirewallRule> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = reviseRuleReviseValidateBeforeCall(body, sectionId, ruleId, id, operation, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FirewallRule>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for reviseSectionRevise
     * @param body  (required)
     * @param sectionId  (required)
     * @param id Identifier of the anchor rule or section. This is a required field in case operation like &#x27;insert_before&#x27; and &#x27;insert_after&#x27;. (optional)
     * @param operation Operation (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call reviseSectionReviseCall(FirewallSection body, String sectionId, String id, String operation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/firewall/sections/{section-id}?action=revise"
            .replaceAll("\\{" + "section-id" + "\\}", apiClient.escapeString(sectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (id != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("id", id));
        if (operation != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("operation", operation));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call reviseSectionReviseValidateBeforeCall(FirewallSection body, String sectionId, String id, String operation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling reviseSectionRevise(Async)");
        }
        // verify the required parameter 'sectionId' is set
        if (sectionId == null) {
            throw new ApiException("Missing the required parameter 'sectionId' when calling reviseSectionRevise(Async)");
        }
        
        com.squareup.okhttp.Call call = reviseSectionReviseCall(body, sectionId, id, operation, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update an Existing Section, Including Its Position
     * Modifies an existing firewall section along with its relative position among other firewall sections in the system. Simultaneous update (modify) operations on same section are not allowed to prevent overwriting stale contents to firewall section. If a concurrent update is performed, HTTP response code 409 will be returned to the client operating on stale data. That client should retrieve the firewall section again and re-apply its update. 
     * @param body  (required)
     * @param sectionId  (required)
     * @param id Identifier of the anchor rule or section. This is a required field in case operation like &#x27;insert_before&#x27; and &#x27;insert_after&#x27;. (optional)
     * @param operation Operation (optional)
     * @return FirewallSection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FirewallSection reviseSectionRevise(FirewallSection body, String sectionId, String id, String operation) throws ApiException {
        ApiResponse<FirewallSection> resp = reviseSectionReviseWithHttpInfo(body, sectionId, id, operation);
        return resp.getData();
    }

    /**
     * Update an Existing Section, Including Its Position
     * Modifies an existing firewall section along with its relative position among other firewall sections in the system. Simultaneous update (modify) operations on same section are not allowed to prevent overwriting stale contents to firewall section. If a concurrent update is performed, HTTP response code 409 will be returned to the client operating on stale data. That client should retrieve the firewall section again and re-apply its update. 
     * @param body  (required)
     * @param sectionId  (required)
     * @param id Identifier of the anchor rule or section. This is a required field in case operation like &#x27;insert_before&#x27; and &#x27;insert_after&#x27;. (optional)
     * @param operation Operation (optional)
     * @return ApiResponse&lt;FirewallSection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FirewallSection> reviseSectionReviseWithHttpInfo(FirewallSection body, String sectionId, String id, String operation) throws ApiException {
        com.squareup.okhttp.Call call = reviseSectionReviseValidateBeforeCall(body, sectionId, id, operation, null, null);
        Type localVarReturnType = new TypeToken<FirewallSection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update an Existing Section, Including Its Position (asynchronously)
     * Modifies an existing firewall section along with its relative position among other firewall sections in the system. Simultaneous update (modify) operations on same section are not allowed to prevent overwriting stale contents to firewall section. If a concurrent update is performed, HTTP response code 409 will be returned to the client operating on stale data. That client should retrieve the firewall section again and re-apply its update. 
     * @param body  (required)
     * @param sectionId  (required)
     * @param id Identifier of the anchor rule or section. This is a required field in case operation like &#x27;insert_before&#x27; and &#x27;insert_after&#x27;. (optional)
     * @param operation Operation (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call reviseSectionReviseAsync(FirewallSection body, String sectionId, String id, String operation, final ApiCallback<FirewallSection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = reviseSectionReviseValidateBeforeCall(body, sectionId, id, operation, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FirewallSection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for reviseSectionWithRulesReviseWithRules
     * @param body  (required)
     * @param sectionId  (required)
     * @param id Identifier of the anchor rule or section. This is a required field in case operation like &#x27;insert_before&#x27; and &#x27;insert_after&#x27;. (optional)
     * @param operation Operation (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call reviseSectionWithRulesReviseWithRulesCall(FirewallSectionRuleList body, String sectionId, String id, String operation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/firewall/sections/{section-id}?action=revise_with_rules"
            .replaceAll("\\{" + "section-id" + "\\}", apiClient.escapeString(sectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (id != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("id", id));
        if (operation != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("operation", operation));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call reviseSectionWithRulesReviseWithRulesValidateBeforeCall(FirewallSectionRuleList body, String sectionId, String id, String operation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling reviseSectionWithRulesReviseWithRules(Async)");
        }
        // verify the required parameter 'sectionId' is set
        if (sectionId == null) {
            throw new ApiException("Missing the required parameter 'sectionId' when calling reviseSectionWithRulesReviseWithRules(Async)");
        }
        
        com.squareup.okhttp.Call call = reviseSectionWithRulesReviseWithRulesCall(body, sectionId, id, operation, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update an Existing Section with Rules
     * Modifies an existing firewall section along with its relative position among other firewall sections with rules. When invoked on a large number of rules, this API is supported only at low rates of invocation (not more than 2 times per minute). The typical latency of this API with about 1024 rules is about 15 seconds in a cluster setup. This API should not be invoked with large payloads at automation speeds.  Instead, to move a section above or below another section, use: POST /api/v1/firewall/sections/&amp;lt;section-id&amp;gt;?action&#x3D;revise  To modify rules, use: PUT /api/v1/firewall/sections/&amp;lt;section-id&amp;gt;/rules/&amp;lt;rule-id&amp;gt;  Simultaneous update (modify) operations on same section are not allowed to prevent overwriting stale contents to firewall section. If a concurrent update is performed, HTTP response code 409 will be returned to the client operating on stale data. That client should retrieve the firewall section again and re-apply its update. 
     * @param body  (required)
     * @param sectionId  (required)
     * @param id Identifier of the anchor rule or section. This is a required field in case operation like &#x27;insert_before&#x27; and &#x27;insert_after&#x27;. (optional)
     * @param operation Operation (optional)
     * @return FirewallSectionRuleList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FirewallSectionRuleList reviseSectionWithRulesReviseWithRules(FirewallSectionRuleList body, String sectionId, String id, String operation) throws ApiException {
        ApiResponse<FirewallSectionRuleList> resp = reviseSectionWithRulesReviseWithRulesWithHttpInfo(body, sectionId, id, operation);
        return resp.getData();
    }

    /**
     * Update an Existing Section with Rules
     * Modifies an existing firewall section along with its relative position among other firewall sections with rules. When invoked on a large number of rules, this API is supported only at low rates of invocation (not more than 2 times per minute). The typical latency of this API with about 1024 rules is about 15 seconds in a cluster setup. This API should not be invoked with large payloads at automation speeds.  Instead, to move a section above or below another section, use: POST /api/v1/firewall/sections/&amp;lt;section-id&amp;gt;?action&#x3D;revise  To modify rules, use: PUT /api/v1/firewall/sections/&amp;lt;section-id&amp;gt;/rules/&amp;lt;rule-id&amp;gt;  Simultaneous update (modify) operations on same section are not allowed to prevent overwriting stale contents to firewall section. If a concurrent update is performed, HTTP response code 409 will be returned to the client operating on stale data. That client should retrieve the firewall section again and re-apply its update. 
     * @param body  (required)
     * @param sectionId  (required)
     * @param id Identifier of the anchor rule or section. This is a required field in case operation like &#x27;insert_before&#x27; and &#x27;insert_after&#x27;. (optional)
     * @param operation Operation (optional)
     * @return ApiResponse&lt;FirewallSectionRuleList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FirewallSectionRuleList> reviseSectionWithRulesReviseWithRulesWithHttpInfo(FirewallSectionRuleList body, String sectionId, String id, String operation) throws ApiException {
        com.squareup.okhttp.Call call = reviseSectionWithRulesReviseWithRulesValidateBeforeCall(body, sectionId, id, operation, null, null);
        Type localVarReturnType = new TypeToken<FirewallSectionRuleList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update an Existing Section with Rules (asynchronously)
     * Modifies an existing firewall section along with its relative position among other firewall sections with rules. When invoked on a large number of rules, this API is supported only at low rates of invocation (not more than 2 times per minute). The typical latency of this API with about 1024 rules is about 15 seconds in a cluster setup. This API should not be invoked with large payloads at automation speeds.  Instead, to move a section above or below another section, use: POST /api/v1/firewall/sections/&amp;lt;section-id&amp;gt;?action&#x3D;revise  To modify rules, use: PUT /api/v1/firewall/sections/&amp;lt;section-id&amp;gt;/rules/&amp;lt;rule-id&amp;gt;  Simultaneous update (modify) operations on same section are not allowed to prevent overwriting stale contents to firewall section. If a concurrent update is performed, HTTP response code 409 will be returned to the client operating on stale data. That client should retrieve the firewall section again and re-apply its update. 
     * @param body  (required)
     * @param sectionId  (required)
     * @param id Identifier of the anchor rule or section. This is a required field in case operation like &#x27;insert_before&#x27; and &#x27;insert_after&#x27;. (optional)
     * @param operation Operation (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call reviseSectionWithRulesReviseWithRulesAsync(FirewallSectionRuleList body, String sectionId, String id, String operation, final ApiCallback<FirewallSectionRuleList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = reviseSectionWithRulesReviseWithRulesValidateBeforeCall(body, sectionId, id, operation, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FirewallSectionRuleList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for unlockSectionUnlock
     * @param body  (required)
     * @param sectionId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call unlockSectionUnlockCall(FirewallSectionLock body, String sectionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/firewall/sections/{section-id}?action=unlock"
            .replaceAll("\\{" + "section-id" + "\\}", apiClient.escapeString(sectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call unlockSectionUnlockValidateBeforeCall(FirewallSectionLock body, String sectionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling unlockSectionUnlock(Async)");
        }
        // verify the required parameter 'sectionId' is set
        if (sectionId == null) {
            throw new ApiException("Missing the required parameter 'sectionId' when calling unlockSectionUnlock(Async)");
        }
        
        com.squareup.okhttp.Call call = unlockSectionUnlockCall(body, sectionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Unlock a section
     * Unlock a section 
     * @param body  (required)
     * @param sectionId  (required)
     * @return FirewallSection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FirewallSection unlockSectionUnlock(FirewallSectionLock body, String sectionId) throws ApiException {
        ApiResponse<FirewallSection> resp = unlockSectionUnlockWithHttpInfo(body, sectionId);
        return resp.getData();
    }

    /**
     * Unlock a section
     * Unlock a section 
     * @param body  (required)
     * @param sectionId  (required)
     * @return ApiResponse&lt;FirewallSection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FirewallSection> unlockSectionUnlockWithHttpInfo(FirewallSectionLock body, String sectionId) throws ApiException {
        com.squareup.okhttp.Call call = unlockSectionUnlockValidateBeforeCall(body, sectionId, null, null);
        Type localVarReturnType = new TypeToken<FirewallSection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Unlock a section (asynchronously)
     * Unlock a section 
     * @param body  (required)
     * @param sectionId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call unlockSectionUnlockAsync(FirewallSectionLock body, String sectionId, final ApiCallback<FirewallSection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = unlockSectionUnlockValidateBeforeCall(body, sectionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FirewallSection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateExcludeList
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateExcludeListCall(ExcludeList body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/firewall/excludelist";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateExcludeListValidateBeforeCall(ExcludeList body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateExcludeList(Async)");
        }
        
        com.squareup.okhttp.Call call = updateExcludeListCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Modify exclude list
     * Modify exclude list
     * @param body  (required)
     * @return ExcludeList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ExcludeList updateExcludeList(ExcludeList body) throws ApiException {
        ApiResponse<ExcludeList> resp = updateExcludeListWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Modify exclude list
     * Modify exclude list
     * @param body  (required)
     * @return ApiResponse&lt;ExcludeList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ExcludeList> updateExcludeListWithHttpInfo(ExcludeList body) throws ApiException {
        com.squareup.okhttp.Call call = updateExcludeListValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<ExcludeList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Modify exclude list (asynchronously)
     * Modify exclude list
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateExcludeListAsync(ExcludeList body, final ApiCallback<ExcludeList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateExcludeListValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ExcludeList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateFirewallProfile
     * @param body  (required)
     * @param profileId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateFirewallProfileCall(BaseFirewallProfile body, String profileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/firewall/profiles/{profile-id}"
            .replaceAll("\\{" + "profile-id" + "\\}", apiClient.escapeString(profileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateFirewallProfileValidateBeforeCall(BaseFirewallProfile body, String profileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateFirewallProfile(Async)");
        }
        // verify the required parameter 'profileId' is set
        if (profileId == null) {
            throw new ApiException("Missing the required parameter 'profileId' when calling updateFirewallProfile(Async)");
        }
        
        com.squareup.okhttp.Call call = updateFirewallProfileCall(body, profileId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update a firewall profile.
     * Update user configurable properties of firewall profile. 
     * @param body  (required)
     * @param profileId  (required)
     * @return BaseFirewallProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BaseFirewallProfile updateFirewallProfile(BaseFirewallProfile body, String profileId) throws ApiException {
        ApiResponse<BaseFirewallProfile> resp = updateFirewallProfileWithHttpInfo(body, profileId);
        return resp.getData();
    }

    /**
     * Update a firewall profile.
     * Update user configurable properties of firewall profile. 
     * @param body  (required)
     * @param profileId  (required)
     * @return ApiResponse&lt;BaseFirewallProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BaseFirewallProfile> updateFirewallProfileWithHttpInfo(BaseFirewallProfile body, String profileId) throws ApiException {
        com.squareup.okhttp.Call call = updateFirewallProfileValidateBeforeCall(body, profileId, null, null);
        Type localVarReturnType = new TypeToken<BaseFirewallProfile>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a firewall profile. (asynchronously)
     * Update user configurable properties of firewall profile. 
     * @param body  (required)
     * @param profileId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateFirewallProfileAsync(BaseFirewallProfile body, String profileId, final ApiCallback<BaseFirewallProfile> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateFirewallProfileValidateBeforeCall(body, profileId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BaseFirewallProfile>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateFirewallStatus
     * @param body  (required)
     * @param contextType  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateFirewallStatusCall(FirewallStatus body, String contextType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/firewall/status/{context-type}"
            .replaceAll("\\{" + "context-type" + "\\}", apiClient.escapeString(contextType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateFirewallStatusValidateBeforeCall(FirewallStatus body, String contextType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateFirewallStatus(Async)");
        }
        // verify the required parameter 'contextType' is set
        if (contextType == null) {
            throw new ApiException("Missing the required parameter 'contextType' when calling updateFirewallStatus(Async)");
        }
        
        com.squareup.okhttp.Call call = updateFirewallStatusCall(body, contextType, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update global firewall status for dfw context
     * Update global firewall status for dfw context
     * @param body  (required)
     * @param contextType  (required)
     * @return FirewallStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FirewallStatus updateFirewallStatus(FirewallStatus body, String contextType) throws ApiException {
        ApiResponse<FirewallStatus> resp = updateFirewallStatusWithHttpInfo(body, contextType);
        return resp.getData();
    }

    /**
     * Update global firewall status for dfw context
     * Update global firewall status for dfw context
     * @param body  (required)
     * @param contextType  (required)
     * @return ApiResponse&lt;FirewallStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FirewallStatus> updateFirewallStatusWithHttpInfo(FirewallStatus body, String contextType) throws ApiException {
        com.squareup.okhttp.Call call = updateFirewallStatusValidateBeforeCall(body, contextType, null, null);
        Type localVarReturnType = new TypeToken<FirewallStatus>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update global firewall status for dfw context (asynchronously)
     * Update global firewall status for dfw context
     * @param body  (required)
     * @param contextType  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateFirewallStatusAsync(FirewallStatus body, String contextType, final ApiCallback<FirewallStatus> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateFirewallStatusValidateBeforeCall(body, contextType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FirewallStatus>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateRule
     * @param body  (required)
     * @param sectionId  (required)
     * @param ruleId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateRuleCall(FirewallRule body, String sectionId, String ruleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/firewall/sections/{section-id}/rules/{rule-id}"
            .replaceAll("\\{" + "section-id" + "\\}", apiClient.escapeString(sectionId.toString()))
            .replaceAll("\\{" + "rule-id" + "\\}", apiClient.escapeString(ruleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateRuleValidateBeforeCall(FirewallRule body, String sectionId, String ruleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateRule(Async)");
        }
        // verify the required parameter 'sectionId' is set
        if (sectionId == null) {
            throw new ApiException("Missing the required parameter 'sectionId' when calling updateRule(Async)");
        }
        // verify the required parameter 'ruleId' is set
        if (ruleId == null) {
            throw new ApiException("Missing the required parameter 'ruleId' when calling updateRule(Async)");
        }
        
        com.squareup.okhttp.Call call = updateRuleCall(body, sectionId, ruleId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update an Existing Rule
     * Modifies existing firewall rule in a firewall section. Updating firewall rule in a section modifies parent section entity and simultaneous update (modify) operations on same section are not allowed to prevent overwriting stale contents to firewall section. If a concurrent update is performed, HTTP response code 409 will be returned to the client operating on stale data. That client should retrieve the firewall section again and re-apply its update. 
     * @param body  (required)
     * @param sectionId  (required)
     * @param ruleId  (required)
     * @return FirewallRule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FirewallRule updateRule(FirewallRule body, String sectionId, String ruleId) throws ApiException {
        ApiResponse<FirewallRule> resp = updateRuleWithHttpInfo(body, sectionId, ruleId);
        return resp.getData();
    }

    /**
     * Update an Existing Rule
     * Modifies existing firewall rule in a firewall section. Updating firewall rule in a section modifies parent section entity and simultaneous update (modify) operations on same section are not allowed to prevent overwriting stale contents to firewall section. If a concurrent update is performed, HTTP response code 409 will be returned to the client operating on stale data. That client should retrieve the firewall section again and re-apply its update. 
     * @param body  (required)
     * @param sectionId  (required)
     * @param ruleId  (required)
     * @return ApiResponse&lt;FirewallRule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FirewallRule> updateRuleWithHttpInfo(FirewallRule body, String sectionId, String ruleId) throws ApiException {
        com.squareup.okhttp.Call call = updateRuleValidateBeforeCall(body, sectionId, ruleId, null, null);
        Type localVarReturnType = new TypeToken<FirewallRule>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update an Existing Rule (asynchronously)
     * Modifies existing firewall rule in a firewall section. Updating firewall rule in a section modifies parent section entity and simultaneous update (modify) operations on same section are not allowed to prevent overwriting stale contents to firewall section. If a concurrent update is performed, HTTP response code 409 will be returned to the client operating on stale data. That client should retrieve the firewall section again and re-apply its update. 
     * @param body  (required)
     * @param sectionId  (required)
     * @param ruleId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateRuleAsync(FirewallRule body, String sectionId, String ruleId, final ApiCallback<FirewallRule> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateRuleValidateBeforeCall(body, sectionId, ruleId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FirewallRule>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateSection
     * @param body  (required)
     * @param sectionId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateSectionCall(FirewallSection body, String sectionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/firewall/sections/{section-id}"
            .replaceAll("\\{" + "section-id" + "\\}", apiClient.escapeString(sectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateSectionValidateBeforeCall(FirewallSection body, String sectionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateSection(Async)");
        }
        // verify the required parameter 'sectionId' is set
        if (sectionId == null) {
            throw new ApiException("Missing the required parameter 'sectionId' when calling updateSection(Async)");
        }
        
        com.squareup.okhttp.Call call = updateSectionCall(body, sectionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update an Existing Section
     * Modifies the specified section, but does not modify the section&#x27;s associated rules. Simultaneous update (modify) operations on same section are not allowed to prevent overwriting stale contents to firewall section. If a concurrent update is performed, HTTP response code 409 will be returned to the client operating on stale data. That client should retrieve the firewall section again and re-apply its update. 
     * @param body  (required)
     * @param sectionId  (required)
     * @return FirewallSection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FirewallSection updateSection(FirewallSection body, String sectionId) throws ApiException {
        ApiResponse<FirewallSection> resp = updateSectionWithHttpInfo(body, sectionId);
        return resp.getData();
    }

    /**
     * Update an Existing Section
     * Modifies the specified section, but does not modify the section&#x27;s associated rules. Simultaneous update (modify) operations on same section are not allowed to prevent overwriting stale contents to firewall section. If a concurrent update is performed, HTTP response code 409 will be returned to the client operating on stale data. That client should retrieve the firewall section again and re-apply its update. 
     * @param body  (required)
     * @param sectionId  (required)
     * @return ApiResponse&lt;FirewallSection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FirewallSection> updateSectionWithHttpInfo(FirewallSection body, String sectionId) throws ApiException {
        com.squareup.okhttp.Call call = updateSectionValidateBeforeCall(body, sectionId, null, null);
        Type localVarReturnType = new TypeToken<FirewallSection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update an Existing Section (asynchronously)
     * Modifies the specified section, but does not modify the section&#x27;s associated rules. Simultaneous update (modify) operations on same section are not allowed to prevent overwriting stale contents to firewall section. If a concurrent update is performed, HTTP response code 409 will be returned to the client operating on stale data. That client should retrieve the firewall section again and re-apply its update. 
     * @param body  (required)
     * @param sectionId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateSectionAsync(FirewallSection body, String sectionId, final ApiCallback<FirewallSection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateSectionValidateBeforeCall(body, sectionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FirewallSection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateSectionWithRulesUpdateWithRules
     * @param body  (required)
     * @param sectionId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateSectionWithRulesUpdateWithRulesCall(FirewallSectionRuleList body, String sectionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/firewall/sections/{section-id}?action=update_with_rules"
            .replaceAll("\\{" + "section-id" + "\\}", apiClient.escapeString(sectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateSectionWithRulesUpdateWithRulesValidateBeforeCall(FirewallSectionRuleList body, String sectionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateSectionWithRulesUpdateWithRules(Async)");
        }
        // verify the required parameter 'sectionId' is set
        if (sectionId == null) {
            throw new ApiException("Missing the required parameter 'sectionId' when calling updateSectionWithRulesUpdateWithRules(Async)");
        }
        
        com.squareup.okhttp.Call call = updateSectionWithRulesUpdateWithRulesCall(body, sectionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update an Existing Section, Including Its Rules
     * Modifies existing firewall section along with its association with rules. When invoked on a large number of rules, this API is supported only at low rates of invocation (not more than 2 times per minute). The typical latency of this API with about 1024 rules is about 15 seconds in a cluster setup. This API should not be invoked with large payloads at automation speeds.  Instead, to update rule content, use: PUT /api/v1/firewall/sections/&amp;lt;section-id&amp;gt;/rules/&amp;lt;rule-id&amp;gt;  Simultaneous update (modify) operations on same section are not allowed to prevent overwriting stale contents to firewall section. If a concurrent update is performed, HTTP response code 409 will be returned to the client operating on stale data. That client should retrieve the firewall section again and re-apply its update. 
     * @param body  (required)
     * @param sectionId  (required)
     * @return FirewallSectionRuleList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FirewallSectionRuleList updateSectionWithRulesUpdateWithRules(FirewallSectionRuleList body, String sectionId) throws ApiException {
        ApiResponse<FirewallSectionRuleList> resp = updateSectionWithRulesUpdateWithRulesWithHttpInfo(body, sectionId);
        return resp.getData();
    }

    /**
     * Update an Existing Section, Including Its Rules
     * Modifies existing firewall section along with its association with rules. When invoked on a large number of rules, this API is supported only at low rates of invocation (not more than 2 times per minute). The typical latency of this API with about 1024 rules is about 15 seconds in a cluster setup. This API should not be invoked with large payloads at automation speeds.  Instead, to update rule content, use: PUT /api/v1/firewall/sections/&amp;lt;section-id&amp;gt;/rules/&amp;lt;rule-id&amp;gt;  Simultaneous update (modify) operations on same section are not allowed to prevent overwriting stale contents to firewall section. If a concurrent update is performed, HTTP response code 409 will be returned to the client operating on stale data. That client should retrieve the firewall section again and re-apply its update. 
     * @param body  (required)
     * @param sectionId  (required)
     * @return ApiResponse&lt;FirewallSectionRuleList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FirewallSectionRuleList> updateSectionWithRulesUpdateWithRulesWithHttpInfo(FirewallSectionRuleList body, String sectionId) throws ApiException {
        com.squareup.okhttp.Call call = updateSectionWithRulesUpdateWithRulesValidateBeforeCall(body, sectionId, null, null);
        Type localVarReturnType = new TypeToken<FirewallSectionRuleList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update an Existing Section, Including Its Rules (asynchronously)
     * Modifies existing firewall section along with its association with rules. When invoked on a large number of rules, this API is supported only at low rates of invocation (not more than 2 times per minute). The typical latency of this API with about 1024 rules is about 15 seconds in a cluster setup. This API should not be invoked with large payloads at automation speeds.  Instead, to update rule content, use: PUT /api/v1/firewall/sections/&amp;lt;section-id&amp;gt;/rules/&amp;lt;rule-id&amp;gt;  Simultaneous update (modify) operations on same section are not allowed to prevent overwriting stale contents to firewall section. If a concurrent update is performed, HTTP response code 409 will be returned to the client operating on stale data. That client should retrieve the firewall section again and re-apply its update. 
     * @param body  (required)
     * @param sectionId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateSectionWithRulesUpdateWithRulesAsync(FirewallSectionRuleList body, String sectionId, final ApiCallback<FirewallSectionRuleList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateSectionWithRulesUpdateWithRulesValidateBeforeCall(body, sectionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FirewallSectionRuleList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
