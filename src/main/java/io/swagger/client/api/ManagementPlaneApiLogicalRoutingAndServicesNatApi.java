/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ApiError;
import io.swagger.client.model.NatRule;
import io.swagger.client.model.NatRuleList;
import io.swagger.client.model.NatRuleListResult;
import io.swagger.client.model.NatStatisticsPerLogicalRouter;
import io.swagger.client.model.NatStatisticsPerRule;
import io.swagger.client.model.NatStatisticsPerTransportNode;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ManagementPlaneApiLogicalRoutingAndServicesNatApi {
    private ApiClient apiClient;

    public ManagementPlaneApiLogicalRoutingAndServicesNatApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ManagementPlaneApiLogicalRoutingAndServicesNatApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addNatRule
     * @param body  (required)
     * @param logicalRouterId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addNatRuleCall(NatRule body, String logicalRouterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/logical-routers/{logical-router-id}/nat/rules"
            .replaceAll("\\{" + "logical-router-id" + "\\}", apiClient.escapeString(logicalRouterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addNatRuleValidateBeforeCall(NatRule body, String logicalRouterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addNatRule(Async)");
        }
        // verify the required parameter 'logicalRouterId' is set
        if (logicalRouterId == null) {
            throw new ApiException("Missing the required parameter 'logicalRouterId' when calling addNatRule(Async)");
        }
        
        com.squareup.okhttp.Call call = addNatRuleCall(body, logicalRouterId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add a NAT rule in a specific logical router
     * Add a NAT rule in a specific logical router. 
     * @param body  (required)
     * @param logicalRouterId  (required)
     * @return NatRule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NatRule addNatRule(NatRule body, String logicalRouterId) throws ApiException {
        ApiResponse<NatRule> resp = addNatRuleWithHttpInfo(body, logicalRouterId);
        return resp.getData();
    }

    /**
     * Add a NAT rule in a specific logical router
     * Add a NAT rule in a specific logical router. 
     * @param body  (required)
     * @param logicalRouterId  (required)
     * @return ApiResponse&lt;NatRule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NatRule> addNatRuleWithHttpInfo(NatRule body, String logicalRouterId) throws ApiException {
        com.squareup.okhttp.Call call = addNatRuleValidateBeforeCall(body, logicalRouterId, null, null);
        Type localVarReturnType = new TypeToken<NatRule>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add a NAT rule in a specific logical router (asynchronously)
     * Add a NAT rule in a specific logical router. 
     * @param body  (required)
     * @param logicalRouterId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addNatRuleAsync(NatRule body, String logicalRouterId, final ApiCallback<NatRule> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addNatRuleValidateBeforeCall(body, logicalRouterId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NatRule>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addNatRulesCreateMultiple
     * @param body  (required)
     * @param logicalRouterId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addNatRulesCreateMultipleCall(NatRuleList body, String logicalRouterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/logical-routers/{logical-router-id}/nat/rules?action=create_multiple"
            .replaceAll("\\{" + "logical-router-id" + "\\}", apiClient.escapeString(logicalRouterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addNatRulesCreateMultipleValidateBeforeCall(NatRuleList body, String logicalRouterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addNatRulesCreateMultiple(Async)");
        }
        // verify the required parameter 'logicalRouterId' is set
        if (logicalRouterId == null) {
            throw new ApiException("Missing the required parameter 'logicalRouterId' when calling addNatRulesCreateMultiple(Async)");
        }
        
        com.squareup.okhttp.Call call = addNatRulesCreateMultipleCall(body, logicalRouterId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add multiple NAT rules in a specific logical router
     * Create multiple NAT rules in a specific logical router. The API succeeds only when all rules are accepted and created successfully. Any one validation voilation will fail the API, no rule will be created. The ruleIds of each rules can be found from the responsed message. 
     * @param body  (required)
     * @param logicalRouterId  (required)
     * @return NatRuleList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NatRuleList addNatRulesCreateMultiple(NatRuleList body, String logicalRouterId) throws ApiException {
        ApiResponse<NatRuleList> resp = addNatRulesCreateMultipleWithHttpInfo(body, logicalRouterId);
        return resp.getData();
    }

    /**
     * Add multiple NAT rules in a specific logical router
     * Create multiple NAT rules in a specific logical router. The API succeeds only when all rules are accepted and created successfully. Any one validation voilation will fail the API, no rule will be created. The ruleIds of each rules can be found from the responsed message. 
     * @param body  (required)
     * @param logicalRouterId  (required)
     * @return ApiResponse&lt;NatRuleList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NatRuleList> addNatRulesCreateMultipleWithHttpInfo(NatRuleList body, String logicalRouterId) throws ApiException {
        com.squareup.okhttp.Call call = addNatRulesCreateMultipleValidateBeforeCall(body, logicalRouterId, null, null);
        Type localVarReturnType = new TypeToken<NatRuleList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add multiple NAT rules in a specific logical router (asynchronously)
     * Create multiple NAT rules in a specific logical router. The API succeeds only when all rules are accepted and created successfully. Any one validation voilation will fail the API, no rule will be created. The ruleIds of each rules can be found from the responsed message. 
     * @param body  (required)
     * @param logicalRouterId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addNatRulesCreateMultipleAsync(NatRuleList body, String logicalRouterId, final ApiCallback<NatRuleList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addNatRulesCreateMultipleValidateBeforeCall(body, logicalRouterId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NatRuleList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteNatRule
     * @param logicalRouterId  (required)
     * @param ruleId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteNatRuleCall(String logicalRouterId, String ruleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/logical-routers/{logical-router-id}/nat/rules/{rule-id}"
            .replaceAll("\\{" + "logical-router-id" + "\\}", apiClient.escapeString(logicalRouterId.toString()))
            .replaceAll("\\{" + "rule-id" + "\\}", apiClient.escapeString(ruleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteNatRuleValidateBeforeCall(String logicalRouterId, String ruleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'logicalRouterId' is set
        if (logicalRouterId == null) {
            throw new ApiException("Missing the required parameter 'logicalRouterId' when calling deleteNatRule(Async)");
        }
        // verify the required parameter 'ruleId' is set
        if (ruleId == null) {
            throw new ApiException("Missing the required parameter 'ruleId' when calling deleteNatRule(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteNatRuleCall(logicalRouterId, ruleId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete a specific NAT rule from a logical router
     * Delete a specific NAT rule from a logical router 
     * @param logicalRouterId  (required)
     * @param ruleId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteNatRule(String logicalRouterId, String ruleId) throws ApiException {
        deleteNatRuleWithHttpInfo(logicalRouterId, ruleId);
    }

    /**
     * Delete a specific NAT rule from a logical router
     * Delete a specific NAT rule from a logical router 
     * @param logicalRouterId  (required)
     * @param ruleId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteNatRuleWithHttpInfo(String logicalRouterId, String ruleId) throws ApiException {
        com.squareup.okhttp.Call call = deleteNatRuleValidateBeforeCall(logicalRouterId, ruleId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a specific NAT rule from a logical router (asynchronously)
     * Delete a specific NAT rule from a logical router 
     * @param logicalRouterId  (required)
     * @param ruleId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteNatRuleAsync(String logicalRouterId, String ruleId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteNatRuleValidateBeforeCall(logicalRouterId, ruleId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getNatRule
     * @param logicalRouterId  (required)
     * @param ruleId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNatRuleCall(String logicalRouterId, String ruleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/logical-routers/{logical-router-id}/nat/rules/{rule-id}"
            .replaceAll("\\{" + "logical-router-id" + "\\}", apiClient.escapeString(logicalRouterId.toString()))
            .replaceAll("\\{" + "rule-id" + "\\}", apiClient.escapeString(ruleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNatRuleValidateBeforeCall(String logicalRouterId, String ruleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'logicalRouterId' is set
        if (logicalRouterId == null) {
            throw new ApiException("Missing the required parameter 'logicalRouterId' when calling getNatRule(Async)");
        }
        // verify the required parameter 'ruleId' is set
        if (ruleId == null) {
            throw new ApiException("Missing the required parameter 'ruleId' when calling getNatRule(Async)");
        }
        
        com.squareup.okhttp.Call call = getNatRuleCall(logicalRouterId, ruleId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get a specific NAT rule from a given logical router
     * Get a specific NAT rule from a given logical router 
     * @param logicalRouterId  (required)
     * @param ruleId  (required)
     * @return NatRule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NatRule getNatRule(String logicalRouterId, String ruleId) throws ApiException {
        ApiResponse<NatRule> resp = getNatRuleWithHttpInfo(logicalRouterId, ruleId);
        return resp.getData();
    }

    /**
     * Get a specific NAT rule from a given logical router
     * Get a specific NAT rule from a given logical router 
     * @param logicalRouterId  (required)
     * @param ruleId  (required)
     * @return ApiResponse&lt;NatRule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NatRule> getNatRuleWithHttpInfo(String logicalRouterId, String ruleId) throws ApiException {
        com.squareup.okhttp.Call call = getNatRuleValidateBeforeCall(logicalRouterId, ruleId, null, null);
        Type localVarReturnType = new TypeToken<NatRule>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a specific NAT rule from a given logical router (asynchronously)
     * Get a specific NAT rule from a given logical router 
     * @param logicalRouterId  (required)
     * @param ruleId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNatRuleAsync(String logicalRouterId, String ruleId, final ApiCallback<NatRule> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNatRuleValidateBeforeCall(logicalRouterId, ruleId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NatRule>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNatStatisticsPerLogicalRouter
     * @param logicalRouterId  (required)
     * @param source Data source type. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNatStatisticsPerLogicalRouterCall(String logicalRouterId, String source, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/logical-routers/{logical-router-id}/nat/rules/statistics"
            .replaceAll("\\{" + "logical-router-id" + "\\}", apiClient.escapeString(logicalRouterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (source != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("source", source));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNatStatisticsPerLogicalRouterValidateBeforeCall(String logicalRouterId, String source, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'logicalRouterId' is set
        if (logicalRouterId == null) {
            throw new ApiException("Missing the required parameter 'logicalRouterId' when calling getNatStatisticsPerLogicalRouter(Async)");
        }
        
        com.squareup.okhttp.Call call = getNatStatisticsPerLogicalRouterCall(logicalRouterId, source, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the statistics of all rules of the logical router
     * Returns the summation of statistics for all rules from all nodes for the Specified Logical Router. Also gives the per transport node statistics for provided logical router. The query parameter \&quot;source&#x3D;realtime\&quot; is not supported. 
     * @param logicalRouterId  (required)
     * @param source Data source type. (optional)
     * @return NatStatisticsPerLogicalRouter
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NatStatisticsPerLogicalRouter getNatStatisticsPerLogicalRouter(String logicalRouterId, String source) throws ApiException {
        ApiResponse<NatStatisticsPerLogicalRouter> resp = getNatStatisticsPerLogicalRouterWithHttpInfo(logicalRouterId, source);
        return resp.getData();
    }

    /**
     * Get the statistics of all rules of the logical router
     * Returns the summation of statistics for all rules from all nodes for the Specified Logical Router. Also gives the per transport node statistics for provided logical router. The query parameter \&quot;source&#x3D;realtime\&quot; is not supported. 
     * @param logicalRouterId  (required)
     * @param source Data source type. (optional)
     * @return ApiResponse&lt;NatStatisticsPerLogicalRouter&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NatStatisticsPerLogicalRouter> getNatStatisticsPerLogicalRouterWithHttpInfo(String logicalRouterId, String source) throws ApiException {
        com.squareup.okhttp.Call call = getNatStatisticsPerLogicalRouterValidateBeforeCall(logicalRouterId, source, null, null);
        Type localVarReturnType = new TypeToken<NatStatisticsPerLogicalRouter>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the statistics of all rules of the logical router (asynchronously)
     * Returns the summation of statistics for all rules from all nodes for the Specified Logical Router. Also gives the per transport node statistics for provided logical router. The query parameter \&quot;source&#x3D;realtime\&quot; is not supported. 
     * @param logicalRouterId  (required)
     * @param source Data source type. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNatStatisticsPerLogicalRouterAsync(String logicalRouterId, String source, final ApiCallback<NatStatisticsPerLogicalRouter> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNatStatisticsPerLogicalRouterValidateBeforeCall(logicalRouterId, source, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NatStatisticsPerLogicalRouter>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNatStatisticsPerRule
     * @param logicalRouterId  (required)
     * @param ruleId  (required)
     * @param source Data source type. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNatStatisticsPerRuleCall(String logicalRouterId, String ruleId, String source, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/logical-routers/{logical-router-id}/nat/rules/{rule-id}/statistics"
            .replaceAll("\\{" + "logical-router-id" + "\\}", apiClient.escapeString(logicalRouterId.toString()))
            .replaceAll("\\{" + "rule-id" + "\\}", apiClient.escapeString(ruleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (source != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("source", source));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNatStatisticsPerRuleValidateBeforeCall(String logicalRouterId, String ruleId, String source, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'logicalRouterId' is set
        if (logicalRouterId == null) {
            throw new ApiException("Missing the required parameter 'logicalRouterId' when calling getNatStatisticsPerRule(Async)");
        }
        // verify the required parameter 'ruleId' is set
        if (ruleId == null) {
            throw new ApiException("Missing the required parameter 'ruleId' when calling getNatStatisticsPerRule(Async)");
        }
        
        com.squareup.okhttp.Call call = getNatStatisticsPerRuleCall(logicalRouterId, ruleId, source, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the statistics of a specified logical router NAT Rule
     * Returns the summation of statistics from all nodes for the Specified Logical Router NAT Rule. Query parameter \&quot;source&#x3D;realtime\&quot; is the only supported source. 
     * @param logicalRouterId  (required)
     * @param ruleId  (required)
     * @param source Data source type. (optional)
     * @return NatStatisticsPerRule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NatStatisticsPerRule getNatStatisticsPerRule(String logicalRouterId, String ruleId, String source) throws ApiException {
        ApiResponse<NatStatisticsPerRule> resp = getNatStatisticsPerRuleWithHttpInfo(logicalRouterId, ruleId, source);
        return resp.getData();
    }

    /**
     * Get the statistics of a specified logical router NAT Rule
     * Returns the summation of statistics from all nodes for the Specified Logical Router NAT Rule. Query parameter \&quot;source&#x3D;realtime\&quot; is the only supported source. 
     * @param logicalRouterId  (required)
     * @param ruleId  (required)
     * @param source Data source type. (optional)
     * @return ApiResponse&lt;NatStatisticsPerRule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NatStatisticsPerRule> getNatStatisticsPerRuleWithHttpInfo(String logicalRouterId, String ruleId, String source) throws ApiException {
        com.squareup.okhttp.Call call = getNatStatisticsPerRuleValidateBeforeCall(logicalRouterId, ruleId, source, null, null);
        Type localVarReturnType = new TypeToken<NatStatisticsPerRule>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the statistics of a specified logical router NAT Rule (asynchronously)
     * Returns the summation of statistics from all nodes for the Specified Logical Router NAT Rule. Query parameter \&quot;source&#x3D;realtime\&quot; is the only supported source. 
     * @param logicalRouterId  (required)
     * @param ruleId  (required)
     * @param source Data source type. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNatStatisticsPerRuleAsync(String logicalRouterId, String ruleId, String source, final ApiCallback<NatStatisticsPerRule> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNatStatisticsPerRuleValidateBeforeCall(logicalRouterId, ruleId, source, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NatStatisticsPerRule>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNatStatisticsPerTransportNode
     * @param nodeId  (required)
     * @param source Data source type. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNatStatisticsPerTransportNodeCall(String nodeId, String source, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/transport-nodes/{node-id}/statistics/nat-rules"
            .replaceAll("\\{" + "node-id" + "\\}", apiClient.escapeString(nodeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (source != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("source", source));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNatStatisticsPerTransportNodeValidateBeforeCall(String nodeId, String source, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'nodeId' is set
        if (nodeId == null) {
            throw new ApiException("Missing the required parameter 'nodeId' when calling getNatStatisticsPerTransportNode(Async)");
        }
        
        com.squareup.okhttp.Call call = getNatStatisticsPerTransportNodeCall(nodeId, source, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get statistics for all logical router NAT rules on a transport node
     * Returns the summation of statistics for all rules from all logical routers which are present on given transport node. Only cached statistics are supported. The query parameter \&quot;source&#x3D;realtime\&quot; is not supported. 
     * @param nodeId  (required)
     * @param source Data source type. (optional)
     * @return NatStatisticsPerTransportNode
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NatStatisticsPerTransportNode getNatStatisticsPerTransportNode(String nodeId, String source) throws ApiException {
        ApiResponse<NatStatisticsPerTransportNode> resp = getNatStatisticsPerTransportNodeWithHttpInfo(nodeId, source);
        return resp.getData();
    }

    /**
     * Get statistics for all logical router NAT rules on a transport node
     * Returns the summation of statistics for all rules from all logical routers which are present on given transport node. Only cached statistics are supported. The query parameter \&quot;source&#x3D;realtime\&quot; is not supported. 
     * @param nodeId  (required)
     * @param source Data source type. (optional)
     * @return ApiResponse&lt;NatStatisticsPerTransportNode&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NatStatisticsPerTransportNode> getNatStatisticsPerTransportNodeWithHttpInfo(String nodeId, String source) throws ApiException {
        com.squareup.okhttp.Call call = getNatStatisticsPerTransportNodeValidateBeforeCall(nodeId, source, null, null);
        Type localVarReturnType = new TypeToken<NatStatisticsPerTransportNode>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get statistics for all logical router NAT rules on a transport node (asynchronously)
     * Returns the summation of statistics for all rules from all logical routers which are present on given transport node. Only cached statistics are supported. The query parameter \&quot;source&#x3D;realtime\&quot; is not supported. 
     * @param nodeId  (required)
     * @param source Data source type. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNatStatisticsPerTransportNodeAsync(String nodeId, String source, final ApiCallback<NatStatisticsPerTransportNode> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNatStatisticsPerTransportNodeValidateBeforeCall(nodeId, source, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NatStatisticsPerTransportNode>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listNatRules
     * @param logicalRouterId  (required)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listNatRulesCall(String logicalRouterId, String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/logical-routers/{logical-router-id}/nat/rules"
            .replaceAll("\\{" + "logical-router-id" + "\\}", apiClient.escapeString(logicalRouterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (includedFields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("included_fields", includedFields));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page_size", pageSize));
        if (sortAscending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_ascending", sortAscending));
        if (sortBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_by", sortBy));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listNatRulesValidateBeforeCall(String logicalRouterId, String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'logicalRouterId' is set
        if (logicalRouterId == null) {
            throw new ApiException("Missing the required parameter 'logicalRouterId' when calling listNatRules(Async)");
        }
        
        com.squareup.okhttp.Call call = listNatRulesCall(logicalRouterId, cursor, includedFields, pageSize, sortAscending, sortBy, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List NAT rules of the logical router
     * Returns paginated list of all user defined NAT rules of the specific logical router 
     * @param logicalRouterId  (required)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @return NatRuleListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NatRuleListResult listNatRules(String logicalRouterId, String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy) throws ApiException {
        ApiResponse<NatRuleListResult> resp = listNatRulesWithHttpInfo(logicalRouterId, cursor, includedFields, pageSize, sortAscending, sortBy);
        return resp.getData();
    }

    /**
     * List NAT rules of the logical router
     * Returns paginated list of all user defined NAT rules of the specific logical router 
     * @param logicalRouterId  (required)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @return ApiResponse&lt;NatRuleListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NatRuleListResult> listNatRulesWithHttpInfo(String logicalRouterId, String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy) throws ApiException {
        com.squareup.okhttp.Call call = listNatRulesValidateBeforeCall(logicalRouterId, cursor, includedFields, pageSize, sortAscending, sortBy, null, null);
        Type localVarReturnType = new TypeToken<NatRuleListResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List NAT rules of the logical router (asynchronously)
     * Returns paginated list of all user defined NAT rules of the specific logical router 
     * @param logicalRouterId  (required)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listNatRulesAsync(String logicalRouterId, String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, final ApiCallback<NatRuleListResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listNatRulesValidateBeforeCall(logicalRouterId, cursor, includedFields, pageSize, sortAscending, sortBy, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NatRuleListResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateNatRule
     * @param body  (required)
     * @param logicalRouterId  (required)
     * @param ruleId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateNatRuleCall(NatRule body, String logicalRouterId, String ruleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/logical-routers/{logical-router-id}/nat/rules/{rule-id}"
            .replaceAll("\\{" + "logical-router-id" + "\\}", apiClient.escapeString(logicalRouterId.toString()))
            .replaceAll("\\{" + "rule-id" + "\\}", apiClient.escapeString(ruleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateNatRuleValidateBeforeCall(NatRule body, String logicalRouterId, String ruleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateNatRule(Async)");
        }
        // verify the required parameter 'logicalRouterId' is set
        if (logicalRouterId == null) {
            throw new ApiException("Missing the required parameter 'logicalRouterId' when calling updateNatRule(Async)");
        }
        // verify the required parameter 'ruleId' is set
        if (ruleId == null) {
            throw new ApiException("Missing the required parameter 'ruleId' when calling updateNatRule(Async)");
        }
        
        com.squareup.okhttp.Call call = updateNatRuleCall(body, logicalRouterId, ruleId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update a specific NAT rule from a given logical router
     * Update a specific NAT rule from a given logical router. 
     * @param body  (required)
     * @param logicalRouterId  (required)
     * @param ruleId  (required)
     * @return NatRule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NatRule updateNatRule(NatRule body, String logicalRouterId, String ruleId) throws ApiException {
        ApiResponse<NatRule> resp = updateNatRuleWithHttpInfo(body, logicalRouterId, ruleId);
        return resp.getData();
    }

    /**
     * Update a specific NAT rule from a given logical router
     * Update a specific NAT rule from a given logical router. 
     * @param body  (required)
     * @param logicalRouterId  (required)
     * @param ruleId  (required)
     * @return ApiResponse&lt;NatRule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NatRule> updateNatRuleWithHttpInfo(NatRule body, String logicalRouterId, String ruleId) throws ApiException {
        com.squareup.okhttp.Call call = updateNatRuleValidateBeforeCall(body, logicalRouterId, ruleId, null, null);
        Type localVarReturnType = new TypeToken<NatRule>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a specific NAT rule from a given logical router (asynchronously)
     * Update a specific NAT rule from a given logical router. 
     * @param body  (required)
     * @param logicalRouterId  (required)
     * @param ruleId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateNatRuleAsync(NatRule body, String logicalRouterId, String ruleId, final ApiCallback<NatRule> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateNatRuleValidateBeforeCall(body, logicalRouterId, ruleId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NatRule>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
