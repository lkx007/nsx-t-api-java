/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ApiError;
import io.swagger.client.model.BridgeEndpoint;
import io.swagger.client.model.BridgeEndpointListResult;
import io.swagger.client.model.BridgeEndpointStatistics;
import io.swagger.client.model.BridgeEndpointStatus;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ManagementPlaneApiNetworkTransportBridgeEndpointsApi {
    private ApiClient apiClient;

    public ManagementPlaneApiNetworkTransportBridgeEndpointsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ManagementPlaneApiNetworkTransportBridgeEndpointsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createBridgeEndpoint
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createBridgeEndpointCall(BridgeEndpoint body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/bridge-endpoints";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createBridgeEndpointValidateBeforeCall(BridgeEndpoint body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createBridgeEndpoint(Async)");
        }
        
        com.squareup.okhttp.Call call = createBridgeEndpointCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create a Bridge Endpoint
     * Creates a Bridge Endpoint. It describes the physical attributes of the bridge like vlan. A logical port can be attached to a vif providing bridging functionality from the logical overlay network to the physical vlan network 
     * @param body  (required)
     * @return BridgeEndpoint
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BridgeEndpoint createBridgeEndpoint(BridgeEndpoint body) throws ApiException {
        ApiResponse<BridgeEndpoint> resp = createBridgeEndpointWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create a Bridge Endpoint
     * Creates a Bridge Endpoint. It describes the physical attributes of the bridge like vlan. A logical port can be attached to a vif providing bridging functionality from the logical overlay network to the physical vlan network 
     * @param body  (required)
     * @return ApiResponse&lt;BridgeEndpoint&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BridgeEndpoint> createBridgeEndpointWithHttpInfo(BridgeEndpoint body) throws ApiException {
        com.squareup.okhttp.Call call = createBridgeEndpointValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<BridgeEndpoint>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a Bridge Endpoint (asynchronously)
     * Creates a Bridge Endpoint. It describes the physical attributes of the bridge like vlan. A logical port can be attached to a vif providing bridging functionality from the logical overlay network to the physical vlan network 
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createBridgeEndpointAsync(BridgeEndpoint body, final ApiCallback<BridgeEndpoint> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createBridgeEndpointValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BridgeEndpoint>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteBridgeEndpoint
     * @param bridgeendpointId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteBridgeEndpointCall(String bridgeendpointId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/bridge-endpoints/{bridgeendpoint-id}"
            .replaceAll("\\{" + "bridgeendpoint-id" + "\\}", apiClient.escapeString(bridgeendpointId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteBridgeEndpointValidateBeforeCall(String bridgeendpointId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'bridgeendpointId' is set
        if (bridgeendpointId == null) {
            throw new ApiException("Missing the required parameter 'bridgeendpointId' when calling deleteBridgeEndpoint(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteBridgeEndpointCall(bridgeendpointId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete a Bridge Endpoint
     * Deletes the specified Bridge Endpoint.
     * @param bridgeendpointId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteBridgeEndpoint(String bridgeendpointId) throws ApiException {
        deleteBridgeEndpointWithHttpInfo(bridgeendpointId);
    }

    /**
     * Delete a Bridge Endpoint
     * Deletes the specified Bridge Endpoint.
     * @param bridgeendpointId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteBridgeEndpointWithHttpInfo(String bridgeendpointId) throws ApiException {
        com.squareup.okhttp.Call call = deleteBridgeEndpointValidateBeforeCall(bridgeendpointId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a Bridge Endpoint (asynchronously)
     * Deletes the specified Bridge Endpoint.
     * @param bridgeendpointId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteBridgeEndpointAsync(String bridgeendpointId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteBridgeEndpointValidateBeforeCall(bridgeendpointId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getBridgeEndpoint
     * @param bridgeendpointId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBridgeEndpointCall(String bridgeendpointId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/bridge-endpoints/{bridgeendpoint-id}"
            .replaceAll("\\{" + "bridgeendpoint-id" + "\\}", apiClient.escapeString(bridgeendpointId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBridgeEndpointValidateBeforeCall(String bridgeendpointId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'bridgeendpointId' is set
        if (bridgeendpointId == null) {
            throw new ApiException("Missing the required parameter 'bridgeendpointId' when calling getBridgeEndpoint(Async)");
        }
        
        com.squareup.okhttp.Call call = getBridgeEndpointCall(bridgeendpointId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Information about a bridge endpoint
     * Returns information about a specified bridge endpoint.
     * @param bridgeendpointId  (required)
     * @return BridgeEndpoint
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BridgeEndpoint getBridgeEndpoint(String bridgeendpointId) throws ApiException {
        ApiResponse<BridgeEndpoint> resp = getBridgeEndpointWithHttpInfo(bridgeendpointId);
        return resp.getData();
    }

    /**
     * Get Information about a bridge endpoint
     * Returns information about a specified bridge endpoint.
     * @param bridgeendpointId  (required)
     * @return ApiResponse&lt;BridgeEndpoint&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BridgeEndpoint> getBridgeEndpointWithHttpInfo(String bridgeendpointId) throws ApiException {
        com.squareup.okhttp.Call call = getBridgeEndpointValidateBeforeCall(bridgeendpointId, null, null);
        Type localVarReturnType = new TypeToken<BridgeEndpoint>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Information about a bridge endpoint (asynchronously)
     * Returns information about a specified bridge endpoint.
     * @param bridgeendpointId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBridgeEndpointAsync(String bridgeendpointId, final ApiCallback<BridgeEndpoint> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBridgeEndpointValidateBeforeCall(bridgeendpointId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BridgeEndpoint>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getBridgeEndpointStatistics
     * @param endpointId  (required)
     * @param source Data source type. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBridgeEndpointStatisticsCall(String endpointId, String source, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/bridge-endpoints/{endpoint-id}/statistics"
            .replaceAll("\\{" + "endpoint-id" + "\\}", apiClient.escapeString(endpointId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (source != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("source", source));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBridgeEndpointStatisticsValidateBeforeCall(String endpointId, String source, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'endpointId' is set
        if (endpointId == null) {
            throw new ApiException("Missing the required parameter 'endpointId' when calling getBridgeEndpointStatistics(Async)");
        }
        
        com.squareup.okhttp.Call call = getBridgeEndpointStatisticsCall(endpointId, source, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Returns statistics of a specified Bridge Endpoint
     * Get the statistics for the Bridge Endpoint of the given Endpoint id (endpoint-id)
     * @param endpointId  (required)
     * @param source Data source type. (optional)
     * @return BridgeEndpointStatistics
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BridgeEndpointStatistics getBridgeEndpointStatistics(String endpointId, String source) throws ApiException {
        ApiResponse<BridgeEndpointStatistics> resp = getBridgeEndpointStatisticsWithHttpInfo(endpointId, source);
        return resp.getData();
    }

    /**
     * Returns statistics of a specified Bridge Endpoint
     * Get the statistics for the Bridge Endpoint of the given Endpoint id (endpoint-id)
     * @param endpointId  (required)
     * @param source Data source type. (optional)
     * @return ApiResponse&lt;BridgeEndpointStatistics&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BridgeEndpointStatistics> getBridgeEndpointStatisticsWithHttpInfo(String endpointId, String source) throws ApiException {
        com.squareup.okhttp.Call call = getBridgeEndpointStatisticsValidateBeforeCall(endpointId, source, null, null);
        Type localVarReturnType = new TypeToken<BridgeEndpointStatistics>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns statistics of a specified Bridge Endpoint (asynchronously)
     * Get the statistics for the Bridge Endpoint of the given Endpoint id (endpoint-id)
     * @param endpointId  (required)
     * @param source Data source type. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBridgeEndpointStatisticsAsync(String endpointId, String source, final ApiCallback<BridgeEndpointStatistics> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBridgeEndpointStatisticsValidateBeforeCall(endpointId, source, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BridgeEndpointStatistics>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getBridgeEndpointStatus
     * @param endpointId  (required)
     * @param source Data source type. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBridgeEndpointStatusCall(String endpointId, String source, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/bridge-endpoints/{endpoint-id}/status"
            .replaceAll("\\{" + "endpoint-id" + "\\}", apiClient.escapeString(endpointId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (source != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("source", source));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBridgeEndpointStatusValidateBeforeCall(String endpointId, String source, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'endpointId' is set
        if (endpointId == null) {
            throw new ApiException("Missing the required parameter 'endpointId' when calling getBridgeEndpointStatus(Async)");
        }
        
        com.squareup.okhttp.Call call = getBridgeEndpointStatusCall(endpointId, source, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Returns status of a specified Bridge Endpoint
     * Get the status for the Bridge Endpoint of the given Endpoint id
     * @param endpointId  (required)
     * @param source Data source type. (optional)
     * @return BridgeEndpointStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BridgeEndpointStatus getBridgeEndpointStatus(String endpointId, String source) throws ApiException {
        ApiResponse<BridgeEndpointStatus> resp = getBridgeEndpointStatusWithHttpInfo(endpointId, source);
        return resp.getData();
    }

    /**
     * Returns status of a specified Bridge Endpoint
     * Get the status for the Bridge Endpoint of the given Endpoint id
     * @param endpointId  (required)
     * @param source Data source type. (optional)
     * @return ApiResponse&lt;BridgeEndpointStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BridgeEndpointStatus> getBridgeEndpointStatusWithHttpInfo(String endpointId, String source) throws ApiException {
        com.squareup.okhttp.Call call = getBridgeEndpointStatusValidateBeforeCall(endpointId, source, null, null);
        Type localVarReturnType = new TypeToken<BridgeEndpointStatus>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns status of a specified Bridge Endpoint (asynchronously)
     * Get the status for the Bridge Endpoint of the given Endpoint id
     * @param endpointId  (required)
     * @param source Data source type. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBridgeEndpointStatusAsync(String endpointId, String source, final ApiCallback<BridgeEndpointStatus> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBridgeEndpointStatusValidateBeforeCall(endpointId, source, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BridgeEndpointStatus>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listBridgeEndpoints
     * @param bridgeClusterId Bridge Cluster Identifier (optional)
     * @param bridgeEndpointProfileId Bridge endpoint profile used by the edge cluster (optional)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param logicalSwitchId Logical Switch Identifier (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param vlanTransportZoneId VLAN transport zone id used by the edge cluster (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listBridgeEndpointsCall(String bridgeClusterId, String bridgeEndpointProfileId, String cursor, String includedFields, String logicalSwitchId, Long pageSize, Boolean sortAscending, String sortBy, String vlanTransportZoneId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/bridge-endpoints";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (bridgeClusterId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("bridge_cluster_id", bridgeClusterId));
        if (bridgeEndpointProfileId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("bridge_endpoint_profile_id", bridgeEndpointProfileId));
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (includedFields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("included_fields", includedFields));
        if (logicalSwitchId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("logical_switch_id", logicalSwitchId));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page_size", pageSize));
        if (sortAscending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_ascending", sortAscending));
        if (sortBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_by", sortBy));
        if (vlanTransportZoneId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("vlan_transport_zone_id", vlanTransportZoneId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listBridgeEndpointsValidateBeforeCall(String bridgeClusterId, String bridgeEndpointProfileId, String cursor, String includedFields, String logicalSwitchId, Long pageSize, Boolean sortAscending, String sortBy, String vlanTransportZoneId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listBridgeEndpointsCall(bridgeClusterId, bridgeEndpointProfileId, cursor, includedFields, logicalSwitchId, pageSize, sortAscending, sortBy, vlanTransportZoneId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List All Bridge Endpoints
     * Returns information about all configured bridge endoints 
     * @param bridgeClusterId Bridge Cluster Identifier (optional)
     * @param bridgeEndpointProfileId Bridge endpoint profile used by the edge cluster (optional)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param logicalSwitchId Logical Switch Identifier (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param vlanTransportZoneId VLAN transport zone id used by the edge cluster (optional)
     * @return BridgeEndpointListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BridgeEndpointListResult listBridgeEndpoints(String bridgeClusterId, String bridgeEndpointProfileId, String cursor, String includedFields, String logicalSwitchId, Long pageSize, Boolean sortAscending, String sortBy, String vlanTransportZoneId) throws ApiException {
        ApiResponse<BridgeEndpointListResult> resp = listBridgeEndpointsWithHttpInfo(bridgeClusterId, bridgeEndpointProfileId, cursor, includedFields, logicalSwitchId, pageSize, sortAscending, sortBy, vlanTransportZoneId);
        return resp.getData();
    }

    /**
     * List All Bridge Endpoints
     * Returns information about all configured bridge endoints 
     * @param bridgeClusterId Bridge Cluster Identifier (optional)
     * @param bridgeEndpointProfileId Bridge endpoint profile used by the edge cluster (optional)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param logicalSwitchId Logical Switch Identifier (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param vlanTransportZoneId VLAN transport zone id used by the edge cluster (optional)
     * @return ApiResponse&lt;BridgeEndpointListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BridgeEndpointListResult> listBridgeEndpointsWithHttpInfo(String bridgeClusterId, String bridgeEndpointProfileId, String cursor, String includedFields, String logicalSwitchId, Long pageSize, Boolean sortAscending, String sortBy, String vlanTransportZoneId) throws ApiException {
        com.squareup.okhttp.Call call = listBridgeEndpointsValidateBeforeCall(bridgeClusterId, bridgeEndpointProfileId, cursor, includedFields, logicalSwitchId, pageSize, sortAscending, sortBy, vlanTransportZoneId, null, null);
        Type localVarReturnType = new TypeToken<BridgeEndpointListResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List All Bridge Endpoints (asynchronously)
     * Returns information about all configured bridge endoints 
     * @param bridgeClusterId Bridge Cluster Identifier (optional)
     * @param bridgeEndpointProfileId Bridge endpoint profile used by the edge cluster (optional)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param logicalSwitchId Logical Switch Identifier (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param vlanTransportZoneId VLAN transport zone id used by the edge cluster (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listBridgeEndpointsAsync(String bridgeClusterId, String bridgeEndpointProfileId, String cursor, String includedFields, String logicalSwitchId, Long pageSize, Boolean sortAscending, String sortBy, String vlanTransportZoneId, final ApiCallback<BridgeEndpointListResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listBridgeEndpointsValidateBeforeCall(bridgeClusterId, bridgeEndpointProfileId, cursor, includedFields, logicalSwitchId, pageSize, sortAscending, sortBy, vlanTransportZoneId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BridgeEndpointListResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateBridgeEndpoint
     * @param body  (required)
     * @param bridgeendpointId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateBridgeEndpointCall(BridgeEndpoint body, String bridgeendpointId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/bridge-endpoints/{bridgeendpoint-id}"
            .replaceAll("\\{" + "bridgeendpoint-id" + "\\}", apiClient.escapeString(bridgeendpointId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateBridgeEndpointValidateBeforeCall(BridgeEndpoint body, String bridgeendpointId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateBridgeEndpoint(Async)");
        }
        // verify the required parameter 'bridgeendpointId' is set
        if (bridgeendpointId == null) {
            throw new ApiException("Missing the required parameter 'bridgeendpointId' when calling updateBridgeEndpoint(Async)");
        }
        
        com.squareup.okhttp.Call call = updateBridgeEndpointCall(body, bridgeendpointId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update a Bridge Endpoint
     * Modifies a existing bridge endpoint. 
     * @param body  (required)
     * @param bridgeendpointId  (required)
     * @return BridgeEndpoint
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BridgeEndpoint updateBridgeEndpoint(BridgeEndpoint body, String bridgeendpointId) throws ApiException {
        ApiResponse<BridgeEndpoint> resp = updateBridgeEndpointWithHttpInfo(body, bridgeendpointId);
        return resp.getData();
    }

    /**
     * Update a Bridge Endpoint
     * Modifies a existing bridge endpoint. 
     * @param body  (required)
     * @param bridgeendpointId  (required)
     * @return ApiResponse&lt;BridgeEndpoint&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BridgeEndpoint> updateBridgeEndpointWithHttpInfo(BridgeEndpoint body, String bridgeendpointId) throws ApiException {
        com.squareup.okhttp.Call call = updateBridgeEndpointValidateBeforeCall(body, bridgeendpointId, null, null);
        Type localVarReturnType = new TypeToken<BridgeEndpoint>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a Bridge Endpoint (asynchronously)
     * Modifies a existing bridge endpoint. 
     * @param body  (required)
     * @param bridgeendpointId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateBridgeEndpointAsync(BridgeEndpoint body, String bridgeendpointId, final ApiCallback<BridgeEndpoint> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateBridgeEndpointValidateBeforeCall(body, bridgeendpointId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BridgeEndpoint>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
