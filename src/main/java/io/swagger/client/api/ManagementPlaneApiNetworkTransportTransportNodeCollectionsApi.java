/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ApiError;
import io.swagger.client.model.TransportNodeCollection;
import io.swagger.client.model.TransportNodeCollectionListResult;
import io.swagger.client.model.TransportNodeCollectionState;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ManagementPlaneApiNetworkTransportTransportNodeCollectionsApi {
    private ApiClient apiClient;

    public ManagementPlaneApiNetworkTransportTransportNodeCollectionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ManagementPlaneApiNetworkTransportTransportNodeCollectionsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createTransportNodeCollection
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createTransportNodeCollectionCall(TransportNodeCollection body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/transport-node-collections";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createTransportNodeCollectionValidateBeforeCall(TransportNodeCollection body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createTransportNodeCollection(Async)");
        }
        
        com.squareup.okhttp.Call call = createTransportNodeCollectionCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create transport node collection by attaching Transport Node Profile to cluster.
     * When transport node collection is created the hosts which are part of compute collection will be prepared automatically i.e. NSX Manager attempts to install the NSX components on hosts. Transport nodes for these hosts are created using the configuration specified in transport node profile. 
     * @param body  (required)
     * @return TransportNodeCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TransportNodeCollection createTransportNodeCollection(TransportNodeCollection body) throws ApiException {
        ApiResponse<TransportNodeCollection> resp = createTransportNodeCollectionWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create transport node collection by attaching Transport Node Profile to cluster.
     * When transport node collection is created the hosts which are part of compute collection will be prepared automatically i.e. NSX Manager attempts to install the NSX components on hosts. Transport nodes for these hosts are created using the configuration specified in transport node profile. 
     * @param body  (required)
     * @return ApiResponse&lt;TransportNodeCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TransportNodeCollection> createTransportNodeCollectionWithHttpInfo(TransportNodeCollection body) throws ApiException {
        com.squareup.okhttp.Call call = createTransportNodeCollectionValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<TransportNodeCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create transport node collection by attaching Transport Node Profile to cluster. (asynchronously)
     * When transport node collection is created the hosts which are part of compute collection will be prepared automatically i.e. NSX Manager attempts to install the NSX components on hosts. Transport nodes for these hosts are created using the configuration specified in transport node profile. 
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createTransportNodeCollectionAsync(TransportNodeCollection body, final ApiCallback<TransportNodeCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createTransportNodeCollectionValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TransportNodeCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteTransportNodeCollection
     * @param transportNodeCollectionId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteTransportNodeCollectionCall(String transportNodeCollectionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/transport-node-collections/{transport-node-collection-id}"
            .replaceAll("\\{" + "transport-node-collection-id" + "\\}", apiClient.escapeString(transportNodeCollectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteTransportNodeCollectionValidateBeforeCall(String transportNodeCollectionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'transportNodeCollectionId' is set
        if (transportNodeCollectionId == null) {
            throw new ApiException("Missing the required parameter 'transportNodeCollectionId' when calling deleteTransportNodeCollection(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteTransportNodeCollectionCall(transportNodeCollectionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Detach transport node profile from compute collection.
     * By deleting transport node collection, we are detaching the transport node profile(TNP) from the compute collection. It has no effect on existing transport nodes. However, new hosts added to the compute collection will no longer be automatically converted to NSX transport node. Detaching TNP from compute collection does not delete TNP. 
     * @param transportNodeCollectionId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteTransportNodeCollection(String transportNodeCollectionId) throws ApiException {
        deleteTransportNodeCollectionWithHttpInfo(transportNodeCollectionId);
    }

    /**
     * Detach transport node profile from compute collection.
     * By deleting transport node collection, we are detaching the transport node profile(TNP) from the compute collection. It has no effect on existing transport nodes. However, new hosts added to the compute collection will no longer be automatically converted to NSX transport node. Detaching TNP from compute collection does not delete TNP. 
     * @param transportNodeCollectionId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteTransportNodeCollectionWithHttpInfo(String transportNodeCollectionId) throws ApiException {
        com.squareup.okhttp.Call call = deleteTransportNodeCollectionValidateBeforeCall(transportNodeCollectionId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Detach transport node profile from compute collection. (asynchronously)
     * By deleting transport node collection, we are detaching the transport node profile(TNP) from the compute collection. It has no effect on existing transport nodes. However, new hosts added to the compute collection will no longer be automatically converted to NSX transport node. Detaching TNP from compute collection does not delete TNP. 
     * @param transportNodeCollectionId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteTransportNodeCollectionAsync(String transportNodeCollectionId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteTransportNodeCollectionValidateBeforeCall(transportNodeCollectionId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getTransportNodeCollection
     * @param transportNodeCollectionId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTransportNodeCollectionCall(String transportNodeCollectionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/transport-node-collections/{transport-node-collection-id}"
            .replaceAll("\\{" + "transport-node-collection-id" + "\\}", apiClient.escapeString(transportNodeCollectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTransportNodeCollectionValidateBeforeCall(String transportNodeCollectionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'transportNodeCollectionId' is set
        if (transportNodeCollectionId == null) {
            throw new ApiException("Missing the required parameter 'transportNodeCollectionId' when calling getTransportNodeCollection(Async)");
        }
        
        com.squareup.okhttp.Call call = getTransportNodeCollectionCall(transportNodeCollectionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Transport Node collection by id
     * Returns transport node collection by id
     * @param transportNodeCollectionId  (required)
     * @return TransportNodeCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TransportNodeCollection getTransportNodeCollection(String transportNodeCollectionId) throws ApiException {
        ApiResponse<TransportNodeCollection> resp = getTransportNodeCollectionWithHttpInfo(transportNodeCollectionId);
        return resp.getData();
    }

    /**
     * Get Transport Node collection by id
     * Returns transport node collection by id
     * @param transportNodeCollectionId  (required)
     * @return ApiResponse&lt;TransportNodeCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TransportNodeCollection> getTransportNodeCollectionWithHttpInfo(String transportNodeCollectionId) throws ApiException {
        com.squareup.okhttp.Call call = getTransportNodeCollectionValidateBeforeCall(transportNodeCollectionId, null, null);
        Type localVarReturnType = new TypeToken<TransportNodeCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Transport Node collection by id (asynchronously)
     * Returns transport node collection by id
     * @param transportNodeCollectionId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTransportNodeCollectionAsync(String transportNodeCollectionId, final ApiCallback<TransportNodeCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTransportNodeCollectionValidateBeforeCall(transportNodeCollectionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TransportNodeCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTransportNodeCollectionState
     * @param transportNodeCollectionId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTransportNodeCollectionStateCall(String transportNodeCollectionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/transport-node-collections/{transport-node-collection-id}/state"
            .replaceAll("\\{" + "transport-node-collection-id" + "\\}", apiClient.escapeString(transportNodeCollectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTransportNodeCollectionStateValidateBeforeCall(String transportNodeCollectionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'transportNodeCollectionId' is set
        if (transportNodeCollectionId == null) {
            throw new ApiException("Missing the required parameter 'transportNodeCollectionId' when calling getTransportNodeCollectionState(Async)");
        }
        
        com.squareup.okhttp.Call call = getTransportNodeCollectionStateCall(transportNodeCollectionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Transport Node collection application state
     * Returns the state of transport node collection based on the states of transport nodes of the hosts which are part of compute collection. 
     * @param transportNodeCollectionId  (required)
     * @return TransportNodeCollectionState
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TransportNodeCollectionState getTransportNodeCollectionState(String transportNodeCollectionId) throws ApiException {
        ApiResponse<TransportNodeCollectionState> resp = getTransportNodeCollectionStateWithHttpInfo(transportNodeCollectionId);
        return resp.getData();
    }

    /**
     * Get Transport Node collection application state
     * Returns the state of transport node collection based on the states of transport nodes of the hosts which are part of compute collection. 
     * @param transportNodeCollectionId  (required)
     * @return ApiResponse&lt;TransportNodeCollectionState&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TransportNodeCollectionState> getTransportNodeCollectionStateWithHttpInfo(String transportNodeCollectionId) throws ApiException {
        com.squareup.okhttp.Call call = getTransportNodeCollectionStateValidateBeforeCall(transportNodeCollectionId, null, null);
        Type localVarReturnType = new TypeToken<TransportNodeCollectionState>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Transport Node collection application state (asynchronously)
     * Returns the state of transport node collection based on the states of transport nodes of the hosts which are part of compute collection. 
     * @param transportNodeCollectionId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTransportNodeCollectionStateAsync(String transportNodeCollectionId, final ApiCallback<TransportNodeCollectionState> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTransportNodeCollectionStateValidateBeforeCall(transportNodeCollectionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TransportNodeCollectionState>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listTransportNodeCollections
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listTransportNodeCollectionsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/transport-node-collections";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listTransportNodeCollectionsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listTransportNodeCollectionsCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List Transport Node collections
     * Returns all Transport Node collections
     * @return TransportNodeCollectionListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TransportNodeCollectionListResult listTransportNodeCollections() throws ApiException {
        ApiResponse<TransportNodeCollectionListResult> resp = listTransportNodeCollectionsWithHttpInfo();
        return resp.getData();
    }

    /**
     * List Transport Node collections
     * Returns all Transport Node collections
     * @return ApiResponse&lt;TransportNodeCollectionListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TransportNodeCollectionListResult> listTransportNodeCollectionsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = listTransportNodeCollectionsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<TransportNodeCollectionListResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List Transport Node collections (asynchronously)
     * Returns all Transport Node collections
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listTransportNodeCollectionsAsync(final ApiCallback<TransportNodeCollectionListResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listTransportNodeCollectionsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TransportNodeCollectionListResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateTransportNodeCollection
     * @param body  (required)
     * @param transportNodeCollectionId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateTransportNodeCollectionCall(TransportNodeCollection body, String transportNodeCollectionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/transport-node-collections/{transport-node-collection-id}"
            .replaceAll("\\{" + "transport-node-collection-id" + "\\}", apiClient.escapeString(transportNodeCollectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateTransportNodeCollectionValidateBeforeCall(TransportNodeCollection body, String transportNodeCollectionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateTransportNodeCollection(Async)");
        }
        // verify the required parameter 'transportNodeCollectionId' is set
        if (transportNodeCollectionId == null) {
            throw new ApiException("Missing the required parameter 'transportNodeCollectionId' when calling updateTransportNodeCollection(Async)");
        }
        
        com.squareup.okhttp.Call call = updateTransportNodeCollectionCall(body, transportNodeCollectionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update Transport Node collection
     * Attach different transport node profile to compute collection by updating transport node collection. 
     * @param body  (required)
     * @param transportNodeCollectionId  (required)
     * @return TransportNodeCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TransportNodeCollection updateTransportNodeCollection(TransportNodeCollection body, String transportNodeCollectionId) throws ApiException {
        ApiResponse<TransportNodeCollection> resp = updateTransportNodeCollectionWithHttpInfo(body, transportNodeCollectionId);
        return resp.getData();
    }

    /**
     * Update Transport Node collection
     * Attach different transport node profile to compute collection by updating transport node collection. 
     * @param body  (required)
     * @param transportNodeCollectionId  (required)
     * @return ApiResponse&lt;TransportNodeCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TransportNodeCollection> updateTransportNodeCollectionWithHttpInfo(TransportNodeCollection body, String transportNodeCollectionId) throws ApiException {
        com.squareup.okhttp.Call call = updateTransportNodeCollectionValidateBeforeCall(body, transportNodeCollectionId, null, null);
        Type localVarReturnType = new TypeToken<TransportNodeCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update Transport Node collection (asynchronously)
     * Attach different transport node profile to compute collection by updating transport node collection. 
     * @param body  (required)
     * @param transportNodeCollectionId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateTransportNodeCollectionAsync(TransportNodeCollection body, String transportNodeCollectionId, final ApiCallback<TransportNodeCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateTransportNodeCollectionValidateBeforeCall(body, transportNodeCollectionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TransportNodeCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
