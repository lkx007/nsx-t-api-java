/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ApiError;
import io.swagger.client.model.BaseServiceInstance;
import io.swagger.client.model.BaseServiceProfile;
import io.swagger.client.model.ConfigurationState;
import io.swagger.client.model.InstanceEndpoint;
import io.swagger.client.model.InstanceEndpointListResult;
import io.swagger.client.model.InstanceRuntimeListResult;
import io.swagger.client.model.ResourceReference;
import io.swagger.client.model.RuntimeInterfaceOperationalStatus;
import io.swagger.client.model.RuntimeInterfaceStatistics;
import io.swagger.client.model.SIExcludeList;
import io.swagger.client.model.SIServiceProfileListResult;
import io.swagger.client.model.ServiceAttachment;
import io.swagger.client.model.ServiceAttachmentListResult;
import io.swagger.client.model.ServiceChain;
import io.swagger.client.model.ServiceChainListResult;
import io.swagger.client.model.ServiceChainMappingListResult;
import io.swagger.client.model.ServiceDefinition;
import io.swagger.client.model.ServiceDeployment;
import io.swagger.client.model.ServiceDeploymentListResult;
import io.swagger.client.model.ServiceDeploymentStatus;
import io.swagger.client.model.ServiceInsertionRule;
import io.swagger.client.model.ServiceInsertionRuleList;
import io.swagger.client.model.ServiceInsertionRuleListResult;
import io.swagger.client.model.ServiceInsertionSection;
import io.swagger.client.model.ServiceInsertionSectionListResult;
import io.swagger.client.model.ServiceInsertionSectionRuleList;
import io.swagger.client.model.ServiceInsertionServiceListResult;
import io.swagger.client.model.ServiceInsertionStatus;
import io.swagger.client.model.ServiceInsertionStatusListResult;
import io.swagger.client.model.ServiceInstanceListResult;
import io.swagger.client.model.ServiceInstanceNSGroups;
import io.swagger.client.model.ServiceInstanceStatus;
import io.swagger.client.model.ServiceManager;
import io.swagger.client.model.ServiceManagerListResult;
import io.swagger.client.model.ServicePathListResult;
import io.swagger.client.model.ServiceProfileNSGroups;
import io.swagger.client.model.SolutionConfig;
import io.swagger.client.model.SolutionConfigListResult;
import io.swagger.client.model.SourceEntityResult;
import io.swagger.client.model.VendorTemplate;
import io.swagger.client.model.VendorTemplateListResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ManagementPlaneApiServicesServiceInsertionApi {
    private ApiClient apiClient;

    public ManagementPlaneApiServicesServiceInsertionApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ManagementPlaneApiServicesServiceInsertionApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addInstanceEndpoint
     * @param body  (required)
     * @param serviceId  (required)
     * @param serviceInstanceId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addInstanceEndpointCall(InstanceEndpoint body, String serviceId, String serviceInstanceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/serviceinsertion/services/{service-id}/service-instances/{service-instance-id}/instance-endpoints"
            .replaceAll("\\{" + "service-id" + "\\}", apiClient.escapeString(serviceId.toString()))
            .replaceAll("\\{" + "service-instance-id" + "\\}", apiClient.escapeString(serviceInstanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addInstanceEndpointValidateBeforeCall(InstanceEndpoint body, String serviceId, String serviceInstanceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addInstanceEndpoint(Async)");
        }
        // verify the required parameter 'serviceId' is set
        if (serviceId == null) {
            throw new ApiException("Missing the required parameter 'serviceId' when calling addInstanceEndpoint(Async)");
        }
        // verify the required parameter 'serviceInstanceId' is set
        if (serviceInstanceId == null) {
            throw new ApiException("Missing the required parameter 'serviceInstanceId' when calling addInstanceEndpoint(Async)");
        }
        
        com.squareup.okhttp.Call call = addInstanceEndpointCall(body, serviceId, serviceInstanceId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add an InstanceEndpoint for a Service Instance
     * Adds a new instance endpoint. It belongs to one service instance and is attached to one service attachment. It represents a redirection target for a Rule. 
     * @param body  (required)
     * @param serviceId  (required)
     * @param serviceInstanceId  (required)
     * @return InstanceEndpoint
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InstanceEndpoint addInstanceEndpoint(InstanceEndpoint body, String serviceId, String serviceInstanceId) throws ApiException {
        ApiResponse<InstanceEndpoint> resp = addInstanceEndpointWithHttpInfo(body, serviceId, serviceInstanceId);
        return resp.getData();
    }

    /**
     * Add an InstanceEndpoint for a Service Instance
     * Adds a new instance endpoint. It belongs to one service instance and is attached to one service attachment. It represents a redirection target for a Rule. 
     * @param body  (required)
     * @param serviceId  (required)
     * @param serviceInstanceId  (required)
     * @return ApiResponse&lt;InstanceEndpoint&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InstanceEndpoint> addInstanceEndpointWithHttpInfo(InstanceEndpoint body, String serviceId, String serviceInstanceId) throws ApiException {
        com.squareup.okhttp.Call call = addInstanceEndpointValidateBeforeCall(body, serviceId, serviceInstanceId, null, null);
        Type localVarReturnType = new TypeToken<InstanceEndpoint>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add an InstanceEndpoint for a Service Instance (asynchronously)
     * Adds a new instance endpoint. It belongs to one service instance and is attached to one service attachment. It represents a redirection target for a Rule. 
     * @param body  (required)
     * @param serviceId  (required)
     * @param serviceInstanceId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addInstanceEndpointAsync(InstanceEndpoint body, String serviceId, String serviceInstanceId, final ApiCallback<InstanceEndpoint> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addInstanceEndpointValidateBeforeCall(body, serviceId, serviceInstanceId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InstanceEndpoint>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addSIServiceProfile
     * @param body  (required)
     * @param serviceId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addSIServiceProfileCall(BaseServiceProfile body, String serviceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/serviceinsertion/services/{service-id}/service-profiles"
            .replaceAll("\\{" + "service-id" + "\\}", apiClient.escapeString(serviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addSIServiceProfileValidateBeforeCall(BaseServiceProfile body, String serviceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addSIServiceProfile(Async)");
        }
        // verify the required parameter 'serviceId' is set
        if (serviceId == null) {
            throw new ApiException("Missing the required parameter 'serviceId' when calling addSIServiceProfile(Async)");
        }
        
        com.squareup.okhttp.Call call = addSIServiceProfileCall(body, serviceId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add ServiceProfile for a given Service.
     * Adds a new service profile. 
     * @param body  (required)
     * @param serviceId  (required)
     * @return BaseServiceProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BaseServiceProfile addSIServiceProfile(BaseServiceProfile body, String serviceId) throws ApiException {
        ApiResponse<BaseServiceProfile> resp = addSIServiceProfileWithHttpInfo(body, serviceId);
        return resp.getData();
    }

    /**
     * Add ServiceProfile for a given Service.
     * Adds a new service profile. 
     * @param body  (required)
     * @param serviceId  (required)
     * @return ApiResponse&lt;BaseServiceProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BaseServiceProfile> addSIServiceProfileWithHttpInfo(BaseServiceProfile body, String serviceId) throws ApiException {
        com.squareup.okhttp.Call call = addSIServiceProfileValidateBeforeCall(body, serviceId, null, null);
        Type localVarReturnType = new TypeToken<BaseServiceProfile>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add ServiceProfile for a given Service. (asynchronously)
     * Adds a new service profile. 
     * @param body  (required)
     * @param serviceId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addSIServiceProfileAsync(BaseServiceProfile body, String serviceId, final ApiCallback<BaseServiceProfile> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addSIServiceProfileValidateBeforeCall(body, serviceId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BaseServiceProfile>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addServiceAttachment
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addServiceAttachmentCall(ServiceAttachment body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/serviceinsertion/service-attachments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addServiceAttachmentValidateBeforeCall(ServiceAttachment body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addServiceAttachment(Async)");
        }
        
        com.squareup.okhttp.Call call = addServiceAttachmentCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add a Service Attachment.
     * Adds a new Service attachment. A service attachment represents a point on NSX entity (Example: Logical Router) to which service instance can be connected through an InstanceEndpoint. 
     * @param body  (required)
     * @return ServiceAttachment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ServiceAttachment addServiceAttachment(ServiceAttachment body) throws ApiException {
        ApiResponse<ServiceAttachment> resp = addServiceAttachmentWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Add a Service Attachment.
     * Adds a new Service attachment. A service attachment represents a point on NSX entity (Example: Logical Router) to which service instance can be connected through an InstanceEndpoint. 
     * @param body  (required)
     * @return ApiResponse&lt;ServiceAttachment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ServiceAttachment> addServiceAttachmentWithHttpInfo(ServiceAttachment body) throws ApiException {
        com.squareup.okhttp.Call call = addServiceAttachmentValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<ServiceAttachment>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add a Service Attachment. (asynchronously)
     * Adds a new Service attachment. A service attachment represents a point on NSX entity (Example: Logical Router) to which service instance can be connected through an InstanceEndpoint. 
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addServiceAttachmentAsync(ServiceAttachment body, final ApiCallback<ServiceAttachment> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addServiceAttachmentValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ServiceAttachment>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addServiceChain
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addServiceChainCall(ServiceChain body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/serviceinsertion/service-chains";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addServiceChainValidateBeforeCall(ServiceChain body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addServiceChain(Async)");
        }
        
        com.squareup.okhttp.Call call = addServiceChainCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add Service Chain
     * Adds a new service chain. Service Chains is can contain profile belonging to same or different Service(s). It represents a redirection target for a Rule. 
     * @param body  (required)
     * @return ServiceChain
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ServiceChain addServiceChain(ServiceChain body) throws ApiException {
        ApiResponse<ServiceChain> resp = addServiceChainWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Add Service Chain
     * Adds a new service chain. Service Chains is can contain profile belonging to same or different Service(s). It represents a redirection target for a Rule. 
     * @param body  (required)
     * @return ApiResponse&lt;ServiceChain&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ServiceChain> addServiceChainWithHttpInfo(ServiceChain body) throws ApiException {
        com.squareup.okhttp.Call call = addServiceChainValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<ServiceChain>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add Service Chain (asynchronously)
     * Adds a new service chain. Service Chains is can contain profile belonging to same or different Service(s). It represents a redirection target for a Rule. 
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addServiceChainAsync(ServiceChain body, final ApiCallback<ServiceChain> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addServiceChainValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ServiceChain>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addServiceInsertionExcludeListMemberAddMember
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addServiceInsertionExcludeListMemberAddMemberCall(ResourceReference body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/serviceinsertion/excludelist?action=add_member";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addServiceInsertionExcludeListMemberAddMemberValidateBeforeCall(ResourceReference body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addServiceInsertionExcludeListMemberAddMember(Async)");
        }
        
        com.squareup.okhttp.Call call = addServiceInsertionExcludeListMemberAddMemberCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add a new member in the exclude list
     * Add a new member in the exclude list
     * @param body  (required)
     * @return ResourceReference
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResourceReference addServiceInsertionExcludeListMemberAddMember(ResourceReference body) throws ApiException {
        ApiResponse<ResourceReference> resp = addServiceInsertionExcludeListMemberAddMemberWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Add a new member in the exclude list
     * Add a new member in the exclude list
     * @param body  (required)
     * @return ApiResponse&lt;ResourceReference&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResourceReference> addServiceInsertionExcludeListMemberAddMemberWithHttpInfo(ResourceReference body) throws ApiException {
        com.squareup.okhttp.Call call = addServiceInsertionExcludeListMemberAddMemberValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<ResourceReference>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add a new member in the exclude list (asynchronously)
     * Add a new member in the exclude list
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addServiceInsertionExcludeListMemberAddMemberAsync(ResourceReference body, final ApiCallback<ResourceReference> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addServiceInsertionExcludeListMemberAddMemberValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResourceReference>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addServiceInsertionRuleInSection
     * @param body  (required)
     * @param sectionId  (required)
     * @param id Identifier of the anchor rule or section. This is a required field in case operation like &#x27;insert_before&#x27; and &#x27;insert_after&#x27;. (optional)
     * @param operation Operation (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addServiceInsertionRuleInSectionCall(ServiceInsertionRule body, String sectionId, String id, String operation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/serviceinsertion/sections/{section-id}/rules"
            .replaceAll("\\{" + "section-id" + "\\}", apiClient.escapeString(sectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (id != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("id", id));
        if (operation != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("operation", operation));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addServiceInsertionRuleInSectionValidateBeforeCall(ServiceInsertionRule body, String sectionId, String id, String operation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addServiceInsertionRuleInSection(Async)");
        }
        // verify the required parameter 'sectionId' is set
        if (sectionId == null) {
            throw new ApiException("Missing the required parameter 'sectionId' when calling addServiceInsertionRuleInSection(Async)");
        }
        
        com.squareup.okhttp.Call call = addServiceInsertionRuleInSectionCall(body, sectionId, id, operation, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add a Single Rule in a Section
     * Adds a new serviceinsertion rule in existing serviceinsertion section. 
     * @param body  (required)
     * @param sectionId  (required)
     * @param id Identifier of the anchor rule or section. This is a required field in case operation like &#x27;insert_before&#x27; and &#x27;insert_after&#x27;. (optional)
     * @param operation Operation (optional)
     * @return ServiceInsertionRule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ServiceInsertionRule addServiceInsertionRuleInSection(ServiceInsertionRule body, String sectionId, String id, String operation) throws ApiException {
        ApiResponse<ServiceInsertionRule> resp = addServiceInsertionRuleInSectionWithHttpInfo(body, sectionId, id, operation);
        return resp.getData();
    }

    /**
     * Add a Single Rule in a Section
     * Adds a new serviceinsertion rule in existing serviceinsertion section. 
     * @param body  (required)
     * @param sectionId  (required)
     * @param id Identifier of the anchor rule or section. This is a required field in case operation like &#x27;insert_before&#x27; and &#x27;insert_after&#x27;. (optional)
     * @param operation Operation (optional)
     * @return ApiResponse&lt;ServiceInsertionRule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ServiceInsertionRule> addServiceInsertionRuleInSectionWithHttpInfo(ServiceInsertionRule body, String sectionId, String id, String operation) throws ApiException {
        com.squareup.okhttp.Call call = addServiceInsertionRuleInSectionValidateBeforeCall(body, sectionId, id, operation, null, null);
        Type localVarReturnType = new TypeToken<ServiceInsertionRule>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add a Single Rule in a Section (asynchronously)
     * Adds a new serviceinsertion rule in existing serviceinsertion section. 
     * @param body  (required)
     * @param sectionId  (required)
     * @param id Identifier of the anchor rule or section. This is a required field in case operation like &#x27;insert_before&#x27; and &#x27;insert_after&#x27;. (optional)
     * @param operation Operation (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addServiceInsertionRuleInSectionAsync(ServiceInsertionRule body, String sectionId, String id, String operation, final ApiCallback<ServiceInsertionRule> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addServiceInsertionRuleInSectionValidateBeforeCall(body, sectionId, id, operation, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ServiceInsertionRule>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addServiceInsertionRulesInSectionCreateMultiple
     * @param body  (required)
     * @param sectionId  (required)
     * @param id Identifier of the anchor rule or section. This is a required field in case operation like &#x27;insert_before&#x27; and &#x27;insert_after&#x27;. (optional)
     * @param operation Operation (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addServiceInsertionRulesInSectionCreateMultipleCall(ServiceInsertionRuleList body, String sectionId, String id, String operation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/serviceinsertion/sections/{section-id}/rules?action=create_multiple"
            .replaceAll("\\{" + "section-id" + "\\}", apiClient.escapeString(sectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (id != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("id", id));
        if (operation != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("operation", operation));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addServiceInsertionRulesInSectionCreateMultipleValidateBeforeCall(ServiceInsertionRuleList body, String sectionId, String id, String operation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addServiceInsertionRulesInSectionCreateMultiple(Async)");
        }
        // verify the required parameter 'sectionId' is set
        if (sectionId == null) {
            throw new ApiException("Missing the required parameter 'sectionId' when calling addServiceInsertionRulesInSectionCreateMultiple(Async)");
        }
        
        com.squareup.okhttp.Call call = addServiceInsertionRulesInSectionCreateMultipleCall(body, sectionId, id, operation, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add Multiple Rules in a Section
     * Create multiple serviceinsertion rules in existing serviceinsertion section bounded by limit of 1000 serviceinsertion rules per section. 
     * @param body  (required)
     * @param sectionId  (required)
     * @param id Identifier of the anchor rule or section. This is a required field in case operation like &#x27;insert_before&#x27; and &#x27;insert_after&#x27;. (optional)
     * @param operation Operation (optional)
     * @return ServiceInsertionRuleList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ServiceInsertionRuleList addServiceInsertionRulesInSectionCreateMultiple(ServiceInsertionRuleList body, String sectionId, String id, String operation) throws ApiException {
        ApiResponse<ServiceInsertionRuleList> resp = addServiceInsertionRulesInSectionCreateMultipleWithHttpInfo(body, sectionId, id, operation);
        return resp.getData();
    }

    /**
     * Add Multiple Rules in a Section
     * Create multiple serviceinsertion rules in existing serviceinsertion section bounded by limit of 1000 serviceinsertion rules per section. 
     * @param body  (required)
     * @param sectionId  (required)
     * @param id Identifier of the anchor rule or section. This is a required field in case operation like &#x27;insert_before&#x27; and &#x27;insert_after&#x27;. (optional)
     * @param operation Operation (optional)
     * @return ApiResponse&lt;ServiceInsertionRuleList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ServiceInsertionRuleList> addServiceInsertionRulesInSectionCreateMultipleWithHttpInfo(ServiceInsertionRuleList body, String sectionId, String id, String operation) throws ApiException {
        com.squareup.okhttp.Call call = addServiceInsertionRulesInSectionCreateMultipleValidateBeforeCall(body, sectionId, id, operation, null, null);
        Type localVarReturnType = new TypeToken<ServiceInsertionRuleList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add Multiple Rules in a Section (asynchronously)
     * Create multiple serviceinsertion rules in existing serviceinsertion section bounded by limit of 1000 serviceinsertion rules per section. 
     * @param body  (required)
     * @param sectionId  (required)
     * @param id Identifier of the anchor rule or section. This is a required field in case operation like &#x27;insert_before&#x27; and &#x27;insert_after&#x27;. (optional)
     * @param operation Operation (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addServiceInsertionRulesInSectionCreateMultipleAsync(ServiceInsertionRuleList body, String sectionId, String id, String operation, final ApiCallback<ServiceInsertionRuleList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addServiceInsertionRulesInSectionCreateMultipleValidateBeforeCall(body, sectionId, id, operation, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ServiceInsertionRuleList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addServiceInsertionSection
     * @param body  (required)
     * @param id Identifier of the anchor rule or section. This is a required field in case operation like &#x27;insert_before&#x27; and &#x27;insert_after&#x27;. (optional)
     * @param operation Operation (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addServiceInsertionSectionCall(ServiceInsertionSection body, String id, String operation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/serviceinsertion/sections";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (id != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("id", id));
        if (operation != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("operation", operation));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addServiceInsertionSectionValidateBeforeCall(ServiceInsertionSection body, String id, String operation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addServiceInsertionSection(Async)");
        }
        
        com.squareup.okhttp.Call call = addServiceInsertionSectionCall(body, id, operation, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create a New Empty Section
     * Creates new empty Service Insertion section in the system. 
     * @param body  (required)
     * @param id Identifier of the anchor rule or section. This is a required field in case operation like &#x27;insert_before&#x27; and &#x27;insert_after&#x27;. (optional)
     * @param operation Operation (optional)
     * @return ServiceInsertionSection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ServiceInsertionSection addServiceInsertionSection(ServiceInsertionSection body, String id, String operation) throws ApiException {
        ApiResponse<ServiceInsertionSection> resp = addServiceInsertionSectionWithHttpInfo(body, id, operation);
        return resp.getData();
    }

    /**
     * Create a New Empty Section
     * Creates new empty Service Insertion section in the system. 
     * @param body  (required)
     * @param id Identifier of the anchor rule or section. This is a required field in case operation like &#x27;insert_before&#x27; and &#x27;insert_after&#x27;. (optional)
     * @param operation Operation (optional)
     * @return ApiResponse&lt;ServiceInsertionSection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ServiceInsertionSection> addServiceInsertionSectionWithHttpInfo(ServiceInsertionSection body, String id, String operation) throws ApiException {
        com.squareup.okhttp.Call call = addServiceInsertionSectionValidateBeforeCall(body, id, operation, null, null);
        Type localVarReturnType = new TypeToken<ServiceInsertionSection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a New Empty Section (asynchronously)
     * Creates new empty Service Insertion section in the system. 
     * @param body  (required)
     * @param id Identifier of the anchor rule or section. This is a required field in case operation like &#x27;insert_before&#x27; and &#x27;insert_after&#x27;. (optional)
     * @param operation Operation (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addServiceInsertionSectionAsync(ServiceInsertionSection body, String id, String operation, final ApiCallback<ServiceInsertionSection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addServiceInsertionSectionValidateBeforeCall(body, id, operation, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ServiceInsertionSection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addServiceInsertionSectionWithRulesCreateWithRules
     * @param body  (required)
     * @param id Identifier of the anchor rule or section. This is a required field in case operation like &#x27;insert_before&#x27; and &#x27;insert_after&#x27;. (optional)
     * @param operation Operation (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addServiceInsertionSectionWithRulesCreateWithRulesCall(ServiceInsertionSectionRuleList body, String id, String operation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/serviceinsertion/sections?action=create_with_rules";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (id != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("id", id));
        if (operation != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("operation", operation));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addServiceInsertionSectionWithRulesCreateWithRulesValidateBeforeCall(ServiceInsertionSectionRuleList body, String id, String operation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addServiceInsertionSectionWithRulesCreateWithRules(Async)");
        }
        
        com.squareup.okhttp.Call call = addServiceInsertionSectionWithRulesCreateWithRulesCall(body, id, operation, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create a Section with Rules
     * Creates a new serviceinsertion section with rules. The limit on the number of rules is defined by maxItems in collection types for ServiceInsertionRule (ServiceInsertionRuleXXXList types). When invoked on a section with a large number of rules, this API is supported only at low rates of invocation (not more than 4-5 times per minute). The typical latency of this API with about 1024 rules is about 4-5 seconds. This API should not be invoked with large payloads at automation speeds. More than 50 rules are not supported.  Instead, to create sections, use: POST /api/v1/serviceinsertion/sections  To create rules, use: POST /api/v1/serviceinsertion/sections/&amp;lt;section-id&amp;gt;/rules 
     * @param body  (required)
     * @param id Identifier of the anchor rule or section. This is a required field in case operation like &#x27;insert_before&#x27; and &#x27;insert_after&#x27;. (optional)
     * @param operation Operation (optional)
     * @return ServiceInsertionSectionRuleList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ServiceInsertionSectionRuleList addServiceInsertionSectionWithRulesCreateWithRules(ServiceInsertionSectionRuleList body, String id, String operation) throws ApiException {
        ApiResponse<ServiceInsertionSectionRuleList> resp = addServiceInsertionSectionWithRulesCreateWithRulesWithHttpInfo(body, id, operation);
        return resp.getData();
    }

    /**
     * Create a Section with Rules
     * Creates a new serviceinsertion section with rules. The limit on the number of rules is defined by maxItems in collection types for ServiceInsertionRule (ServiceInsertionRuleXXXList types). When invoked on a section with a large number of rules, this API is supported only at low rates of invocation (not more than 4-5 times per minute). The typical latency of this API with about 1024 rules is about 4-5 seconds. This API should not be invoked with large payloads at automation speeds. More than 50 rules are not supported.  Instead, to create sections, use: POST /api/v1/serviceinsertion/sections  To create rules, use: POST /api/v1/serviceinsertion/sections/&amp;lt;section-id&amp;gt;/rules 
     * @param body  (required)
     * @param id Identifier of the anchor rule or section. This is a required field in case operation like &#x27;insert_before&#x27; and &#x27;insert_after&#x27;. (optional)
     * @param operation Operation (optional)
     * @return ApiResponse&lt;ServiceInsertionSectionRuleList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ServiceInsertionSectionRuleList> addServiceInsertionSectionWithRulesCreateWithRulesWithHttpInfo(ServiceInsertionSectionRuleList body, String id, String operation) throws ApiException {
        com.squareup.okhttp.Call call = addServiceInsertionSectionWithRulesCreateWithRulesValidateBeforeCall(body, id, operation, null, null);
        Type localVarReturnType = new TypeToken<ServiceInsertionSectionRuleList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a Section with Rules (asynchronously)
     * Creates a new serviceinsertion section with rules. The limit on the number of rules is defined by maxItems in collection types for ServiceInsertionRule (ServiceInsertionRuleXXXList types). When invoked on a section with a large number of rules, this API is supported only at low rates of invocation (not more than 4-5 times per minute). The typical latency of this API with about 1024 rules is about 4-5 seconds. This API should not be invoked with large payloads at automation speeds. More than 50 rules are not supported.  Instead, to create sections, use: POST /api/v1/serviceinsertion/sections  To create rules, use: POST /api/v1/serviceinsertion/sections/&amp;lt;section-id&amp;gt;/rules 
     * @param body  (required)
     * @param id Identifier of the anchor rule or section. This is a required field in case operation like &#x27;insert_before&#x27; and &#x27;insert_after&#x27;. (optional)
     * @param operation Operation (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addServiceInsertionSectionWithRulesCreateWithRulesAsync(ServiceInsertionSectionRuleList body, String id, String operation, final ApiCallback<ServiceInsertionSectionRuleList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addServiceInsertionSectionWithRulesCreateWithRulesValidateBeforeCall(body, id, operation, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ServiceInsertionSectionRuleList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addServiceInsertionService
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addServiceInsertionServiceCall(ServiceDefinition body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/serviceinsertion/services";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addServiceInsertionServiceValidateBeforeCall(ServiceDefinition body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addServiceInsertionService(Async)");
        }
        
        com.squareup.okhttp.Call call = addServiceInsertionServiceCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create a Service-Insertion Service
     * Creates new Service-Insertion Service in the system. 
     * @param body  (required)
     * @return ServiceDefinition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ServiceDefinition addServiceInsertionService(ServiceDefinition body) throws ApiException {
        ApiResponse<ServiceDefinition> resp = addServiceInsertionServiceWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create a Service-Insertion Service
     * Creates new Service-Insertion Service in the system. 
     * @param body  (required)
     * @return ApiResponse&lt;ServiceDefinition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ServiceDefinition> addServiceInsertionServiceWithHttpInfo(ServiceDefinition body) throws ApiException {
        com.squareup.okhttp.Call call = addServiceInsertionServiceValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<ServiceDefinition>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a Service-Insertion Service (asynchronously)
     * Creates new Service-Insertion Service in the system. 
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addServiceInsertionServiceAsync(ServiceDefinition body, final ApiCallback<ServiceDefinition> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addServiceInsertionServiceValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ServiceDefinition>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addServiceInstance
     * @param body  (required)
     * @param serviceId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addServiceInstanceCall(BaseServiceInstance body, String serviceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/serviceinsertion/services/{service-id}/service-instances"
            .replaceAll("\\{" + "service-id" + "\\}", apiClient.escapeString(serviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addServiceInstanceValidateBeforeCall(BaseServiceInstance body, String serviceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addServiceInstance(Async)");
        }
        // verify the required parameter 'serviceId' is set
        if (serviceId == null) {
            throw new ApiException("Missing the required parameter 'serviceId' when calling addServiceInstance(Async)");
        }
        
        com.squareup.okhttp.Call call = addServiceInstanceCall(body, serviceId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add a Service Instance for a specified Service.
     * Adds a new Service-Instance under the specified Service. 
     * @param body  (required)
     * @param serviceId  (required)
     * @return BaseServiceInstance
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BaseServiceInstance addServiceInstance(BaseServiceInstance body, String serviceId) throws ApiException {
        ApiResponse<BaseServiceInstance> resp = addServiceInstanceWithHttpInfo(body, serviceId);
        return resp.getData();
    }

    /**
     * Add a Service Instance for a specified Service.
     * Adds a new Service-Instance under the specified Service. 
     * @param body  (required)
     * @param serviceId  (required)
     * @return ApiResponse&lt;BaseServiceInstance&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BaseServiceInstance> addServiceInstanceWithHttpInfo(BaseServiceInstance body, String serviceId) throws ApiException {
        com.squareup.okhttp.Call call = addServiceInstanceValidateBeforeCall(body, serviceId, null, null);
        Type localVarReturnType = new TypeToken<BaseServiceInstance>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add a Service Instance for a specified Service. (asynchronously)
     * Adds a new Service-Instance under the specified Service. 
     * @param body  (required)
     * @param serviceId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addServiceInstanceAsync(BaseServiceInstance body, String serviceId, final ApiCallback<BaseServiceInstance> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addServiceInstanceValidateBeforeCall(body, serviceId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BaseServiceInstance>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addVendorTemplate
     * @param body  (required)
     * @param serviceId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addVendorTemplateCall(VendorTemplate body, String serviceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/serviceinsertion/services/{service-id}/vendor-templates"
            .replaceAll("\\{" + "service-id" + "\\}", apiClient.escapeString(serviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addVendorTemplateValidateBeforeCall(VendorTemplate body, String serviceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addVendorTemplate(Async)");
        }
        // verify the required parameter 'serviceId' is set
        if (serviceId == null) {
            throw new ApiException("Missing the required parameter 'serviceId' when calling addVendorTemplate(Async)");
        }
        
        com.squareup.okhttp.Call call = addVendorTemplateCall(body, serviceId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add Vendor Template for a given Service
     * Adds a new vendor template. Vendor templates are service level objects, registered to be used in Service Profiles. 
     * @param body  (required)
     * @param serviceId  (required)
     * @return VendorTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VendorTemplate addVendorTemplate(VendorTemplate body, String serviceId) throws ApiException {
        ApiResponse<VendorTemplate> resp = addVendorTemplateWithHttpInfo(body, serviceId);
        return resp.getData();
    }

    /**
     * Add Vendor Template for a given Service
     * Adds a new vendor template. Vendor templates are service level objects, registered to be used in Service Profiles. 
     * @param body  (required)
     * @param serviceId  (required)
     * @return ApiResponse&lt;VendorTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VendorTemplate> addVendorTemplateWithHttpInfo(VendorTemplate body, String serviceId) throws ApiException {
        com.squareup.okhttp.Call call = addVendorTemplateValidateBeforeCall(body, serviceId, null, null);
        Type localVarReturnType = new TypeToken<VendorTemplate>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add Vendor Template for a given Service (asynchronously)
     * Adds a new vendor template. Vendor templates are service level objects, registered to be used in Service Profiles. 
     * @param body  (required)
     * @param serviceId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addVendorTemplateAsync(VendorTemplate body, String serviceId, final ApiCallback<VendorTemplate> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addVendorTemplateValidateBeforeCall(body, serviceId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VendorTemplate>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createSolutionConfig
     * @param body  (required)
     * @param serviceId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createSolutionConfigCall(SolutionConfig body, String serviceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/serviceinsertion/services/{service-id}/solution-configs"
            .replaceAll("\\{" + "service-id" + "\\}", apiClient.escapeString(serviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createSolutionConfigValidateBeforeCall(SolutionConfig body, String serviceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createSolutionConfig(Async)");
        }
        // verify the required parameter 'serviceId' is set
        if (serviceId == null) {
            throw new ApiException("Missing the required parameter 'serviceId' when calling createSolutionConfig(Async)");
        }
        
        com.squareup.okhttp.Call call = createSolutionConfigCall(body, serviceId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add Solution Config for a given Service
     * Adds a solution config. Solution Config are service level objects, required for configuring the NXGI partner Service after deployment. 
     * @param body  (required)
     * @param serviceId  (required)
     * @return SolutionConfig
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SolutionConfig createSolutionConfig(SolutionConfig body, String serviceId) throws ApiException {
        ApiResponse<SolutionConfig> resp = createSolutionConfigWithHttpInfo(body, serviceId);
        return resp.getData();
    }

    /**
     * Add Solution Config for a given Service
     * Adds a solution config. Solution Config are service level objects, required for configuring the NXGI partner Service after deployment. 
     * @param body  (required)
     * @param serviceId  (required)
     * @return ApiResponse&lt;SolutionConfig&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SolutionConfig> createSolutionConfigWithHttpInfo(SolutionConfig body, String serviceId) throws ApiException {
        com.squareup.okhttp.Call call = createSolutionConfigValidateBeforeCall(body, serviceId, null, null);
        Type localVarReturnType = new TypeToken<SolutionConfig>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add Solution Config for a given Service (asynchronously)
     * Adds a solution config. Solution Config are service level objects, required for configuring the NXGI partner Service after deployment. 
     * @param body  (required)
     * @param serviceId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createSolutionConfigAsync(SolutionConfig body, String serviceId, final ApiCallback<SolutionConfig> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createSolutionConfigValidateBeforeCall(body, serviceId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SolutionConfig>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteInstanceEndpoint
     * @param serviceId  (required)
     * @param serviceInstanceId  (required)
     * @param instanceEndpointId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteInstanceEndpointCall(String serviceId, String serviceInstanceId, String instanceEndpointId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/serviceinsertion/services/{service-id}/service-instances/{service-instance-id}/instance-endpoints/{instance-endpoint-id}"
            .replaceAll("\\{" + "service-id" + "\\}", apiClient.escapeString(serviceId.toString()))
            .replaceAll("\\{" + "service-instance-id" + "\\}", apiClient.escapeString(serviceInstanceId.toString()))
            .replaceAll("\\{" + "instance-endpoint-id" + "\\}", apiClient.escapeString(instanceEndpointId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteInstanceEndpointValidateBeforeCall(String serviceId, String serviceInstanceId, String instanceEndpointId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'serviceId' is set
        if (serviceId == null) {
            throw new ApiException("Missing the required parameter 'serviceId' when calling deleteInstanceEndpoint(Async)");
        }
        // verify the required parameter 'serviceInstanceId' is set
        if (serviceInstanceId == null) {
            throw new ApiException("Missing the required parameter 'serviceInstanceId' when calling deleteInstanceEndpoint(Async)");
        }
        // verify the required parameter 'instanceEndpointId' is set
        if (instanceEndpointId == null) {
            throw new ApiException("Missing the required parameter 'instanceEndpointId' when calling deleteInstanceEndpoint(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteInstanceEndpointCall(serviceId, serviceInstanceId, instanceEndpointId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete a particular InstanceEndpoint.
     * Delete instance endpoint information for a given instace endpoint. Please make sure to delete all the Service Insertion Rules, which refer to this Endpoint as &#x27;redirect_tos&#x27; target. 
     * @param serviceId  (required)
     * @param serviceInstanceId  (required)
     * @param instanceEndpointId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteInstanceEndpoint(String serviceId, String serviceInstanceId, String instanceEndpointId) throws ApiException {
        deleteInstanceEndpointWithHttpInfo(serviceId, serviceInstanceId, instanceEndpointId);
    }

    /**
     * Delete a particular InstanceEndpoint.
     * Delete instance endpoint information for a given instace endpoint. Please make sure to delete all the Service Insertion Rules, which refer to this Endpoint as &#x27;redirect_tos&#x27; target. 
     * @param serviceId  (required)
     * @param serviceInstanceId  (required)
     * @param instanceEndpointId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteInstanceEndpointWithHttpInfo(String serviceId, String serviceInstanceId, String instanceEndpointId) throws ApiException {
        com.squareup.okhttp.Call call = deleteInstanceEndpointValidateBeforeCall(serviceId, serviceInstanceId, instanceEndpointId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a particular InstanceEndpoint. (asynchronously)
     * Delete instance endpoint information for a given instace endpoint. Please make sure to delete all the Service Insertion Rules, which refer to this Endpoint as &#x27;redirect_tos&#x27; target. 
     * @param serviceId  (required)
     * @param serviceInstanceId  (required)
     * @param instanceEndpointId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteInstanceEndpointAsync(String serviceId, String serviceInstanceId, String instanceEndpointId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteInstanceEndpointValidateBeforeCall(serviceId, serviceInstanceId, instanceEndpointId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteSIServiceProfile
     * @param serviceId  (required)
     * @param serviceProfileId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteSIServiceProfileCall(String serviceId, String serviceProfileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/serviceinsertion/services/{service-id}/service-profiles/{service-profile-id}"
            .replaceAll("\\{" + "service-id" + "\\}", apiClient.escapeString(serviceId.toString()))
            .replaceAll("\\{" + "service-profile-id" + "\\}", apiClient.escapeString(serviceProfileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteSIServiceProfileValidateBeforeCall(String serviceId, String serviceProfileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'serviceId' is set
        if (serviceId == null) {
            throw new ApiException("Missing the required parameter 'serviceId' when calling deleteSIServiceProfile(Async)");
        }
        // verify the required parameter 'serviceProfileId' is set
        if (serviceProfileId == null) {
            throw new ApiException("Missing the required parameter 'serviceProfileId' when calling deleteSIServiceProfile(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteSIServiceProfileCall(serviceId, serviceProfileId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete a particular ServiceProfile.
     * Delete service profile for a given service. 
     * @param serviceId  (required)
     * @param serviceProfileId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteSIServiceProfile(String serviceId, String serviceProfileId) throws ApiException {
        deleteSIServiceProfileWithHttpInfo(serviceId, serviceProfileId);
    }

    /**
     * Delete a particular ServiceProfile.
     * Delete service profile for a given service. 
     * @param serviceId  (required)
     * @param serviceProfileId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteSIServiceProfileWithHttpInfo(String serviceId, String serviceProfileId) throws ApiException {
        com.squareup.okhttp.Call call = deleteSIServiceProfileValidateBeforeCall(serviceId, serviceProfileId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a particular ServiceProfile. (asynchronously)
     * Delete service profile for a given service. 
     * @param serviceId  (required)
     * @param serviceProfileId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteSIServiceProfileAsync(String serviceId, String serviceProfileId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteSIServiceProfileValidateBeforeCall(serviceId, serviceProfileId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteServiceAttachment
     * @param serviceAttachmentId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteServiceAttachmentCall(String serviceAttachmentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/serviceinsertion/service-attachments/{service-attachment-id}"
            .replaceAll("\\{" + "service-attachment-id" + "\\}", apiClient.escapeString(serviceAttachmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteServiceAttachmentValidateBeforeCall(String serviceAttachmentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'serviceAttachmentId' is set
        if (serviceAttachmentId == null) {
            throw new ApiException("Missing the required parameter 'serviceAttachmentId' when calling deleteServiceAttachment(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteServiceAttachmentCall(serviceAttachmentId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete an existing service attachment
     * Delete existing service attachment from system. Before deletion, please make sure that, no instance endpoints are connected to this attachment. In turn no appliance should be connected to this attachment. 
     * @param serviceAttachmentId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteServiceAttachment(String serviceAttachmentId) throws ApiException {
        deleteServiceAttachmentWithHttpInfo(serviceAttachmentId);
    }

    /**
     * Delete an existing service attachment
     * Delete existing service attachment from system. Before deletion, please make sure that, no instance endpoints are connected to this attachment. In turn no appliance should be connected to this attachment. 
     * @param serviceAttachmentId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteServiceAttachmentWithHttpInfo(String serviceAttachmentId) throws ApiException {
        com.squareup.okhttp.Call call = deleteServiceAttachmentValidateBeforeCall(serviceAttachmentId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete an existing service attachment (asynchronously)
     * Delete existing service attachment from system. Before deletion, please make sure that, no instance endpoints are connected to this attachment. In turn no appliance should be connected to this attachment. 
     * @param serviceAttachmentId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteServiceAttachmentAsync(String serviceAttachmentId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteServiceAttachmentValidateBeforeCall(serviceAttachmentId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteServiceChain
     * @param serviceChainId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteServiceChainCall(String serviceChainId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/serviceinsertion/service-chains/{service-chain-id}"
            .replaceAll("\\{" + "service-chain-id" + "\\}", apiClient.escapeString(serviceChainId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteServiceChainValidateBeforeCall(String serviceChainId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'serviceChainId' is set
        if (serviceChainId == null) {
            throw new ApiException("Missing the required parameter 'serviceChainId' when calling deleteServiceChain(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteServiceChainCall(serviceChainId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete a Service Chain.
     * Delete a particular service chain. 
     * @param serviceChainId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteServiceChain(String serviceChainId) throws ApiException {
        deleteServiceChainWithHttpInfo(serviceChainId);
    }

    /**
     * Delete a Service Chain.
     * Delete a particular service chain. 
     * @param serviceChainId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteServiceChainWithHttpInfo(String serviceChainId) throws ApiException {
        com.squareup.okhttp.Call call = deleteServiceChainValidateBeforeCall(serviceChainId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a Service Chain. (asynchronously)
     * Delete a particular service chain. 
     * @param serviceChainId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteServiceChainAsync(String serviceChainId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteServiceChainValidateBeforeCall(serviceChainId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteServiceDeployment
     * @param serviceId  (required)
     * @param serviceDeploymentId  (required)
     * @param force Force delete the resource even if it is being used somewhere  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteServiceDeploymentCall(String serviceId, String serviceDeploymentId, Boolean force, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/serviceinsertion/services/{service-id}/service-deployments/{service-deployment-id}"
            .replaceAll("\\{" + "service-id" + "\\}", apiClient.escapeString(serviceId.toString()))
            .replaceAll("\\{" + "service-deployment-id" + "\\}", apiClient.escapeString(serviceDeploymentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (force != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("force", force));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteServiceDeploymentValidateBeforeCall(String serviceId, String serviceDeploymentId, Boolean force, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'serviceId' is set
        if (serviceId == null) {
            throw new ApiException("Missing the required parameter 'serviceId' when calling deleteServiceDeployment(Async)");
        }
        // verify the required parameter 'serviceDeploymentId' is set
        if (serviceDeploymentId == null) {
            throw new ApiException("Missing the required parameter 'serviceDeploymentId' when calling deleteServiceDeployment(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteServiceDeploymentCall(serviceId, serviceDeploymentId, force, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Remove service deployment
     * Remove the service deployment. Will remove all the Service VMs that were created as part of this deployment. User can send optional force delete option which will force remove the deployment, but should be used only when the regular delete is not working. Regular delete will ensure proper cleanup of Service VMs and related objects. Directly calling this API without trying regular undeploy will result in unexpected results, and orphan objects. 
     * @param serviceId  (required)
     * @param serviceDeploymentId  (required)
     * @param force Force delete the resource even if it is being used somewhere  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteServiceDeployment(String serviceId, String serviceDeploymentId, Boolean force) throws ApiException {
        deleteServiceDeploymentWithHttpInfo(serviceId, serviceDeploymentId, force);
    }

    /**
     * Remove service deployment
     * Remove the service deployment. Will remove all the Service VMs that were created as part of this deployment. User can send optional force delete option which will force remove the deployment, but should be used only when the regular delete is not working. Regular delete will ensure proper cleanup of Service VMs and related objects. Directly calling this API without trying regular undeploy will result in unexpected results, and orphan objects. 
     * @param serviceId  (required)
     * @param serviceDeploymentId  (required)
     * @param force Force delete the resource even if it is being used somewhere  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteServiceDeploymentWithHttpInfo(String serviceId, String serviceDeploymentId, Boolean force) throws ApiException {
        com.squareup.okhttp.Call call = deleteServiceDeploymentValidateBeforeCall(serviceId, serviceDeploymentId, force, null, null);
        return apiClient.execute(call);
    }

    /**
     * Remove service deployment (asynchronously)
     * Remove the service deployment. Will remove all the Service VMs that were created as part of this deployment. User can send optional force delete option which will force remove the deployment, but should be used only when the regular delete is not working. Regular delete will ensure proper cleanup of Service VMs and related objects. Directly calling this API without trying regular undeploy will result in unexpected results, and orphan objects. 
     * @param serviceId  (required)
     * @param serviceDeploymentId  (required)
     * @param force Force delete the resource even if it is being used somewhere  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteServiceDeploymentAsync(String serviceId, String serviceDeploymentId, Boolean force, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteServiceDeploymentValidateBeforeCall(serviceId, serviceDeploymentId, force, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteServiceInsertionRule
     * @param sectionId  (required)
     * @param ruleId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteServiceInsertionRuleCall(String sectionId, String ruleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/serviceinsertion/sections/{section-id}/rules/{rule-id}"
            .replaceAll("\\{" + "section-id" + "\\}", apiClient.escapeString(sectionId.toString()))
            .replaceAll("\\{" + "rule-id" + "\\}", apiClient.escapeString(ruleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteServiceInsertionRuleValidateBeforeCall(String sectionId, String ruleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'sectionId' is set
        if (sectionId == null) {
            throw new ApiException("Missing the required parameter 'sectionId' when calling deleteServiceInsertionRule(Async)");
        }
        // verify the required parameter 'ruleId' is set
        if (ruleId == null) {
            throw new ApiException("Missing the required parameter 'ruleId' when calling deleteServiceInsertionRule(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteServiceInsertionRuleCall(sectionId, ruleId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete an Existing Rule
     * Delete existing serviceinsertion rule in a serviceinsertion section. 
     * @param sectionId  (required)
     * @param ruleId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteServiceInsertionRule(String sectionId, String ruleId) throws ApiException {
        deleteServiceInsertionRuleWithHttpInfo(sectionId, ruleId);
    }

    /**
     * Delete an Existing Rule
     * Delete existing serviceinsertion rule in a serviceinsertion section. 
     * @param sectionId  (required)
     * @param ruleId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteServiceInsertionRuleWithHttpInfo(String sectionId, String ruleId) throws ApiException {
        com.squareup.okhttp.Call call = deleteServiceInsertionRuleValidateBeforeCall(sectionId, ruleId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete an Existing Rule (asynchronously)
     * Delete existing serviceinsertion rule in a serviceinsertion section. 
     * @param sectionId  (required)
     * @param ruleId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteServiceInsertionRuleAsync(String sectionId, String ruleId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteServiceInsertionRuleValidateBeforeCall(sectionId, ruleId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteServiceInsertionSection
     * @param sectionId  (required)
     * @param cascade Flag to cascade delete of this object to all it&#x27;s child objects. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteServiceInsertionSectionCall(String sectionId, Boolean cascade, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/serviceinsertion/sections/{section-id}"
            .replaceAll("\\{" + "section-id" + "\\}", apiClient.escapeString(sectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (cascade != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cascade", cascade));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteServiceInsertionSectionValidateBeforeCall(String sectionId, Boolean cascade, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'sectionId' is set
        if (sectionId == null) {
            throw new ApiException("Missing the required parameter 'sectionId' when calling deleteServiceInsertionSection(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteServiceInsertionSectionCall(sectionId, cascade, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete an Existing Section and Its Associated Rules
     * Removes serviceinsertion section from the system. ServiceInsertion section with rules can only be deleted by passing \&quot;cascade&#x3D;true\&quot; parameter. 
     * @param sectionId  (required)
     * @param cascade Flag to cascade delete of this object to all it&#x27;s child objects. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteServiceInsertionSection(String sectionId, Boolean cascade) throws ApiException {
        deleteServiceInsertionSectionWithHttpInfo(sectionId, cascade);
    }

    /**
     * Delete an Existing Section and Its Associated Rules
     * Removes serviceinsertion section from the system. ServiceInsertion section with rules can only be deleted by passing \&quot;cascade&#x3D;true\&quot; parameter. 
     * @param sectionId  (required)
     * @param cascade Flag to cascade delete of this object to all it&#x27;s child objects. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteServiceInsertionSectionWithHttpInfo(String sectionId, Boolean cascade) throws ApiException {
        com.squareup.okhttp.Call call = deleteServiceInsertionSectionValidateBeforeCall(sectionId, cascade, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete an Existing Section and Its Associated Rules (asynchronously)
     * Removes serviceinsertion section from the system. ServiceInsertion section with rules can only be deleted by passing \&quot;cascade&#x3D;true\&quot; parameter. 
     * @param sectionId  (required)
     * @param cascade Flag to cascade delete of this object to all it&#x27;s child objects. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteServiceInsertionSectionAsync(String sectionId, Boolean cascade, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteServiceInsertionSectionValidateBeforeCall(sectionId, cascade, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteServiceInsertionService
     * @param serviceId  (required)
     * @param cascade Flag to cascade delete all the child objects, associated with it. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteServiceInsertionServiceCall(String serviceId, Boolean cascade, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/serviceinsertion/services/{service-id}"
            .replaceAll("\\{" + "service-id" + "\\}", apiClient.escapeString(serviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (cascade != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cascade", cascade));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteServiceInsertionServiceValidateBeforeCall(String serviceId, Boolean cascade, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'serviceId' is set
        if (serviceId == null) {
            throw new ApiException("Missing the required parameter 'serviceId' when calling deleteServiceInsertionService(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteServiceInsertionServiceCall(serviceId, cascade, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete an existing Service and the Service-Instance associated with it.
     * Removes Service-Insertion Service from the system. A Service with Service-Instances can only be deleted by passing \&quot;cascade&#x3D;true\&quot; parameter. 
     * @param serviceId  (required)
     * @param cascade Flag to cascade delete all the child objects, associated with it. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteServiceInsertionService(String serviceId, Boolean cascade) throws ApiException {
        deleteServiceInsertionServiceWithHttpInfo(serviceId, cascade);
    }

    /**
     * Delete an existing Service and the Service-Instance associated with it.
     * Removes Service-Insertion Service from the system. A Service with Service-Instances can only be deleted by passing \&quot;cascade&#x3D;true\&quot; parameter. 
     * @param serviceId  (required)
     * @param cascade Flag to cascade delete all the child objects, associated with it. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteServiceInsertionServiceWithHttpInfo(String serviceId, Boolean cascade) throws ApiException {
        com.squareup.okhttp.Call call = deleteServiceInsertionServiceValidateBeforeCall(serviceId, cascade, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete an existing Service and the Service-Instance associated with it. (asynchronously)
     * Removes Service-Insertion Service from the system. A Service with Service-Instances can only be deleted by passing \&quot;cascade&#x3D;true\&quot; parameter. 
     * @param serviceId  (required)
     * @param cascade Flag to cascade delete all the child objects, associated with it. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteServiceInsertionServiceAsync(String serviceId, Boolean cascade, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteServiceInsertionServiceValidateBeforeCall(serviceId, cascade, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteServiceInstance
     * @param serviceId  (required)
     * @param serviceInstanceId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteServiceInstanceCall(String serviceId, String serviceInstanceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/serviceinsertion/services/{service-id}/service-instances/{service-instance-id}"
            .replaceAll("\\{" + "service-id" + "\\}", apiClient.escapeString(serviceId.toString()))
            .replaceAll("\\{" + "service-instance-id" + "\\}", apiClient.escapeString(serviceInstanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteServiceInstanceValidateBeforeCall(String serviceId, String serviceInstanceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'serviceId' is set
        if (serviceId == null) {
            throw new ApiException("Missing the required parameter 'serviceId' when calling deleteServiceInstance(Async)");
        }
        // verify the required parameter 'serviceInstanceId' is set
        if (serviceInstanceId == null) {
            throw new ApiException("Missing the required parameter 'serviceInstanceId' when calling deleteServiceInstance(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteServiceInstanceCall(serviceId, serviceInstanceId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete an existing Service-Instance
     * Delete existing Service-Instance for a given Service-Insertion Service. 
     * @param serviceId  (required)
     * @param serviceInstanceId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteServiceInstance(String serviceId, String serviceInstanceId) throws ApiException {
        deleteServiceInstanceWithHttpInfo(serviceId, serviceInstanceId);
    }

    /**
     * Delete an existing Service-Instance
     * Delete existing Service-Instance for a given Service-Insertion Service. 
     * @param serviceId  (required)
     * @param serviceInstanceId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteServiceInstanceWithHttpInfo(String serviceId, String serviceInstanceId) throws ApiException {
        com.squareup.okhttp.Call call = deleteServiceInstanceValidateBeforeCall(serviceId, serviceInstanceId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete an existing Service-Instance (asynchronously)
     * Delete existing Service-Instance for a given Service-Insertion Service. 
     * @param serviceId  (required)
     * @param serviceInstanceId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteServiceInstanceAsync(String serviceId, String serviceInstanceId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteServiceInstanceValidateBeforeCall(serviceId, serviceInstanceId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteServiceManager
     * @param serviceManagerId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteServiceManagerCall(String serviceManagerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/serviceinsertion/service-managers/{service-manager-id}"
            .replaceAll("\\{" + "service-manager-id" + "\\}", apiClient.escapeString(serviceManagerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteServiceManagerValidateBeforeCall(String serviceManagerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'serviceManagerId' is set
        if (serviceManagerId == null) {
            throw new ApiException("Missing the required parameter 'serviceManagerId' when calling deleteServiceManager(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteServiceManagerCall(serviceManagerId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete service manager
     * Delete service-manager which is registered with NSX with basic details like name, username, password.
     * @param serviceManagerId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteServiceManager(String serviceManagerId) throws ApiException {
        deleteServiceManagerWithHttpInfo(serviceManagerId);
    }

    /**
     * Delete service manager
     * Delete service-manager which is registered with NSX with basic details like name, username, password.
     * @param serviceManagerId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteServiceManagerWithHttpInfo(String serviceManagerId) throws ApiException {
        com.squareup.okhttp.Call call = deleteServiceManagerValidateBeforeCall(serviceManagerId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete service manager (asynchronously)
     * Delete service-manager which is registered with NSX with basic details like name, username, password.
     * @param serviceManagerId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteServiceManagerAsync(String serviceManagerId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteServiceManagerValidateBeforeCall(serviceManagerId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteServiceVMsDelete
     * @param serviceId  (required)
     * @param serviceInstanceId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteServiceVMsDeleteCall(String serviceId, String serviceInstanceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/serviceinsertion/services/{service-id}/service-instances/{service-instance-id}/instance-runtimes?action=delete"
            .replaceAll("\\{" + "service-id" + "\\}", apiClient.escapeString(serviceId.toString()))
            .replaceAll("\\{" + "service-instance-id" + "\\}", apiClient.escapeString(serviceInstanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteServiceVMsDeleteValidateBeforeCall(String serviceId, String serviceInstanceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'serviceId' is set
        if (serviceId == null) {
            throw new ApiException("Missing the required parameter 'serviceId' when calling deleteServiceVMsDelete(Async)");
        }
        // verify the required parameter 'serviceInstanceId' is set
        if (serviceInstanceId == null) {
            throw new ApiException("Missing the required parameter 'serviceInstanceId' when calling deleteServiceVMsDelete(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteServiceVMsDeleteCall(serviceId, serviceInstanceId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Remove service VMs either as standalone or HA
     * Undeploy one service VM as standalone or two service VMs as HA. Associated deployment information and instance runtime will also be deleted once service VMs have been un-deployed successfully. 
     * @param serviceId  (required)
     * @param serviceInstanceId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteServiceVMsDelete(String serviceId, String serviceInstanceId) throws ApiException {
        deleteServiceVMsDeleteWithHttpInfo(serviceId, serviceInstanceId);
    }

    /**
     * Remove service VMs either as standalone or HA
     * Undeploy one service VM as standalone or two service VMs as HA. Associated deployment information and instance runtime will also be deleted once service VMs have been un-deployed successfully. 
     * @param serviceId  (required)
     * @param serviceInstanceId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteServiceVMsDeleteWithHttpInfo(String serviceId, String serviceInstanceId) throws ApiException {
        com.squareup.okhttp.Call call = deleteServiceVMsDeleteValidateBeforeCall(serviceId, serviceInstanceId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Remove service VMs either as standalone or HA (asynchronously)
     * Undeploy one service VM as standalone or two service VMs as HA. Associated deployment information and instance runtime will also be deleted once service VMs have been un-deployed successfully. 
     * @param serviceId  (required)
     * @param serviceInstanceId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteServiceVMsDeleteAsync(String serviceId, String serviceInstanceId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteServiceVMsDeleteValidateBeforeCall(serviceId, serviceInstanceId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteSolutionConfig
     * @param serviceId  (required)
     * @param solutionConfigId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteSolutionConfigCall(String serviceId, String solutionConfigId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/serviceinsertion/services/{service-id}/solution-configs/{solution-config-id}"
            .replaceAll("\\{" + "service-id" + "\\}", apiClient.escapeString(serviceId.toString()))
            .replaceAll("\\{" + "solution-config-id" + "\\}", apiClient.escapeString(solutionConfigId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteSolutionConfigValidateBeforeCall(String serviceId, String solutionConfigId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'serviceId' is set
        if (serviceId == null) {
            throw new ApiException("Missing the required parameter 'serviceId' when calling deleteSolutionConfig(Async)");
        }
        // verify the required parameter 'solutionConfigId' is set
        if (solutionConfigId == null) {
            throw new ApiException("Missing the required parameter 'solutionConfigId' when calling deleteSolutionConfig(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteSolutionConfigCall(serviceId, solutionConfigId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Deletes solution config information.
     * Deletes solution config information for a given service. 
     * @param serviceId  (required)
     * @param solutionConfigId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteSolutionConfig(String serviceId, String solutionConfigId) throws ApiException {
        deleteSolutionConfigWithHttpInfo(serviceId, solutionConfigId);
    }

    /**
     * Deletes solution config information.
     * Deletes solution config information for a given service. 
     * @param serviceId  (required)
     * @param solutionConfigId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteSolutionConfigWithHttpInfo(String serviceId, String solutionConfigId) throws ApiException {
        com.squareup.okhttp.Call call = deleteSolutionConfigValidateBeforeCall(serviceId, solutionConfigId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Deletes solution config information. (asynchronously)
     * Deletes solution config information for a given service. 
     * @param serviceId  (required)
     * @param solutionConfigId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteSolutionConfigAsync(String serviceId, String solutionConfigId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteSolutionConfigValidateBeforeCall(serviceId, solutionConfigId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteVendorTemplate
     * @param serviceId  (required)
     * @param vendorTemplateId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteVendorTemplateCall(String serviceId, String vendorTemplateId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/serviceinsertion/services/{service-id}/vendor-templates/{vendor-template-id}"
            .replaceAll("\\{" + "service-id" + "\\}", apiClient.escapeString(serviceId.toString()))
            .replaceAll("\\{" + "vendor-template-id" + "\\}", apiClient.escapeString(vendorTemplateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteVendorTemplateValidateBeforeCall(String serviceId, String vendorTemplateId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'serviceId' is set
        if (serviceId == null) {
            throw new ApiException("Missing the required parameter 'serviceId' when calling deleteVendorTemplate(Async)");
        }
        // verify the required parameter 'vendorTemplateId' is set
        if (vendorTemplateId == null) {
            throw new ApiException("Missing the required parameter 'vendorTemplateId' when calling deleteVendorTemplate(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteVendorTemplateCall(serviceId, vendorTemplateId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete a particular vendor tempalte.
     * Delete vendor template information for a given service. Please make sure to delete all the Service Profile(s), which refer to this vendor tempalte before deleting the template itself. 
     * @param serviceId  (required)
     * @param vendorTemplateId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteVendorTemplate(String serviceId, String vendorTemplateId) throws ApiException {
        deleteVendorTemplateWithHttpInfo(serviceId, vendorTemplateId);
    }

    /**
     * Delete a particular vendor tempalte.
     * Delete vendor template information for a given service. Please make sure to delete all the Service Profile(s), which refer to this vendor tempalte before deleting the template itself. 
     * @param serviceId  (required)
     * @param vendorTemplateId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteVendorTemplateWithHttpInfo(String serviceId, String vendorTemplateId) throws ApiException {
        com.squareup.okhttp.Call call = deleteVendorTemplateValidateBeforeCall(serviceId, vendorTemplateId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a particular vendor tempalte. (asynchronously)
     * Delete vendor template information for a given service. Please make sure to delete all the Service Profile(s), which refer to this vendor tempalte before deleting the template itself. 
     * @param serviceId  (required)
     * @param vendorTemplateId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteVendorTemplateAsync(String serviceId, String vendorTemplateId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteVendorTemplateValidateBeforeCall(serviceId, vendorTemplateId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deployService
     * @param body  (required)
     * @param serviceId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deployServiceCall(ServiceDeployment body, String serviceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/serviceinsertion/services/{service-id}/service-deployments"
            .replaceAll("\\{" + "service-id" + "\\}", apiClient.escapeString(serviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deployServiceValidateBeforeCall(ServiceDeployment body, String serviceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling deployService(Async)");
        }
        // verify the required parameter 'serviceId' is set
        if (serviceId == null) {
            throw new ApiException("Missing the required parameter 'serviceId' when calling deployService(Async)");
        }
        
        com.squareup.okhttp.Call call = deployServiceCall(body, serviceId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Deploys a particular service
     * This will deploy a particular service on a given cluster / host. Internally multiple service instance can be created during the deployment. If there are no issues in the parameters, the call returns immediately, and the service VMs will be deployed asynchronously. To get the overall status of the deployment or to get the status of individual service vm, please use the deployment status APIs. 
     * @param body  (required)
     * @param serviceId  (required)
     * @return ServiceDeployment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ServiceDeployment deployService(ServiceDeployment body, String serviceId) throws ApiException {
        ApiResponse<ServiceDeployment> resp = deployServiceWithHttpInfo(body, serviceId);
        return resp.getData();
    }

    /**
     * Deploys a particular service
     * This will deploy a particular service on a given cluster / host. Internally multiple service instance can be created during the deployment. If there are no issues in the parameters, the call returns immediately, and the service VMs will be deployed asynchronously. To get the overall status of the deployment or to get the status of individual service vm, please use the deployment status APIs. 
     * @param body  (required)
     * @param serviceId  (required)
     * @return ApiResponse&lt;ServiceDeployment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ServiceDeployment> deployServiceWithHttpInfo(ServiceDeployment body, String serviceId) throws ApiException {
        com.squareup.okhttp.Call call = deployServiceValidateBeforeCall(body, serviceId, null, null);
        Type localVarReturnType = new TypeToken<ServiceDeployment>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Deploys a particular service (asynchronously)
     * This will deploy a particular service on a given cluster / host. Internally multiple service instance can be created during the deployment. If there are no issues in the parameters, the call returns immediately, and the service VMs will be deployed asynchronously. To get the overall status of the deployment or to get the status of individual service vm, please use the deployment status APIs. 
     * @param body  (required)
     * @param serviceId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deployServiceAsync(ServiceDeployment body, String serviceId, final ApiCallback<ServiceDeployment> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deployServiceValidateBeforeCall(body, serviceId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ServiceDeployment>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deployServiceVMsDeploy
     * @param serviceId  (required)
     * @param serviceInstanceId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deployServiceVMsDeployCall(String serviceId, String serviceInstanceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/serviceinsertion/services/{service-id}/service-instances/{service-instance-id}/instance-runtimes?action=deploy"
            .replaceAll("\\{" + "service-id" + "\\}", apiClient.escapeString(serviceId.toString()))
            .replaceAll("\\{" + "service-instance-id" + "\\}", apiClient.escapeString(serviceInstanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deployServiceVMsDeployValidateBeforeCall(String serviceId, String serviceInstanceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'serviceId' is set
        if (serviceId == null) {
            throw new ApiException("Missing the required parameter 'serviceId' when calling deployServiceVMsDeploy(Async)");
        }
        // verify the required parameter 'serviceInstanceId' is set
        if (serviceInstanceId == null) {
            throw new ApiException("Missing the required parameter 'serviceInstanceId' when calling deployServiceVMsDeploy(Async)");
        }
        
        com.squareup.okhttp.Call call = deployServiceVMsDeployCall(serviceId, serviceInstanceId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Deploy and set up service VMs either as standalone or HA
     * Deploys one service VM as standalone, or two service VMs as HA where one VM is active and another one is standby.  During the deployment of service VMs, service will be set up based on deployment events using callbacks. 
     * @param serviceId  (required)
     * @param serviceInstanceId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deployServiceVMsDeploy(String serviceId, String serviceInstanceId) throws ApiException {
        deployServiceVMsDeployWithHttpInfo(serviceId, serviceInstanceId);
    }

    /**
     * Deploy and set up service VMs either as standalone or HA
     * Deploys one service VM as standalone, or two service VMs as HA where one VM is active and another one is standby.  During the deployment of service VMs, service will be set up based on deployment events using callbacks. 
     * @param serviceId  (required)
     * @param serviceInstanceId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deployServiceVMsDeployWithHttpInfo(String serviceId, String serviceInstanceId) throws ApiException {
        com.squareup.okhttp.Call call = deployServiceVMsDeployValidateBeforeCall(serviceId, serviceInstanceId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Deploy and set up service VMs either as standalone or HA (asynchronously)
     * Deploys one service VM as standalone, or two service VMs as HA where one VM is active and another one is standby.  During the deployment of service VMs, service will be set up based on deployment events using callbacks. 
     * @param serviceId  (required)
     * @param serviceInstanceId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deployServiceVMsDeployAsync(String serviceId, String serviceInstanceId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deployServiceVMsDeployValidateBeforeCall(serviceId, serviceInstanceId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getInstanceEndpoint
     * @param serviceId  (required)
     * @param serviceInstanceId  (required)
     * @param instanceEndpointId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getInstanceEndpointCall(String serviceId, String serviceInstanceId, String instanceEndpointId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/serviceinsertion/services/{service-id}/service-instances/{service-instance-id}/instance-endpoints/{instance-endpoint-id}"
            .replaceAll("\\{" + "service-id" + "\\}", apiClient.escapeString(serviceId.toString()))
            .replaceAll("\\{" + "service-instance-id" + "\\}", apiClient.escapeString(serviceInstanceId.toString()))
            .replaceAll("\\{" + "instance-endpoint-id" + "\\}", apiClient.escapeString(instanceEndpointId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getInstanceEndpointValidateBeforeCall(String serviceId, String serviceInstanceId, String instanceEndpointId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'serviceId' is set
        if (serviceId == null) {
            throw new ApiException("Missing the required parameter 'serviceId' when calling getInstanceEndpoint(Async)");
        }
        // verify the required parameter 'serviceInstanceId' is set
        if (serviceInstanceId == null) {
            throw new ApiException("Missing the required parameter 'serviceInstanceId' when calling getInstanceEndpoint(Async)");
        }
        // verify the required parameter 'instanceEndpointId' is set
        if (instanceEndpointId == null) {
            throw new ApiException("Missing the required parameter 'instanceEndpointId' when calling getInstanceEndpoint(Async)");
        }
        
        com.squareup.okhttp.Call call = getInstanceEndpointCall(serviceId, serviceInstanceId, instanceEndpointId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get a particular instance endpoint for a service instance.
     * Returns detailed Endpoint information for a given InstanceEndpoint. 
     * @param serviceId  (required)
     * @param serviceInstanceId  (required)
     * @param instanceEndpointId  (required)
     * @return InstanceEndpoint
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InstanceEndpoint getInstanceEndpoint(String serviceId, String serviceInstanceId, String instanceEndpointId) throws ApiException {
        ApiResponse<InstanceEndpoint> resp = getInstanceEndpointWithHttpInfo(serviceId, serviceInstanceId, instanceEndpointId);
        return resp.getData();
    }

    /**
     * Get a particular instance endpoint for a service instance.
     * Returns detailed Endpoint information for a given InstanceEndpoint. 
     * @param serviceId  (required)
     * @param serviceInstanceId  (required)
     * @param instanceEndpointId  (required)
     * @return ApiResponse&lt;InstanceEndpoint&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InstanceEndpoint> getInstanceEndpointWithHttpInfo(String serviceId, String serviceInstanceId, String instanceEndpointId) throws ApiException {
        com.squareup.okhttp.Call call = getInstanceEndpointValidateBeforeCall(serviceId, serviceInstanceId, instanceEndpointId, null, null);
        Type localVarReturnType = new TypeToken<InstanceEndpoint>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a particular instance endpoint for a service instance. (asynchronously)
     * Returns detailed Endpoint information for a given InstanceEndpoint. 
     * @param serviceId  (required)
     * @param serviceInstanceId  (required)
     * @param instanceEndpointId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getInstanceEndpointAsync(String serviceId, String serviceInstanceId, String instanceEndpointId, final ApiCallback<InstanceEndpoint> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getInstanceEndpointValidateBeforeCall(serviceId, serviceInstanceId, instanceEndpointId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InstanceEndpoint>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getRuntimeInterfaceOperationalStatus
     * @param serviceId  (required)
     * @param serviceInstanceId  (required)
     * @param instanceRuntimeId  (required)
     * @param interfaceIndex  (required)
     * @param source Data source type. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getRuntimeInterfaceOperationalStatusCall(String serviceId, String serviceInstanceId, String instanceRuntimeId, String interfaceIndex, String source, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/serviceinsertion/services/{service-id}/service-instances/{service-instance-id}/instance-runtimes/{instance-runtime-id}/interfaces/{interface_index}/status"
            .replaceAll("\\{" + "service-id" + "\\}", apiClient.escapeString(serviceId.toString()))
            .replaceAll("\\{" + "service-instance-id" + "\\}", apiClient.escapeString(serviceInstanceId.toString()))
            .replaceAll("\\{" + "instance-runtime-id" + "\\}", apiClient.escapeString(instanceRuntimeId.toString()))
            .replaceAll("\\{" + "interface_index" + "\\}", apiClient.escapeString(interfaceIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (source != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("source", source));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getRuntimeInterfaceOperationalStatusValidateBeforeCall(String serviceId, String serviceInstanceId, String instanceRuntimeId, String interfaceIndex, String source, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'serviceId' is set
        if (serviceId == null) {
            throw new ApiException("Missing the required parameter 'serviceId' when calling getRuntimeInterfaceOperationalStatus(Async)");
        }
        // verify the required parameter 'serviceInstanceId' is set
        if (serviceInstanceId == null) {
            throw new ApiException("Missing the required parameter 'serviceInstanceId' when calling getRuntimeInterfaceOperationalStatus(Async)");
        }
        // verify the required parameter 'instanceRuntimeId' is set
        if (instanceRuntimeId == null) {
            throw new ApiException("Missing the required parameter 'instanceRuntimeId' when calling getRuntimeInterfaceOperationalStatus(Async)");
        }
        // verify the required parameter 'interfaceIndex' is set
        if (interfaceIndex == null) {
            throw new ApiException("Missing the required parameter 'interfaceIndex' when calling getRuntimeInterfaceOperationalStatus(Async)");
        }
        
        com.squareup.okhttp.Call call = getRuntimeInterfaceOperationalStatusCall(serviceId, serviceInstanceId, instanceRuntimeId, interfaceIndex, source, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get operational status for an interface
     * Returns operational status of a specified interface
     * @param serviceId  (required)
     * @param serviceInstanceId  (required)
     * @param instanceRuntimeId  (required)
     * @param interfaceIndex  (required)
     * @param source Data source type. (optional)
     * @return RuntimeInterfaceOperationalStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RuntimeInterfaceOperationalStatus getRuntimeInterfaceOperationalStatus(String serviceId, String serviceInstanceId, String instanceRuntimeId, String interfaceIndex, String source) throws ApiException {
        ApiResponse<RuntimeInterfaceOperationalStatus> resp = getRuntimeInterfaceOperationalStatusWithHttpInfo(serviceId, serviceInstanceId, instanceRuntimeId, interfaceIndex, source);
        return resp.getData();
    }

    /**
     * Get operational status for an interface
     * Returns operational status of a specified interface
     * @param serviceId  (required)
     * @param serviceInstanceId  (required)
     * @param instanceRuntimeId  (required)
     * @param interfaceIndex  (required)
     * @param source Data source type. (optional)
     * @return ApiResponse&lt;RuntimeInterfaceOperationalStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RuntimeInterfaceOperationalStatus> getRuntimeInterfaceOperationalStatusWithHttpInfo(String serviceId, String serviceInstanceId, String instanceRuntimeId, String interfaceIndex, String source) throws ApiException {
        com.squareup.okhttp.Call call = getRuntimeInterfaceOperationalStatusValidateBeforeCall(serviceId, serviceInstanceId, instanceRuntimeId, interfaceIndex, source, null, null);
        Type localVarReturnType = new TypeToken<RuntimeInterfaceOperationalStatus>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get operational status for an interface (asynchronously)
     * Returns operational status of a specified interface
     * @param serviceId  (required)
     * @param serviceInstanceId  (required)
     * @param instanceRuntimeId  (required)
     * @param interfaceIndex  (required)
     * @param source Data source type. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getRuntimeInterfaceOperationalStatusAsync(String serviceId, String serviceInstanceId, String instanceRuntimeId, String interfaceIndex, String source, final ApiCallback<RuntimeInterfaceOperationalStatus> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getRuntimeInterfaceOperationalStatusValidateBeforeCall(serviceId, serviceInstanceId, instanceRuntimeId, interfaceIndex, source, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RuntimeInterfaceOperationalStatus>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getRuntimeInterfaceStatistics
     * @param serviceId  (required)
     * @param serviceInstanceId  (required)
     * @param instanceRuntimeId  (required)
     * @param interfaceIndex  (required)
     * @param source Data source type. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getRuntimeInterfaceStatisticsCall(String serviceId, String serviceInstanceId, String instanceRuntimeId, String interfaceIndex, String source, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/serviceinsertion/services/{service-id}/service-instances/{service-instance-id}/instance-runtimes/{instance-runtime-id}/interfaces/{interface_index}/statistics"
            .replaceAll("\\{" + "service-id" + "\\}", apiClient.escapeString(serviceId.toString()))
            .replaceAll("\\{" + "service-instance-id" + "\\}", apiClient.escapeString(serviceInstanceId.toString()))
            .replaceAll("\\{" + "instance-runtime-id" + "\\}", apiClient.escapeString(instanceRuntimeId.toString()))
            .replaceAll("\\{" + "interface_index" + "\\}", apiClient.escapeString(interfaceIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (source != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("source", source));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getRuntimeInterfaceStatisticsValidateBeforeCall(String serviceId, String serviceInstanceId, String instanceRuntimeId, String interfaceIndex, String source, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'serviceId' is set
        if (serviceId == null) {
            throw new ApiException("Missing the required parameter 'serviceId' when calling getRuntimeInterfaceStatistics(Async)");
        }
        // verify the required parameter 'serviceInstanceId' is set
        if (serviceInstanceId == null) {
            throw new ApiException("Missing the required parameter 'serviceInstanceId' when calling getRuntimeInterfaceStatistics(Async)");
        }
        // verify the required parameter 'instanceRuntimeId' is set
        if (instanceRuntimeId == null) {
            throw new ApiException("Missing the required parameter 'instanceRuntimeId' when calling getRuntimeInterfaceStatistics(Async)");
        }
        // verify the required parameter 'interfaceIndex' is set
        if (interfaceIndex == null) {
            throw new ApiException("Missing the required parameter 'interfaceIndex' when calling getRuntimeInterfaceStatistics(Async)");
        }
        
        com.squareup.okhttp.Call call = getRuntimeInterfaceStatisticsCall(serviceId, serviceInstanceId, instanceRuntimeId, interfaceIndex, source, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get statistics for a given interface identified by the interface index
     * Returns statistics of a specified interface via associated logical port. If the logical port is attached to a logical router port, query parameter \&quot;source&#x3D;realtime\&quot; is not supported. 
     * @param serviceId  (required)
     * @param serviceInstanceId  (required)
     * @param instanceRuntimeId  (required)
     * @param interfaceIndex  (required)
     * @param source Data source type. (optional)
     * @return RuntimeInterfaceStatistics
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RuntimeInterfaceStatistics getRuntimeInterfaceStatistics(String serviceId, String serviceInstanceId, String instanceRuntimeId, String interfaceIndex, String source) throws ApiException {
        ApiResponse<RuntimeInterfaceStatistics> resp = getRuntimeInterfaceStatisticsWithHttpInfo(serviceId, serviceInstanceId, instanceRuntimeId, interfaceIndex, source);
        return resp.getData();
    }

    /**
     * Get statistics for a given interface identified by the interface index
     * Returns statistics of a specified interface via associated logical port. If the logical port is attached to a logical router port, query parameter \&quot;source&#x3D;realtime\&quot; is not supported. 
     * @param serviceId  (required)
     * @param serviceInstanceId  (required)
     * @param instanceRuntimeId  (required)
     * @param interfaceIndex  (required)
     * @param source Data source type. (optional)
     * @return ApiResponse&lt;RuntimeInterfaceStatistics&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RuntimeInterfaceStatistics> getRuntimeInterfaceStatisticsWithHttpInfo(String serviceId, String serviceInstanceId, String instanceRuntimeId, String interfaceIndex, String source) throws ApiException {
        com.squareup.okhttp.Call call = getRuntimeInterfaceStatisticsValidateBeforeCall(serviceId, serviceInstanceId, instanceRuntimeId, interfaceIndex, source, null, null);
        Type localVarReturnType = new TypeToken<RuntimeInterfaceStatistics>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get statistics for a given interface identified by the interface index (asynchronously)
     * Returns statistics of a specified interface via associated logical port. If the logical port is attached to a logical router port, query parameter \&quot;source&#x3D;realtime\&quot; is not supported. 
     * @param serviceId  (required)
     * @param serviceInstanceId  (required)
     * @param instanceRuntimeId  (required)
     * @param interfaceIndex  (required)
     * @param source Data source type. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getRuntimeInterfaceStatisticsAsync(String serviceId, String serviceInstanceId, String instanceRuntimeId, String interfaceIndex, String source, final ApiCallback<RuntimeInterfaceStatistics> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getRuntimeInterfaceStatisticsValidateBeforeCall(serviceId, serviceInstanceId, instanceRuntimeId, interfaceIndex, source, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RuntimeInterfaceStatistics>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSIServiceProfile
     * @param serviceId  (required)
     * @param serviceProfileId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSIServiceProfileCall(String serviceId, String serviceProfileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/serviceinsertion/services/{service-id}/service-profiles/{service-profile-id}"
            .replaceAll("\\{" + "service-id" + "\\}", apiClient.escapeString(serviceId.toString()))
            .replaceAll("\\{" + "service-profile-id" + "\\}", apiClient.escapeString(serviceProfileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSIServiceProfileValidateBeforeCall(String serviceId, String serviceProfileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'serviceId' is set
        if (serviceId == null) {
            throw new ApiException("Missing the required parameter 'serviceId' when calling getSIServiceProfile(Async)");
        }
        // verify the required parameter 'serviceProfileId' is set
        if (serviceProfileId == null) {
            throw new ApiException("Missing the required parameter 'serviceProfileId' when calling getSIServiceProfile(Async)");
        }
        
        com.squareup.okhttp.Call call = getSIServiceProfileCall(serviceId, serviceProfileId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get a particular ServiceProfile for a Service.
     * Returns detailed service profile information for a given Service. 
     * @param serviceId  (required)
     * @param serviceProfileId  (required)
     * @return BaseServiceProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BaseServiceProfile getSIServiceProfile(String serviceId, String serviceProfileId) throws ApiException {
        ApiResponse<BaseServiceProfile> resp = getSIServiceProfileWithHttpInfo(serviceId, serviceProfileId);
        return resp.getData();
    }

    /**
     * Get a particular ServiceProfile for a Service.
     * Returns detailed service profile information for a given Service. 
     * @param serviceId  (required)
     * @param serviceProfileId  (required)
     * @return ApiResponse&lt;BaseServiceProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BaseServiceProfile> getSIServiceProfileWithHttpInfo(String serviceId, String serviceProfileId) throws ApiException {
        com.squareup.okhttp.Call call = getSIServiceProfileValidateBeforeCall(serviceId, serviceProfileId, null, null);
        Type localVarReturnType = new TypeToken<BaseServiceProfile>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a particular ServiceProfile for a Service. (asynchronously)
     * Returns detailed service profile information for a given Service. 
     * @param serviceId  (required)
     * @param serviceProfileId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSIServiceProfileAsync(String serviceId, String serviceProfileId, final ApiCallback<BaseServiceProfile> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSIServiceProfileValidateBeforeCall(serviceId, serviceProfileId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BaseServiceProfile>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getServiceAttachment
     * @param serviceAttachmentId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getServiceAttachmentCall(String serviceAttachmentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/serviceinsertion/service-attachments/{service-attachment-id}"
            .replaceAll("\\{" + "service-attachment-id" + "\\}", apiClient.escapeString(serviceAttachmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getServiceAttachmentValidateBeforeCall(String serviceAttachmentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'serviceAttachmentId' is set
        if (serviceAttachmentId == null) {
            throw new ApiException("Missing the required parameter 'serviceAttachmentId' when calling getServiceAttachment(Async)");
        }
        
        com.squareup.okhttp.Call call = getServiceAttachmentCall(serviceAttachmentId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get a particular service attachment.
     * Returns detailed Attachment information for a given service attachment. 
     * @param serviceAttachmentId  (required)
     * @return ServiceAttachment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ServiceAttachment getServiceAttachment(String serviceAttachmentId) throws ApiException {
        ApiResponse<ServiceAttachment> resp = getServiceAttachmentWithHttpInfo(serviceAttachmentId);
        return resp.getData();
    }

    /**
     * Get a particular service attachment.
     * Returns detailed Attachment information for a given service attachment. 
     * @param serviceAttachmentId  (required)
     * @return ApiResponse&lt;ServiceAttachment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ServiceAttachment> getServiceAttachmentWithHttpInfo(String serviceAttachmentId) throws ApiException {
        com.squareup.okhttp.Call call = getServiceAttachmentValidateBeforeCall(serviceAttachmentId, null, null);
        Type localVarReturnType = new TypeToken<ServiceAttachment>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a particular service attachment. (asynchronously)
     * Returns detailed Attachment information for a given service attachment. 
     * @param serviceAttachmentId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getServiceAttachmentAsync(String serviceAttachmentId, final ApiCallback<ServiceAttachment> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getServiceAttachmentValidateBeforeCall(serviceAttachmentId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ServiceAttachment>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getServiceChain
     * @param serviceChainId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getServiceChainCall(String serviceChainId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/serviceinsertion/service-chains/{service-chain-id}"
            .replaceAll("\\{" + "service-chain-id" + "\\}", apiClient.escapeString(serviceChainId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getServiceChainValidateBeforeCall(String serviceChainId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'serviceChainId' is set
        if (serviceChainId == null) {
            throw new ApiException("Missing the required parameter 'serviceChainId' when calling getServiceChain(Async)");
        }
        
        com.squareup.okhttp.Call call = getServiceChainCall(serviceChainId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get a particular service chain.
     * Returns detailed service chain information. 
     * @param serviceChainId  (required)
     * @return ServiceChain
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ServiceChain getServiceChain(String serviceChainId) throws ApiException {
        ApiResponse<ServiceChain> resp = getServiceChainWithHttpInfo(serviceChainId);
        return resp.getData();
    }

    /**
     * Get a particular service chain.
     * Returns detailed service chain information. 
     * @param serviceChainId  (required)
     * @return ApiResponse&lt;ServiceChain&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ServiceChain> getServiceChainWithHttpInfo(String serviceChainId) throws ApiException {
        com.squareup.okhttp.Call call = getServiceChainValidateBeforeCall(serviceChainId, null, null);
        Type localVarReturnType = new TypeToken<ServiceChain>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a particular service chain. (asynchronously)
     * Returns detailed service chain information. 
     * @param serviceChainId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getServiceChainAsync(String serviceChainId, final ApiCallback<ServiceChain> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getServiceChainValidateBeforeCall(serviceChainId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ServiceChain>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getServiceDeployment
     * @param serviceId  (required)
     * @param serviceDeploymentId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getServiceDeploymentCall(String serviceId, String serviceDeploymentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/serviceinsertion/services/{service-id}/service-deployments/{service-deployment-id}"
            .replaceAll("\\{" + "service-id" + "\\}", apiClient.escapeString(serviceId.toString()))
            .replaceAll("\\{" + "service-deployment-id" + "\\}", apiClient.escapeString(serviceDeploymentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getServiceDeploymentValidateBeforeCall(String serviceId, String serviceDeploymentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'serviceId' is set
        if (serviceId == null) {
            throw new ApiException("Missing the required parameter 'serviceId' when calling getServiceDeployment(Async)");
        }
        // verify the required parameter 'serviceDeploymentId' is set
        if (serviceDeploymentId == null) {
            throw new ApiException("Missing the required parameter 'serviceDeploymentId' when calling getServiceDeployment(Async)");
        }
        
        com.squareup.okhttp.Call call = getServiceDeploymentCall(serviceId, serviceDeploymentId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get a particular service deployment.
     * Returns detail of service deployment. 
     * @param serviceId  (required)
     * @param serviceDeploymentId  (required)
     * @return ServiceDeployment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ServiceDeployment getServiceDeployment(String serviceId, String serviceDeploymentId) throws ApiException {
        ApiResponse<ServiceDeployment> resp = getServiceDeploymentWithHttpInfo(serviceId, serviceDeploymentId);
        return resp.getData();
    }

    /**
     * Get a particular service deployment.
     * Returns detail of service deployment. 
     * @param serviceId  (required)
     * @param serviceDeploymentId  (required)
     * @return ApiResponse&lt;ServiceDeployment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ServiceDeployment> getServiceDeploymentWithHttpInfo(String serviceId, String serviceDeploymentId) throws ApiException {
        com.squareup.okhttp.Call call = getServiceDeploymentValidateBeforeCall(serviceId, serviceDeploymentId, null, null);
        Type localVarReturnType = new TypeToken<ServiceDeployment>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a particular service deployment. (asynchronously)
     * Returns detail of service deployment. 
     * @param serviceId  (required)
     * @param serviceDeploymentId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getServiceDeploymentAsync(String serviceId, String serviceDeploymentId, final ApiCallback<ServiceDeployment> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getServiceDeploymentValidateBeforeCall(serviceId, serviceDeploymentId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ServiceDeployment>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getServiceDeploymentState
     * @param serviceId  (required)
     * @param serviceDeploymentId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getServiceDeploymentStateCall(String serviceId, String serviceDeploymentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/serviceinsertion/services/{service-id}/service-deployments/{service-deployment-id}/state"
            .replaceAll("\\{" + "service-id" + "\\}", apiClient.escapeString(serviceId.toString()))
            .replaceAll("\\{" + "service-deployment-id" + "\\}", apiClient.escapeString(serviceDeploymentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getServiceDeploymentStateValidateBeforeCall(String serviceId, String serviceDeploymentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'serviceId' is set
        if (serviceId == null) {
            throw new ApiException("Missing the required parameter 'serviceId' when calling getServiceDeploymentState(Async)");
        }
        // verify the required parameter 'serviceDeploymentId' is set
        if (serviceDeploymentId == null) {
            throw new ApiException("Missing the required parameter 'serviceDeploymentId' when calling getServiceDeploymentState(Async)");
        }
        
        com.squareup.okhttp.Call call = getServiceDeploymentStateCall(serviceId, serviceDeploymentId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Service-Deployment state for Service.
     * Returns configuration state of deployed partner service using service insertion framework. 
     * @param serviceId  (required)
     * @param serviceDeploymentId  (required)
     * @return ConfigurationState
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConfigurationState getServiceDeploymentState(String serviceId, String serviceDeploymentId) throws ApiException {
        ApiResponse<ConfigurationState> resp = getServiceDeploymentStateWithHttpInfo(serviceId, serviceDeploymentId);
        return resp.getData();
    }

    /**
     * Get Service-Deployment state for Service.
     * Returns configuration state of deployed partner service using service insertion framework. 
     * @param serviceId  (required)
     * @param serviceDeploymentId  (required)
     * @return ApiResponse&lt;ConfigurationState&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConfigurationState> getServiceDeploymentStateWithHttpInfo(String serviceId, String serviceDeploymentId) throws ApiException {
        com.squareup.okhttp.Call call = getServiceDeploymentStateValidateBeforeCall(serviceId, serviceDeploymentId, null, null);
        Type localVarReturnType = new TypeToken<ConfigurationState>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Service-Deployment state for Service. (asynchronously)
     * Returns configuration state of deployed partner service using service insertion framework. 
     * @param serviceId  (required)
     * @param serviceDeploymentId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getServiceDeploymentStateAsync(String serviceId, String serviceDeploymentId, final ApiCallback<ConfigurationState> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getServiceDeploymentStateValidateBeforeCall(serviceId, serviceDeploymentId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConfigurationState>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getServiceDeploymentStatus
     * @param serviceId  (required)
     * @param serviceDeploymentId  (required)
     * @param source Data source type. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getServiceDeploymentStatusCall(String serviceId, String serviceDeploymentId, String source, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/serviceinsertion/services/{service-id}/service-deployments/{service-deployment-id}/status"
            .replaceAll("\\{" + "service-id" + "\\}", apiClient.escapeString(serviceId.toString()))
            .replaceAll("\\{" + "service-deployment-id" + "\\}", apiClient.escapeString(serviceDeploymentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (source != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("source", source));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getServiceDeploymentStatusValidateBeforeCall(String serviceId, String serviceDeploymentId, String source, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'serviceId' is set
        if (serviceId == null) {
            throw new ApiException("Missing the required parameter 'serviceId' when calling getServiceDeploymentStatus(Async)");
        }
        // verify the required parameter 'serviceDeploymentId' is set
        if (serviceDeploymentId == null) {
            throw new ApiException("Missing the required parameter 'serviceDeploymentId' when calling getServiceDeploymentStatus(Async)");
        }
        
        com.squareup.okhttp.Call call = getServiceDeploymentStatusCall(serviceId, serviceDeploymentId, source, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get a particular service deployment status.
     * Returns current status of the deployment of partner service. Available only for EPP Services. By default this API would return cached status. Caching happens every 3 minutes. For realtime status, query parameter \&quot;source&#x3D;realtime\&quot; needs to be passed. 
     * @param serviceId  (required)
     * @param serviceDeploymentId  (required)
     * @param source Data source type. (optional)
     * @return ServiceDeploymentStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ServiceDeploymentStatus getServiceDeploymentStatus(String serviceId, String serviceDeploymentId, String source) throws ApiException {
        ApiResponse<ServiceDeploymentStatus> resp = getServiceDeploymentStatusWithHttpInfo(serviceId, serviceDeploymentId, source);
        return resp.getData();
    }

    /**
     * Get a particular service deployment status.
     * Returns current status of the deployment of partner service. Available only for EPP Services. By default this API would return cached status. Caching happens every 3 minutes. For realtime status, query parameter \&quot;source&#x3D;realtime\&quot; needs to be passed. 
     * @param serviceId  (required)
     * @param serviceDeploymentId  (required)
     * @param source Data source type. (optional)
     * @return ApiResponse&lt;ServiceDeploymentStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ServiceDeploymentStatus> getServiceDeploymentStatusWithHttpInfo(String serviceId, String serviceDeploymentId, String source) throws ApiException {
        com.squareup.okhttp.Call call = getServiceDeploymentStatusValidateBeforeCall(serviceId, serviceDeploymentId, source, null, null);
        Type localVarReturnType = new TypeToken<ServiceDeploymentStatus>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a particular service deployment status. (asynchronously)
     * Returns current status of the deployment of partner service. Available only for EPP Services. By default this API would return cached status. Caching happens every 3 minutes. For realtime status, query parameter \&quot;source&#x3D;realtime\&quot; needs to be passed. 
     * @param serviceId  (required)
     * @param serviceDeploymentId  (required)
     * @param source Data source type. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getServiceDeploymentStatusAsync(String serviceId, String serviceDeploymentId, String source, final ApiCallback<ServiceDeploymentStatus> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getServiceDeploymentStatusValidateBeforeCall(serviceId, serviceDeploymentId, source, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ServiceDeploymentStatus>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getServiceDeployments
     * @param serviceId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getServiceDeploymentsCall(String serviceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/serviceinsertion/services/{service-id}/service-deployments"
            .replaceAll("\\{" + "service-id" + "\\}", apiClient.escapeString(serviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getServiceDeploymentsValidateBeforeCall(String serviceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'serviceId' is set
        if (serviceId == null) {
            throw new ApiException("Missing the required parameter 'serviceId' when calling getServiceDeployments(Async)");
        }
        
        com.squareup.okhttp.Call call = getServiceDeploymentsCall(serviceId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get all service deployments for the given service id
     * Returns the list of deployments for the given service 
     * @param serviceId  (required)
     * @return ServiceDeploymentListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ServiceDeploymentListResult getServiceDeployments(String serviceId) throws ApiException {
        ApiResponse<ServiceDeploymentListResult> resp = getServiceDeploymentsWithHttpInfo(serviceId);
        return resp.getData();
    }

    /**
     * Get all service deployments for the given service id
     * Returns the list of deployments for the given service 
     * @param serviceId  (required)
     * @return ApiResponse&lt;ServiceDeploymentListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ServiceDeploymentListResult> getServiceDeploymentsWithHttpInfo(String serviceId) throws ApiException {
        com.squareup.okhttp.Call call = getServiceDeploymentsValidateBeforeCall(serviceId, null, null);
        Type localVarReturnType = new TypeToken<ServiceDeploymentListResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all service deployments for the given service id (asynchronously)
     * Returns the list of deployments for the given service 
     * @param serviceId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getServiceDeploymentsAsync(String serviceId, final ApiCallback<ServiceDeploymentListResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getServiceDeploymentsValidateBeforeCall(serviceId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ServiceDeploymentListResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getServiceInsertionExcludeList
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getServiceInsertionExcludeListCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/serviceinsertion/excludelist";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getServiceInsertionExcludeListValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getServiceInsertionExcludeListCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get list of members in exclude list
     * Get list of members in exclude list
     * @return SIExcludeList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SIExcludeList getServiceInsertionExcludeList() throws ApiException {
        ApiResponse<SIExcludeList> resp = getServiceInsertionExcludeListWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get list of members in exclude list
     * Get list of members in exclude list
     * @return ApiResponse&lt;SIExcludeList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SIExcludeList> getServiceInsertionExcludeListWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getServiceInsertionExcludeListValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<SIExcludeList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get list of members in exclude list (asynchronously)
     * Get list of members in exclude list
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getServiceInsertionExcludeListAsync(final ApiCallback<SIExcludeList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getServiceInsertionExcludeListValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SIExcludeList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getServiceInsertionRule
     * @param sectionId  (required)
     * @param ruleId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getServiceInsertionRuleCall(String sectionId, String ruleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/serviceinsertion/sections/{section-id}/rules/{rule-id}"
            .replaceAll("\\{" + "section-id" + "\\}", apiClient.escapeString(sectionId.toString()))
            .replaceAll("\\{" + "rule-id" + "\\}", apiClient.escapeString(ruleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getServiceInsertionRuleValidateBeforeCall(String sectionId, String ruleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'sectionId' is set
        if (sectionId == null) {
            throw new ApiException("Missing the required parameter 'sectionId' when calling getServiceInsertionRule(Async)");
        }
        // verify the required parameter 'ruleId' is set
        if (ruleId == null) {
            throw new ApiException("Missing the required parameter 'ruleId' when calling getServiceInsertionRule(Async)");
        }
        
        com.squareup.okhttp.Call call = getServiceInsertionRuleCall(sectionId, ruleId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read an Existing Rule
     * Return existing serviceinsertion rule information in a serviceinsertion section. 
     * @param sectionId  (required)
     * @param ruleId  (required)
     * @return ServiceInsertionRule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ServiceInsertionRule getServiceInsertionRule(String sectionId, String ruleId) throws ApiException {
        ApiResponse<ServiceInsertionRule> resp = getServiceInsertionRuleWithHttpInfo(sectionId, ruleId);
        return resp.getData();
    }

    /**
     * Read an Existing Rule
     * Return existing serviceinsertion rule information in a serviceinsertion section. 
     * @param sectionId  (required)
     * @param ruleId  (required)
     * @return ApiResponse&lt;ServiceInsertionRule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ServiceInsertionRule> getServiceInsertionRuleWithHttpInfo(String sectionId, String ruleId) throws ApiException {
        com.squareup.okhttp.Call call = getServiceInsertionRuleValidateBeforeCall(sectionId, ruleId, null, null);
        Type localVarReturnType = new TypeToken<ServiceInsertionRule>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read an Existing Rule (asynchronously)
     * Return existing serviceinsertion rule information in a serviceinsertion section. 
     * @param sectionId  (required)
     * @param ruleId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getServiceInsertionRuleAsync(String sectionId, String ruleId, final ApiCallback<ServiceInsertionRule> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getServiceInsertionRuleValidateBeforeCall(sectionId, ruleId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ServiceInsertionRule>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getServiceInsertionRules
     * @param sectionId  (required)
     * @param appliedTos AppliedTo&#x27;s referenced by this section or section&#x27;s Distributed Service Rules . (optional)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param destinations Destinations referenced by this section&#x27;s Distributed Service Rules . (optional)
     * @param filterType Filter type (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param services NSService referenced by this section&#x27;s Distributed Service Rules . (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param sources Sources referenced by this section&#x27;s Distributed Service Rules . (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getServiceInsertionRulesCall(String sectionId, String appliedTos, String cursor, String destinations, String filterType, String includedFields, Long pageSize, String services, Boolean sortAscending, String sortBy, String sources, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/serviceinsertion/sections/{section-id}/rules"
            .replaceAll("\\{" + "section-id" + "\\}", apiClient.escapeString(sectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (appliedTos != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("applied_tos", appliedTos));
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (destinations != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("destinations", destinations));
        if (filterType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter_type", filterType));
        if (includedFields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("included_fields", includedFields));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page_size", pageSize));
        if (services != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("services", services));
        if (sortAscending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_ascending", sortAscending));
        if (sortBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_by", sortBy));
        if (sources != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sources", sources));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getServiceInsertionRulesValidateBeforeCall(String sectionId, String appliedTos, String cursor, String destinations, String filterType, String includedFields, Long pageSize, String services, Boolean sortAscending, String sortBy, String sources, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'sectionId' is set
        if (sectionId == null) {
            throw new ApiException("Missing the required parameter 'sectionId' when calling getServiceInsertionRules(Async)");
        }
        
        com.squareup.okhttp.Call call = getServiceInsertionRulesCall(sectionId, appliedTos, cursor, destinations, filterType, includedFields, pageSize, services, sortAscending, sortBy, sources, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get All the Rules for a Section
     * Return all serviceinsertion rule(s) information for a given serviceinsertion section. 
     * @param sectionId  (required)
     * @param appliedTos AppliedTo&#x27;s referenced by this section or section&#x27;s Distributed Service Rules . (optional)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param destinations Destinations referenced by this section&#x27;s Distributed Service Rules . (optional)
     * @param filterType Filter type (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param services NSService referenced by this section&#x27;s Distributed Service Rules . (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param sources Sources referenced by this section&#x27;s Distributed Service Rules . (optional)
     * @return ServiceInsertionRuleListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ServiceInsertionRuleListResult getServiceInsertionRules(String sectionId, String appliedTos, String cursor, String destinations, String filterType, String includedFields, Long pageSize, String services, Boolean sortAscending, String sortBy, String sources) throws ApiException {
        ApiResponse<ServiceInsertionRuleListResult> resp = getServiceInsertionRulesWithHttpInfo(sectionId, appliedTos, cursor, destinations, filterType, includedFields, pageSize, services, sortAscending, sortBy, sources);
        return resp.getData();
    }

    /**
     * Get All the Rules for a Section
     * Return all serviceinsertion rule(s) information for a given serviceinsertion section. 
     * @param sectionId  (required)
     * @param appliedTos AppliedTo&#x27;s referenced by this section or section&#x27;s Distributed Service Rules . (optional)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param destinations Destinations referenced by this section&#x27;s Distributed Service Rules . (optional)
     * @param filterType Filter type (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param services NSService referenced by this section&#x27;s Distributed Service Rules . (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param sources Sources referenced by this section&#x27;s Distributed Service Rules . (optional)
     * @return ApiResponse&lt;ServiceInsertionRuleListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ServiceInsertionRuleListResult> getServiceInsertionRulesWithHttpInfo(String sectionId, String appliedTos, String cursor, String destinations, String filterType, String includedFields, Long pageSize, String services, Boolean sortAscending, String sortBy, String sources) throws ApiException {
        com.squareup.okhttp.Call call = getServiceInsertionRulesValidateBeforeCall(sectionId, appliedTos, cursor, destinations, filterType, includedFields, pageSize, services, sortAscending, sortBy, sources, null, null);
        Type localVarReturnType = new TypeToken<ServiceInsertionRuleListResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get All the Rules for a Section (asynchronously)
     * Return all serviceinsertion rule(s) information for a given serviceinsertion section. 
     * @param sectionId  (required)
     * @param appliedTos AppliedTo&#x27;s referenced by this section or section&#x27;s Distributed Service Rules . (optional)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param destinations Destinations referenced by this section&#x27;s Distributed Service Rules . (optional)
     * @param filterType Filter type (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param services NSService referenced by this section&#x27;s Distributed Service Rules . (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param sources Sources referenced by this section&#x27;s Distributed Service Rules . (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getServiceInsertionRulesAsync(String sectionId, String appliedTos, String cursor, String destinations, String filterType, String includedFields, Long pageSize, String services, Boolean sortAscending, String sortBy, String sources, final ApiCallback<ServiceInsertionRuleListResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getServiceInsertionRulesValidateBeforeCall(sectionId, appliedTos, cursor, destinations, filterType, includedFields, pageSize, services, sortAscending, sortBy, sources, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ServiceInsertionRuleListResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getServiceInsertionSection
     * @param sectionId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getServiceInsertionSectionCall(String sectionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/serviceinsertion/sections/{section-id}"
            .replaceAll("\\{" + "section-id" + "\\}", apiClient.escapeString(sectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getServiceInsertionSectionValidateBeforeCall(String sectionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'sectionId' is set
        if (sectionId == null) {
            throw new ApiException("Missing the required parameter 'sectionId' when calling getServiceInsertionSection(Async)");
        }
        
        com.squareup.okhttp.Call call = getServiceInsertionSectionCall(sectionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get an Existing Section
     * Returns information about serviceinsertion section for the identifier. 
     * @param sectionId  (required)
     * @return ServiceInsertionSection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ServiceInsertionSection getServiceInsertionSection(String sectionId) throws ApiException {
        ApiResponse<ServiceInsertionSection> resp = getServiceInsertionSectionWithHttpInfo(sectionId);
        return resp.getData();
    }

    /**
     * Get an Existing Section
     * Returns information about serviceinsertion section for the identifier. 
     * @param sectionId  (required)
     * @return ApiResponse&lt;ServiceInsertionSection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ServiceInsertionSection> getServiceInsertionSectionWithHttpInfo(String sectionId) throws ApiException {
        com.squareup.okhttp.Call call = getServiceInsertionSectionValidateBeforeCall(sectionId, null, null);
        Type localVarReturnType = new TypeToken<ServiceInsertionSection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get an Existing Section (asynchronously)
     * Returns information about serviceinsertion section for the identifier. 
     * @param sectionId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getServiceInsertionSectionAsync(String sectionId, final ApiCallback<ServiceInsertionSection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getServiceInsertionSectionValidateBeforeCall(sectionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ServiceInsertionSection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getServiceInsertionSectionWithRulesListWithRules
     * @param sectionId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getServiceInsertionSectionWithRulesListWithRulesCall(String sectionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/serviceinsertion/sections/{section-id}?action=list_with_rules"
            .replaceAll("\\{" + "section-id" + "\\}", apiClient.escapeString(sectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getServiceInsertionSectionWithRulesListWithRulesValidateBeforeCall(String sectionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'sectionId' is set
        if (sectionId == null) {
            throw new ApiException("Missing the required parameter 'sectionId' when calling getServiceInsertionSectionWithRulesListWithRules(Async)");
        }
        
        com.squareup.okhttp.Call call = getServiceInsertionSectionWithRulesListWithRulesCall(sectionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get an Existing Section, Including Rules
     * Returns serviceinsertion section information with rules for a section identifier. When invoked on a section with a large number of rules, this API is supported only at low rates of invocation (not more than 4-5 times per minute). The typical latency of this API with about 1024 rules is about 4-5 seconds. This API should not be invoked with large payloads at automation speeds. More than 50 rules are not supported.  Instead, to read serviceinsertion rules, use: GET /api/v1/serviceinsertion/sections/&amp;lt;section-id&amp;gt;/rules with the appropriate page_size. 
     * @param sectionId  (required)
     * @return ServiceInsertionSectionRuleList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ServiceInsertionSectionRuleList getServiceInsertionSectionWithRulesListWithRules(String sectionId) throws ApiException {
        ApiResponse<ServiceInsertionSectionRuleList> resp = getServiceInsertionSectionWithRulesListWithRulesWithHttpInfo(sectionId);
        return resp.getData();
    }

    /**
     * Get an Existing Section, Including Rules
     * Returns serviceinsertion section information with rules for a section identifier. When invoked on a section with a large number of rules, this API is supported only at low rates of invocation (not more than 4-5 times per minute). The typical latency of this API with about 1024 rules is about 4-5 seconds. This API should not be invoked with large payloads at automation speeds. More than 50 rules are not supported.  Instead, to read serviceinsertion rules, use: GET /api/v1/serviceinsertion/sections/&amp;lt;section-id&amp;gt;/rules with the appropriate page_size. 
     * @param sectionId  (required)
     * @return ApiResponse&lt;ServiceInsertionSectionRuleList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ServiceInsertionSectionRuleList> getServiceInsertionSectionWithRulesListWithRulesWithHttpInfo(String sectionId) throws ApiException {
        com.squareup.okhttp.Call call = getServiceInsertionSectionWithRulesListWithRulesValidateBeforeCall(sectionId, null, null);
        Type localVarReturnType = new TypeToken<ServiceInsertionSectionRuleList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get an Existing Section, Including Rules (asynchronously)
     * Returns serviceinsertion section information with rules for a section identifier. When invoked on a section with a large number of rules, this API is supported only at low rates of invocation (not more than 4-5 times per minute). The typical latency of this API with about 1024 rules is about 4-5 seconds. This API should not be invoked with large payloads at automation speeds. More than 50 rules are not supported.  Instead, to read serviceinsertion rules, use: GET /api/v1/serviceinsertion/sections/&amp;lt;section-id&amp;gt;/rules with the appropriate page_size. 
     * @param sectionId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getServiceInsertionSectionWithRulesListWithRulesAsync(String sectionId, final ApiCallback<ServiceInsertionSectionRuleList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getServiceInsertionSectionWithRulesListWithRulesValidateBeforeCall(sectionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ServiceInsertionSectionRuleList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getServiceInsertionService
     * @param serviceId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getServiceInsertionServiceCall(String serviceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/serviceinsertion/services/{service-id}"
            .replaceAll("\\{" + "service-id" + "\\}", apiClient.escapeString(serviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getServiceInsertionServiceValidateBeforeCall(String serviceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'serviceId' is set
        if (serviceId == null) {
            throw new ApiException("Missing the required parameter 'serviceId' when calling getServiceInsertionService(Async)");
        }
        
        com.squareup.okhttp.Call call = getServiceInsertionServiceCall(serviceId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get an existing Service
     * Returns information about Service-Insertion Service with the given identifier. 
     * @param serviceId  (required)
     * @return ServiceDefinition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ServiceDefinition getServiceInsertionService(String serviceId) throws ApiException {
        ApiResponse<ServiceDefinition> resp = getServiceInsertionServiceWithHttpInfo(serviceId);
        return resp.getData();
    }

    /**
     * Get an existing Service
     * Returns information about Service-Insertion Service with the given identifier. 
     * @param serviceId  (required)
     * @return ApiResponse&lt;ServiceDefinition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ServiceDefinition> getServiceInsertionServiceWithHttpInfo(String serviceId) throws ApiException {
        com.squareup.okhttp.Call call = getServiceInsertionServiceValidateBeforeCall(serviceId, null, null);
        Type localVarReturnType = new TypeToken<ServiceDefinition>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get an existing Service (asynchronously)
     * Returns information about Service-Insertion Service with the given identifier. 
     * @param serviceId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getServiceInsertionServiceAsync(String serviceId, final ApiCallback<ServiceDefinition> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getServiceInsertionServiceValidateBeforeCall(serviceId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ServiceDefinition>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getServiceInsertionStatus
     * @param contextType  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getServiceInsertionStatusCall(String contextType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/serviceinsertion/status/{context-type}"
            .replaceAll("\\{" + "context-type" + "\\}", apiClient.escapeString(contextType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getServiceInsertionStatusValidateBeforeCall(String contextType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'contextType' is set
        if (contextType == null) {
            throw new ApiException("Missing the required parameter 'contextType' when calling getServiceInsertionStatus(Async)");
        }
        
        com.squareup.okhttp.Call call = getServiceInsertionStatusCall(contextType, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get ServiceInsertion global status for a context
     * Get ServiceInsertion global status for a context
     * @param contextType  (required)
     * @return ServiceInsertionStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ServiceInsertionStatus getServiceInsertionStatus(String contextType) throws ApiException {
        ApiResponse<ServiceInsertionStatus> resp = getServiceInsertionStatusWithHttpInfo(contextType);
        return resp.getData();
    }

    /**
     * Get ServiceInsertion global status for a context
     * Get ServiceInsertion global status for a context
     * @param contextType  (required)
     * @return ApiResponse&lt;ServiceInsertionStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ServiceInsertionStatus> getServiceInsertionStatusWithHttpInfo(String contextType) throws ApiException {
        com.squareup.okhttp.Call call = getServiceInsertionStatusValidateBeforeCall(contextType, null, null);
        Type localVarReturnType = new TypeToken<ServiceInsertionStatus>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get ServiceInsertion global status for a context (asynchronously)
     * Get ServiceInsertion global status for a context
     * @param contextType  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getServiceInsertionStatusAsync(String contextType, final ApiCallback<ServiceInsertionStatus> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getServiceInsertionStatusValidateBeforeCall(contextType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ServiceInsertionStatus>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getServiceInstance
     * @param serviceId  (required)
     * @param serviceInstanceId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getServiceInstanceCall(String serviceId, String serviceInstanceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/serviceinsertion/services/{service-id}/service-instances/{service-instance-id}"
            .replaceAll("\\{" + "service-id" + "\\}", apiClient.escapeString(serviceId.toString()))
            .replaceAll("\\{" + "service-instance-id" + "\\}", apiClient.escapeString(serviceInstanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getServiceInstanceValidateBeforeCall(String serviceId, String serviceInstanceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'serviceId' is set
        if (serviceId == null) {
            throw new ApiException("Missing the required parameter 'serviceId' when calling getServiceInstance(Async)");
        }
        // verify the required parameter 'serviceInstanceId' is set
        if (serviceInstanceId == null) {
            throw new ApiException("Missing the required parameter 'serviceInstanceId' when calling getServiceInstance(Async)");
        }
        
        com.squareup.okhttp.Call call = getServiceInstanceCall(serviceId, serviceInstanceId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Service-Instance for Service.
     * Returns Service-Instance information for a given Service-Insertion Service. 
     * @param serviceId  (required)
     * @param serviceInstanceId  (required)
     * @return BaseServiceInstance
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BaseServiceInstance getServiceInstance(String serviceId, String serviceInstanceId) throws ApiException {
        ApiResponse<BaseServiceInstance> resp = getServiceInstanceWithHttpInfo(serviceId, serviceInstanceId);
        return resp.getData();
    }

    /**
     * Get Service-Instance for Service.
     * Returns Service-Instance information for a given Service-Insertion Service. 
     * @param serviceId  (required)
     * @param serviceInstanceId  (required)
     * @return ApiResponse&lt;BaseServiceInstance&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BaseServiceInstance> getServiceInstanceWithHttpInfo(String serviceId, String serviceInstanceId) throws ApiException {
        com.squareup.okhttp.Call call = getServiceInstanceValidateBeforeCall(serviceId, serviceInstanceId, null, null);
        Type localVarReturnType = new TypeToken<BaseServiceInstance>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Service-Instance for Service. (asynchronously)
     * Returns Service-Instance information for a given Service-Insertion Service. 
     * @param serviceId  (required)
     * @param serviceInstanceId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getServiceInstanceAsync(String serviceId, String serviceInstanceId, final ApiCallback<BaseServiceInstance> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getServiceInstanceValidateBeforeCall(serviceId, serviceInstanceId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BaseServiceInstance>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getServiceInstanceNSGroups
     * @param serviceId  (required)
     * @param serviceInstanceId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getServiceInstanceNSGroupsCall(String serviceId, String serviceInstanceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/serviceinsertion/services/{service-id}/service-instances/{service-instance-id}/group-associations"
            .replaceAll("\\{" + "service-id" + "\\}", apiClient.escapeString(serviceId.toString()))
            .replaceAll("\\{" + "service-instance-id" + "\\}", apiClient.escapeString(serviceInstanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getServiceInstanceNSGroupsValidateBeforeCall(String serviceId, String serviceInstanceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'serviceId' is set
        if (serviceId == null) {
            throw new ApiException("Missing the required parameter 'serviceId' when calling getServiceInstanceNSGroups(Async)");
        }
        // verify the required parameter 'serviceInstanceId' is set
        if (serviceInstanceId == null) {
            throw new ApiException("Missing the required parameter 'serviceInstanceId' when calling getServiceInstanceNSGroups(Async)");
        }
        
        com.squareup.okhttp.Call call = getServiceInstanceNSGroupsCall(serviceId, serviceInstanceId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get NSgroups for a given ServiceInstance.
     * Returns list of NSGroups used in Service Insertion North-South rules for a given Service Instance. 
     * @param serviceId  (required)
     * @param serviceInstanceId  (required)
     * @return ServiceInstanceNSGroups
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ServiceInstanceNSGroups getServiceInstanceNSGroups(String serviceId, String serviceInstanceId) throws ApiException {
        ApiResponse<ServiceInstanceNSGroups> resp = getServiceInstanceNSGroupsWithHttpInfo(serviceId, serviceInstanceId);
        return resp.getData();
    }

    /**
     * Get NSgroups for a given ServiceInstance.
     * Returns list of NSGroups used in Service Insertion North-South rules for a given Service Instance. 
     * @param serviceId  (required)
     * @param serviceInstanceId  (required)
     * @return ApiResponse&lt;ServiceInstanceNSGroups&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ServiceInstanceNSGroups> getServiceInstanceNSGroupsWithHttpInfo(String serviceId, String serviceInstanceId) throws ApiException {
        com.squareup.okhttp.Call call = getServiceInstanceNSGroupsValidateBeforeCall(serviceId, serviceInstanceId, null, null);
        Type localVarReturnType = new TypeToken<ServiceInstanceNSGroups>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get NSgroups for a given ServiceInstance. (asynchronously)
     * Returns list of NSGroups used in Service Insertion North-South rules for a given Service Instance. 
     * @param serviceId  (required)
     * @param serviceInstanceId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getServiceInstanceNSGroupsAsync(String serviceId, String serviceInstanceId, final ApiCallback<ServiceInstanceNSGroups> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getServiceInstanceNSGroupsValidateBeforeCall(serviceId, serviceInstanceId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ServiceInstanceNSGroups>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getServiceInstanceState
     * @param serviceId  (required)
     * @param serviceInstanceId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getServiceInstanceStateCall(String serviceId, String serviceInstanceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/serviceinsertion/services/{service-id}/service-instances/{service-instance-id}/state"
            .replaceAll("\\{" + "service-id" + "\\}", apiClient.escapeString(serviceId.toString()))
            .replaceAll("\\{" + "service-instance-id" + "\\}", apiClient.escapeString(serviceInstanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getServiceInstanceStateValidateBeforeCall(String serviceId, String serviceInstanceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'serviceId' is set
        if (serviceId == null) {
            throw new ApiException("Missing the required parameter 'serviceId' when calling getServiceInstanceState(Async)");
        }
        // verify the required parameter 'serviceInstanceId' is set
        if (serviceInstanceId == null) {
            throw new ApiException("Missing the required parameter 'serviceInstanceId' when calling getServiceInstanceState(Async)");
        }
        
        com.squareup.okhttp.Call call = getServiceInstanceStateCall(serviceId, serviceInstanceId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Service-Instance state for Service.
     * Returns configuration state of one instance of a deployed partner service using service insertion framework. 
     * @param serviceId  (required)
     * @param serviceInstanceId  (required)
     * @return ConfigurationState
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConfigurationState getServiceInstanceState(String serviceId, String serviceInstanceId) throws ApiException {
        ApiResponse<ConfigurationState> resp = getServiceInstanceStateWithHttpInfo(serviceId, serviceInstanceId);
        return resp.getData();
    }

    /**
     * Get Service-Instance state for Service.
     * Returns configuration state of one instance of a deployed partner service using service insertion framework. 
     * @param serviceId  (required)
     * @param serviceInstanceId  (required)
     * @return ApiResponse&lt;ConfigurationState&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConfigurationState> getServiceInstanceStateWithHttpInfo(String serviceId, String serviceInstanceId) throws ApiException {
        com.squareup.okhttp.Call call = getServiceInstanceStateValidateBeforeCall(serviceId, serviceInstanceId, null, null);
        Type localVarReturnType = new TypeToken<ConfigurationState>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Service-Instance state for Service. (asynchronously)
     * Returns configuration state of one instance of a deployed partner service using service insertion framework. 
     * @param serviceId  (required)
     * @param serviceInstanceId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getServiceInstanceStateAsync(String serviceId, String serviceInstanceId, final ApiCallback<ConfigurationState> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getServiceInstanceStateValidateBeforeCall(serviceId, serviceInstanceId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConfigurationState>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getServiceInstanceStatus
     * @param serviceId  (required)
     * @param serviceInstanceId  (required)
     * @param source Data source type. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getServiceInstanceStatusCall(String serviceId, String serviceInstanceId, String source, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/serviceinsertion/services/{service-id}/service-instances/{service-instance-id}/status"
            .replaceAll("\\{" + "service-id" + "\\}", apiClient.escapeString(serviceId.toString()))
            .replaceAll("\\{" + "service-instance-id" + "\\}", apiClient.escapeString(serviceInstanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (source != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("source", source));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getServiceInstanceStatusValidateBeforeCall(String serviceId, String serviceInstanceId, String source, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'serviceId' is set
        if (serviceId == null) {
            throw new ApiException("Missing the required parameter 'serviceId' when calling getServiceInstanceStatus(Async)");
        }
        // verify the required parameter 'serviceInstanceId' is set
        if (serviceInstanceId == null) {
            throw new ApiException("Missing the required parameter 'serviceInstanceId' when calling getServiceInstanceStatus(Async)");
        }
        
        com.squareup.okhttp.Call call = getServiceInstanceStatusCall(serviceId, serviceInstanceId, source, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Service-Instance status for Service.
     * Returns status of one instance of a deployed partner service using service insertion framework. By default this API would return cached status. Caching happens every 3 minutes. For realtime status, query parameter \&quot;source&#x3D;realtime\&quot; needs to be passed. 
     * @param serviceId  (required)
     * @param serviceInstanceId  (required)
     * @param source Data source type. (optional)
     * @return ServiceInstanceStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ServiceInstanceStatus getServiceInstanceStatus(String serviceId, String serviceInstanceId, String source) throws ApiException {
        ApiResponse<ServiceInstanceStatus> resp = getServiceInstanceStatusWithHttpInfo(serviceId, serviceInstanceId, source);
        return resp.getData();
    }

    /**
     * Get Service-Instance status for Service.
     * Returns status of one instance of a deployed partner service using service insertion framework. By default this API would return cached status. Caching happens every 3 minutes. For realtime status, query parameter \&quot;source&#x3D;realtime\&quot; needs to be passed. 
     * @param serviceId  (required)
     * @param serviceInstanceId  (required)
     * @param source Data source type. (optional)
     * @return ApiResponse&lt;ServiceInstanceStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ServiceInstanceStatus> getServiceInstanceStatusWithHttpInfo(String serviceId, String serviceInstanceId, String source) throws ApiException {
        com.squareup.okhttp.Call call = getServiceInstanceStatusValidateBeforeCall(serviceId, serviceInstanceId, source, null, null);
        Type localVarReturnType = new TypeToken<ServiceInstanceStatus>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Service-Instance status for Service. (asynchronously)
     * Returns status of one instance of a deployed partner service using service insertion framework. By default this API would return cached status. Caching happens every 3 minutes. For realtime status, query parameter \&quot;source&#x3D;realtime\&quot; needs to be passed. 
     * @param serviceId  (required)
     * @param serviceInstanceId  (required)
     * @param source Data source type. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getServiceInstanceStatusAsync(String serviceId, String serviceInstanceId, String source, final ApiCallback<ServiceInstanceStatus> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getServiceInstanceStatusValidateBeforeCall(serviceId, serviceInstanceId, source, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ServiceInstanceStatus>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getServiceManager
     * @param serviceManagerId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getServiceManagerCall(String serviceManagerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/serviceinsertion/service-managers/{service-manager-id}"
            .replaceAll("\\{" + "service-manager-id" + "\\}", apiClient.escapeString(serviceManagerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getServiceManagerValidateBeforeCall(String serviceManagerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'serviceManagerId' is set
        if (serviceManagerId == null) {
            throw new ApiException("Missing the required parameter 'serviceManagerId' when calling getServiceManager(Async)");
        }
        
        com.squareup.okhttp.Call call = getServiceManagerCall(serviceManagerId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get service manager
     * Retrieve service-manager details like name, username, password, vendor ID, thumbprint for a given ID.
     * @param serviceManagerId  (required)
     * @return ServiceManager
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ServiceManager getServiceManager(String serviceManagerId) throws ApiException {
        ApiResponse<ServiceManager> resp = getServiceManagerWithHttpInfo(serviceManagerId);
        return resp.getData();
    }

    /**
     * Get service manager
     * Retrieve service-manager details like name, username, password, vendor ID, thumbprint for a given ID.
     * @param serviceManagerId  (required)
     * @return ApiResponse&lt;ServiceManager&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ServiceManager> getServiceManagerWithHttpInfo(String serviceManagerId) throws ApiException {
        com.squareup.okhttp.Call call = getServiceManagerValidateBeforeCall(serviceManagerId, null, null);
        Type localVarReturnType = new TypeToken<ServiceManager>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get service manager (asynchronously)
     * Retrieve service-manager details like name, username, password, vendor ID, thumbprint for a given ID.
     * @param serviceManagerId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getServiceManagerAsync(String serviceManagerId, final ApiCallback<ServiceManager> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getServiceManagerValidateBeforeCall(serviceManagerId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ServiceManager>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getServiceProfileNSGroups
     * @param serviceId  (required)
     * @param serviceProfileId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getServiceProfileNSGroupsCall(String serviceId, String serviceProfileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/serviceinsertion/services/{service-id}/service-profiles/{service-profile-id}/nsgroups"
            .replaceAll("\\{" + "service-id" + "\\}", apiClient.escapeString(serviceId.toString()))
            .replaceAll("\\{" + "service-profile-id" + "\\}", apiClient.escapeString(serviceProfileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getServiceProfileNSGroupsValidateBeforeCall(String serviceId, String serviceProfileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'serviceId' is set
        if (serviceId == null) {
            throw new ApiException("Missing the required parameter 'serviceId' when calling getServiceProfileNSGroups(Async)");
        }
        // verify the required parameter 'serviceProfileId' is set
        if (serviceProfileId == null) {
            throw new ApiException("Missing the required parameter 'serviceProfileId' when calling getServiceProfileNSGroups(Async)");
        }
        
        com.squareup.okhttp.Call call = getServiceProfileNSGroupsCall(serviceId, serviceProfileId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get NSgroups for a given ServiceProfile.
     * Returns list of NSGroups used in Service Insertion rules for a given Service Profile. 
     * @param serviceId  (required)
     * @param serviceProfileId  (required)
     * @return ServiceProfileNSGroups
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ServiceProfileNSGroups getServiceProfileNSGroups(String serviceId, String serviceProfileId) throws ApiException {
        ApiResponse<ServiceProfileNSGroups> resp = getServiceProfileNSGroupsWithHttpInfo(serviceId, serviceProfileId);
        return resp.getData();
    }

    /**
     * Get NSgroups for a given ServiceProfile.
     * Returns list of NSGroups used in Service Insertion rules for a given Service Profile. 
     * @param serviceId  (required)
     * @param serviceProfileId  (required)
     * @return ApiResponse&lt;ServiceProfileNSGroups&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ServiceProfileNSGroups> getServiceProfileNSGroupsWithHttpInfo(String serviceId, String serviceProfileId) throws ApiException {
        com.squareup.okhttp.Call call = getServiceProfileNSGroupsValidateBeforeCall(serviceId, serviceProfileId, null, null);
        Type localVarReturnType = new TypeToken<ServiceProfileNSGroups>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get NSgroups for a given ServiceProfile. (asynchronously)
     * Returns list of NSGroups used in Service Insertion rules for a given Service Profile. 
     * @param serviceId  (required)
     * @param serviceProfileId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getServiceProfileNSGroupsAsync(String serviceId, String serviceProfileId, final ApiCallback<ServiceProfileNSGroups> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getServiceProfileNSGroupsValidateBeforeCall(serviceId, serviceProfileId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ServiceProfileNSGroups>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSolutionConfig
     * @param serviceId  (required)
     * @param solutionConfigId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSolutionConfigCall(String serviceId, String solutionConfigId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/serviceinsertion/services/{service-id}/solution-configs/{solution-config-id}"
            .replaceAll("\\{" + "service-id" + "\\}", apiClient.escapeString(serviceId.toString()))
            .replaceAll("\\{" + "solution-config-id" + "\\}", apiClient.escapeString(solutionConfigId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSolutionConfigValidateBeforeCall(String serviceId, String solutionConfigId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'serviceId' is set
        if (serviceId == null) {
            throw new ApiException("Missing the required parameter 'serviceId' when calling getSolutionConfig(Async)");
        }
        // verify the required parameter 'solutionConfigId' is set
        if (solutionConfigId == null) {
            throw new ApiException("Missing the required parameter 'solutionConfigId' when calling getSolutionConfig(Async)");
        }
        
        com.squareup.okhttp.Call call = getSolutionConfigCall(serviceId, solutionConfigId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Solution Config Information for a given solution config id.
     * Returns Solution Config information for a given solution config id. 
     * @param serviceId  (required)
     * @param solutionConfigId  (required)
     * @return SolutionConfig
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SolutionConfig getSolutionConfig(String serviceId, String solutionConfigId) throws ApiException {
        ApiResponse<SolutionConfig> resp = getSolutionConfigWithHttpInfo(serviceId, solutionConfigId);
        return resp.getData();
    }

    /**
     * Get Solution Config Information for a given solution config id.
     * Returns Solution Config information for a given solution config id. 
     * @param serviceId  (required)
     * @param solutionConfigId  (required)
     * @return ApiResponse&lt;SolutionConfig&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SolutionConfig> getSolutionConfigWithHttpInfo(String serviceId, String solutionConfigId) throws ApiException {
        com.squareup.okhttp.Call call = getSolutionConfigValidateBeforeCall(serviceId, solutionConfigId, null, null);
        Type localVarReturnType = new TypeToken<SolutionConfig>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Solution Config Information for a given solution config id. (asynchronously)
     * Returns Solution Config information for a given solution config id. 
     * @param serviceId  (required)
     * @param solutionConfigId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSolutionConfigAsync(String serviceId, String solutionConfigId, final ApiCallback<SolutionConfig> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSolutionConfigValidateBeforeCall(serviceId, solutionConfigId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SolutionConfig>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getVendorTemplate
     * @param serviceId  (required)
     * @param vendorTemplateId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getVendorTemplateCall(String serviceId, String vendorTemplateId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/serviceinsertion/services/{service-id}/vendor-templates/{vendor-template-id}"
            .replaceAll("\\{" + "service-id" + "\\}", apiClient.escapeString(serviceId.toString()))
            .replaceAll("\\{" + "vendor-template-id" + "\\}", apiClient.escapeString(vendorTemplateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getVendorTemplateValidateBeforeCall(String serviceId, String vendorTemplateId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'serviceId' is set
        if (serviceId == null) {
            throw new ApiException("Missing the required parameter 'serviceId' when calling getVendorTemplate(Async)");
        }
        // verify the required parameter 'vendorTemplateId' is set
        if (vendorTemplateId == null) {
            throw new ApiException("Missing the required parameter 'vendorTemplateId' when calling getVendorTemplate(Async)");
        }
        
        com.squareup.okhttp.Call call = getVendorTemplateCall(serviceId, vendorTemplateId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get a particular vendor template for a given service.
     * Returns detailed vendor template information for a given service. 
     * @param serviceId  (required)
     * @param vendorTemplateId  (required)
     * @return VendorTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VendorTemplate getVendorTemplate(String serviceId, String vendorTemplateId) throws ApiException {
        ApiResponse<VendorTemplate> resp = getVendorTemplateWithHttpInfo(serviceId, vendorTemplateId);
        return resp.getData();
    }

    /**
     * Get a particular vendor template for a given service.
     * Returns detailed vendor template information for a given service. 
     * @param serviceId  (required)
     * @param vendorTemplateId  (required)
     * @return ApiResponse&lt;VendorTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VendorTemplate> getVendorTemplateWithHttpInfo(String serviceId, String vendorTemplateId) throws ApiException {
        com.squareup.okhttp.Call call = getVendorTemplateValidateBeforeCall(serviceId, vendorTemplateId, null, null);
        Type localVarReturnType = new TypeToken<VendorTemplate>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a particular vendor template for a given service. (asynchronously)
     * Returns detailed vendor template information for a given service. 
     * @param serviceId  (required)
     * @param vendorTemplateId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getVendorTemplateAsync(String serviceId, String vendorTemplateId, final ApiCallback<VendorTemplate> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getVendorTemplateValidateBeforeCall(serviceId, vendorTemplateId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VendorTemplate>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listInstanceEndpoints
     * @param serviceId  (required)
     * @param serviceInstanceId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listInstanceEndpointsCall(String serviceId, String serviceInstanceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/serviceinsertion/services/{service-id}/service-instances/{service-instance-id}/instance-endpoints"
            .replaceAll("\\{" + "service-id" + "\\}", apiClient.escapeString(serviceId.toString()))
            .replaceAll("\\{" + "service-instance-id" + "\\}", apiClient.escapeString(serviceInstanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listInstanceEndpointsValidateBeforeCall(String serviceId, String serviceInstanceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'serviceId' is set
        if (serviceId == null) {
            throw new ApiException("Missing the required parameter 'serviceId' when calling listInstanceEndpoints(Async)");
        }
        // verify the required parameter 'serviceInstanceId' is set
        if (serviceInstanceId == null) {
            throw new ApiException("Missing the required parameter 'serviceInstanceId' when calling listInstanceEndpoints(Async)");
        }
        
        com.squareup.okhttp.Call call = listInstanceEndpointsCall(serviceId, serviceInstanceId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List all InstanceEndpoints of a Service Instance.
     * List all InstanceEndpoints of a service instance. 
     * @param serviceId  (required)
     * @param serviceInstanceId  (required)
     * @return InstanceEndpointListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InstanceEndpointListResult listInstanceEndpoints(String serviceId, String serviceInstanceId) throws ApiException {
        ApiResponse<InstanceEndpointListResult> resp = listInstanceEndpointsWithHttpInfo(serviceId, serviceInstanceId);
        return resp.getData();
    }

    /**
     * List all InstanceEndpoints of a Service Instance.
     * List all InstanceEndpoints of a service instance. 
     * @param serviceId  (required)
     * @param serviceInstanceId  (required)
     * @return ApiResponse&lt;InstanceEndpointListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InstanceEndpointListResult> listInstanceEndpointsWithHttpInfo(String serviceId, String serviceInstanceId) throws ApiException {
        com.squareup.okhttp.Call call = listInstanceEndpointsValidateBeforeCall(serviceId, serviceInstanceId, null, null);
        Type localVarReturnType = new TypeToken<InstanceEndpointListResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all InstanceEndpoints of a Service Instance. (asynchronously)
     * List all InstanceEndpoints of a service instance. 
     * @param serviceId  (required)
     * @param serviceInstanceId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listInstanceEndpointsAsync(String serviceId, String serviceInstanceId, final ApiCallback<InstanceEndpointListResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listInstanceEndpointsValidateBeforeCall(serviceId, serviceInstanceId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InstanceEndpointListResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listInstanceRuntimes
     * @param serviceId  (required)
     * @param serviceInstanceId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listInstanceRuntimesCall(String serviceId, String serviceInstanceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/serviceinsertion/services/{service-id}/service-instances/{service-instance-id}/instance-runtimes"
            .replaceAll("\\{" + "service-id" + "\\}", apiClient.escapeString(serviceId.toString()))
            .replaceAll("\\{" + "service-instance-id" + "\\}", apiClient.escapeString(serviceInstanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listInstanceRuntimesValidateBeforeCall(String serviceId, String serviceInstanceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'serviceId' is set
        if (serviceId == null) {
            throw new ApiException("Missing the required parameter 'serviceId' when calling listInstanceRuntimes(Async)");
        }
        // verify the required parameter 'serviceInstanceId' is set
        if (serviceInstanceId == null) {
            throw new ApiException("Missing the required parameter 'serviceInstanceId' when calling listInstanceRuntimes(Async)");
        }
        
        com.squareup.okhttp.Call call = listInstanceRuntimesCall(serviceId, serviceInstanceId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Returns list of instance runtimes of service VM being deployed
     * Returns list of instance runtimes of service VMs being deployed for a given service instance id 
     * @param serviceId  (required)
     * @param serviceInstanceId  (required)
     * @return InstanceRuntimeListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InstanceRuntimeListResult listInstanceRuntimes(String serviceId, String serviceInstanceId) throws ApiException {
        ApiResponse<InstanceRuntimeListResult> resp = listInstanceRuntimesWithHttpInfo(serviceId, serviceInstanceId);
        return resp.getData();
    }

    /**
     * Returns list of instance runtimes of service VM being deployed
     * Returns list of instance runtimes of service VMs being deployed for a given service instance id 
     * @param serviceId  (required)
     * @param serviceInstanceId  (required)
     * @return ApiResponse&lt;InstanceRuntimeListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InstanceRuntimeListResult> listInstanceRuntimesWithHttpInfo(String serviceId, String serviceInstanceId) throws ApiException {
        com.squareup.okhttp.Call call = listInstanceRuntimesValidateBeforeCall(serviceId, serviceInstanceId, null, null);
        Type localVarReturnType = new TypeToken<InstanceRuntimeListResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns list of instance runtimes of service VM being deployed (asynchronously)
     * Returns list of instance runtimes of service VMs being deployed for a given service instance id 
     * @param serviceId  (required)
     * @param serviceInstanceId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listInstanceRuntimesAsync(String serviceId, String serviceInstanceId, final ApiCallback<InstanceRuntimeListResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listInstanceRuntimesValidateBeforeCall(serviceId, serviceInstanceId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InstanceRuntimeListResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listSIServiceProfiles
     * @param serviceId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listSIServiceProfilesCall(String serviceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/serviceinsertion/services/{service-id}/service-profiles"
            .replaceAll("\\{" + "service-id" + "\\}", apiClient.escapeString(serviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listSIServiceProfilesValidateBeforeCall(String serviceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'serviceId' is set
        if (serviceId == null) {
            throw new ApiException("Missing the required parameter 'serviceId' when calling listSIServiceProfiles(Async)");
        }
        
        com.squareup.okhttp.Call call = listSIServiceProfilesCall(serviceId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List all Service Profiles of a Service.
     * List all service profiles of a service. 
     * @param serviceId  (required)
     * @return SIServiceProfileListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SIServiceProfileListResult listSIServiceProfiles(String serviceId) throws ApiException {
        ApiResponse<SIServiceProfileListResult> resp = listSIServiceProfilesWithHttpInfo(serviceId);
        return resp.getData();
    }

    /**
     * List all Service Profiles of a Service.
     * List all service profiles of a service. 
     * @param serviceId  (required)
     * @return ApiResponse&lt;SIServiceProfileListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SIServiceProfileListResult> listSIServiceProfilesWithHttpInfo(String serviceId) throws ApiException {
        com.squareup.okhttp.Call call = listSIServiceProfilesValidateBeforeCall(serviceId, null, null);
        Type localVarReturnType = new TypeToken<SIServiceProfileListResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all Service Profiles of a Service. (asynchronously)
     * List all service profiles of a service. 
     * @param serviceId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listSIServiceProfilesAsync(String serviceId, final ApiCallback<SIServiceProfileListResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listSIServiceProfilesValidateBeforeCall(serviceId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SIServiceProfileListResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listServiceAttachments
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listServiceAttachmentsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/serviceinsertion/service-attachments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listServiceAttachmentsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listServiceAttachmentsCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get all service attachments.
     * Returns all Service-Attachement(s) present in the system. 
     * @return ServiceAttachmentListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ServiceAttachmentListResult listServiceAttachments() throws ApiException {
        ApiResponse<ServiceAttachmentListResult> resp = listServiceAttachmentsWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get all service attachments.
     * Returns all Service-Attachement(s) present in the system. 
     * @return ApiResponse&lt;ServiceAttachmentListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ServiceAttachmentListResult> listServiceAttachmentsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = listServiceAttachmentsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<ServiceAttachmentListResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all service attachments. (asynchronously)
     * Returns all Service-Attachement(s) present in the system. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listServiceAttachmentsAsync(final ApiCallback<ServiceAttachmentListResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listServiceAttachmentsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ServiceAttachmentListResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listServiceChainMappings
     * @param serviceId  (required)
     * @param serviceProfileId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listServiceChainMappingsCall(String serviceId, String serviceProfileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/serviceinsertion/services/{service-id}/service-profiles/{service-profile-id}/service-chain-mappings"
            .replaceAll("\\{" + "service-id" + "\\}", apiClient.escapeString(serviceId.toString()))
            .replaceAll("\\{" + "service-profile-id" + "\\}", apiClient.escapeString(serviceProfileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listServiceChainMappingsValidateBeforeCall(String serviceId, String serviceProfileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'serviceId' is set
        if (serviceId == null) {
            throw new ApiException("Missing the required parameter 'serviceId' when calling listServiceChainMappings(Async)");
        }
        // verify the required parameter 'serviceProfileId' is set
        if (serviceProfileId == null) {
            throw new ApiException("Missing the required parameter 'serviceProfileId' when calling listServiceChainMappings(Async)");
        }
        
        com.squareup.okhttp.Call call = listServiceChainMappingsCall(serviceId, serviceProfileId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List all ServiceChainMappings.
     * List all service chain mappings in the system for the given service profile. 
     * @param serviceId  (required)
     * @param serviceProfileId  (required)
     * @return ServiceChainMappingListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ServiceChainMappingListResult listServiceChainMappings(String serviceId, String serviceProfileId) throws ApiException {
        ApiResponse<ServiceChainMappingListResult> resp = listServiceChainMappingsWithHttpInfo(serviceId, serviceProfileId);
        return resp.getData();
    }

    /**
     * List all ServiceChainMappings.
     * List all service chain mappings in the system for the given service profile. 
     * @param serviceId  (required)
     * @param serviceProfileId  (required)
     * @return ApiResponse&lt;ServiceChainMappingListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ServiceChainMappingListResult> listServiceChainMappingsWithHttpInfo(String serviceId, String serviceProfileId) throws ApiException {
        com.squareup.okhttp.Call call = listServiceChainMappingsValidateBeforeCall(serviceId, serviceProfileId, null, null);
        Type localVarReturnType = new TypeToken<ServiceChainMappingListResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all ServiceChainMappings. (asynchronously)
     * List all service chain mappings in the system for the given service profile. 
     * @param serviceId  (required)
     * @param serviceProfileId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listServiceChainMappingsAsync(String serviceId, String serviceProfileId, final ApiCallback<ServiceChainMappingListResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listServiceChainMappingsValidateBeforeCall(serviceId, serviceProfileId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ServiceChainMappingListResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listServiceChains
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listServiceChainsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/serviceinsertion/service-chains";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listServiceChainsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listServiceChainsCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List all ServiceChains.
     * List all service chains in the system. 
     * @return ServiceChainListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ServiceChainListResult listServiceChains() throws ApiException {
        ApiResponse<ServiceChainListResult> resp = listServiceChainsWithHttpInfo();
        return resp.getData();
    }

    /**
     * List all ServiceChains.
     * List all service chains in the system. 
     * @return ApiResponse&lt;ServiceChainListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ServiceChainListResult> listServiceChainsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = listServiceChainsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<ServiceChainListResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all ServiceChains. (asynchronously)
     * List all service chains in the system. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listServiceChainsAsync(final ApiCallback<ServiceChainListResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listServiceChainsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ServiceChainListResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listServiceInsertionSections
     * @param appliedTos AppliedTo&#x27;s referenced by this section or section&#x27;s Distributed Service Rules . (optional)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param destinations Destinations referenced by this section&#x27;s Distributed Service Rules . (optional)
     * @param excludeAppliedToType Resource type valid for use as AppliedTo filter in section API (optional)
     * @param filterType Filter type (optional)
     * @param includeAppliedToType Resource type valid for use as AppliedTo filter in section API (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param services NSService referenced by this section&#x27;s Distributed Service Rules . (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param sources Sources referenced by this section&#x27;s Distributed Service Rules . (optional)
     * @param type Section Type (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listServiceInsertionSectionsCall(String appliedTos, String cursor, String destinations, String excludeAppliedToType, String filterType, String includeAppliedToType, String includedFields, Long pageSize, String services, Boolean sortAscending, String sortBy, String sources, String type, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/serviceinsertion/sections";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (appliedTos != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("applied_tos", appliedTos));
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (destinations != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("destinations", destinations));
        if (excludeAppliedToType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("exclude_applied_to_type", excludeAppliedToType));
        if (filterType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter_type", filterType));
        if (includeAppliedToType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("include_applied_to_type", includeAppliedToType));
        if (includedFields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("included_fields", includedFields));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page_size", pageSize));
        if (services != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("services", services));
        if (sortAscending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_ascending", sortAscending));
        if (sortBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_by", sortBy));
        if (sources != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sources", sources));
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("type", type));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listServiceInsertionSectionsValidateBeforeCall(String appliedTos, String cursor, String destinations, String excludeAppliedToType, String filterType, String includeAppliedToType, String includedFields, Long pageSize, String services, Boolean sortAscending, String sortBy, String sources, String type, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listServiceInsertionSectionsCall(appliedTos, cursor, destinations, excludeAppliedToType, filterType, includeAppliedToType, includedFields, pageSize, services, sortAscending, sortBy, sources, type, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List All Service Insertion Sections
     * List all Service Insertion section in paginated form. A default page size is limited to 1000 sections. By default, the list of section is filtered by L3REDIRECT type. 
     * @param appliedTos AppliedTo&#x27;s referenced by this section or section&#x27;s Distributed Service Rules . (optional)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param destinations Destinations referenced by this section&#x27;s Distributed Service Rules . (optional)
     * @param excludeAppliedToType Resource type valid for use as AppliedTo filter in section API (optional)
     * @param filterType Filter type (optional)
     * @param includeAppliedToType Resource type valid for use as AppliedTo filter in section API (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param services NSService referenced by this section&#x27;s Distributed Service Rules . (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param sources Sources referenced by this section&#x27;s Distributed Service Rules . (optional)
     * @param type Section Type (optional)
     * @return ServiceInsertionSectionListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ServiceInsertionSectionListResult listServiceInsertionSections(String appliedTos, String cursor, String destinations, String excludeAppliedToType, String filterType, String includeAppliedToType, String includedFields, Long pageSize, String services, Boolean sortAscending, String sortBy, String sources, String type) throws ApiException {
        ApiResponse<ServiceInsertionSectionListResult> resp = listServiceInsertionSectionsWithHttpInfo(appliedTos, cursor, destinations, excludeAppliedToType, filterType, includeAppliedToType, includedFields, pageSize, services, sortAscending, sortBy, sources, type);
        return resp.getData();
    }

    /**
     * List All Service Insertion Sections
     * List all Service Insertion section in paginated form. A default page size is limited to 1000 sections. By default, the list of section is filtered by L3REDIRECT type. 
     * @param appliedTos AppliedTo&#x27;s referenced by this section or section&#x27;s Distributed Service Rules . (optional)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param destinations Destinations referenced by this section&#x27;s Distributed Service Rules . (optional)
     * @param excludeAppliedToType Resource type valid for use as AppliedTo filter in section API (optional)
     * @param filterType Filter type (optional)
     * @param includeAppliedToType Resource type valid for use as AppliedTo filter in section API (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param services NSService referenced by this section&#x27;s Distributed Service Rules . (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param sources Sources referenced by this section&#x27;s Distributed Service Rules . (optional)
     * @param type Section Type (optional)
     * @return ApiResponse&lt;ServiceInsertionSectionListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ServiceInsertionSectionListResult> listServiceInsertionSectionsWithHttpInfo(String appliedTos, String cursor, String destinations, String excludeAppliedToType, String filterType, String includeAppliedToType, String includedFields, Long pageSize, String services, Boolean sortAscending, String sortBy, String sources, String type) throws ApiException {
        com.squareup.okhttp.Call call = listServiceInsertionSectionsValidateBeforeCall(appliedTos, cursor, destinations, excludeAppliedToType, filterType, includeAppliedToType, includedFields, pageSize, services, sortAscending, sortBy, sources, type, null, null);
        Type localVarReturnType = new TypeToken<ServiceInsertionSectionListResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List All Service Insertion Sections (asynchronously)
     * List all Service Insertion section in paginated form. A default page size is limited to 1000 sections. By default, the list of section is filtered by L3REDIRECT type. 
     * @param appliedTos AppliedTo&#x27;s referenced by this section or section&#x27;s Distributed Service Rules . (optional)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param destinations Destinations referenced by this section&#x27;s Distributed Service Rules . (optional)
     * @param excludeAppliedToType Resource type valid for use as AppliedTo filter in section API (optional)
     * @param filterType Filter type (optional)
     * @param includeAppliedToType Resource type valid for use as AppliedTo filter in section API (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param services NSService referenced by this section&#x27;s Distributed Service Rules . (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param sources Sources referenced by this section&#x27;s Distributed Service Rules . (optional)
     * @param type Section Type (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listServiceInsertionSectionsAsync(String appliedTos, String cursor, String destinations, String excludeAppliedToType, String filterType, String includeAppliedToType, String includedFields, Long pageSize, String services, Boolean sortAscending, String sortBy, String sources, String type, final ApiCallback<ServiceInsertionSectionListResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listServiceInsertionSectionsValidateBeforeCall(appliedTos, cursor, destinations, excludeAppliedToType, filterType, includeAppliedToType, includedFields, pageSize, services, sortAscending, sortBy, sources, type, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ServiceInsertionSectionListResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listServiceInsertionServices
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listServiceInsertionServicesCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/serviceinsertion/services";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listServiceInsertionServicesValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listServiceInsertionServicesCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List all Service-Insertion Services.
     * List all Service-Insertion Service Definitions. 
     * @return ServiceInsertionServiceListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ServiceInsertionServiceListResult listServiceInsertionServices() throws ApiException {
        ApiResponse<ServiceInsertionServiceListResult> resp = listServiceInsertionServicesWithHttpInfo();
        return resp.getData();
    }

    /**
     * List all Service-Insertion Services.
     * List all Service-Insertion Service Definitions. 
     * @return ApiResponse&lt;ServiceInsertionServiceListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ServiceInsertionServiceListResult> listServiceInsertionServicesWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = listServiceInsertionServicesValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<ServiceInsertionServiceListResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all Service-Insertion Services. (asynchronously)
     * List all Service-Insertion Service Definitions. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listServiceInsertionServicesAsync(final ApiCallback<ServiceInsertionServiceListResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listServiceInsertionServicesValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ServiceInsertionServiceListResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listServiceInsertionStatus
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listServiceInsertionStatusCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/serviceinsertion/status";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listServiceInsertionStatusValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listServiceInsertionStatusCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List all service insertion status for supported contexts
     * List all service insertion status for supported contexts
     * @return ServiceInsertionStatusListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ServiceInsertionStatusListResult listServiceInsertionStatus() throws ApiException {
        ApiResponse<ServiceInsertionStatusListResult> resp = listServiceInsertionStatusWithHttpInfo();
        return resp.getData();
    }

    /**
     * List all service insertion status for supported contexts
     * List all service insertion status for supported contexts
     * @return ApiResponse&lt;ServiceInsertionStatusListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ServiceInsertionStatusListResult> listServiceInsertionStatusWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = listServiceInsertionStatusValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<ServiceInsertionStatusListResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all service insertion status for supported contexts (asynchronously)
     * List all service insertion status for supported contexts
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listServiceInsertionStatusAsync(final ApiCallback<ServiceInsertionStatusListResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listServiceInsertionStatusValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ServiceInsertionStatusListResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listServiceInstances
     * @param deployedTo Deployed_to referenced by service instances present in system (optional)
     * @param serviceDeploymentId Service Deployment Id using which the instances were deployed (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listServiceInstancesCall(String deployedTo, String serviceDeploymentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/serviceinsertion/service-instances";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (deployedTo != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("deployed_to", deployedTo));
        if (serviceDeploymentId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("service_deployment_id", serviceDeploymentId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listServiceInstancesValidateBeforeCall(String deployedTo, String serviceDeploymentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listServiceInstancesCall(deployedTo, serviceDeploymentId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get all Service-Instances present in system
     * Returns all Service-Instance(s) of all Services present in system. When request parameter (deployed_to or service_deployment_id) is provided as a part of request, it will filter out Service-Instances accordingly. 
     * @param deployedTo Deployed_to referenced by service instances present in system (optional)
     * @param serviceDeploymentId Service Deployment Id using which the instances were deployed (optional)
     * @return ServiceInstanceListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ServiceInstanceListResult listServiceInstances(String deployedTo, String serviceDeploymentId) throws ApiException {
        ApiResponse<ServiceInstanceListResult> resp = listServiceInstancesWithHttpInfo(deployedTo, serviceDeploymentId);
        return resp.getData();
    }

    /**
     * Get all Service-Instances present in system
     * Returns all Service-Instance(s) of all Services present in system. When request parameter (deployed_to or service_deployment_id) is provided as a part of request, it will filter out Service-Instances accordingly. 
     * @param deployedTo Deployed_to referenced by service instances present in system (optional)
     * @param serviceDeploymentId Service Deployment Id using which the instances were deployed (optional)
     * @return ApiResponse&lt;ServiceInstanceListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ServiceInstanceListResult> listServiceInstancesWithHttpInfo(String deployedTo, String serviceDeploymentId) throws ApiException {
        com.squareup.okhttp.Call call = listServiceInstancesValidateBeforeCall(deployedTo, serviceDeploymentId, null, null);
        Type localVarReturnType = new TypeToken<ServiceInstanceListResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all Service-Instances present in system (asynchronously)
     * Returns all Service-Instance(s) of all Services present in system. When request parameter (deployed_to or service_deployment_id) is provided as a part of request, it will filter out Service-Instances accordingly. 
     * @param deployedTo Deployed_to referenced by service instances present in system (optional)
     * @param serviceDeploymentId Service Deployment Id using which the instances were deployed (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listServiceInstancesAsync(String deployedTo, String serviceDeploymentId, final ApiCallback<ServiceInstanceListResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listServiceInstancesValidateBeforeCall(deployedTo, serviceDeploymentId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ServiceInstanceListResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listServiceInstancesForService
     * @param serviceId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listServiceInstancesForServiceCall(String serviceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/serviceinsertion/services/{service-id}/service-instances"
            .replaceAll("\\{" + "service-id" + "\\}", apiClient.escapeString(serviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listServiceInstancesForServiceValidateBeforeCall(String serviceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'serviceId' is set
        if (serviceId == null) {
            throw new ApiException("Missing the required parameter 'serviceId' when calling listServiceInstancesForService(Async)");
        }
        
        com.squareup.okhttp.Call call = listServiceInstancesForServiceCall(serviceId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get all Service-Instances for Service.
     * Returns all Service-Instance(s) for a given Service-Insertion Service. 
     * @param serviceId  (required)
     * @return ServiceInstanceListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ServiceInstanceListResult listServiceInstancesForService(String serviceId) throws ApiException {
        ApiResponse<ServiceInstanceListResult> resp = listServiceInstancesForServiceWithHttpInfo(serviceId);
        return resp.getData();
    }

    /**
     * Get all Service-Instances for Service.
     * Returns all Service-Instance(s) for a given Service-Insertion Service. 
     * @param serviceId  (required)
     * @return ApiResponse&lt;ServiceInstanceListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ServiceInstanceListResult> listServiceInstancesForServiceWithHttpInfo(String serviceId) throws ApiException {
        com.squareup.okhttp.Call call = listServiceInstancesForServiceValidateBeforeCall(serviceId, null, null);
        Type localVarReturnType = new TypeToken<ServiceInstanceListResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all Service-Instances for Service. (asynchronously)
     * Returns all Service-Instance(s) for a given Service-Insertion Service. 
     * @param serviceId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listServiceInstancesForServiceAsync(String serviceId, final ApiCallback<ServiceInstanceListResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listServiceInstancesForServiceValidateBeforeCall(serviceId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ServiceInstanceListResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listServiceManagers
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listServiceManagersCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/serviceinsertion/service-managers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listServiceManagersValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listServiceManagersCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List service managers
     * List all service managers. 
     * @return ServiceManagerListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ServiceManagerListResult listServiceManagers() throws ApiException {
        ApiResponse<ServiceManagerListResult> resp = listServiceManagersWithHttpInfo();
        return resp.getData();
    }

    /**
     * List service managers
     * List all service managers. 
     * @return ApiResponse&lt;ServiceManagerListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ServiceManagerListResult> listServiceManagersWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = listServiceManagersValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<ServiceManagerListResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List service managers (asynchronously)
     * List all service managers. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listServiceManagersAsync(final ApiCallback<ServiceManagerListResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listServiceManagersValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ServiceManagerListResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listServicePaths
     * @param serviceChainId  (required)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listServicePathsCall(String serviceChainId, String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/serviceinsertion/service-chains/{service-chain-id}/service-paths"
            .replaceAll("\\{" + "service-chain-id" + "\\}", apiClient.escapeString(serviceChainId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (includedFields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("included_fields", includedFields));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page_size", pageSize));
        if (sortAscending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_ascending", sortAscending));
        if (sortBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_by", sortBy));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listServicePathsValidateBeforeCall(String serviceChainId, String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'serviceChainId' is set
        if (serviceChainId == null) {
            throw new ApiException("Missing the required parameter 'serviceChainId' when calling listServicePaths(Async)");
        }
        
        com.squareup.okhttp.Call call = listServicePathsCall(serviceChainId, cursor, includedFields, pageSize, sortAscending, sortBy, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List all service paths
     * List all service paths for the given service chain for the given service chain id 
     * @param serviceChainId  (required)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @return ServicePathListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ServicePathListResult listServicePaths(String serviceChainId, String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy) throws ApiException {
        ApiResponse<ServicePathListResult> resp = listServicePathsWithHttpInfo(serviceChainId, cursor, includedFields, pageSize, sortAscending, sortBy);
        return resp.getData();
    }

    /**
     * List all service paths
     * List all service paths for the given service chain for the given service chain id 
     * @param serviceChainId  (required)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @return ApiResponse&lt;ServicePathListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ServicePathListResult> listServicePathsWithHttpInfo(String serviceChainId, String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy) throws ApiException {
        com.squareup.okhttp.Call call = listServicePathsValidateBeforeCall(serviceChainId, cursor, includedFields, pageSize, sortAscending, sortBy, null, null);
        Type localVarReturnType = new TypeToken<ServicePathListResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all service paths (asynchronously)
     * List all service paths for the given service chain for the given service chain id 
     * @param serviceChainId  (required)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listServicePathsAsync(String serviceChainId, String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, final ApiCallback<ServicePathListResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listServicePathsValidateBeforeCall(serviceChainId, cursor, includedFields, pageSize, sortAscending, sortBy, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ServicePathListResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listSolutionConfigs
     * @param serviceId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listSolutionConfigsCall(String serviceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/serviceinsertion/services/{service-id}/solution-configs"
            .replaceAll("\\{" + "service-id" + "\\}", apiClient.escapeString(serviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listSolutionConfigsValidateBeforeCall(String serviceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'serviceId' is set
        if (serviceId == null) {
            throw new ApiException("Missing the required parameter 'serviceId' when calling listSolutionConfigs(Async)");
        }
        
        com.squareup.okhttp.Call call = listSolutionConfigsCall(serviceId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Solution Config Information associated with a given service.
     * Returns Solution Config information for a given service. 
     * @param serviceId  (required)
     * @return SolutionConfigListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SolutionConfigListResult listSolutionConfigs(String serviceId) throws ApiException {
        ApiResponse<SolutionConfigListResult> resp = listSolutionConfigsWithHttpInfo(serviceId);
        return resp.getData();
    }

    /**
     * Get Solution Config Information associated with a given service.
     * Returns Solution Config information for a given service. 
     * @param serviceId  (required)
     * @return ApiResponse&lt;SolutionConfigListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SolutionConfigListResult> listSolutionConfigsWithHttpInfo(String serviceId) throws ApiException {
        com.squareup.okhttp.Call call = listSolutionConfigsValidateBeforeCall(serviceId, null, null);
        Type localVarReturnType = new TypeToken<SolutionConfigListResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Solution Config Information associated with a given service. (asynchronously)
     * Returns Solution Config information for a given service. 
     * @param serviceId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listSolutionConfigsAsync(String serviceId, final ApiCallback<SolutionConfigListResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listSolutionConfigsValidateBeforeCall(serviceId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SolutionConfigListResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listVendorTemplates
     * @param serviceId  (required)
     * @param vendorTemplateName Name of vendor template (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listVendorTemplatesCall(String serviceId, String vendorTemplateName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/serviceinsertion/services/{service-id}/vendor-templates"
            .replaceAll("\\{" + "service-id" + "\\}", apiClient.escapeString(serviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (vendorTemplateName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("vendor_template_name", vendorTemplateName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listVendorTemplatesValidateBeforeCall(String serviceId, String vendorTemplateName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'serviceId' is set
        if (serviceId == null) {
            throw new ApiException("Missing the required parameter 'serviceId' when calling listVendorTemplates(Async)");
        }
        
        com.squareup.okhttp.Call call = listVendorTemplatesCall(serviceId, vendorTemplateName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List all VendorTemplates of a Service.
     * List all vendor templates of a service. 
     * @param serviceId  (required)
     * @param vendorTemplateName Name of vendor template (optional)
     * @return VendorTemplateListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VendorTemplateListResult listVendorTemplates(String serviceId, String vendorTemplateName) throws ApiException {
        ApiResponse<VendorTemplateListResult> resp = listVendorTemplatesWithHttpInfo(serviceId, vendorTemplateName);
        return resp.getData();
    }

    /**
     * List all VendorTemplates of a Service.
     * List all vendor templates of a service. 
     * @param serviceId  (required)
     * @param vendorTemplateName Name of vendor template (optional)
     * @return ApiResponse&lt;VendorTemplateListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VendorTemplateListResult> listVendorTemplatesWithHttpInfo(String serviceId, String vendorTemplateName) throws ApiException {
        com.squareup.okhttp.Call call = listVendorTemplatesValidateBeforeCall(serviceId, vendorTemplateName, null, null);
        Type localVarReturnType = new TypeToken<VendorTemplateListResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all VendorTemplates of a Service. (asynchronously)
     * List all vendor templates of a service. 
     * @param serviceId  (required)
     * @param vendorTemplateName Name of vendor template (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listVendorTemplatesAsync(String serviceId, String vendorTemplateName, final ApiCallback<VendorTemplateListResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listVendorTemplatesValidateBeforeCall(serviceId, vendorTemplateName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VendorTemplateListResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for registerServiceManager
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call registerServiceManagerCall(ServiceManager body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/serviceinsertion/service-managers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call registerServiceManagerValidateBeforeCall(ServiceManager body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling registerServiceManager(Async)");
        }
        
        com.squareup.okhttp.Call call = registerServiceManagerCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Register service manager
     * Register service-manager with NSX with basic details like name, username, password.
     * @param body  (required)
     * @return ServiceManager
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ServiceManager registerServiceManager(ServiceManager body) throws ApiException {
        ApiResponse<ServiceManager> resp = registerServiceManagerWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Register service manager
     * Register service-manager with NSX with basic details like name, username, password.
     * @param body  (required)
     * @return ApiResponse&lt;ServiceManager&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ServiceManager> registerServiceManagerWithHttpInfo(ServiceManager body) throws ApiException {
        com.squareup.okhttp.Call call = registerServiceManagerValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<ServiceManager>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Register service manager (asynchronously)
     * Register service-manager with NSX with basic details like name, username, password.
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call registerServiceManagerAsync(ServiceManager body, final ApiCallback<ServiceManager> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = registerServiceManagerValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ServiceManager>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for removeServiceInsertionExcludeListMemberRemoveMember
     * @param objectId Identifier of the object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call removeServiceInsertionExcludeListMemberRemoveMemberCall(String objectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/serviceinsertion/excludelist?action=remove_member";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (objectId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("object_id", objectId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call removeServiceInsertionExcludeListMemberRemoveMemberValidateBeforeCall(String objectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling removeServiceInsertionExcludeListMemberRemoveMember(Async)");
        }
        
        com.squareup.okhttp.Call call = removeServiceInsertionExcludeListMemberRemoveMemberCall(objectId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Remove an existing object from the exclude list
     * Remove an existing object from the exclude list
     * @param objectId Identifier of the object (required)
     * @return ResourceReference
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResourceReference removeServiceInsertionExcludeListMemberRemoveMember(String objectId) throws ApiException {
        ApiResponse<ResourceReference> resp = removeServiceInsertionExcludeListMemberRemoveMemberWithHttpInfo(objectId);
        return resp.getData();
    }

    /**
     * Remove an existing object from the exclude list
     * Remove an existing object from the exclude list
     * @param objectId Identifier of the object (required)
     * @return ApiResponse&lt;ResourceReference&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResourceReference> removeServiceInsertionExcludeListMemberRemoveMemberWithHttpInfo(String objectId) throws ApiException {
        com.squareup.okhttp.Call call = removeServiceInsertionExcludeListMemberRemoveMemberValidateBeforeCall(objectId, null, null);
        Type localVarReturnType = new TypeToken<ResourceReference>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Remove an existing object from the exclude list (asynchronously)
     * Remove an existing object from the exclude list
     * @param objectId Identifier of the object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call removeServiceInsertionExcludeListMemberRemoveMemberAsync(String objectId, final ApiCallback<ResourceReference> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = removeServiceInsertionExcludeListMemberRemoveMemberValidateBeforeCall(objectId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResourceReference>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for resolveSourceEntities
     * @param sourceNodeValue value (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call resolveSourceEntitiesCall(String sourceNodeValue, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/serviceinsertion/source-entities";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (sourceNodeValue != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("source_node_value", sourceNodeValue));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call resolveSourceEntitiesValidateBeforeCall(String sourceNodeValue, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'sourceNodeValue' is set
        if (sourceNodeValue == null) {
            throw new ApiException("Missing the required parameter 'sourceNodeValue' when calling resolveSourceEntities(Async)");
        }
        
        com.squareup.okhttp.Call call = resolveSourceEntitiesCall(sourceNodeValue, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Resolve &#x27;source node id&#x27; value to source entities.
     * Service insertion data path inserts unique &#x27;source node id&#x27; value into each packet. This API can be used to identify the source of the packet using this value. It can be resolved to multiple source entities. 
     * @param sourceNodeValue value (required)
     * @return SourceEntityResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SourceEntityResult resolveSourceEntities(String sourceNodeValue) throws ApiException {
        ApiResponse<SourceEntityResult> resp = resolveSourceEntitiesWithHttpInfo(sourceNodeValue);
        return resp.getData();
    }

    /**
     * Resolve &#x27;source node id&#x27; value to source entities.
     * Service insertion data path inserts unique &#x27;source node id&#x27; value into each packet. This API can be used to identify the source of the packet using this value. It can be resolved to multiple source entities. 
     * @param sourceNodeValue value (required)
     * @return ApiResponse&lt;SourceEntityResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SourceEntityResult> resolveSourceEntitiesWithHttpInfo(String sourceNodeValue) throws ApiException {
        com.squareup.okhttp.Call call = resolveSourceEntitiesValidateBeforeCall(sourceNodeValue, null, null);
        Type localVarReturnType = new TypeToken<SourceEntityResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Resolve &#x27;source node id&#x27; value to source entities. (asynchronously)
     * Service insertion data path inserts unique &#x27;source node id&#x27; value into each packet. This API can be used to identify the source of the packet using this value. It can be resolved to multiple source entities. 
     * @param sourceNodeValue value (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call resolveSourceEntitiesAsync(String sourceNodeValue, final ApiCallback<SourceEntityResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = resolveSourceEntitiesValidateBeforeCall(sourceNodeValue, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SourceEntityResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for reviseServiceInsertionRuleRevise
     * @param body  (required)
     * @param sectionId  (required)
     * @param ruleId  (required)
     * @param id Identifier of the anchor rule or section. This is a required field in case operation like &#x27;insert_before&#x27; and &#x27;insert_after&#x27;. (optional)
     * @param operation Operation (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call reviseServiceInsertionRuleReviseCall(ServiceInsertionRule body, String sectionId, String ruleId, String id, String operation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/serviceinsertion/sections/{section-id}/rules/{rule-id}?action=revise"
            .replaceAll("\\{" + "section-id" + "\\}", apiClient.escapeString(sectionId.toString()))
            .replaceAll("\\{" + "rule-id" + "\\}", apiClient.escapeString(ruleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (id != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("id", id));
        if (operation != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("operation", operation));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call reviseServiceInsertionRuleReviseValidateBeforeCall(ServiceInsertionRule body, String sectionId, String ruleId, String id, String operation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling reviseServiceInsertionRuleRevise(Async)");
        }
        // verify the required parameter 'sectionId' is set
        if (sectionId == null) {
            throw new ApiException("Missing the required parameter 'sectionId' when calling reviseServiceInsertionRuleRevise(Async)");
        }
        // verify the required parameter 'ruleId' is set
        if (ruleId == null) {
            throw new ApiException("Missing the required parameter 'ruleId' when calling reviseServiceInsertionRuleRevise(Async)");
        }
        
        com.squareup.okhttp.Call call = reviseServiceInsertionRuleReviseCall(body, sectionId, ruleId, id, operation, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update an Existing Rule and Reorder the Rule
     * Modifies existing serviceinsertion rule along with relative position among other serviceinsertion rules inside a serviceinsertion section. 
     * @param body  (required)
     * @param sectionId  (required)
     * @param ruleId  (required)
     * @param id Identifier of the anchor rule or section. This is a required field in case operation like &#x27;insert_before&#x27; and &#x27;insert_after&#x27;. (optional)
     * @param operation Operation (optional)
     * @return ServiceInsertionRule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ServiceInsertionRule reviseServiceInsertionRuleRevise(ServiceInsertionRule body, String sectionId, String ruleId, String id, String operation) throws ApiException {
        ApiResponse<ServiceInsertionRule> resp = reviseServiceInsertionRuleReviseWithHttpInfo(body, sectionId, ruleId, id, operation);
        return resp.getData();
    }

    /**
     * Update an Existing Rule and Reorder the Rule
     * Modifies existing serviceinsertion rule along with relative position among other serviceinsertion rules inside a serviceinsertion section. 
     * @param body  (required)
     * @param sectionId  (required)
     * @param ruleId  (required)
     * @param id Identifier of the anchor rule or section. This is a required field in case operation like &#x27;insert_before&#x27; and &#x27;insert_after&#x27;. (optional)
     * @param operation Operation (optional)
     * @return ApiResponse&lt;ServiceInsertionRule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ServiceInsertionRule> reviseServiceInsertionRuleReviseWithHttpInfo(ServiceInsertionRule body, String sectionId, String ruleId, String id, String operation) throws ApiException {
        com.squareup.okhttp.Call call = reviseServiceInsertionRuleReviseValidateBeforeCall(body, sectionId, ruleId, id, operation, null, null);
        Type localVarReturnType = new TypeToken<ServiceInsertionRule>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update an Existing Rule and Reorder the Rule (asynchronously)
     * Modifies existing serviceinsertion rule along with relative position among other serviceinsertion rules inside a serviceinsertion section. 
     * @param body  (required)
     * @param sectionId  (required)
     * @param ruleId  (required)
     * @param id Identifier of the anchor rule or section. This is a required field in case operation like &#x27;insert_before&#x27; and &#x27;insert_after&#x27;. (optional)
     * @param operation Operation (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call reviseServiceInsertionRuleReviseAsync(ServiceInsertionRule body, String sectionId, String ruleId, String id, String operation, final ApiCallback<ServiceInsertionRule> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = reviseServiceInsertionRuleReviseValidateBeforeCall(body, sectionId, ruleId, id, operation, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ServiceInsertionRule>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for reviseServiceInsertionSectionRevise
     * @param body  (required)
     * @param sectionId  (required)
     * @param id Identifier of the anchor rule or section. This is a required field in case operation like &#x27;insert_before&#x27; and &#x27;insert_after&#x27;. (optional)
     * @param operation Operation (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call reviseServiceInsertionSectionReviseCall(ServiceInsertionSection body, String sectionId, String id, String operation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/serviceinsertion/sections/{section-id}?action=revise"
            .replaceAll("\\{" + "section-id" + "\\}", apiClient.escapeString(sectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (id != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("id", id));
        if (operation != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("operation", operation));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call reviseServiceInsertionSectionReviseValidateBeforeCall(ServiceInsertionSection body, String sectionId, String id, String operation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling reviseServiceInsertionSectionRevise(Async)");
        }
        // verify the required parameter 'sectionId' is set
        if (sectionId == null) {
            throw new ApiException("Missing the required parameter 'sectionId' when calling reviseServiceInsertionSectionRevise(Async)");
        }
        
        com.squareup.okhttp.Call call = reviseServiceInsertionSectionReviseCall(body, sectionId, id, operation, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update an Existing Section, Including Its Position
     * Modifies an existing serviceinsertion section along with its relative position among other serviceinsertion sections in the system. 
     * @param body  (required)
     * @param sectionId  (required)
     * @param id Identifier of the anchor rule or section. This is a required field in case operation like &#x27;insert_before&#x27; and &#x27;insert_after&#x27;. (optional)
     * @param operation Operation (optional)
     * @return ServiceInsertionSection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ServiceInsertionSection reviseServiceInsertionSectionRevise(ServiceInsertionSection body, String sectionId, String id, String operation) throws ApiException {
        ApiResponse<ServiceInsertionSection> resp = reviseServiceInsertionSectionReviseWithHttpInfo(body, sectionId, id, operation);
        return resp.getData();
    }

    /**
     * Update an Existing Section, Including Its Position
     * Modifies an existing serviceinsertion section along with its relative position among other serviceinsertion sections in the system. 
     * @param body  (required)
     * @param sectionId  (required)
     * @param id Identifier of the anchor rule or section. This is a required field in case operation like &#x27;insert_before&#x27; and &#x27;insert_after&#x27;. (optional)
     * @param operation Operation (optional)
     * @return ApiResponse&lt;ServiceInsertionSection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ServiceInsertionSection> reviseServiceInsertionSectionReviseWithHttpInfo(ServiceInsertionSection body, String sectionId, String id, String operation) throws ApiException {
        com.squareup.okhttp.Call call = reviseServiceInsertionSectionReviseValidateBeforeCall(body, sectionId, id, operation, null, null);
        Type localVarReturnType = new TypeToken<ServiceInsertionSection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update an Existing Section, Including Its Position (asynchronously)
     * Modifies an existing serviceinsertion section along with its relative position among other serviceinsertion sections in the system. 
     * @param body  (required)
     * @param sectionId  (required)
     * @param id Identifier of the anchor rule or section. This is a required field in case operation like &#x27;insert_before&#x27; and &#x27;insert_after&#x27;. (optional)
     * @param operation Operation (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call reviseServiceInsertionSectionReviseAsync(ServiceInsertionSection body, String sectionId, String id, String operation, final ApiCallback<ServiceInsertionSection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = reviseServiceInsertionSectionReviseValidateBeforeCall(body, sectionId, id, operation, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ServiceInsertionSection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for reviseServiceInsertionSectionWithRulesReviseWithRules
     * @param body  (required)
     * @param sectionId  (required)
     * @param id Identifier of the anchor rule or section. This is a required field in case operation like &#x27;insert_before&#x27; and &#x27;insert_after&#x27;. (optional)
     * @param operation Operation (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call reviseServiceInsertionSectionWithRulesReviseWithRulesCall(ServiceInsertionSectionRuleList body, String sectionId, String id, String operation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/serviceinsertion/sections/{section-id}?action=revise_with_rules"
            .replaceAll("\\{" + "section-id" + "\\}", apiClient.escapeString(sectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (id != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("id", id));
        if (operation != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("operation", operation));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call reviseServiceInsertionSectionWithRulesReviseWithRulesValidateBeforeCall(ServiceInsertionSectionRuleList body, String sectionId, String id, String operation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling reviseServiceInsertionSectionWithRulesReviseWithRules(Async)");
        }
        // verify the required parameter 'sectionId' is set
        if (sectionId == null) {
            throw new ApiException("Missing the required parameter 'sectionId' when calling reviseServiceInsertionSectionWithRulesReviseWithRules(Async)");
        }
        
        com.squareup.okhttp.Call call = reviseServiceInsertionSectionWithRulesReviseWithRulesCall(body, sectionId, id, operation, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update an Existing Section with Rules
     * Modifies an existing serviceinsertion section along with its relative position among other serviceinsertion sections with rules. When invoked on a large number of rules, this API is supported only at low rates of invocation (not more than 2 times per minute). The typical latency of this API with about 1024 rules is about 15 seconds in a cluster setup. This API should not be invoked with large payloads at automation speeds.  Instead, to move a section above or below another section, use: POST /api/v1/serviceinsertion/sections/&amp;lt;section-id&amp;gt;?action&#x3D;revise  To modify rules, use: PUT /api/v1/serviceinsertion/sections/&amp;lt;section-id&amp;gt;/rules/&amp;lt;rule-id&amp;gt; 
     * @param body  (required)
     * @param sectionId  (required)
     * @param id Identifier of the anchor rule or section. This is a required field in case operation like &#x27;insert_before&#x27; and &#x27;insert_after&#x27;. (optional)
     * @param operation Operation (optional)
     * @return ServiceInsertionSectionRuleList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ServiceInsertionSectionRuleList reviseServiceInsertionSectionWithRulesReviseWithRules(ServiceInsertionSectionRuleList body, String sectionId, String id, String operation) throws ApiException {
        ApiResponse<ServiceInsertionSectionRuleList> resp = reviseServiceInsertionSectionWithRulesReviseWithRulesWithHttpInfo(body, sectionId, id, operation);
        return resp.getData();
    }

    /**
     * Update an Existing Section with Rules
     * Modifies an existing serviceinsertion section along with its relative position among other serviceinsertion sections with rules. When invoked on a large number of rules, this API is supported only at low rates of invocation (not more than 2 times per minute). The typical latency of this API with about 1024 rules is about 15 seconds in a cluster setup. This API should not be invoked with large payloads at automation speeds.  Instead, to move a section above or below another section, use: POST /api/v1/serviceinsertion/sections/&amp;lt;section-id&amp;gt;?action&#x3D;revise  To modify rules, use: PUT /api/v1/serviceinsertion/sections/&amp;lt;section-id&amp;gt;/rules/&amp;lt;rule-id&amp;gt; 
     * @param body  (required)
     * @param sectionId  (required)
     * @param id Identifier of the anchor rule or section. This is a required field in case operation like &#x27;insert_before&#x27; and &#x27;insert_after&#x27;. (optional)
     * @param operation Operation (optional)
     * @return ApiResponse&lt;ServiceInsertionSectionRuleList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ServiceInsertionSectionRuleList> reviseServiceInsertionSectionWithRulesReviseWithRulesWithHttpInfo(ServiceInsertionSectionRuleList body, String sectionId, String id, String operation) throws ApiException {
        com.squareup.okhttp.Call call = reviseServiceInsertionSectionWithRulesReviseWithRulesValidateBeforeCall(body, sectionId, id, operation, null, null);
        Type localVarReturnType = new TypeToken<ServiceInsertionSectionRuleList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update an Existing Section with Rules (asynchronously)
     * Modifies an existing serviceinsertion section along with its relative position among other serviceinsertion sections with rules. When invoked on a large number of rules, this API is supported only at low rates of invocation (not more than 2 times per minute). The typical latency of this API with about 1024 rules is about 15 seconds in a cluster setup. This API should not be invoked with large payloads at automation speeds.  Instead, to move a section above or below another section, use: POST /api/v1/serviceinsertion/sections/&amp;lt;section-id&amp;gt;?action&#x3D;revise  To modify rules, use: PUT /api/v1/serviceinsertion/sections/&amp;lt;section-id&amp;gt;/rules/&amp;lt;rule-id&amp;gt; 
     * @param body  (required)
     * @param sectionId  (required)
     * @param id Identifier of the anchor rule or section. This is a required field in case operation like &#x27;insert_before&#x27; and &#x27;insert_after&#x27;. (optional)
     * @param operation Operation (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call reviseServiceInsertionSectionWithRulesReviseWithRulesAsync(ServiceInsertionSectionRuleList body, String sectionId, String id, String operation, final ApiCallback<ServiceInsertionSectionRuleList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = reviseServiceInsertionSectionWithRulesReviseWithRulesValidateBeforeCall(body, sectionId, id, operation, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ServiceInsertionSectionRuleList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateServiceDeployment
     * @param body  (required)
     * @param serviceId  (required)
     * @param serviceDeploymentId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateServiceDeploymentCall(ServiceDeployment body, String serviceId, String serviceDeploymentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/serviceinsertion/services/{service-id}/service-deployments/{service-deployment-id}"
            .replaceAll("\\{" + "service-id" + "\\}", apiClient.escapeString(serviceId.toString()))
            .replaceAll("\\{" + "service-deployment-id" + "\\}", apiClient.escapeString(serviceDeploymentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateServiceDeploymentValidateBeforeCall(ServiceDeployment body, String serviceId, String serviceDeploymentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateServiceDeployment(Async)");
        }
        // verify the required parameter 'serviceId' is set
        if (serviceId == null) {
            throw new ApiException("Missing the required parameter 'serviceId' when calling updateServiceDeployment(Async)");
        }
        // verify the required parameter 'serviceDeploymentId' is set
        if (serviceDeploymentId == null) {
            throw new ApiException("Missing the required parameter 'serviceDeploymentId' when calling updateServiceDeployment(Async)");
        }
        
        com.squareup.okhttp.Call call = updateServiceDeploymentCall(body, serviceId, serviceDeploymentId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update an existing Service Deployment.
     * Modifies an existing Service Deployment. This will not update the already deployed service instances, deployed via this deployment. 
     * @param body  (required)
     * @param serviceId  (required)
     * @param serviceDeploymentId  (required)
     * @return ServiceDeployment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ServiceDeployment updateServiceDeployment(ServiceDeployment body, String serviceId, String serviceDeploymentId) throws ApiException {
        ApiResponse<ServiceDeployment> resp = updateServiceDeploymentWithHttpInfo(body, serviceId, serviceDeploymentId);
        return resp.getData();
    }

    /**
     * Update an existing Service Deployment.
     * Modifies an existing Service Deployment. This will not update the already deployed service instances, deployed via this deployment. 
     * @param body  (required)
     * @param serviceId  (required)
     * @param serviceDeploymentId  (required)
     * @return ApiResponse&lt;ServiceDeployment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ServiceDeployment> updateServiceDeploymentWithHttpInfo(ServiceDeployment body, String serviceId, String serviceDeploymentId) throws ApiException {
        com.squareup.okhttp.Call call = updateServiceDeploymentValidateBeforeCall(body, serviceId, serviceDeploymentId, null, null);
        Type localVarReturnType = new TypeToken<ServiceDeployment>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update an existing Service Deployment. (asynchronously)
     * Modifies an existing Service Deployment. This will not update the already deployed service instances, deployed via this deployment. 
     * @param body  (required)
     * @param serviceId  (required)
     * @param serviceDeploymentId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateServiceDeploymentAsync(ServiceDeployment body, String serviceId, String serviceDeploymentId, final ApiCallback<ServiceDeployment> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateServiceDeploymentValidateBeforeCall(body, serviceId, serviceDeploymentId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ServiceDeployment>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateServiceInsertionExcludeList
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateServiceInsertionExcludeListCall(SIExcludeList body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/serviceinsertion/excludelist";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateServiceInsertionExcludeListValidateBeforeCall(SIExcludeList body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateServiceInsertionExcludeList(Async)");
        }
        
        com.squareup.okhttp.Call call = updateServiceInsertionExcludeListCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Modify exclude list
     * Modify exclude list. This includes adding/removing members in the list. 
     * @param body  (required)
     * @return SIExcludeList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SIExcludeList updateServiceInsertionExcludeList(SIExcludeList body) throws ApiException {
        ApiResponse<SIExcludeList> resp = updateServiceInsertionExcludeListWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Modify exclude list
     * Modify exclude list. This includes adding/removing members in the list. 
     * @param body  (required)
     * @return ApiResponse&lt;SIExcludeList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SIExcludeList> updateServiceInsertionExcludeListWithHttpInfo(SIExcludeList body) throws ApiException {
        com.squareup.okhttp.Call call = updateServiceInsertionExcludeListValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<SIExcludeList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Modify exclude list (asynchronously)
     * Modify exclude list. This includes adding/removing members in the list. 
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateServiceInsertionExcludeListAsync(SIExcludeList body, final ApiCallback<SIExcludeList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateServiceInsertionExcludeListValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SIExcludeList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateServiceInsertionRule
     * @param body  (required)
     * @param sectionId  (required)
     * @param ruleId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateServiceInsertionRuleCall(ServiceInsertionRule body, String sectionId, String ruleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/serviceinsertion/sections/{section-id}/rules/{rule-id}"
            .replaceAll("\\{" + "section-id" + "\\}", apiClient.escapeString(sectionId.toString()))
            .replaceAll("\\{" + "rule-id" + "\\}", apiClient.escapeString(ruleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateServiceInsertionRuleValidateBeforeCall(ServiceInsertionRule body, String sectionId, String ruleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateServiceInsertionRule(Async)");
        }
        // verify the required parameter 'sectionId' is set
        if (sectionId == null) {
            throw new ApiException("Missing the required parameter 'sectionId' when calling updateServiceInsertionRule(Async)");
        }
        // verify the required parameter 'ruleId' is set
        if (ruleId == null) {
            throw new ApiException("Missing the required parameter 'ruleId' when calling updateServiceInsertionRule(Async)");
        }
        
        com.squareup.okhttp.Call call = updateServiceInsertionRuleCall(body, sectionId, ruleId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update an Existing Rule
     * Modifies existing serviceinsertion rule in a serviceinsertion section. 
     * @param body  (required)
     * @param sectionId  (required)
     * @param ruleId  (required)
     * @return ServiceInsertionRule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ServiceInsertionRule updateServiceInsertionRule(ServiceInsertionRule body, String sectionId, String ruleId) throws ApiException {
        ApiResponse<ServiceInsertionRule> resp = updateServiceInsertionRuleWithHttpInfo(body, sectionId, ruleId);
        return resp.getData();
    }

    /**
     * Update an Existing Rule
     * Modifies existing serviceinsertion rule in a serviceinsertion section. 
     * @param body  (required)
     * @param sectionId  (required)
     * @param ruleId  (required)
     * @return ApiResponse&lt;ServiceInsertionRule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ServiceInsertionRule> updateServiceInsertionRuleWithHttpInfo(ServiceInsertionRule body, String sectionId, String ruleId) throws ApiException {
        com.squareup.okhttp.Call call = updateServiceInsertionRuleValidateBeforeCall(body, sectionId, ruleId, null, null);
        Type localVarReturnType = new TypeToken<ServiceInsertionRule>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update an Existing Rule (asynchronously)
     * Modifies existing serviceinsertion rule in a serviceinsertion section. 
     * @param body  (required)
     * @param sectionId  (required)
     * @param ruleId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateServiceInsertionRuleAsync(ServiceInsertionRule body, String sectionId, String ruleId, final ApiCallback<ServiceInsertionRule> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateServiceInsertionRuleValidateBeforeCall(body, sectionId, ruleId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ServiceInsertionRule>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateServiceInsertionSection
     * @param body  (required)
     * @param sectionId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateServiceInsertionSectionCall(ServiceInsertionSection body, String sectionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/serviceinsertion/sections/{section-id}"
            .replaceAll("\\{" + "section-id" + "\\}", apiClient.escapeString(sectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateServiceInsertionSectionValidateBeforeCall(ServiceInsertionSection body, String sectionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateServiceInsertionSection(Async)");
        }
        // verify the required parameter 'sectionId' is set
        if (sectionId == null) {
            throw new ApiException("Missing the required parameter 'sectionId' when calling updateServiceInsertionSection(Async)");
        }
        
        com.squareup.okhttp.Call call = updateServiceInsertionSectionCall(body, sectionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update an Existing Section
     * Modifies the specified section, but does not modify the section&#x27;s associated rules. 
     * @param body  (required)
     * @param sectionId  (required)
     * @return ServiceInsertionSection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ServiceInsertionSection updateServiceInsertionSection(ServiceInsertionSection body, String sectionId) throws ApiException {
        ApiResponse<ServiceInsertionSection> resp = updateServiceInsertionSectionWithHttpInfo(body, sectionId);
        return resp.getData();
    }

    /**
     * Update an Existing Section
     * Modifies the specified section, but does not modify the section&#x27;s associated rules. 
     * @param body  (required)
     * @param sectionId  (required)
     * @return ApiResponse&lt;ServiceInsertionSection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ServiceInsertionSection> updateServiceInsertionSectionWithHttpInfo(ServiceInsertionSection body, String sectionId) throws ApiException {
        com.squareup.okhttp.Call call = updateServiceInsertionSectionValidateBeforeCall(body, sectionId, null, null);
        Type localVarReturnType = new TypeToken<ServiceInsertionSection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update an Existing Section (asynchronously)
     * Modifies the specified section, but does not modify the section&#x27;s associated rules. 
     * @param body  (required)
     * @param sectionId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateServiceInsertionSectionAsync(ServiceInsertionSection body, String sectionId, final ApiCallback<ServiceInsertionSection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateServiceInsertionSectionValidateBeforeCall(body, sectionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ServiceInsertionSection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateServiceInsertionSectionWithRulesUpdateWithRules
     * @param body  (required)
     * @param sectionId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateServiceInsertionSectionWithRulesUpdateWithRulesCall(ServiceInsertionSectionRuleList body, String sectionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/serviceinsertion/sections/{section-id}?action=update_with_rules"
            .replaceAll("\\{" + "section-id" + "\\}", apiClient.escapeString(sectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateServiceInsertionSectionWithRulesUpdateWithRulesValidateBeforeCall(ServiceInsertionSectionRuleList body, String sectionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateServiceInsertionSectionWithRulesUpdateWithRules(Async)");
        }
        // verify the required parameter 'sectionId' is set
        if (sectionId == null) {
            throw new ApiException("Missing the required parameter 'sectionId' when calling updateServiceInsertionSectionWithRulesUpdateWithRules(Async)");
        }
        
        com.squareup.okhttp.Call call = updateServiceInsertionSectionWithRulesUpdateWithRulesCall(body, sectionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update an Existing Section, Including Its Rules
     * Modifies existing serviceinsertion section along with its association with rules. When invoked on a large number of rules, this API is supported only at low rates of invocation (not more than 2 times per minute). The typical latency of this API with about 1024 rules is about 15 seconds in a cluster setup. This API should not be invoked with large payloads at automation speeds.  Instead, to update rule content, use: PUT /api/v1/serviceinsertion/sections/&amp;lt;section-id&amp;gt;/rules/&amp;lt;rule-id&amp;gt; 
     * @param body  (required)
     * @param sectionId  (required)
     * @return ServiceInsertionSectionRuleList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ServiceInsertionSectionRuleList updateServiceInsertionSectionWithRulesUpdateWithRules(ServiceInsertionSectionRuleList body, String sectionId) throws ApiException {
        ApiResponse<ServiceInsertionSectionRuleList> resp = updateServiceInsertionSectionWithRulesUpdateWithRulesWithHttpInfo(body, sectionId);
        return resp.getData();
    }

    /**
     * Update an Existing Section, Including Its Rules
     * Modifies existing serviceinsertion section along with its association with rules. When invoked on a large number of rules, this API is supported only at low rates of invocation (not more than 2 times per minute). The typical latency of this API with about 1024 rules is about 15 seconds in a cluster setup. This API should not be invoked with large payloads at automation speeds.  Instead, to update rule content, use: PUT /api/v1/serviceinsertion/sections/&amp;lt;section-id&amp;gt;/rules/&amp;lt;rule-id&amp;gt; 
     * @param body  (required)
     * @param sectionId  (required)
     * @return ApiResponse&lt;ServiceInsertionSectionRuleList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ServiceInsertionSectionRuleList> updateServiceInsertionSectionWithRulesUpdateWithRulesWithHttpInfo(ServiceInsertionSectionRuleList body, String sectionId) throws ApiException {
        com.squareup.okhttp.Call call = updateServiceInsertionSectionWithRulesUpdateWithRulesValidateBeforeCall(body, sectionId, null, null);
        Type localVarReturnType = new TypeToken<ServiceInsertionSectionRuleList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update an Existing Section, Including Its Rules (asynchronously)
     * Modifies existing serviceinsertion section along with its association with rules. When invoked on a large number of rules, this API is supported only at low rates of invocation (not more than 2 times per minute). The typical latency of this API with about 1024 rules is about 15 seconds in a cluster setup. This API should not be invoked with large payloads at automation speeds.  Instead, to update rule content, use: PUT /api/v1/serviceinsertion/sections/&amp;lt;section-id&amp;gt;/rules/&amp;lt;rule-id&amp;gt; 
     * @param body  (required)
     * @param sectionId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateServiceInsertionSectionWithRulesUpdateWithRulesAsync(ServiceInsertionSectionRuleList body, String sectionId, final ApiCallback<ServiceInsertionSectionRuleList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateServiceInsertionSectionWithRulesUpdateWithRulesValidateBeforeCall(body, sectionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ServiceInsertionSectionRuleList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateServiceInsertionService
     * @param body  (required)
     * @param serviceId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateServiceInsertionServiceCall(ServiceDefinition body, String serviceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/serviceinsertion/services/{service-id}"
            .replaceAll("\\{" + "service-id" + "\\}", apiClient.escapeString(serviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateServiceInsertionServiceValidateBeforeCall(ServiceDefinition body, String serviceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateServiceInsertionService(Async)");
        }
        // verify the required parameter 'serviceId' is set
        if (serviceId == null) {
            throw new ApiException("Missing the required parameter 'serviceId' when calling updateServiceInsertionService(Async)");
        }
        
        com.squareup.okhttp.Call call = updateServiceInsertionServiceCall(body, serviceId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update an existing Service
     * Modifies the specified Service. 
     * @param body  (required)
     * @param serviceId  (required)
     * @return ServiceDefinition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ServiceDefinition updateServiceInsertionService(ServiceDefinition body, String serviceId) throws ApiException {
        ApiResponse<ServiceDefinition> resp = updateServiceInsertionServiceWithHttpInfo(body, serviceId);
        return resp.getData();
    }

    /**
     * Update an existing Service
     * Modifies the specified Service. 
     * @param body  (required)
     * @param serviceId  (required)
     * @return ApiResponse&lt;ServiceDefinition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ServiceDefinition> updateServiceInsertionServiceWithHttpInfo(ServiceDefinition body, String serviceId) throws ApiException {
        com.squareup.okhttp.Call call = updateServiceInsertionServiceValidateBeforeCall(body, serviceId, null, null);
        Type localVarReturnType = new TypeToken<ServiceDefinition>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update an existing Service (asynchronously)
     * Modifies the specified Service. 
     * @param body  (required)
     * @param serviceId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateServiceInsertionServiceAsync(ServiceDefinition body, String serviceId, final ApiCallback<ServiceDefinition> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateServiceInsertionServiceValidateBeforeCall(body, serviceId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ServiceDefinition>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateServiceInsertionStatus
     * @param body  (required)
     * @param contextType  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateServiceInsertionStatusCall(ServiceInsertionStatus body, String contextType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/serviceinsertion/status/{context-type}"
            .replaceAll("\\{" + "context-type" + "\\}", apiClient.escapeString(contextType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateServiceInsertionStatusValidateBeforeCall(ServiceInsertionStatus body, String contextType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateServiceInsertionStatus(Async)");
        }
        // verify the required parameter 'contextType' is set
        if (contextType == null) {
            throw new ApiException("Missing the required parameter 'contextType' when calling updateServiceInsertionStatus(Async)");
        }
        
        com.squareup.okhttp.Call call = updateServiceInsertionStatusCall(body, contextType, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update global ServiceInsertion status for a context
     * Update global ServiceInsertion status for a context
     * @param body  (required)
     * @param contextType  (required)
     * @return ServiceInsertionStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ServiceInsertionStatus updateServiceInsertionStatus(ServiceInsertionStatus body, String contextType) throws ApiException {
        ApiResponse<ServiceInsertionStatus> resp = updateServiceInsertionStatusWithHttpInfo(body, contextType);
        return resp.getData();
    }

    /**
     * Update global ServiceInsertion status for a context
     * Update global ServiceInsertion status for a context
     * @param body  (required)
     * @param contextType  (required)
     * @return ApiResponse&lt;ServiceInsertionStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ServiceInsertionStatus> updateServiceInsertionStatusWithHttpInfo(ServiceInsertionStatus body, String contextType) throws ApiException {
        com.squareup.okhttp.Call call = updateServiceInsertionStatusValidateBeforeCall(body, contextType, null, null);
        Type localVarReturnType = new TypeToken<ServiceInsertionStatus>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update global ServiceInsertion status for a context (asynchronously)
     * Update global ServiceInsertion status for a context
     * @param body  (required)
     * @param contextType  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateServiceInsertionStatusAsync(ServiceInsertionStatus body, String contextType, final ApiCallback<ServiceInsertionStatus> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateServiceInsertionStatusValidateBeforeCall(body, contextType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ServiceInsertionStatus>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateServiceInstance
     * @param body  (required)
     * @param serviceId  (required)
     * @param serviceInstanceId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateServiceInstanceCall(BaseServiceInstance body, String serviceId, String serviceInstanceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/serviceinsertion/services/{service-id}/service-instances/{service-instance-id}"
            .replaceAll("\\{" + "service-id" + "\\}", apiClient.escapeString(serviceId.toString()))
            .replaceAll("\\{" + "service-instance-id" + "\\}", apiClient.escapeString(serviceInstanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateServiceInstanceValidateBeforeCall(BaseServiceInstance body, String serviceId, String serviceInstanceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateServiceInstance(Async)");
        }
        // verify the required parameter 'serviceId' is set
        if (serviceId == null) {
            throw new ApiException("Missing the required parameter 'serviceId' when calling updateServiceInstance(Async)");
        }
        // verify the required parameter 'serviceInstanceId' is set
        if (serviceInstanceId == null) {
            throw new ApiException("Missing the required parameter 'serviceInstanceId' when calling updateServiceInstance(Async)");
        }
        
        com.squareup.okhttp.Call call = updateServiceInstanceCall(body, serviceId, serviceInstanceId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update an existing Service-Instance.
     * Modifies an existing Service-Instance for a given Service-Insertion Service. 
     * @param body  (required)
     * @param serviceId  (required)
     * @param serviceInstanceId  (required)
     * @return BaseServiceInstance
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BaseServiceInstance updateServiceInstance(BaseServiceInstance body, String serviceId, String serviceInstanceId) throws ApiException {
        ApiResponse<BaseServiceInstance> resp = updateServiceInstanceWithHttpInfo(body, serviceId, serviceInstanceId);
        return resp.getData();
    }

    /**
     * Update an existing Service-Instance.
     * Modifies an existing Service-Instance for a given Service-Insertion Service. 
     * @param body  (required)
     * @param serviceId  (required)
     * @param serviceInstanceId  (required)
     * @return ApiResponse&lt;BaseServiceInstance&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BaseServiceInstance> updateServiceInstanceWithHttpInfo(BaseServiceInstance body, String serviceId, String serviceInstanceId) throws ApiException {
        com.squareup.okhttp.Call call = updateServiceInstanceValidateBeforeCall(body, serviceId, serviceInstanceId, null, null);
        Type localVarReturnType = new TypeToken<BaseServiceInstance>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update an existing Service-Instance. (asynchronously)
     * Modifies an existing Service-Instance for a given Service-Insertion Service. 
     * @param body  (required)
     * @param serviceId  (required)
     * @param serviceInstanceId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateServiceInstanceAsync(BaseServiceInstance body, String serviceId, String serviceInstanceId, final ApiCallback<BaseServiceInstance> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateServiceInstanceValidateBeforeCall(body, serviceId, serviceInstanceId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BaseServiceInstance>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateServiceManager
     * @param body  (required)
     * @param serviceManagerId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateServiceManagerCall(ServiceManager body, String serviceManagerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/serviceinsertion/service-managers/{service-manager-id}"
            .replaceAll("\\{" + "service-manager-id" + "\\}", apiClient.escapeString(serviceManagerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateServiceManagerValidateBeforeCall(ServiceManager body, String serviceManagerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateServiceManager(Async)");
        }
        // verify the required parameter 'serviceManagerId' is set
        if (serviceManagerId == null) {
            throw new ApiException("Missing the required parameter 'serviceManagerId' when calling updateServiceManager(Async)");
        }
        
        com.squareup.okhttp.Call call = updateServiceManagerCall(body, serviceManagerId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update service manager
     * Update service-manager which is registered with NSX with basic details like name, username, password.
     * @param body  (required)
     * @param serviceManagerId  (required)
     * @return ServiceManager
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ServiceManager updateServiceManager(ServiceManager body, String serviceManagerId) throws ApiException {
        ApiResponse<ServiceManager> resp = updateServiceManagerWithHttpInfo(body, serviceManagerId);
        return resp.getData();
    }

    /**
     * Update service manager
     * Update service-manager which is registered with NSX with basic details like name, username, password.
     * @param body  (required)
     * @param serviceManagerId  (required)
     * @return ApiResponse&lt;ServiceManager&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ServiceManager> updateServiceManagerWithHttpInfo(ServiceManager body, String serviceManagerId) throws ApiException {
        com.squareup.okhttp.Call call = updateServiceManagerValidateBeforeCall(body, serviceManagerId, null, null);
        Type localVarReturnType = new TypeToken<ServiceManager>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update service manager (asynchronously)
     * Update service-manager which is registered with NSX with basic details like name, username, password.
     * @param body  (required)
     * @param serviceManagerId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateServiceManagerAsync(ServiceManager body, String serviceManagerId, final ApiCallback<ServiceManager> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateServiceManagerValidateBeforeCall(body, serviceManagerId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ServiceManager>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateServiceVmState
     * @param serviceId  (required)
     * @param serviceInstanceId  (required)
     * @param instanceRuntimeId  (required)
     * @param action  (optional)
     * @param unhealthyReason Reason for the unhealthy state (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateServiceVmStateCall(String serviceId, String serviceInstanceId, String instanceRuntimeId, String action, String unhealthyReason, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/serviceinsertion/services/{service-id}/service-instances/{service-instance-id}/instance-runtimes/{instance-runtime-id}"
            .replaceAll("\\{" + "service-id" + "\\}", apiClient.escapeString(serviceId.toString()))
            .replaceAll("\\{" + "service-instance-id" + "\\}", apiClient.escapeString(serviceInstanceId.toString()))
            .replaceAll("\\{" + "instance-runtime-id" + "\\}", apiClient.escapeString(instanceRuntimeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (action != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("action", action));
        if (unhealthyReason != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("unhealthy_reason", unhealthyReason));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateServiceVmStateValidateBeforeCall(String serviceId, String serviceInstanceId, String instanceRuntimeId, String action, String unhealthyReason, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'serviceId' is set
        if (serviceId == null) {
            throw new ApiException("Missing the required parameter 'serviceId' when calling updateServiceVmState(Async)");
        }
        // verify the required parameter 'serviceInstanceId' is set
        if (serviceInstanceId == null) {
            throw new ApiException("Missing the required parameter 'serviceInstanceId' when calling updateServiceVmState(Async)");
        }
        // verify the required parameter 'instanceRuntimeId' is set
        if (instanceRuntimeId == null) {
            throw new ApiException("Missing the required parameter 'instanceRuntimeId' when calling updateServiceVmState(Async)");
        }
        
        com.squareup.okhttp.Call call = updateServiceVmStateCall(serviceId, serviceInstanceId, instanceRuntimeId, action, unhealthyReason, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update maintenance mode or runtime state of a service VM
     * Set service VM either in or out of maintenance mode for maintenance mode, or in service or out of service for runtime state. Only one value can be set at one time. 
     * @param serviceId  (required)
     * @param serviceInstanceId  (required)
     * @param instanceRuntimeId  (required)
     * @param action  (optional)
     * @param unhealthyReason Reason for the unhealthy state (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateServiceVmState(String serviceId, String serviceInstanceId, String instanceRuntimeId, String action, String unhealthyReason) throws ApiException {
        updateServiceVmStateWithHttpInfo(serviceId, serviceInstanceId, instanceRuntimeId, action, unhealthyReason);
    }

    /**
     * Update maintenance mode or runtime state of a service VM
     * Set service VM either in or out of maintenance mode for maintenance mode, or in service or out of service for runtime state. Only one value can be set at one time. 
     * @param serviceId  (required)
     * @param serviceInstanceId  (required)
     * @param instanceRuntimeId  (required)
     * @param action  (optional)
     * @param unhealthyReason Reason for the unhealthy state (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateServiceVmStateWithHttpInfo(String serviceId, String serviceInstanceId, String instanceRuntimeId, String action, String unhealthyReason) throws ApiException {
        com.squareup.okhttp.Call call = updateServiceVmStateValidateBeforeCall(serviceId, serviceInstanceId, instanceRuntimeId, action, unhealthyReason, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update maintenance mode or runtime state of a service VM (asynchronously)
     * Set service VM either in or out of maintenance mode for maintenance mode, or in service or out of service for runtime state. Only one value can be set at one time. 
     * @param serviceId  (required)
     * @param serviceInstanceId  (required)
     * @param instanceRuntimeId  (required)
     * @param action  (optional)
     * @param unhealthyReason Reason for the unhealthy state (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateServiceVmStateAsync(String serviceId, String serviceInstanceId, String instanceRuntimeId, String action, String unhealthyReason, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateServiceVmStateValidateBeforeCall(serviceId, serviceInstanceId, instanceRuntimeId, action, unhealthyReason, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateSolutionConfig
     * @param body  (required)
     * @param serviceId  (required)
     * @param solutionConfigId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateSolutionConfigCall(SolutionConfig body, String serviceId, String solutionConfigId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/serviceinsertion/services/{service-id}/solution-configs/{solution-config-id}"
            .replaceAll("\\{" + "service-id" + "\\}", apiClient.escapeString(serviceId.toString()))
            .replaceAll("\\{" + "solution-config-id" + "\\}", apiClient.escapeString(solutionConfigId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateSolutionConfigValidateBeforeCall(SolutionConfig body, String serviceId, String solutionConfigId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateSolutionConfig(Async)");
        }
        // verify the required parameter 'serviceId' is set
        if (serviceId == null) {
            throw new ApiException("Missing the required parameter 'serviceId' when calling updateSolutionConfig(Async)");
        }
        // verify the required parameter 'solutionConfigId' is set
        if (solutionConfigId == null) {
            throw new ApiException("Missing the required parameter 'solutionConfigId' when calling updateSolutionConfig(Async)");
        }
        
        com.squareup.okhttp.Call call = updateSolutionConfigCall(body, serviceId, solutionConfigId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Updates Solution Config for a given Service
     * Updates a solution config. Solution Config are service level objects, required for configuring the NXGI partner Service after deployment. 
     * @param body  (required)
     * @param serviceId  (required)
     * @param solutionConfigId  (required)
     * @return SolutionConfig
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SolutionConfig updateSolutionConfig(SolutionConfig body, String serviceId, String solutionConfigId) throws ApiException {
        ApiResponse<SolutionConfig> resp = updateSolutionConfigWithHttpInfo(body, serviceId, solutionConfigId);
        return resp.getData();
    }

    /**
     * Updates Solution Config for a given Service
     * Updates a solution config. Solution Config are service level objects, required for configuring the NXGI partner Service after deployment. 
     * @param body  (required)
     * @param serviceId  (required)
     * @param solutionConfigId  (required)
     * @return ApiResponse&lt;SolutionConfig&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SolutionConfig> updateSolutionConfigWithHttpInfo(SolutionConfig body, String serviceId, String solutionConfigId) throws ApiException {
        com.squareup.okhttp.Call call = updateSolutionConfigValidateBeforeCall(body, serviceId, solutionConfigId, null, null);
        Type localVarReturnType = new TypeToken<SolutionConfig>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates Solution Config for a given Service (asynchronously)
     * Updates a solution config. Solution Config are service level objects, required for configuring the NXGI partner Service after deployment. 
     * @param body  (required)
     * @param serviceId  (required)
     * @param solutionConfigId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateSolutionConfigAsync(SolutionConfig body, String serviceId, String solutionConfigId, final ApiCallback<SolutionConfig> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateSolutionConfigValidateBeforeCall(body, serviceId, solutionConfigId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SolutionConfig>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for upgradeServiceDeploymentUpgrade
     * @param serviceId  (required)
     * @param serviceDeploymentId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call upgradeServiceDeploymentUpgradeCall(String serviceId, String serviceDeploymentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/serviceinsertion/services/{service-id}/service-deployments/{service-deployment-id}?action=upgrade"
            .replaceAll("\\{" + "service-id" + "\\}", apiClient.escapeString(serviceId.toString()))
            .replaceAll("\\{" + "service-deployment-id" + "\\}", apiClient.escapeString(serviceDeploymentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call upgradeServiceDeploymentUpgradeValidateBeforeCall(String serviceId, String serviceDeploymentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'serviceId' is set
        if (serviceId == null) {
            throw new ApiException("Missing the required parameter 'serviceId' when calling upgradeServiceDeploymentUpgrade(Async)");
        }
        // verify the required parameter 'serviceDeploymentId' is set
        if (serviceDeploymentId == null) {
            throw new ApiException("Missing the required parameter 'serviceDeploymentId' when calling upgradeServiceDeploymentUpgrade(Async)");
        }
        
        com.squareup.okhttp.Call call = upgradeServiceDeploymentUpgradeCall(serviceId, serviceDeploymentId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Upgrade all VMs part of this service deployment using newer version of OVF. It is currently being disabled.
     * Upgrade API is currently disabled. Please refer to vendor documentation on how to upgrade individual appliances. Upgrade all VMs part of this service deployment using newer version of OVF. New OVF version isn&#x27;t expected in this call because it is published by the partner by updating the service definition. This API simply upgrades to the latest version published by the partner. 
     * @param serviceId  (required)
     * @param serviceDeploymentId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void upgradeServiceDeploymentUpgrade(String serviceId, String serviceDeploymentId) throws ApiException {
        upgradeServiceDeploymentUpgradeWithHttpInfo(serviceId, serviceDeploymentId);
    }

    /**
     * Upgrade all VMs part of this service deployment using newer version of OVF. It is currently being disabled.
     * Upgrade API is currently disabled. Please refer to vendor documentation on how to upgrade individual appliances. Upgrade all VMs part of this service deployment using newer version of OVF. New OVF version isn&#x27;t expected in this call because it is published by the partner by updating the service definition. This API simply upgrades to the latest version published by the partner. 
     * @param serviceId  (required)
     * @param serviceDeploymentId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> upgradeServiceDeploymentUpgradeWithHttpInfo(String serviceId, String serviceDeploymentId) throws ApiException {
        com.squareup.okhttp.Call call = upgradeServiceDeploymentUpgradeValidateBeforeCall(serviceId, serviceDeploymentId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Upgrade all VMs part of this service deployment using newer version of OVF. It is currently being disabled. (asynchronously)
     * Upgrade API is currently disabled. Please refer to vendor documentation on how to upgrade individual appliances. Upgrade all VMs part of this service deployment using newer version of OVF. New OVF version isn&#x27;t expected in this call because it is published by the partner by updating the service definition. This API simply upgrades to the latest version published by the partner. 
     * @param serviceId  (required)
     * @param serviceDeploymentId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call upgradeServiceDeploymentUpgradeAsync(String serviceId, String serviceDeploymentId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = upgradeServiceDeploymentUpgradeValidateBeforeCall(serviceId, serviceDeploymentId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for upgradeServiceVMsUpgrade
     * @param serviceId  (required)
     * @param serviceInstanceId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call upgradeServiceVMsUpgradeCall(String serviceId, String serviceInstanceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/serviceinsertion/services/{service-id}/service-instances/{service-instance-id}/instance-runtimes?action=upgrade"
            .replaceAll("\\{" + "service-id" + "\\}", apiClient.escapeString(serviceId.toString()))
            .replaceAll("\\{" + "service-instance-id" + "\\}", apiClient.escapeString(serviceInstanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call upgradeServiceVMsUpgradeValidateBeforeCall(String serviceId, String serviceInstanceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'serviceId' is set
        if (serviceId == null) {
            throw new ApiException("Missing the required parameter 'serviceId' when calling upgradeServiceVMsUpgrade(Async)");
        }
        // verify the required parameter 'serviceInstanceId' is set
        if (serviceInstanceId == null) {
            throw new ApiException("Missing the required parameter 'serviceInstanceId' when calling upgradeServiceVMsUpgrade(Async)");
        }
        
        com.squareup.okhttp.Call call = upgradeServiceVMsUpgradeCall(serviceId, serviceInstanceId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Upgrade service VMs using newer version of OVF
     * Upgrade service VMs using newer version of OVF.  In case of HA, the stand-by service VM will be upgrade first. Once it has been upgraded, it switches to be the Active one and then the other VM will be upgrade. 
     * @param serviceId  (required)
     * @param serviceInstanceId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void upgradeServiceVMsUpgrade(String serviceId, String serviceInstanceId) throws ApiException {
        upgradeServiceVMsUpgradeWithHttpInfo(serviceId, serviceInstanceId);
    }

    /**
     * Upgrade service VMs using newer version of OVF
     * Upgrade service VMs using newer version of OVF.  In case of HA, the stand-by service VM will be upgrade first. Once it has been upgraded, it switches to be the Active one and then the other VM will be upgrade. 
     * @param serviceId  (required)
     * @param serviceInstanceId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> upgradeServiceVMsUpgradeWithHttpInfo(String serviceId, String serviceInstanceId) throws ApiException {
        com.squareup.okhttp.Call call = upgradeServiceVMsUpgradeValidateBeforeCall(serviceId, serviceInstanceId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Upgrade service VMs using newer version of OVF (asynchronously)
     * Upgrade service VMs using newer version of OVF.  In case of HA, the stand-by service VM will be upgrade first. Once it has been upgraded, it switches to be the Active one and then the other VM will be upgrade. 
     * @param serviceId  (required)
     * @param serviceInstanceId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call upgradeServiceVMsUpgradeAsync(String serviceId, String serviceInstanceId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = upgradeServiceVMsUpgradeValidateBeforeCall(serviceId, serviceInstanceId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
