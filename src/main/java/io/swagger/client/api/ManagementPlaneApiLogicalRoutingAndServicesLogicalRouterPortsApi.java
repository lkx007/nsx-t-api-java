/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ApiError;
import io.swagger.client.model.LogicalRouterPort;
import io.swagger.client.model.LogicalRouterPortArpTable;
import io.swagger.client.model.LogicalRouterPortArpTableInCsvFormat;
import io.swagger.client.model.LogicalRouterPortListResult;
import io.swagger.client.model.LogicalRouterPortState;
import io.swagger.client.model.LogicalRouterPortStatistics;
import io.swagger.client.model.LogicalRouterPortStatisticsSummary;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ManagementPlaneApiLogicalRoutingAndServicesLogicalRouterPortsApi {
    private ApiClient apiClient;

    public ManagementPlaneApiLogicalRoutingAndServicesLogicalRouterPortsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ManagementPlaneApiLogicalRoutingAndServicesLogicalRouterPortsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createLogicalRouterPort
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createLogicalRouterPortCall(LogicalRouterPort body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/logical-router-ports";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createLogicalRouterPortValidateBeforeCall(LogicalRouterPort body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createLogicalRouterPort(Async)");
        }
        
        com.squareup.okhttp.Call call = createLogicalRouterPortCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create a Logical Router Port
     * Creates a logical router port. The required parameters include resource_type (LogicalRouterUpLinkPort, LogicalRouterDownLinkPort, LogicalRouterLinkPort, LogicalRouterLoopbackPort, LogicalRouterCentralizedServicePort); and logical_router_id (the router to which each logical router port is assigned). The service_bindings parameter is optional. 
     * @param body  (required)
     * @return LogicalRouterPort
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LogicalRouterPort createLogicalRouterPort(LogicalRouterPort body) throws ApiException {
        ApiResponse<LogicalRouterPort> resp = createLogicalRouterPortWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create a Logical Router Port
     * Creates a logical router port. The required parameters include resource_type (LogicalRouterUpLinkPort, LogicalRouterDownLinkPort, LogicalRouterLinkPort, LogicalRouterLoopbackPort, LogicalRouterCentralizedServicePort); and logical_router_id (the router to which each logical router port is assigned). The service_bindings parameter is optional. 
     * @param body  (required)
     * @return ApiResponse&lt;LogicalRouterPort&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LogicalRouterPort> createLogicalRouterPortWithHttpInfo(LogicalRouterPort body) throws ApiException {
        com.squareup.okhttp.Call call = createLogicalRouterPortValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<LogicalRouterPort>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a Logical Router Port (asynchronously)
     * Creates a logical router port. The required parameters include resource_type (LogicalRouterUpLinkPort, LogicalRouterDownLinkPort, LogicalRouterLinkPort, LogicalRouterLoopbackPort, LogicalRouterCentralizedServicePort); and logical_router_id (the router to which each logical router port is assigned). The service_bindings parameter is optional. 
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createLogicalRouterPortAsync(LogicalRouterPort body, final ApiCallback<LogicalRouterPort> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createLogicalRouterPortValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LogicalRouterPort>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteLogicalRouterPort
     * @param logicalRouterPortId  (required)
     * @param cascadeDeleteLinkedPorts Flag to specify whether to delete related logical switch ports (optional)
     * @param force Force delete the resource even if it is being used somewhere  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteLogicalRouterPortCall(String logicalRouterPortId, Boolean cascadeDeleteLinkedPorts, Boolean force, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/logical-router-ports/{logical-router-port-id}"
            .replaceAll("\\{" + "logical-router-port-id" + "\\}", apiClient.escapeString(logicalRouterPortId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (cascadeDeleteLinkedPorts != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cascade_delete_linked_ports", cascadeDeleteLinkedPorts));
        if (force != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("force", force));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteLogicalRouterPortValidateBeforeCall(String logicalRouterPortId, Boolean cascadeDeleteLinkedPorts, Boolean force, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'logicalRouterPortId' is set
        if (logicalRouterPortId == null) {
            throw new ApiException("Missing the required parameter 'logicalRouterPortId' when calling deleteLogicalRouterPort(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteLogicalRouterPortCall(logicalRouterPortId, cascadeDeleteLinkedPorts, force, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete a Logical Router Port
     * Deletes the specified logical router port. You must delete logical router ports before you can delete the associated logical router. To Delete Tier0 router link port you must have to delete attached tier1 router link port, otherwise pass \&quot;force&#x3D;true\&quot; as query param to force delete the Tier0 router link port. 
     * @param logicalRouterPortId  (required)
     * @param cascadeDeleteLinkedPorts Flag to specify whether to delete related logical switch ports (optional)
     * @param force Force delete the resource even if it is being used somewhere  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteLogicalRouterPort(String logicalRouterPortId, Boolean cascadeDeleteLinkedPorts, Boolean force) throws ApiException {
        deleteLogicalRouterPortWithHttpInfo(logicalRouterPortId, cascadeDeleteLinkedPorts, force);
    }

    /**
     * Delete a Logical Router Port
     * Deletes the specified logical router port. You must delete logical router ports before you can delete the associated logical router. To Delete Tier0 router link port you must have to delete attached tier1 router link port, otherwise pass \&quot;force&#x3D;true\&quot; as query param to force delete the Tier0 router link port. 
     * @param logicalRouterPortId  (required)
     * @param cascadeDeleteLinkedPorts Flag to specify whether to delete related logical switch ports (optional)
     * @param force Force delete the resource even if it is being used somewhere  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteLogicalRouterPortWithHttpInfo(String logicalRouterPortId, Boolean cascadeDeleteLinkedPorts, Boolean force) throws ApiException {
        com.squareup.okhttp.Call call = deleteLogicalRouterPortValidateBeforeCall(logicalRouterPortId, cascadeDeleteLinkedPorts, force, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a Logical Router Port (asynchronously)
     * Deletes the specified logical router port. You must delete logical router ports before you can delete the associated logical router. To Delete Tier0 router link port you must have to delete attached tier1 router link port, otherwise pass \&quot;force&#x3D;true\&quot; as query param to force delete the Tier0 router link port. 
     * @param logicalRouterPortId  (required)
     * @param cascadeDeleteLinkedPorts Flag to specify whether to delete related logical switch ports (optional)
     * @param force Force delete the resource even if it is being used somewhere  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteLogicalRouterPortAsync(String logicalRouterPortId, Boolean cascadeDeleteLinkedPorts, Boolean force, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteLogicalRouterPortValidateBeforeCall(logicalRouterPortId, cascadeDeleteLinkedPorts, force, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getLogicalRouterPortArpTable
     * @param logicalRouterPortId  (required)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param source Data source type. (optional)
     * @param transportNodeId TransportNode Id (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getLogicalRouterPortArpTableCall(String logicalRouterPortId, String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, String source, String transportNodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/logical-router-ports/{logical-router-port-id}/arp-table"
            .replaceAll("\\{" + "logical-router-port-id" + "\\}", apiClient.escapeString(logicalRouterPortId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (includedFields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("included_fields", includedFields));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page_size", pageSize));
        if (sortAscending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_ascending", sortAscending));
        if (sortBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_by", sortBy));
        if (source != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("source", source));
        if (transportNodeId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("transport_node_id", transportNodeId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getLogicalRouterPortArpTableValidateBeforeCall(String logicalRouterPortId, String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, String source, String transportNodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'logicalRouterPortId' is set
        if (logicalRouterPortId == null) {
            throw new ApiException("Missing the required parameter 'logicalRouterPortId' when calling getLogicalRouterPortArpTable(Async)");
        }
        
        com.squareup.okhttp.Call call = getLogicalRouterPortArpTableCall(logicalRouterPortId, cursor, includedFields, pageSize, sortAscending, sortBy, source, transportNodeId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the ARP table (IPv4) or Neighbor Discovery table (IPv6) for the Logical Router Port of the given id 
     * Returns ARP table (IPv4) or Neighbor Discovery table (IPv6) for the Logical Router Port of the given id, on a node if a query parameter \&quot;transport_node_id&#x3D;&lt;transport-node-id&gt;\&quot; is given. The transport_node_id parameter is mandatory if the router port is not uplink type. Query parameter \&quot;source&#x3D;realtime\&quot; is the only supported source. 
     * @param logicalRouterPortId  (required)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param source Data source type. (optional)
     * @param transportNodeId TransportNode Id (optional)
     * @return LogicalRouterPortArpTable
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LogicalRouterPortArpTable getLogicalRouterPortArpTable(String logicalRouterPortId, String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, String source, String transportNodeId) throws ApiException {
        ApiResponse<LogicalRouterPortArpTable> resp = getLogicalRouterPortArpTableWithHttpInfo(logicalRouterPortId, cursor, includedFields, pageSize, sortAscending, sortBy, source, transportNodeId);
        return resp.getData();
    }

    /**
     * Get the ARP table (IPv4) or Neighbor Discovery table (IPv6) for the Logical Router Port of the given id 
     * Returns ARP table (IPv4) or Neighbor Discovery table (IPv6) for the Logical Router Port of the given id, on a node if a query parameter \&quot;transport_node_id&#x3D;&lt;transport-node-id&gt;\&quot; is given. The transport_node_id parameter is mandatory if the router port is not uplink type. Query parameter \&quot;source&#x3D;realtime\&quot; is the only supported source. 
     * @param logicalRouterPortId  (required)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param source Data source type. (optional)
     * @param transportNodeId TransportNode Id (optional)
     * @return ApiResponse&lt;LogicalRouterPortArpTable&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LogicalRouterPortArpTable> getLogicalRouterPortArpTableWithHttpInfo(String logicalRouterPortId, String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, String source, String transportNodeId) throws ApiException {
        com.squareup.okhttp.Call call = getLogicalRouterPortArpTableValidateBeforeCall(logicalRouterPortId, cursor, includedFields, pageSize, sortAscending, sortBy, source, transportNodeId, null, null);
        Type localVarReturnType = new TypeToken<LogicalRouterPortArpTable>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the ARP table (IPv4) or Neighbor Discovery table (IPv6) for the Logical Router Port of the given id  (asynchronously)
     * Returns ARP table (IPv4) or Neighbor Discovery table (IPv6) for the Logical Router Port of the given id, on a node if a query parameter \&quot;transport_node_id&#x3D;&lt;transport-node-id&gt;\&quot; is given. The transport_node_id parameter is mandatory if the router port is not uplink type. Query parameter \&quot;source&#x3D;realtime\&quot; is the only supported source. 
     * @param logicalRouterPortId  (required)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param source Data source type. (optional)
     * @param transportNodeId TransportNode Id (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getLogicalRouterPortArpTableAsync(String logicalRouterPortId, String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, String source, String transportNodeId, final ApiCallback<LogicalRouterPortArpTable> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getLogicalRouterPortArpTableValidateBeforeCall(logicalRouterPortId, cursor, includedFields, pageSize, sortAscending, sortBy, source, transportNodeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LogicalRouterPortArpTable>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getLogicalRouterPortArpTableInCsvFormatCsv
     * @param logicalRouterPortId  (required)
     * @param source Data source type. (optional)
     * @param transportNodeId TransportNode Id (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getLogicalRouterPortArpTableInCsvFormatCsvCall(String logicalRouterPortId, String source, String transportNodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/logical-router-ports/{logical-router-port-id}/arp-table?format=csv"
            .replaceAll("\\{" + "logical-router-port-id" + "\\}", apiClient.escapeString(logicalRouterPortId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (source != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("source", source));
        if (transportNodeId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("transport_node_id", transportNodeId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/csv"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getLogicalRouterPortArpTableInCsvFormatCsvValidateBeforeCall(String logicalRouterPortId, String source, String transportNodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'logicalRouterPortId' is set
        if (logicalRouterPortId == null) {
            throw new ApiException("Missing the required parameter 'logicalRouterPortId' when calling getLogicalRouterPortArpTableInCsvFormatCsv(Async)");
        }
        
        com.squareup.okhttp.Call call = getLogicalRouterPortArpTableInCsvFormatCsvCall(logicalRouterPortId, source, transportNodeId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the ARP table (IPv4) or Neighbor Discovery table (IPv6) for the Logical Router Port of the given id 
     * Returns ARP table (IPv4) or Neighbor Discovery table (IPv6) in CSV format for the Logical Router Port of the given id, on a node if a query parameter \&quot;transport_node_id&#x3D;&lt;transport-node-id&gt;\&quot; is given. The transport_node_id parameter is mandatory if the router port is not uplink type. Query parameter \&quot;source&#x3D;realtime\&quot; is the only supported source. 
     * @param logicalRouterPortId  (required)
     * @param source Data source type. (optional)
     * @param transportNodeId TransportNode Id (optional)
     * @return LogicalRouterPortArpTableInCsvFormat
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LogicalRouterPortArpTableInCsvFormat getLogicalRouterPortArpTableInCsvFormatCsv(String logicalRouterPortId, String source, String transportNodeId) throws ApiException {
        ApiResponse<LogicalRouterPortArpTableInCsvFormat> resp = getLogicalRouterPortArpTableInCsvFormatCsvWithHttpInfo(logicalRouterPortId, source, transportNodeId);
        return resp.getData();
    }

    /**
     * Get the ARP table (IPv4) or Neighbor Discovery table (IPv6) for the Logical Router Port of the given id 
     * Returns ARP table (IPv4) or Neighbor Discovery table (IPv6) in CSV format for the Logical Router Port of the given id, on a node if a query parameter \&quot;transport_node_id&#x3D;&lt;transport-node-id&gt;\&quot; is given. The transport_node_id parameter is mandatory if the router port is not uplink type. Query parameter \&quot;source&#x3D;realtime\&quot; is the only supported source. 
     * @param logicalRouterPortId  (required)
     * @param source Data source type. (optional)
     * @param transportNodeId TransportNode Id (optional)
     * @return ApiResponse&lt;LogicalRouterPortArpTableInCsvFormat&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LogicalRouterPortArpTableInCsvFormat> getLogicalRouterPortArpTableInCsvFormatCsvWithHttpInfo(String logicalRouterPortId, String source, String transportNodeId) throws ApiException {
        com.squareup.okhttp.Call call = getLogicalRouterPortArpTableInCsvFormatCsvValidateBeforeCall(logicalRouterPortId, source, transportNodeId, null, null);
        Type localVarReturnType = new TypeToken<LogicalRouterPortArpTableInCsvFormat>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the ARP table (IPv4) or Neighbor Discovery table (IPv6) for the Logical Router Port of the given id  (asynchronously)
     * Returns ARP table (IPv4) or Neighbor Discovery table (IPv6) in CSV format for the Logical Router Port of the given id, on a node if a query parameter \&quot;transport_node_id&#x3D;&lt;transport-node-id&gt;\&quot; is given. The transport_node_id parameter is mandatory if the router port is not uplink type. Query parameter \&quot;source&#x3D;realtime\&quot; is the only supported source. 
     * @param logicalRouterPortId  (required)
     * @param source Data source type. (optional)
     * @param transportNodeId TransportNode Id (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getLogicalRouterPortArpTableInCsvFormatCsvAsync(String logicalRouterPortId, String source, String transportNodeId, final ApiCallback<LogicalRouterPortArpTableInCsvFormat> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getLogicalRouterPortArpTableInCsvFormatCsvValidateBeforeCall(logicalRouterPortId, source, transportNodeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LogicalRouterPortArpTableInCsvFormat>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getLogicalRouterPortState
     * @param logicalRouterPortId  (required)
     * @param barrierId  (optional)
     * @param requestId Realization request ID (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getLogicalRouterPortStateCall(String logicalRouterPortId, Long barrierId, String requestId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/logical-router-ports/{logical-router-port-id}/state"
            .replaceAll("\\{" + "logical-router-port-id" + "\\}", apiClient.escapeString(logicalRouterPortId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (barrierId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("barrier_id", barrierId));
        if (requestId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("request_id", requestId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getLogicalRouterPortStateValidateBeforeCall(String logicalRouterPortId, Long barrierId, String requestId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'logicalRouterPortId' is set
        if (logicalRouterPortId == null) {
            throw new ApiException("Missing the required parameter 'logicalRouterPortId' when calling getLogicalRouterPortState(Async)");
        }
        
        com.squareup.okhttp.Call call = getLogicalRouterPortStateCall(logicalRouterPortId, barrierId, requestId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the Realized State of a Logical Router Port
     * Return realized state information of a logical router port. Any configuration update that affects the logical router port can use this API to get its realized state by passing a request_id returned by the configuration change operation. e.g. Update configuration of logical router ports, dhcp relays, etc. 
     * @param logicalRouterPortId  (required)
     * @param barrierId  (optional)
     * @param requestId Realization request ID (optional)
     * @return LogicalRouterPortState
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LogicalRouterPortState getLogicalRouterPortState(String logicalRouterPortId, Long barrierId, String requestId) throws ApiException {
        ApiResponse<LogicalRouterPortState> resp = getLogicalRouterPortStateWithHttpInfo(logicalRouterPortId, barrierId, requestId);
        return resp.getData();
    }

    /**
     * Get the Realized State of a Logical Router Port
     * Return realized state information of a logical router port. Any configuration update that affects the logical router port can use this API to get its realized state by passing a request_id returned by the configuration change operation. e.g. Update configuration of logical router ports, dhcp relays, etc. 
     * @param logicalRouterPortId  (required)
     * @param barrierId  (optional)
     * @param requestId Realization request ID (optional)
     * @return ApiResponse&lt;LogicalRouterPortState&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LogicalRouterPortState> getLogicalRouterPortStateWithHttpInfo(String logicalRouterPortId, Long barrierId, String requestId) throws ApiException {
        com.squareup.okhttp.Call call = getLogicalRouterPortStateValidateBeforeCall(logicalRouterPortId, barrierId, requestId, null, null);
        Type localVarReturnType = new TypeToken<LogicalRouterPortState>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the Realized State of a Logical Router Port (asynchronously)
     * Return realized state information of a logical router port. Any configuration update that affects the logical router port can use this API to get its realized state by passing a request_id returned by the configuration change operation. e.g. Update configuration of logical router ports, dhcp relays, etc. 
     * @param logicalRouterPortId  (required)
     * @param barrierId  (optional)
     * @param requestId Realization request ID (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getLogicalRouterPortStateAsync(String logicalRouterPortId, Long barrierId, String requestId, final ApiCallback<LogicalRouterPortState> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getLogicalRouterPortStateValidateBeforeCall(logicalRouterPortId, barrierId, requestId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LogicalRouterPortState>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getLogicalRouterPortStatistics
     * @param logicalRouterPortId  (required)
     * @param source Data source type. (optional)
     * @param transportNodeId TransportNode Id (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getLogicalRouterPortStatisticsCall(String logicalRouterPortId, String source, String transportNodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/logical-router-ports/{logical-router-port-id}/statistics"
            .replaceAll("\\{" + "logical-router-port-id" + "\\}", apiClient.escapeString(logicalRouterPortId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (source != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("source", source));
        if (transportNodeId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("transport_node_id", transportNodeId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getLogicalRouterPortStatisticsValidateBeforeCall(String logicalRouterPortId, String source, String transportNodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'logicalRouterPortId' is set
        if (logicalRouterPortId == null) {
            throw new ApiException("Missing the required parameter 'logicalRouterPortId' when calling getLogicalRouterPortStatistics(Async)");
        }
        
        com.squareup.okhttp.Call call = getLogicalRouterPortStatisticsCall(logicalRouterPortId, source, transportNodeId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the statistics of a specified logical router port on all or a specified node
     * Returns the statistics for the Logical Router Port. If query parameter \&quot;transport_node_id&#x3D;&lt;transport-node-id&gt;\&quot; is given,  only the statistics from the given node for the logical router port will be returned. Otherwise the statistics from each node for the same logical router port will be returned. The transport_node_id is mandatory if the router port is not uplink type. The query parameter \&quot;source&#x3D;cached\&quot; will be ignored and it will always return realtime statistics of the logical router port. 
     * @param logicalRouterPortId  (required)
     * @param source Data source type. (optional)
     * @param transportNodeId TransportNode Id (optional)
     * @return LogicalRouterPortStatistics
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LogicalRouterPortStatistics getLogicalRouterPortStatistics(String logicalRouterPortId, String source, String transportNodeId) throws ApiException {
        ApiResponse<LogicalRouterPortStatistics> resp = getLogicalRouterPortStatisticsWithHttpInfo(logicalRouterPortId, source, transportNodeId);
        return resp.getData();
    }

    /**
     * Get the statistics of a specified logical router port on all or a specified node
     * Returns the statistics for the Logical Router Port. If query parameter \&quot;transport_node_id&#x3D;&lt;transport-node-id&gt;\&quot; is given,  only the statistics from the given node for the logical router port will be returned. Otherwise the statistics from each node for the same logical router port will be returned. The transport_node_id is mandatory if the router port is not uplink type. The query parameter \&quot;source&#x3D;cached\&quot; will be ignored and it will always return realtime statistics of the logical router port. 
     * @param logicalRouterPortId  (required)
     * @param source Data source type. (optional)
     * @param transportNodeId TransportNode Id (optional)
     * @return ApiResponse&lt;LogicalRouterPortStatistics&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LogicalRouterPortStatistics> getLogicalRouterPortStatisticsWithHttpInfo(String logicalRouterPortId, String source, String transportNodeId) throws ApiException {
        com.squareup.okhttp.Call call = getLogicalRouterPortStatisticsValidateBeforeCall(logicalRouterPortId, source, transportNodeId, null, null);
        Type localVarReturnType = new TypeToken<LogicalRouterPortStatistics>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the statistics of a specified logical router port on all or a specified node (asynchronously)
     * Returns the statistics for the Logical Router Port. If query parameter \&quot;transport_node_id&#x3D;&lt;transport-node-id&gt;\&quot; is given,  only the statistics from the given node for the logical router port will be returned. Otherwise the statistics from each node for the same logical router port will be returned. The transport_node_id is mandatory if the router port is not uplink type. The query parameter \&quot;source&#x3D;cached\&quot; will be ignored and it will always return realtime statistics of the logical router port. 
     * @param logicalRouterPortId  (required)
     * @param source Data source type. (optional)
     * @param transportNodeId TransportNode Id (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getLogicalRouterPortStatisticsAsync(String logicalRouterPortId, String source, String transportNodeId, final ApiCallback<LogicalRouterPortStatistics> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getLogicalRouterPortStatisticsValidateBeforeCall(logicalRouterPortId, source, transportNodeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LogicalRouterPortStatistics>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getLogicalRouterPortStatisticsSummary
     * @param logicalRouterPortId  (required)
     * @param source Data source type. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getLogicalRouterPortStatisticsSummaryCall(String logicalRouterPortId, String source, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/logical-router-ports/{logical-router-port-id}/statistics/summary"
            .replaceAll("\\{" + "logical-router-port-id" + "\\}", apiClient.escapeString(logicalRouterPortId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (source != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("source", source));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getLogicalRouterPortStatisticsSummaryValidateBeforeCall(String logicalRouterPortId, String source, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'logicalRouterPortId' is set
        if (logicalRouterPortId == null) {
            throw new ApiException("Missing the required parameter 'logicalRouterPortId' when calling getLogicalRouterPortStatisticsSummary(Async)");
        }
        
        com.squareup.okhttp.Call call = getLogicalRouterPortStatisticsSummaryCall(logicalRouterPortId, source, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the statistics summary of a specified logical router port
     * Returns the summation of statistics from all nodes for the Specified Logical Router Port. The query parameter \&quot;source&#x3D;realtime\&quot; is not supported. 
     * @param logicalRouterPortId  (required)
     * @param source Data source type. (optional)
     * @return LogicalRouterPortStatisticsSummary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LogicalRouterPortStatisticsSummary getLogicalRouterPortStatisticsSummary(String logicalRouterPortId, String source) throws ApiException {
        ApiResponse<LogicalRouterPortStatisticsSummary> resp = getLogicalRouterPortStatisticsSummaryWithHttpInfo(logicalRouterPortId, source);
        return resp.getData();
    }

    /**
     * Get the statistics summary of a specified logical router port
     * Returns the summation of statistics from all nodes for the Specified Logical Router Port. The query parameter \&quot;source&#x3D;realtime\&quot; is not supported. 
     * @param logicalRouterPortId  (required)
     * @param source Data source type. (optional)
     * @return ApiResponse&lt;LogicalRouterPortStatisticsSummary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LogicalRouterPortStatisticsSummary> getLogicalRouterPortStatisticsSummaryWithHttpInfo(String logicalRouterPortId, String source) throws ApiException {
        com.squareup.okhttp.Call call = getLogicalRouterPortStatisticsSummaryValidateBeforeCall(logicalRouterPortId, source, null, null);
        Type localVarReturnType = new TypeToken<LogicalRouterPortStatisticsSummary>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the statistics summary of a specified logical router port (asynchronously)
     * Returns the summation of statistics from all nodes for the Specified Logical Router Port. The query parameter \&quot;source&#x3D;realtime\&quot; is not supported. 
     * @param logicalRouterPortId  (required)
     * @param source Data source type. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getLogicalRouterPortStatisticsSummaryAsync(String logicalRouterPortId, String source, final ApiCallback<LogicalRouterPortStatisticsSummary> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getLogicalRouterPortStatisticsSummaryValidateBeforeCall(logicalRouterPortId, source, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LogicalRouterPortStatisticsSummary>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listLogicalRouterPorts
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param logicalRouterId Logical Router identifier (optional)
     * @param logicalSwitchId Logical Switch identifier (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param resourceType Resource types of logical router port (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listLogicalRouterPortsCall(String cursor, String includedFields, String logicalRouterId, String logicalSwitchId, Long pageSize, String resourceType, Boolean sortAscending, String sortBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/logical-router-ports";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (includedFields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("included_fields", includedFields));
        if (logicalRouterId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("logical_router_id", logicalRouterId));
        if (logicalSwitchId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("logical_switch_id", logicalSwitchId));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page_size", pageSize));
        if (resourceType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("resource_type", resourceType));
        if (sortAscending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_ascending", sortAscending));
        if (sortBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_by", sortBy));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listLogicalRouterPortsValidateBeforeCall(String cursor, String includedFields, String logicalRouterId, String logicalSwitchId, Long pageSize, String resourceType, Boolean sortAscending, String sortBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listLogicalRouterPortsCall(cursor, includedFields, logicalRouterId, logicalSwitchId, pageSize, resourceType, sortAscending, sortBy, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List Logical Router Ports
     * Returns information about all logical router ports. Information includes the resource_type (LogicalRouterUpLinkPort, LogicalRouterDownLinkPort, LogicalRouterLinkPort, LogicalRouterLoopbackPort, LogicalRouterCentralizedServicePort); logical_router_id (the router to which each logical router port is assigned); and any service_bindings (such as DHCP relay service). The GET request can include a query parameter (logical_router_id or logical_switch_id). 
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param logicalRouterId Logical Router identifier (optional)
     * @param logicalSwitchId Logical Switch identifier (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param resourceType Resource types of logical router port (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @return LogicalRouterPortListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LogicalRouterPortListResult listLogicalRouterPorts(String cursor, String includedFields, String logicalRouterId, String logicalSwitchId, Long pageSize, String resourceType, Boolean sortAscending, String sortBy) throws ApiException {
        ApiResponse<LogicalRouterPortListResult> resp = listLogicalRouterPortsWithHttpInfo(cursor, includedFields, logicalRouterId, logicalSwitchId, pageSize, resourceType, sortAscending, sortBy);
        return resp.getData();
    }

    /**
     * List Logical Router Ports
     * Returns information about all logical router ports. Information includes the resource_type (LogicalRouterUpLinkPort, LogicalRouterDownLinkPort, LogicalRouterLinkPort, LogicalRouterLoopbackPort, LogicalRouterCentralizedServicePort); logical_router_id (the router to which each logical router port is assigned); and any service_bindings (such as DHCP relay service). The GET request can include a query parameter (logical_router_id or logical_switch_id). 
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param logicalRouterId Logical Router identifier (optional)
     * @param logicalSwitchId Logical Switch identifier (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param resourceType Resource types of logical router port (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @return ApiResponse&lt;LogicalRouterPortListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LogicalRouterPortListResult> listLogicalRouterPortsWithHttpInfo(String cursor, String includedFields, String logicalRouterId, String logicalSwitchId, Long pageSize, String resourceType, Boolean sortAscending, String sortBy) throws ApiException {
        com.squareup.okhttp.Call call = listLogicalRouterPortsValidateBeforeCall(cursor, includedFields, logicalRouterId, logicalSwitchId, pageSize, resourceType, sortAscending, sortBy, null, null);
        Type localVarReturnType = new TypeToken<LogicalRouterPortListResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List Logical Router Ports (asynchronously)
     * Returns information about all logical router ports. Information includes the resource_type (LogicalRouterUpLinkPort, LogicalRouterDownLinkPort, LogicalRouterLinkPort, LogicalRouterLoopbackPort, LogicalRouterCentralizedServicePort); logical_router_id (the router to which each logical router port is assigned); and any service_bindings (such as DHCP relay service). The GET request can include a query parameter (logical_router_id or logical_switch_id). 
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param logicalRouterId Logical Router identifier (optional)
     * @param logicalSwitchId Logical Switch identifier (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param resourceType Resource types of logical router port (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listLogicalRouterPortsAsync(String cursor, String includedFields, String logicalRouterId, String logicalSwitchId, Long pageSize, String resourceType, Boolean sortAscending, String sortBy, final ApiCallback<LogicalRouterPortListResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listLogicalRouterPortsValidateBeforeCall(cursor, includedFields, logicalRouterId, logicalSwitchId, pageSize, resourceType, sortAscending, sortBy, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LogicalRouterPortListResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for readLogicalRouterPort
     * @param logicalRouterPortId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call readLogicalRouterPortCall(String logicalRouterPortId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/logical-router-ports/{logical-router-port-id}"
            .replaceAll("\\{" + "logical-router-port-id" + "\\}", apiClient.escapeString(logicalRouterPortId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call readLogicalRouterPortValidateBeforeCall(String logicalRouterPortId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'logicalRouterPortId' is set
        if (logicalRouterPortId == null) {
            throw new ApiException("Missing the required parameter 'logicalRouterPortId' when calling readLogicalRouterPort(Async)");
        }
        
        com.squareup.okhttp.Call call = readLogicalRouterPortCall(logicalRouterPortId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read Logical Router Port
     * Returns information about the specified logical router port.
     * @param logicalRouterPortId  (required)
     * @return LogicalRouterPort
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LogicalRouterPort readLogicalRouterPort(String logicalRouterPortId) throws ApiException {
        ApiResponse<LogicalRouterPort> resp = readLogicalRouterPortWithHttpInfo(logicalRouterPortId);
        return resp.getData();
    }

    /**
     * Read Logical Router Port
     * Returns information about the specified logical router port.
     * @param logicalRouterPortId  (required)
     * @return ApiResponse&lt;LogicalRouterPort&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LogicalRouterPort> readLogicalRouterPortWithHttpInfo(String logicalRouterPortId) throws ApiException {
        com.squareup.okhttp.Call call = readLogicalRouterPortValidateBeforeCall(logicalRouterPortId, null, null);
        Type localVarReturnType = new TypeToken<LogicalRouterPort>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read Logical Router Port (asynchronously)
     * Returns information about the specified logical router port.
     * @param logicalRouterPortId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call readLogicalRouterPortAsync(String logicalRouterPortId, final ApiCallback<LogicalRouterPort> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = readLogicalRouterPortValidateBeforeCall(logicalRouterPortId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LogicalRouterPort>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateLogicalRouterPort
     * @param body  (required)
     * @param logicalRouterPortId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateLogicalRouterPortCall(LogicalRouterPort body, String logicalRouterPortId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/logical-router-ports/{logical-router-port-id}"
            .replaceAll("\\{" + "logical-router-port-id" + "\\}", apiClient.escapeString(logicalRouterPortId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateLogicalRouterPortValidateBeforeCall(LogicalRouterPort body, String logicalRouterPortId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateLogicalRouterPort(Async)");
        }
        // verify the required parameter 'logicalRouterPortId' is set
        if (logicalRouterPortId == null) {
            throw new ApiException("Missing the required parameter 'logicalRouterPortId' when calling updateLogicalRouterPort(Async)");
        }
        
        com.squareup.okhttp.Call call = updateLogicalRouterPortCall(body, logicalRouterPortId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update a Logical Router Port
     * Modifies the specified logical router port. Required parameters include the resource_type and logical_router_id. Modifiable parameters include the resource_type (LogicalRouterUpLinkPort, LogicalRouterDownLinkPort, LogicalRouterLinkPort, LogicalRouterLoopbackPort, LogicalRouterCentralizedServicePort), logical_router_id (to reassign the port to a different router), and service_bindings. 
     * @param body  (required)
     * @param logicalRouterPortId  (required)
     * @return LogicalRouterPort
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LogicalRouterPort updateLogicalRouterPort(LogicalRouterPort body, String logicalRouterPortId) throws ApiException {
        ApiResponse<LogicalRouterPort> resp = updateLogicalRouterPortWithHttpInfo(body, logicalRouterPortId);
        return resp.getData();
    }

    /**
     * Update a Logical Router Port
     * Modifies the specified logical router port. Required parameters include the resource_type and logical_router_id. Modifiable parameters include the resource_type (LogicalRouterUpLinkPort, LogicalRouterDownLinkPort, LogicalRouterLinkPort, LogicalRouterLoopbackPort, LogicalRouterCentralizedServicePort), logical_router_id (to reassign the port to a different router), and service_bindings. 
     * @param body  (required)
     * @param logicalRouterPortId  (required)
     * @return ApiResponse&lt;LogicalRouterPort&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LogicalRouterPort> updateLogicalRouterPortWithHttpInfo(LogicalRouterPort body, String logicalRouterPortId) throws ApiException {
        com.squareup.okhttp.Call call = updateLogicalRouterPortValidateBeforeCall(body, logicalRouterPortId, null, null);
        Type localVarReturnType = new TypeToken<LogicalRouterPort>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a Logical Router Port (asynchronously)
     * Modifies the specified logical router port. Required parameters include the resource_type and logical_router_id. Modifiable parameters include the resource_type (LogicalRouterUpLinkPort, LogicalRouterDownLinkPort, LogicalRouterLinkPort, LogicalRouterLoopbackPort, LogicalRouterCentralizedServicePort), logical_router_id (to reassign the port to a different router), and service_bindings. 
     * @param body  (required)
     * @param logicalRouterPortId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateLogicalRouterPortAsync(LogicalRouterPort body, String logicalRouterPortId, final ApiCallback<LogicalRouterPort> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateLogicalRouterPortValidateBeforeCall(body, logicalRouterPortId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LogicalRouterPort>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
