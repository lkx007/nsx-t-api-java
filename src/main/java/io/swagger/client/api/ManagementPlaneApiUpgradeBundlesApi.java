/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ApiError;
import java.io.File;
import io.swagger.client.model.UpgradeBundleFetchRequest;
import io.swagger.client.model.UpgradeBundleId;
import io.swagger.client.model.UpgradeBundleInfo;
import io.swagger.client.model.UpgradeBundleUploadStatus;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ManagementPlaneApiUpgradeBundlesApi {
    private ApiClient apiClient;

    public ManagementPlaneApiUpgradeBundlesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ManagementPlaneApiUpgradeBundlesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for cancelUpgradeBundleUploadCancelUpload
     * @param bundleId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cancelUpgradeBundleUploadCancelUploadCall(String bundleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/upgrade/bundles/{bundle-id}?action=cancel_upload"
            .replaceAll("\\{" + "bundle-id" + "\\}", apiClient.escapeString(bundleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cancelUpgradeBundleUploadCancelUploadValidateBeforeCall(String bundleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'bundleId' is set
        if (bundleId == null) {
            throw new ApiException("Missing the required parameter 'bundleId' when calling cancelUpgradeBundleUploadCancelUpload(Async)");
        }
        
        com.squareup.okhttp.Call call = cancelUpgradeBundleUploadCancelUploadCall(bundleId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Cancel upgrade bundle upload
     * Cancel upload of upgrade bundle. This API works only when bundle upload is in-progress and will not work during post-processing of upgrade bundle. If bundle upload is in-progress, then the API call returns http OK response after cancelling the upload and deleting partially uploaded bundle. 
     * @param bundleId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void cancelUpgradeBundleUploadCancelUpload(String bundleId) throws ApiException {
        cancelUpgradeBundleUploadCancelUploadWithHttpInfo(bundleId);
    }

    /**
     * Cancel upgrade bundle upload
     * Cancel upload of upgrade bundle. This API works only when bundle upload is in-progress and will not work during post-processing of upgrade bundle. If bundle upload is in-progress, then the API call returns http OK response after cancelling the upload and deleting partially uploaded bundle. 
     * @param bundleId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> cancelUpgradeBundleUploadCancelUploadWithHttpInfo(String bundleId) throws ApiException {
        com.squareup.okhttp.Call call = cancelUpgradeBundleUploadCancelUploadValidateBeforeCall(bundleId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Cancel upgrade bundle upload (asynchronously)
     * Cancel upload of upgrade bundle. This API works only when bundle upload is in-progress and will not work during post-processing of upgrade bundle. If bundle upload is in-progress, then the API call returns http OK response after cancelling the upload and deleting partially uploaded bundle. 
     * @param bundleId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cancelUpgradeBundleUploadCancelUploadAsync(String bundleId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cancelUpgradeBundleUploadCancelUploadValidateBeforeCall(bundleId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for fetchUpgradeBundleFromUrl
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call fetchUpgradeBundleFromUrlCall(UpgradeBundleFetchRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/upgrade/bundles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call fetchUpgradeBundleFromUrlValidateBeforeCall(UpgradeBundleFetchRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling fetchUpgradeBundleFromUrl(Async)");
        }
        
        com.squareup.okhttp.Call call = fetchUpgradeBundleFromUrlCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Fetch upgrade bundle from given url
     * Fetches the upgrade bundle from url. The call returns after fetch is initiated. Check status by periodically retrieving upgrade bundle upload status using GET /upgrade/bundles/&lt;bundle-id&gt;/upload-status. The upload is complete when the status is SUCCESS. 
     * @param body  (required)
     * @return UpgradeBundleId
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UpgradeBundleId fetchUpgradeBundleFromUrl(UpgradeBundleFetchRequest body) throws ApiException {
        ApiResponse<UpgradeBundleId> resp = fetchUpgradeBundleFromUrlWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Fetch upgrade bundle from given url
     * Fetches the upgrade bundle from url. The call returns after fetch is initiated. Check status by periodically retrieving upgrade bundle upload status using GET /upgrade/bundles/&lt;bundle-id&gt;/upload-status. The upload is complete when the status is SUCCESS. 
     * @param body  (required)
     * @return ApiResponse&lt;UpgradeBundleId&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UpgradeBundleId> fetchUpgradeBundleFromUrlWithHttpInfo(UpgradeBundleFetchRequest body) throws ApiException {
        com.squareup.okhttp.Call call = fetchUpgradeBundleFromUrlValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<UpgradeBundleId>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Fetch upgrade bundle from given url (asynchronously)
     * Fetches the upgrade bundle from url. The call returns after fetch is initiated. Check status by periodically retrieving upgrade bundle upload status using GET /upgrade/bundles/&lt;bundle-id&gt;/upload-status. The upload is complete when the status is SUCCESS. 
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call fetchUpgradeBundleFromUrlAsync(UpgradeBundleFetchRequest body, final ApiCallback<UpgradeBundleId> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = fetchUpgradeBundleFromUrlValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UpgradeBundleId>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getUpgradeBundleInfo
     * @param bundleId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getUpgradeBundleInfoCall(String bundleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/upgrade/bundles/{bundle-id}"
            .replaceAll("\\{" + "bundle-id" + "\\}", apiClient.escapeString(bundleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getUpgradeBundleInfoValidateBeforeCall(String bundleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'bundleId' is set
        if (bundleId == null) {
            throw new ApiException("Missing the required parameter 'bundleId' when calling getUpgradeBundleInfo(Async)");
        }
        
        com.squareup.okhttp.Call call = getUpgradeBundleInfoCall(bundleId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get uploaded upgrade bundle information
     * Get uploaded upgrade bundle information 
     * @param bundleId  (required)
     * @return UpgradeBundleInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UpgradeBundleInfo getUpgradeBundleInfo(String bundleId) throws ApiException {
        ApiResponse<UpgradeBundleInfo> resp = getUpgradeBundleInfoWithHttpInfo(bundleId);
        return resp.getData();
    }

    /**
     * Get uploaded upgrade bundle information
     * Get uploaded upgrade bundle information 
     * @param bundleId  (required)
     * @return ApiResponse&lt;UpgradeBundleInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UpgradeBundleInfo> getUpgradeBundleInfoWithHttpInfo(String bundleId) throws ApiException {
        com.squareup.okhttp.Call call = getUpgradeBundleInfoValidateBeforeCall(bundleId, null, null);
        Type localVarReturnType = new TypeToken<UpgradeBundleInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get uploaded upgrade bundle information (asynchronously)
     * Get uploaded upgrade bundle information 
     * @param bundleId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getUpgradeBundleInfoAsync(String bundleId, final ApiCallback<UpgradeBundleInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getUpgradeBundleInfoValidateBeforeCall(bundleId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UpgradeBundleInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getUpgradeBundleUploadStatus
     * @param bundleId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getUpgradeBundleUploadStatusCall(String bundleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/upgrade/bundles/{bundle-id}/upload-status"
            .replaceAll("\\{" + "bundle-id" + "\\}", apiClient.escapeString(bundleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getUpgradeBundleUploadStatusValidateBeforeCall(String bundleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'bundleId' is set
        if (bundleId == null) {
            throw new ApiException("Missing the required parameter 'bundleId' when calling getUpgradeBundleUploadStatus(Async)");
        }
        
        com.squareup.okhttp.Call call = getUpgradeBundleUploadStatusCall(bundleId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get uploaded upgrade bundle upload status
     * Get uploaded upgrade bundle upload status 
     * @param bundleId  (required)
     * @return UpgradeBundleUploadStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UpgradeBundleUploadStatus getUpgradeBundleUploadStatus(String bundleId) throws ApiException {
        ApiResponse<UpgradeBundleUploadStatus> resp = getUpgradeBundleUploadStatusWithHttpInfo(bundleId);
        return resp.getData();
    }

    /**
     * Get uploaded upgrade bundle upload status
     * Get uploaded upgrade bundle upload status 
     * @param bundleId  (required)
     * @return ApiResponse&lt;UpgradeBundleUploadStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UpgradeBundleUploadStatus> getUpgradeBundleUploadStatusWithHttpInfo(String bundleId) throws ApiException {
        com.squareup.okhttp.Call call = getUpgradeBundleUploadStatusValidateBeforeCall(bundleId, null, null);
        Type localVarReturnType = new TypeToken<UpgradeBundleUploadStatus>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get uploaded upgrade bundle upload status (asynchronously)
     * Get uploaded upgrade bundle upload status 
     * @param bundleId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getUpgradeBundleUploadStatusAsync(String bundleId, final ApiCallback<UpgradeBundleUploadStatus> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getUpgradeBundleUploadStatusValidateBeforeCall(bundleId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UpgradeBundleUploadStatus>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for uploadUpgradeBundleAsyncUpload
     * @param file  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call uploadUpgradeBundleAsyncUploadCall(File file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/upgrade/bundles?action=upload";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (file != null)
        localVarFormParams.put("file", file);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call uploadUpgradeBundleAsyncUploadValidateBeforeCall(File file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'file' is set
        if (file == null) {
            throw new ApiException("Missing the required parameter 'file' when calling uploadUpgradeBundleAsyncUpload(Async)");
        }
        
        com.squareup.okhttp.Call call = uploadUpgradeBundleAsyncUploadCall(file, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Upload upgrade bundle
     * Upload the upgrade bundle. This call returns after upload is completed. You can check bundle processing status periodically by retrieving upgrade bundle upload status to find out if the upload and processing is completed. 
     * @param file  (required)
     * @return UpgradeBundleId
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UpgradeBundleId uploadUpgradeBundleAsyncUpload(File file) throws ApiException {
        ApiResponse<UpgradeBundleId> resp = uploadUpgradeBundleAsyncUploadWithHttpInfo(file);
        return resp.getData();
    }

    /**
     * Upload upgrade bundle
     * Upload the upgrade bundle. This call returns after upload is completed. You can check bundle processing status periodically by retrieving upgrade bundle upload status to find out if the upload and processing is completed. 
     * @param file  (required)
     * @return ApiResponse&lt;UpgradeBundleId&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UpgradeBundleId> uploadUpgradeBundleAsyncUploadWithHttpInfo(File file) throws ApiException {
        com.squareup.okhttp.Call call = uploadUpgradeBundleAsyncUploadValidateBeforeCall(file, null, null);
        Type localVarReturnType = new TypeToken<UpgradeBundleId>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Upload upgrade bundle (asynchronously)
     * Upload the upgrade bundle. This call returns after upload is completed. You can check bundle processing status periodically by retrieving upgrade bundle upload status to find out if the upload and processing is completed. 
     * @param file  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call uploadUpgradeBundleAsyncUploadAsync(File file, final ApiCallback<UpgradeBundleId> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = uploadUpgradeBundleAsyncUploadValidateBeforeCall(file, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UpgradeBundleId>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
