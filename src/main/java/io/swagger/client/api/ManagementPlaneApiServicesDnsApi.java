/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ApiError;
import io.swagger.client.model.ConfigurationState;
import io.swagger.client.model.DnsAnswer;
import io.swagger.client.model.DnsFailedQueries;
import io.swagger.client.model.DnsForwarder;
import io.swagger.client.model.DnsForwarderListResult;
import io.swagger.client.model.DnsForwarderStatistics;
import io.swagger.client.model.DnsForwarderStatus;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ManagementPlaneApiServicesDnsApi {
    private ApiClient apiClient;

    public ManagementPlaneApiServicesDnsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ManagementPlaneApiServicesDnsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for clearDnsForwarderCacheClearCache
     * @param forwarderId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call clearDnsForwarderCacheClearCacheCall(String forwarderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/dns/forwarders/{forwarder-id}?action=clear_cache"
            .replaceAll("\\{" + "forwarder-id" + "\\}", apiClient.escapeString(forwarderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call clearDnsForwarderCacheClearCacheValidateBeforeCall(String forwarderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'forwarderId' is set
        if (forwarderId == null) {
            throw new ApiException("Missing the required parameter 'forwarderId' when calling clearDnsForwarderCacheClearCache(Async)");
        }
        
        com.squareup.okhttp.Call call = clearDnsForwarderCacheClearCacheCall(forwarderId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Clear the current cache of the DNS forwarder.
     * Clear the current cache of the DNS forwarder. 
     * @param forwarderId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void clearDnsForwarderCacheClearCache(String forwarderId) throws ApiException {
        clearDnsForwarderCacheClearCacheWithHttpInfo(forwarderId);
    }

    /**
     * Clear the current cache of the DNS forwarder.
     * Clear the current cache of the DNS forwarder. 
     * @param forwarderId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> clearDnsForwarderCacheClearCacheWithHttpInfo(String forwarderId) throws ApiException {
        com.squareup.okhttp.Call call = clearDnsForwarderCacheClearCacheValidateBeforeCall(forwarderId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Clear the current cache of the DNS forwarder. (asynchronously)
     * Clear the current cache of the DNS forwarder. 
     * @param forwarderId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call clearDnsForwarderCacheClearCacheAsync(String forwarderId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = clearDnsForwarderCacheClearCacheValidateBeforeCall(forwarderId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createDnsForwader
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createDnsForwaderCall(DnsForwarder body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/dns/forwarders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createDnsForwaderValidateBeforeCall(DnsForwarder body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createDnsForwader(Async)");
        }
        
        com.squareup.okhttp.Call call = createDnsForwaderCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create a DNS forwader
     * Create a DNS forwader upon a logical router. There is only one DNS forwarder can be created upon a given logical router. 
     * @param body  (required)
     * @return DnsForwarder
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DnsForwarder createDnsForwader(DnsForwarder body) throws ApiException {
        ApiResponse<DnsForwarder> resp = createDnsForwaderWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create a DNS forwader
     * Create a DNS forwader upon a logical router. There is only one DNS forwarder can be created upon a given logical router. 
     * @param body  (required)
     * @return ApiResponse&lt;DnsForwarder&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DnsForwarder> createDnsForwaderWithHttpInfo(DnsForwarder body) throws ApiException {
        com.squareup.okhttp.Call call = createDnsForwaderValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<DnsForwarder>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a DNS forwader (asynchronously)
     * Create a DNS forwader upon a logical router. There is only one DNS forwarder can be created upon a given logical router. 
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createDnsForwaderAsync(DnsForwarder body, final ApiCallback<DnsForwarder> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createDnsForwaderValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DnsForwarder>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteDnsForwarder
     * @param forwarderId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteDnsForwarderCall(String forwarderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/dns/forwarders/{forwarder-id}"
            .replaceAll("\\{" + "forwarder-id" + "\\}", apiClient.escapeString(forwarderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteDnsForwarderValidateBeforeCall(String forwarderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'forwarderId' is set
        if (forwarderId == null) {
            throw new ApiException("Missing the required parameter 'forwarderId' when calling deleteDnsForwarder(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteDnsForwarderCall(forwarderId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete a specific DNS forwarder
     * Delete a specific DNS forwarder. 
     * @param forwarderId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteDnsForwarder(String forwarderId) throws ApiException {
        deleteDnsForwarderWithHttpInfo(forwarderId);
    }

    /**
     * Delete a specific DNS forwarder
     * Delete a specific DNS forwarder. 
     * @param forwarderId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteDnsForwarderWithHttpInfo(String forwarderId) throws ApiException {
        com.squareup.okhttp.Call call = deleteDnsForwarderValidateBeforeCall(forwarderId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a specific DNS forwarder (asynchronously)
     * Delete a specific DNS forwarder. 
     * @param forwarderId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteDnsForwarderAsync(String forwarderId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteDnsForwarderValidateBeforeCall(forwarderId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for disableDnsForwarderDisable
     * @param forwarderId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call disableDnsForwarderDisableCall(String forwarderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/dns/forwarders/{forwarder-id}?action=disable"
            .replaceAll("\\{" + "forwarder-id" + "\\}", apiClient.escapeString(forwarderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call disableDnsForwarderDisableValidateBeforeCall(String forwarderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'forwarderId' is set
        if (forwarderId == null) {
            throw new ApiException("Missing the required parameter 'forwarderId' when calling disableDnsForwarderDisable(Async)");
        }
        
        com.squareup.okhttp.Call call = disableDnsForwarderDisableCall(forwarderId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Disable the DNS forwarder.
     * Disable the DNS forwarder if the forwarder is currently enbled. If the DNS forwarder is already disabled, the forwarder will not be re-disabled.  Please note, once a DNS forwarder is disabled then enabled, the previous DNS forwarder statistics counters will be reset. 
     * @param forwarderId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void disableDnsForwarderDisable(String forwarderId) throws ApiException {
        disableDnsForwarderDisableWithHttpInfo(forwarderId);
    }

    /**
     * Disable the DNS forwarder.
     * Disable the DNS forwarder if the forwarder is currently enbled. If the DNS forwarder is already disabled, the forwarder will not be re-disabled.  Please note, once a DNS forwarder is disabled then enabled, the previous DNS forwarder statistics counters will be reset. 
     * @param forwarderId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> disableDnsForwarderDisableWithHttpInfo(String forwarderId) throws ApiException {
        com.squareup.okhttp.Call call = disableDnsForwarderDisableValidateBeforeCall(forwarderId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Disable the DNS forwarder. (asynchronously)
     * Disable the DNS forwarder if the forwarder is currently enbled. If the DNS forwarder is already disabled, the forwarder will not be re-disabled.  Please note, once a DNS forwarder is disabled then enabled, the previous DNS forwarder statistics counters will be reset. 
     * @param forwarderId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call disableDnsForwarderDisableAsync(String forwarderId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = disableDnsForwarderDisableValidateBeforeCall(forwarderId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for enableDnsForwarderEnable
     * @param forwarderId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call enableDnsForwarderEnableCall(String forwarderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/dns/forwarders/{forwarder-id}?action=enable"
            .replaceAll("\\{" + "forwarder-id" + "\\}", apiClient.escapeString(forwarderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call enableDnsForwarderEnableValidateBeforeCall(String forwarderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'forwarderId' is set
        if (forwarderId == null) {
            throw new ApiException("Missing the required parameter 'forwarderId' when calling enableDnsForwarderEnable(Async)");
        }
        
        com.squareup.okhttp.Call call = enableDnsForwarderEnableCall(forwarderId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Enable the DNS forwarder.
     * Enable the DNS forwarder if the forwarder is currently disabled. If the DNS forwarder is already enabled, the forwarder will not be re-enabled.  Please note, once a DNS forwarder is disabled then enabled, the previous DNS forwarder statistics counters will be reset. 
     * @param forwarderId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void enableDnsForwarderEnable(String forwarderId) throws ApiException {
        enableDnsForwarderEnableWithHttpInfo(forwarderId);
    }

    /**
     * Enable the DNS forwarder.
     * Enable the DNS forwarder if the forwarder is currently disabled. If the DNS forwarder is already enabled, the forwarder will not be re-enabled.  Please note, once a DNS forwarder is disabled then enabled, the previous DNS forwarder statistics counters will be reset. 
     * @param forwarderId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> enableDnsForwarderEnableWithHttpInfo(String forwarderId) throws ApiException {
        com.squareup.okhttp.Call call = enableDnsForwarderEnableValidateBeforeCall(forwarderId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Enable the DNS forwarder. (asynchronously)
     * Enable the DNS forwarder if the forwarder is currently disabled. If the DNS forwarder is already enabled, the forwarder will not be re-enabled.  Please note, once a DNS forwarder is disabled then enabled, the previous DNS forwarder statistics counters will be reset. 
     * @param forwarderId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call enableDnsForwarderEnableAsync(String forwarderId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = enableDnsForwarderEnableValidateBeforeCall(forwarderId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getDnsForwarderState
     * @param forwarderId  (required)
     * @param barrierId  (optional)
     * @param requestId Realization request ID (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDnsForwarderStateCall(String forwarderId, Long barrierId, String requestId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/dns/forwarders/{forwarder-id}/state"
            .replaceAll("\\{" + "forwarder-id" + "\\}", apiClient.escapeString(forwarderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (barrierId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("barrier_id", barrierId));
        if (requestId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("request_id", requestId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDnsForwarderStateValidateBeforeCall(String forwarderId, Long barrierId, String requestId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'forwarderId' is set
        if (forwarderId == null) {
            throw new ApiException("Missing the required parameter 'forwarderId' when calling getDnsForwarderState(Async)");
        }
        
        com.squareup.okhttp.Call call = getDnsForwarderStateCall(forwarderId, barrierId, requestId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the realized state of a DNS forwarder
     * Return the realized state information of a DNS forwarder. After a DNS forwarder was created or updated, you can invoke this API to check the realization state of the forwarder. 
     * @param forwarderId  (required)
     * @param barrierId  (optional)
     * @param requestId Realization request ID (optional)
     * @return ConfigurationState
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConfigurationState getDnsForwarderState(String forwarderId, Long barrierId, String requestId) throws ApiException {
        ApiResponse<ConfigurationState> resp = getDnsForwarderStateWithHttpInfo(forwarderId, barrierId, requestId);
        return resp.getData();
    }

    /**
     * Get the realized state of a DNS forwarder
     * Return the realized state information of a DNS forwarder. After a DNS forwarder was created or updated, you can invoke this API to check the realization state of the forwarder. 
     * @param forwarderId  (required)
     * @param barrierId  (optional)
     * @param requestId Realization request ID (optional)
     * @return ApiResponse&lt;ConfigurationState&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConfigurationState> getDnsForwarderStateWithHttpInfo(String forwarderId, Long barrierId, String requestId) throws ApiException {
        com.squareup.okhttp.Call call = getDnsForwarderStateValidateBeforeCall(forwarderId, barrierId, requestId, null, null);
        Type localVarReturnType = new TypeToken<ConfigurationState>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the realized state of a DNS forwarder (asynchronously)
     * Return the realized state information of a DNS forwarder. After a DNS forwarder was created or updated, you can invoke this API to check the realization state of the forwarder. 
     * @param forwarderId  (required)
     * @param barrierId  (optional)
     * @param requestId Realization request ID (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDnsForwarderStateAsync(String forwarderId, Long barrierId, String requestId, final ApiCallback<ConfigurationState> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDnsForwarderStateValidateBeforeCall(forwarderId, barrierId, requestId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConfigurationState>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDnsForwarderStatistics
     * @param forwarderId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDnsForwarderStatisticsCall(String forwarderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/dns/forwarders/{forwarder-id}/statistics"
            .replaceAll("\\{" + "forwarder-id" + "\\}", apiClient.escapeString(forwarderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDnsForwarderStatisticsValidateBeforeCall(String forwarderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'forwarderId' is set
        if (forwarderId == null) {
            throw new ApiException("Missing the required parameter 'forwarderId' when calling getDnsForwarderStatistics(Async)");
        }
        
        com.squareup.okhttp.Call call = getDnsForwarderStatisticsCall(forwarderId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get statistics of given dns forwarder
     * Returns the statistics of the given dns forwarder specified by forwarder id. 
     * @param forwarderId  (required)
     * @return DnsForwarderStatistics
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DnsForwarderStatistics getDnsForwarderStatistics(String forwarderId) throws ApiException {
        ApiResponse<DnsForwarderStatistics> resp = getDnsForwarderStatisticsWithHttpInfo(forwarderId);
        return resp.getData();
    }

    /**
     * Get statistics of given dns forwarder
     * Returns the statistics of the given dns forwarder specified by forwarder id. 
     * @param forwarderId  (required)
     * @return ApiResponse&lt;DnsForwarderStatistics&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DnsForwarderStatistics> getDnsForwarderStatisticsWithHttpInfo(String forwarderId) throws ApiException {
        com.squareup.okhttp.Call call = getDnsForwarderStatisticsValidateBeforeCall(forwarderId, null, null);
        Type localVarReturnType = new TypeToken<DnsForwarderStatistics>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get statistics of given dns forwarder (asynchronously)
     * Returns the statistics of the given dns forwarder specified by forwarder id. 
     * @param forwarderId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDnsForwarderStatisticsAsync(String forwarderId, final ApiCallback<DnsForwarderStatistics> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDnsForwarderStatisticsValidateBeforeCall(forwarderId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DnsForwarderStatistics>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDnsForwarderStatus
     * @param forwarderId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDnsForwarderStatusCall(String forwarderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/dns/forwarders/{forwarder-id}/status"
            .replaceAll("\\{" + "forwarder-id" + "\\}", apiClient.escapeString(forwarderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDnsForwarderStatusValidateBeforeCall(String forwarderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'forwarderId' is set
        if (forwarderId == null) {
            throw new ApiException("Missing the required parameter 'forwarderId' when calling getDnsForwarderStatus(Async)");
        }
        
        com.squareup.okhttp.Call call = getDnsForwarderStatusCall(forwarderId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get current status of the given DNS forwarder
     * Returns the current status of the given DNS forwarder. 
     * @param forwarderId  (required)
     * @return DnsForwarderStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DnsForwarderStatus getDnsForwarderStatus(String forwarderId) throws ApiException {
        ApiResponse<DnsForwarderStatus> resp = getDnsForwarderStatusWithHttpInfo(forwarderId);
        return resp.getData();
    }

    /**
     * Get current status of the given DNS forwarder
     * Returns the current status of the given DNS forwarder. 
     * @param forwarderId  (required)
     * @return ApiResponse&lt;DnsForwarderStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DnsForwarderStatus> getDnsForwarderStatusWithHttpInfo(String forwarderId) throws ApiException {
        com.squareup.okhttp.Call call = getDnsForwarderStatusValidateBeforeCall(forwarderId, null, null);
        Type localVarReturnType = new TypeToken<DnsForwarderStatus>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get current status of the given DNS forwarder (asynchronously)
     * Returns the current status of the given DNS forwarder. 
     * @param forwarderId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDnsForwarderStatusAsync(String forwarderId, final ApiCallback<DnsForwarderStatus> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDnsForwarderStatusValidateBeforeCall(forwarderId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DnsForwarderStatus>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFailedDnsQueries
     * @param forwarderId  (required)
     * @param count The count of the failed DNS queries (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFailedDnsQueriesCall(String forwarderId, Long count, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/dns/forwarders/{forwarder-id}/failed-queries"
            .replaceAll("\\{" + "forwarder-id" + "\\}", apiClient.escapeString(forwarderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (count != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("count", count));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFailedDnsQueriesValidateBeforeCall(String forwarderId, Long count, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'forwarderId' is set
        if (forwarderId == null) {
            throw new ApiException("Missing the required parameter 'forwarderId' when calling getFailedDnsQueries(Async)");
        }
        
        com.squareup.okhttp.Call call = getFailedDnsQueriesCall(forwarderId, count, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the recent failed DNS queries
     * Return the given count of recent failed DNS queries from DNS forwarder. Since the DNS forwarder is running in Acitve/Standby HA mode on transport nodes, the given count of queries will be returned from each nodes. Hence the total queries returned could be doubled. If no count is specified, 100 recent failed queries are returned. If the recent failures is less than the given count, all the failures will be returned. The maximum count is 1,000. 
     * @param forwarderId  (required)
     * @param count The count of the failed DNS queries (optional)
     * @return DnsFailedQueries
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DnsFailedQueries getFailedDnsQueries(String forwarderId, Long count) throws ApiException {
        ApiResponse<DnsFailedQueries> resp = getFailedDnsQueriesWithHttpInfo(forwarderId, count);
        return resp.getData();
    }

    /**
     * Get the recent failed DNS queries
     * Return the given count of recent failed DNS queries from DNS forwarder. Since the DNS forwarder is running in Acitve/Standby HA mode on transport nodes, the given count of queries will be returned from each nodes. Hence the total queries returned could be doubled. If no count is specified, 100 recent failed queries are returned. If the recent failures is less than the given count, all the failures will be returned. The maximum count is 1,000. 
     * @param forwarderId  (required)
     * @param count The count of the failed DNS queries (optional)
     * @return ApiResponse&lt;DnsFailedQueries&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DnsFailedQueries> getFailedDnsQueriesWithHttpInfo(String forwarderId, Long count) throws ApiException {
        com.squareup.okhttp.Call call = getFailedDnsQueriesValidateBeforeCall(forwarderId, count, null, null);
        Type localVarReturnType = new TypeToken<DnsFailedQueries>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the recent failed DNS queries (asynchronously)
     * Return the given count of recent failed DNS queries from DNS forwarder. Since the DNS forwarder is running in Acitve/Standby HA mode on transport nodes, the given count of queries will be returned from each nodes. Hence the total queries returned could be doubled. If no count is specified, 100 recent failed queries are returned. If the recent failures is less than the given count, all the failures will be returned. The maximum count is 1,000. 
     * @param forwarderId  (required)
     * @param count The count of the failed DNS queries (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFailedDnsQueriesAsync(String forwarderId, Long count, final ApiCallback<DnsFailedQueries> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFailedDnsQueriesValidateBeforeCall(forwarderId, count, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DnsFailedQueries>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listDnsForwaders
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listDnsForwadersCall(String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/dns/forwarders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (includedFields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("included_fields", includedFields));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page_size", pageSize));
        if (sortAscending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_ascending", sortAscending));
        if (sortBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_by", sortBy));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listDnsForwadersValidateBeforeCall(String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listDnsForwadersCall(cursor, includedFields, pageSize, sortAscending, sortBy, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get a paginated list of DNS forwarders
     * Get a paginated list of DNS forwarders. 
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @return DnsForwarderListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DnsForwarderListResult listDnsForwaders(String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy) throws ApiException {
        ApiResponse<DnsForwarderListResult> resp = listDnsForwadersWithHttpInfo(cursor, includedFields, pageSize, sortAscending, sortBy);
        return resp.getData();
    }

    /**
     * Get a paginated list of DNS forwarders
     * Get a paginated list of DNS forwarders. 
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @return ApiResponse&lt;DnsForwarderListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DnsForwarderListResult> listDnsForwadersWithHttpInfo(String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy) throws ApiException {
        com.squareup.okhttp.Call call = listDnsForwadersValidateBeforeCall(cursor, includedFields, pageSize, sortAscending, sortBy, null, null);
        Type localVarReturnType = new TypeToken<DnsForwarderListResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a paginated list of DNS forwarders (asynchronously)
     * Get a paginated list of DNS forwarders. 
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listDnsForwadersAsync(String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, final ApiCallback<DnsForwarderListResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listDnsForwadersValidateBeforeCall(cursor, includedFields, pageSize, sortAscending, sortBy, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DnsForwarderListResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for lookupAddress
     * @param forwarderId  (required)
     * @param address IP address or FQDN for nslookup (optional)
     * @param serverIp IPv4 address (optional)
     * @param sourceIp IPv4 address (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call lookupAddressCall(String forwarderId, String address, String serverIp, String sourceIp, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/dns/forwarders/{forwarder-id}/nslookup"
            .replaceAll("\\{" + "forwarder-id" + "\\}", apiClient.escapeString(forwarderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (address != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("address", address));
        if (serverIp != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("server_ip", serverIp));
        if (sourceIp != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("source_ip", sourceIp));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call lookupAddressValidateBeforeCall(String forwarderId, String address, String serverIp, String sourceIp, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'forwarderId' is set
        if (forwarderId == null) {
            throw new ApiException("Missing the required parameter 'forwarderId' when calling lookupAddress(Async)");
        }
        
        com.squareup.okhttp.Call call = lookupAddressCall(forwarderId, address, serverIp, sourceIp, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Resolve a given address via the DNS forwarder
     * Query the nameserver for an ip-address or a FQDN of the given an address optionally using an specified DNS server. If the address is a fqdn, nslookup will resolve ip-address with it. If the address is an ip-address, do a reverse lookup and answer fqdn(s). 
     * @param forwarderId  (required)
     * @param address IP address or FQDN for nslookup (optional)
     * @param serverIp IPv4 address (optional)
     * @param sourceIp IPv4 address (optional)
     * @return DnsAnswer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DnsAnswer lookupAddress(String forwarderId, String address, String serverIp, String sourceIp) throws ApiException {
        ApiResponse<DnsAnswer> resp = lookupAddressWithHttpInfo(forwarderId, address, serverIp, sourceIp);
        return resp.getData();
    }

    /**
     * Resolve a given address via the DNS forwarder
     * Query the nameserver for an ip-address or a FQDN of the given an address optionally using an specified DNS server. If the address is a fqdn, nslookup will resolve ip-address with it. If the address is an ip-address, do a reverse lookup and answer fqdn(s). 
     * @param forwarderId  (required)
     * @param address IP address or FQDN for nslookup (optional)
     * @param serverIp IPv4 address (optional)
     * @param sourceIp IPv4 address (optional)
     * @return ApiResponse&lt;DnsAnswer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DnsAnswer> lookupAddressWithHttpInfo(String forwarderId, String address, String serverIp, String sourceIp) throws ApiException {
        com.squareup.okhttp.Call call = lookupAddressValidateBeforeCall(forwarderId, address, serverIp, sourceIp, null, null);
        Type localVarReturnType = new TypeToken<DnsAnswer>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Resolve a given address via the DNS forwarder (asynchronously)
     * Query the nameserver for an ip-address or a FQDN of the given an address optionally using an specified DNS server. If the address is a fqdn, nslookup will resolve ip-address with it. If the address is an ip-address, do a reverse lookup and answer fqdn(s). 
     * @param forwarderId  (required)
     * @param address IP address or FQDN for nslookup (optional)
     * @param serverIp IPv4 address (optional)
     * @param sourceIp IPv4 address (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call lookupAddressAsync(String forwarderId, String address, String serverIp, String sourceIp, final ApiCallback<DnsAnswer> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = lookupAddressValidateBeforeCall(forwarderId, address, serverIp, sourceIp, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DnsAnswer>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for readDnsForwader
     * @param forwarderId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call readDnsForwaderCall(String forwarderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/dns/forwarders/{forwarder-id}"
            .replaceAll("\\{" + "forwarder-id" + "\\}", apiClient.escapeString(forwarderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call readDnsForwaderValidateBeforeCall(String forwarderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'forwarderId' is set
        if (forwarderId == null) {
            throw new ApiException("Missing the required parameter 'forwarderId' when calling readDnsForwader(Async)");
        }
        
        com.squareup.okhttp.Call call = readDnsForwaderCall(forwarderId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieve a DNS forwarder
     * Retrieve a DNS forwarder. 
     * @param forwarderId  (required)
     * @return DnsForwarder
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DnsForwarder readDnsForwader(String forwarderId) throws ApiException {
        ApiResponse<DnsForwarder> resp = readDnsForwaderWithHttpInfo(forwarderId);
        return resp.getData();
    }

    /**
     * Retrieve a DNS forwarder
     * Retrieve a DNS forwarder. 
     * @param forwarderId  (required)
     * @return ApiResponse&lt;DnsForwarder&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DnsForwarder> readDnsForwaderWithHttpInfo(String forwarderId) throws ApiException {
        com.squareup.okhttp.Call call = readDnsForwaderValidateBeforeCall(forwarderId, null, null);
        Type localVarReturnType = new TypeToken<DnsForwarder>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a DNS forwarder (asynchronously)
     * Retrieve a DNS forwarder. 
     * @param forwarderId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call readDnsForwaderAsync(String forwarderId, final ApiCallback<DnsForwarder> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = readDnsForwaderValidateBeforeCall(forwarderId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DnsForwarder>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateDnsForwarder
     * @param body  (required)
     * @param forwarderId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateDnsForwarderCall(DnsForwarder body, String forwarderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/dns/forwarders/{forwarder-id}"
            .replaceAll("\\{" + "forwarder-id" + "\\}", apiClient.escapeString(forwarderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateDnsForwarderValidateBeforeCall(DnsForwarder body, String forwarderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateDnsForwarder(Async)");
        }
        // verify the required parameter 'forwarderId' is set
        if (forwarderId == null) {
            throw new ApiException("Missing the required parameter 'forwarderId' when calling updateDnsForwarder(Async)");
        }
        
        com.squareup.okhttp.Call call = updateDnsForwarderCall(body, forwarderId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update a specific DNS forwarder
     * Update a specific DNS forwarder. 
     * @param body  (required)
     * @param forwarderId  (required)
     * @return DnsForwarder
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DnsForwarder updateDnsForwarder(DnsForwarder body, String forwarderId) throws ApiException {
        ApiResponse<DnsForwarder> resp = updateDnsForwarderWithHttpInfo(body, forwarderId);
        return resp.getData();
    }

    /**
     * Update a specific DNS forwarder
     * Update a specific DNS forwarder. 
     * @param body  (required)
     * @param forwarderId  (required)
     * @return ApiResponse&lt;DnsForwarder&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DnsForwarder> updateDnsForwarderWithHttpInfo(DnsForwarder body, String forwarderId) throws ApiException {
        com.squareup.okhttp.Call call = updateDnsForwarderValidateBeforeCall(body, forwarderId, null, null);
        Type localVarReturnType = new TypeToken<DnsForwarder>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a specific DNS forwarder (asynchronously)
     * Update a specific DNS forwarder. 
     * @param body  (required)
     * @param forwarderId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateDnsForwarderAsync(DnsForwarder body, String forwarderId, final ApiCallback<DnsForwarder> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateDnsForwarderValidateBeforeCall(body, forwarderId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DnsForwarder>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
