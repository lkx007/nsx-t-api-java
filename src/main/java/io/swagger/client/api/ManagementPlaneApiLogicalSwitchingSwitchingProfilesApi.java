/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ApiError;
import io.swagger.client.model.BaseSwitchingProfile;
import io.swagger.client.model.SwitchingProfileStatus;
import io.swagger.client.model.SwitchingProfilesListResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ManagementPlaneApiLogicalSwitchingSwitchingProfilesApi {
    private ApiClient apiClient;

    public ManagementPlaneApiLogicalSwitchingSwitchingProfilesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ManagementPlaneApiLogicalSwitchingSwitchingProfilesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createSwitchingProfile
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createSwitchingProfileCall(BaseSwitchingProfile body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/switching-profiles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createSwitchingProfileValidateBeforeCall(BaseSwitchingProfile body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createSwitchingProfile(Async)");
        }
        
        com.squareup.okhttp.Call call = createSwitchingProfileCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create a Switching Profile
     * Creates a new, custom qos, port-mirroring, spoof-guard or port-security switching profile. You can override their default switching profile assignments by creating a new switching profile and assigning it to one or more logical switches. You cannot override the default ipfix or ip_discovery switching profiles. 
     * @param body  (required)
     * @return BaseSwitchingProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BaseSwitchingProfile createSwitchingProfile(BaseSwitchingProfile body) throws ApiException {
        ApiResponse<BaseSwitchingProfile> resp = createSwitchingProfileWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create a Switching Profile
     * Creates a new, custom qos, port-mirroring, spoof-guard or port-security switching profile. You can override their default switching profile assignments by creating a new switching profile and assigning it to one or more logical switches. You cannot override the default ipfix or ip_discovery switching profiles. 
     * @param body  (required)
     * @return ApiResponse&lt;BaseSwitchingProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BaseSwitchingProfile> createSwitchingProfileWithHttpInfo(BaseSwitchingProfile body) throws ApiException {
        com.squareup.okhttp.Call call = createSwitchingProfileValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<BaseSwitchingProfile>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a Switching Profile (asynchronously)
     * Creates a new, custom qos, port-mirroring, spoof-guard or port-security switching profile. You can override their default switching profile assignments by creating a new switching profile and assigning it to one or more logical switches. You cannot override the default ipfix or ip_discovery switching profiles. 
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createSwitchingProfileAsync(BaseSwitchingProfile body, final ApiCallback<BaseSwitchingProfile> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createSwitchingProfileValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BaseSwitchingProfile>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteSwitchingProfile
     * @param switchingProfileId  (required)
     * @param unbind force unbinding of logical switches and ports from a switching profile (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteSwitchingProfileCall(String switchingProfileId, Boolean unbind, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/switching-profiles/{switching-profile-id}"
            .replaceAll("\\{" + "switching-profile-id" + "\\}", apiClient.escapeString(switchingProfileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (unbind != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("unbind", unbind));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteSwitchingProfileValidateBeforeCall(String switchingProfileId, Boolean unbind, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'switchingProfileId' is set
        if (switchingProfileId == null) {
            throw new ApiException("Missing the required parameter 'switchingProfileId' when calling deleteSwitchingProfile(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteSwitchingProfileCall(switchingProfileId, unbind, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete a Switching Profile
     * Deletes the specified switching profile.
     * @param switchingProfileId  (required)
     * @param unbind force unbinding of logical switches and ports from a switching profile (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteSwitchingProfile(String switchingProfileId, Boolean unbind) throws ApiException {
        deleteSwitchingProfileWithHttpInfo(switchingProfileId, unbind);
    }

    /**
     * Delete a Switching Profile
     * Deletes the specified switching profile.
     * @param switchingProfileId  (required)
     * @param unbind force unbinding of logical switches and ports from a switching profile (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteSwitchingProfileWithHttpInfo(String switchingProfileId, Boolean unbind) throws ApiException {
        com.squareup.okhttp.Call call = deleteSwitchingProfileValidateBeforeCall(switchingProfileId, unbind, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a Switching Profile (asynchronously)
     * Deletes the specified switching profile.
     * @param switchingProfileId  (required)
     * @param unbind force unbinding of logical switches and ports from a switching profile (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteSwitchingProfileAsync(String switchingProfileId, Boolean unbind, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteSwitchingProfileValidateBeforeCall(switchingProfileId, unbind, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getSwitchingProfile
     * @param switchingProfileId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSwitchingProfileCall(String switchingProfileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/switching-profiles/{switching-profile-id}"
            .replaceAll("\\{" + "switching-profile-id" + "\\}", apiClient.escapeString(switchingProfileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSwitchingProfileValidateBeforeCall(String switchingProfileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'switchingProfileId' is set
        if (switchingProfileId == null) {
            throw new ApiException("Missing the required parameter 'switchingProfileId' when calling getSwitchingProfile(Async)");
        }
        
        com.squareup.okhttp.Call call = getSwitchingProfileCall(switchingProfileId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Switching Profile by ID
     * Returns information about a specified switching profile.
     * @param switchingProfileId  (required)
     * @return BaseSwitchingProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BaseSwitchingProfile getSwitchingProfile(String switchingProfileId) throws ApiException {
        ApiResponse<BaseSwitchingProfile> resp = getSwitchingProfileWithHttpInfo(switchingProfileId);
        return resp.getData();
    }

    /**
     * Get Switching Profile by ID
     * Returns information about a specified switching profile.
     * @param switchingProfileId  (required)
     * @return ApiResponse&lt;BaseSwitchingProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BaseSwitchingProfile> getSwitchingProfileWithHttpInfo(String switchingProfileId) throws ApiException {
        com.squareup.okhttp.Call call = getSwitchingProfileValidateBeforeCall(switchingProfileId, null, null);
        Type localVarReturnType = new TypeToken<BaseSwitchingProfile>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Switching Profile by ID (asynchronously)
     * Returns information about a specified switching profile.
     * @param switchingProfileId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSwitchingProfileAsync(String switchingProfileId, final ApiCallback<BaseSwitchingProfile> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSwitchingProfileValidateBeforeCall(switchingProfileId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BaseSwitchingProfile>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSwitchingProfileStatus
     * @param switchingProfileId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSwitchingProfileStatusCall(String switchingProfileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/switching-profiles/{switching-profile-id}/summary"
            .replaceAll("\\{" + "switching-profile-id" + "\\}", apiClient.escapeString(switchingProfileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSwitchingProfileStatusValidateBeforeCall(String switchingProfileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'switchingProfileId' is set
        if (switchingProfileId == null) {
            throw new ApiException("Missing the required parameter 'switchingProfileId' when calling getSwitchingProfileStatus(Async)");
        }
        
        com.squareup.okhttp.Call call = getSwitchingProfileStatusCall(switchingProfileId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Counts of Ports and Switches Using This Switching Profile
     * Get Counts of Ports and Switches Using This Switching Profile
     * @param switchingProfileId  (required)
     * @return SwitchingProfileStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SwitchingProfileStatus getSwitchingProfileStatus(String switchingProfileId) throws ApiException {
        ApiResponse<SwitchingProfileStatus> resp = getSwitchingProfileStatusWithHttpInfo(switchingProfileId);
        return resp.getData();
    }

    /**
     * Get Counts of Ports and Switches Using This Switching Profile
     * Get Counts of Ports and Switches Using This Switching Profile
     * @param switchingProfileId  (required)
     * @return ApiResponse&lt;SwitchingProfileStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SwitchingProfileStatus> getSwitchingProfileStatusWithHttpInfo(String switchingProfileId) throws ApiException {
        com.squareup.okhttp.Call call = getSwitchingProfileStatusValidateBeforeCall(switchingProfileId, null, null);
        Type localVarReturnType = new TypeToken<SwitchingProfileStatus>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Counts of Ports and Switches Using This Switching Profile (asynchronously)
     * Get Counts of Ports and Switches Using This Switching Profile
     * @param switchingProfileId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSwitchingProfileStatusAsync(String switchingProfileId, final ApiCallback<SwitchingProfileStatus> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSwitchingProfileStatusValidateBeforeCall(switchingProfileId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SwitchingProfileStatus>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listSwitchingProfiles
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includeSystemOwned Whether the list result contains system resources (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param switchingProfileType comma-separated list of switching profile types, e.g. ?switching_profile_type&#x3D;QosSwitchingProfile,IpDiscoverySwitchingProfile (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listSwitchingProfilesCall(String cursor, Boolean includeSystemOwned, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, String switchingProfileType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/switching-profiles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (includeSystemOwned != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("include_system_owned", includeSystemOwned));
        if (includedFields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("included_fields", includedFields));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page_size", pageSize));
        if (sortAscending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_ascending", sortAscending));
        if (sortBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_by", sortBy));
        if (switchingProfileType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("switching_profile_type", switchingProfileType));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listSwitchingProfilesValidateBeforeCall(String cursor, Boolean includeSystemOwned, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, String switchingProfileType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listSwitchingProfilesCall(cursor, includeSystemOwned, includedFields, pageSize, sortAscending, sortBy, switchingProfileType, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List Switching Profiles
     * Returns information about the system-default and user-configured switching profiles. Each switching profile has a unique ID, a display name, and various other read-only and configurable properties. The default switching profiles are assigned automatically to each switch. 
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includeSystemOwned Whether the list result contains system resources (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param switchingProfileType comma-separated list of switching profile types, e.g. ?switching_profile_type&#x3D;QosSwitchingProfile,IpDiscoverySwitchingProfile (optional)
     * @return SwitchingProfilesListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SwitchingProfilesListResult listSwitchingProfiles(String cursor, Boolean includeSystemOwned, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, String switchingProfileType) throws ApiException {
        ApiResponse<SwitchingProfilesListResult> resp = listSwitchingProfilesWithHttpInfo(cursor, includeSystemOwned, includedFields, pageSize, sortAscending, sortBy, switchingProfileType);
        return resp.getData();
    }

    /**
     * List Switching Profiles
     * Returns information about the system-default and user-configured switching profiles. Each switching profile has a unique ID, a display name, and various other read-only and configurable properties. The default switching profiles are assigned automatically to each switch. 
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includeSystemOwned Whether the list result contains system resources (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param switchingProfileType comma-separated list of switching profile types, e.g. ?switching_profile_type&#x3D;QosSwitchingProfile,IpDiscoverySwitchingProfile (optional)
     * @return ApiResponse&lt;SwitchingProfilesListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SwitchingProfilesListResult> listSwitchingProfilesWithHttpInfo(String cursor, Boolean includeSystemOwned, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, String switchingProfileType) throws ApiException {
        com.squareup.okhttp.Call call = listSwitchingProfilesValidateBeforeCall(cursor, includeSystemOwned, includedFields, pageSize, sortAscending, sortBy, switchingProfileType, null, null);
        Type localVarReturnType = new TypeToken<SwitchingProfilesListResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List Switching Profiles (asynchronously)
     * Returns information about the system-default and user-configured switching profiles. Each switching profile has a unique ID, a display name, and various other read-only and configurable properties. The default switching profiles are assigned automatically to each switch. 
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includeSystemOwned Whether the list result contains system resources (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param switchingProfileType comma-separated list of switching profile types, e.g. ?switching_profile_type&#x3D;QosSwitchingProfile,IpDiscoverySwitchingProfile (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listSwitchingProfilesAsync(String cursor, Boolean includeSystemOwned, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, String switchingProfileType, final ApiCallback<SwitchingProfilesListResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listSwitchingProfilesValidateBeforeCall(cursor, includeSystemOwned, includedFields, pageSize, sortAscending, sortBy, switchingProfileType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SwitchingProfilesListResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateSwitchingProfile
     * @param body  (required)
     * @param switchingProfileId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateSwitchingProfileCall(BaseSwitchingProfile body, String switchingProfileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/switching-profiles/{switching-profile-id}"
            .replaceAll("\\{" + "switching-profile-id" + "\\}", apiClient.escapeString(switchingProfileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateSwitchingProfileValidateBeforeCall(BaseSwitchingProfile body, String switchingProfileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateSwitchingProfile(Async)");
        }
        // verify the required parameter 'switchingProfileId' is set
        if (switchingProfileId == null) {
            throw new ApiException("Missing the required parameter 'switchingProfileId' when calling updateSwitchingProfile(Async)");
        }
        
        com.squareup.okhttp.Call call = updateSwitchingProfileCall(body, switchingProfileId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update a Switching Profile
     * Updates the user-configurable parameters of a switching profile. Only the qos, port-mirroring, spoof-guard and port-security switching profiles can be modified. You cannot modify the ipfix or ip-discovery switching profiles. 
     * @param body  (required)
     * @param switchingProfileId  (required)
     * @return BaseSwitchingProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BaseSwitchingProfile updateSwitchingProfile(BaseSwitchingProfile body, String switchingProfileId) throws ApiException {
        ApiResponse<BaseSwitchingProfile> resp = updateSwitchingProfileWithHttpInfo(body, switchingProfileId);
        return resp.getData();
    }

    /**
     * Update a Switching Profile
     * Updates the user-configurable parameters of a switching profile. Only the qos, port-mirroring, spoof-guard and port-security switching profiles can be modified. You cannot modify the ipfix or ip-discovery switching profiles. 
     * @param body  (required)
     * @param switchingProfileId  (required)
     * @return ApiResponse&lt;BaseSwitchingProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BaseSwitchingProfile> updateSwitchingProfileWithHttpInfo(BaseSwitchingProfile body, String switchingProfileId) throws ApiException {
        com.squareup.okhttp.Call call = updateSwitchingProfileValidateBeforeCall(body, switchingProfileId, null, null);
        Type localVarReturnType = new TypeToken<BaseSwitchingProfile>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a Switching Profile (asynchronously)
     * Updates the user-configurable parameters of a switching profile. Only the qos, port-mirroring, spoof-guard and port-security switching profiles can be modified. You cannot modify the ipfix or ip-discovery switching profiles. 
     * @param body  (required)
     * @param switchingProfileId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateSwitchingProfileAsync(BaseSwitchingProfile body, String switchingProfileId, final ApiCallback<BaseSwitchingProfile> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateSwitchingProfileValidateBeforeCall(body, switchingProfileId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BaseSwitchingProfile>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
