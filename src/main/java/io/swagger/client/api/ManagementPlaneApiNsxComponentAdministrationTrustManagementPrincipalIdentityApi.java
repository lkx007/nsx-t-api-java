/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ApiError;
import io.swagger.client.model.PrincipalIdentity;
import io.swagger.client.model.PrincipalIdentityList;
import io.swagger.client.model.PrincipalIdentityWithCertificate;
import io.swagger.client.model.UpdatePrincipalIdentityCertificateRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ManagementPlaneApiNsxComponentAdministrationTrustManagementPrincipalIdentityApi {
    private ApiClient apiClient;

    public ManagementPlaneApiNsxComponentAdministrationTrustManagementPrincipalIdentityApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ManagementPlaneApiNsxComponentAdministrationTrustManagementPrincipalIdentityApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for deletePrincipalIdentity
     * @param principalIdentityId Unique id of the principal identity to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deletePrincipalIdentityCall(String principalIdentityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/trust-management/principal-identities/{principal-identity-id}"
            .replaceAll("\\{" + "principal-identity-id" + "\\}", apiClient.escapeString(principalIdentityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deletePrincipalIdentityValidateBeforeCall(String principalIdentityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'principalIdentityId' is set
        if (principalIdentityId == null) {
            throw new ApiException("Missing the required parameter 'principalIdentityId' when calling deletePrincipalIdentity(Async)");
        }
        
        com.squareup.okhttp.Call call = deletePrincipalIdentityCall(principalIdentityId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete a principal identity
     * Delete a principal identity. It does not delete the certificate. 
     * @param principalIdentityId Unique id of the principal identity to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deletePrincipalIdentity(String principalIdentityId) throws ApiException {
        deletePrincipalIdentityWithHttpInfo(principalIdentityId);
    }

    /**
     * Delete a principal identity
     * Delete a principal identity. It does not delete the certificate. 
     * @param principalIdentityId Unique id of the principal identity to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deletePrincipalIdentityWithHttpInfo(String principalIdentityId) throws ApiException {
        com.squareup.okhttp.Call call = deletePrincipalIdentityValidateBeforeCall(principalIdentityId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a principal identity (asynchronously)
     * Delete a principal identity. It does not delete the certificate. 
     * @param principalIdentityId Unique id of the principal identity to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deletePrincipalIdentityAsync(String principalIdentityId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deletePrincipalIdentityValidateBeforeCall(principalIdentityId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getPrincipalIdentities
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPrincipalIdentitiesCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/trust-management/principal-identities";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPrincipalIdentitiesValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getPrincipalIdentitiesCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Return the list of principal identities
     * Returns the list of principals registered with a certificate.
     * @return PrincipalIdentityList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PrincipalIdentityList getPrincipalIdentities() throws ApiException {
        ApiResponse<PrincipalIdentityList> resp = getPrincipalIdentitiesWithHttpInfo();
        return resp.getData();
    }

    /**
     * Return the list of principal identities
     * Returns the list of principals registered with a certificate.
     * @return ApiResponse&lt;PrincipalIdentityList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PrincipalIdentityList> getPrincipalIdentitiesWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getPrincipalIdentitiesValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<PrincipalIdentityList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Return the list of principal identities (asynchronously)
     * Returns the list of principals registered with a certificate.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPrincipalIdentitiesAsync(final ApiCallback<PrincipalIdentityList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPrincipalIdentitiesValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PrincipalIdentityList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPrincipalIdentity
     * @param principalIdentityId ID of Principal Identity to get (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPrincipalIdentityCall(String principalIdentityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/trust-management/principal-identities/{principal-identity-id}"
            .replaceAll("\\{" + "principal-identity-id" + "\\}", apiClient.escapeString(principalIdentityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPrincipalIdentityValidateBeforeCall(String principalIdentityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'principalIdentityId' is set
        if (principalIdentityId == null) {
            throw new ApiException("Missing the required parameter 'principalIdentityId' when calling getPrincipalIdentity(Async)");
        }
        
        com.squareup.okhttp.Call call = getPrincipalIdentityCall(principalIdentityId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get a Principal Identity
     * Get a stored principal identity 
     * @param principalIdentityId ID of Principal Identity to get (required)
     * @return PrincipalIdentity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PrincipalIdentity getPrincipalIdentity(String principalIdentityId) throws ApiException {
        ApiResponse<PrincipalIdentity> resp = getPrincipalIdentityWithHttpInfo(principalIdentityId);
        return resp.getData();
    }

    /**
     * Get a Principal Identity
     * Get a stored principal identity 
     * @param principalIdentityId ID of Principal Identity to get (required)
     * @return ApiResponse&lt;PrincipalIdentity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PrincipalIdentity> getPrincipalIdentityWithHttpInfo(String principalIdentityId) throws ApiException {
        com.squareup.okhttp.Call call = getPrincipalIdentityValidateBeforeCall(principalIdentityId, null, null);
        Type localVarReturnType = new TypeToken<PrincipalIdentity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a Principal Identity (asynchronously)
     * Get a stored principal identity 
     * @param principalIdentityId ID of Principal Identity to get (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPrincipalIdentityAsync(String principalIdentityId, final ApiCallback<PrincipalIdentity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPrincipalIdentityValidateBeforeCall(principalIdentityId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PrincipalIdentity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for registerPrincipalIdentity
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call registerPrincipalIdentityCall(PrincipalIdentity body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/trust-management/principal-identities";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call registerPrincipalIdentityValidateBeforeCall(PrincipalIdentity body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling registerPrincipalIdentity(Async)");
        }
        
        com.squareup.okhttp.Call call = registerPrincipalIdentityCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Register a name-certificate combination.
     * Associates a principal&#x27;s name with a certificate that is used to authenticate. Deprecated, use POST /trust-management/principal-identities/with-certificate instead. 
     * @param body  (required)
     * @return PrincipalIdentity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PrincipalIdentity registerPrincipalIdentity(PrincipalIdentity body) throws ApiException {
        ApiResponse<PrincipalIdentity> resp = registerPrincipalIdentityWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Register a name-certificate combination.
     * Associates a principal&#x27;s name with a certificate that is used to authenticate. Deprecated, use POST /trust-management/principal-identities/with-certificate instead. 
     * @param body  (required)
     * @return ApiResponse&lt;PrincipalIdentity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PrincipalIdentity> registerPrincipalIdentityWithHttpInfo(PrincipalIdentity body) throws ApiException {
        com.squareup.okhttp.Call call = registerPrincipalIdentityValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<PrincipalIdentity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Register a name-certificate combination. (asynchronously)
     * Associates a principal&#x27;s name with a certificate that is used to authenticate. Deprecated, use POST /trust-management/principal-identities/with-certificate instead. 
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call registerPrincipalIdentityAsync(PrincipalIdentity body, final ApiCallback<PrincipalIdentity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = registerPrincipalIdentityValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PrincipalIdentity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for registerPrincipalIdentityWithCertificate
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call registerPrincipalIdentityWithCertificateCall(PrincipalIdentityWithCertificate body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/trust-management/principal-identities/with-certificate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call registerPrincipalIdentityWithCertificateValidateBeforeCall(PrincipalIdentityWithCertificate body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling registerPrincipalIdentityWithCertificate(Async)");
        }
        
        com.squareup.okhttp.Call call = registerPrincipalIdentityWithCertificateCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Register a name-certificate combination.
     * Create a Principal Identity with a new, unused, certificate. 
     * @param body  (required)
     * @return PrincipalIdentity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PrincipalIdentity registerPrincipalIdentityWithCertificate(PrincipalIdentityWithCertificate body) throws ApiException {
        ApiResponse<PrincipalIdentity> resp = registerPrincipalIdentityWithCertificateWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Register a name-certificate combination.
     * Create a Principal Identity with a new, unused, certificate. 
     * @param body  (required)
     * @return ApiResponse&lt;PrincipalIdentity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PrincipalIdentity> registerPrincipalIdentityWithCertificateWithHttpInfo(PrincipalIdentityWithCertificate body) throws ApiException {
        com.squareup.okhttp.Call call = registerPrincipalIdentityWithCertificateValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<PrincipalIdentity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Register a name-certificate combination. (asynchronously)
     * Create a Principal Identity with a new, unused, certificate. 
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call registerPrincipalIdentityWithCertificateAsync(PrincipalIdentityWithCertificate body, final ApiCallback<PrincipalIdentity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = registerPrincipalIdentityWithCertificateValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PrincipalIdentity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updatePrincipalIdentityCertificateUpdateCertificate
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updatePrincipalIdentityCertificateUpdateCertificateCall(UpdatePrincipalIdentityCertificateRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/trust-management/principal-identities?action=update_certificate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updatePrincipalIdentityCertificateUpdateCertificateValidateBeforeCall(UpdatePrincipalIdentityCertificateRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updatePrincipalIdentityCertificateUpdateCertificate(Async)");
        }
        
        com.squareup.okhttp.Call call = updatePrincipalIdentityCertificateUpdateCertificateCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update a Principal Identity&#x27;s certificate
     * Update a principal identity&#x27;s certificate 
     * @param body  (required)
     * @return PrincipalIdentity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PrincipalIdentity updatePrincipalIdentityCertificateUpdateCertificate(UpdatePrincipalIdentityCertificateRequest body) throws ApiException {
        ApiResponse<PrincipalIdentity> resp = updatePrincipalIdentityCertificateUpdateCertificateWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Update a Principal Identity&#x27;s certificate
     * Update a principal identity&#x27;s certificate 
     * @param body  (required)
     * @return ApiResponse&lt;PrincipalIdentity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PrincipalIdentity> updatePrincipalIdentityCertificateUpdateCertificateWithHttpInfo(UpdatePrincipalIdentityCertificateRequest body) throws ApiException {
        com.squareup.okhttp.Call call = updatePrincipalIdentityCertificateUpdateCertificateValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<PrincipalIdentity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a Principal Identity&#x27;s certificate (asynchronously)
     * Update a principal identity&#x27;s certificate 
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updatePrincipalIdentityCertificateUpdateCertificateAsync(UpdatePrincipalIdentityCertificateRequest body, final ApiCallback<PrincipalIdentity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updatePrincipalIdentityCertificateUpdateCertificateValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PrincipalIdentity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
