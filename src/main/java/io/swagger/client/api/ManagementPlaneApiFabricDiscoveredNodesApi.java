/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ApiError;
import io.swagger.client.model.DiscoveredNode;
import io.swagger.client.model.DiscoveredNodeListResult;
import io.swagger.client.model.Node;
import io.swagger.client.model.TransportNode;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ManagementPlaneApiFabricDiscoveredNodesApi {
    private ApiClient apiClient;

    public ManagementPlaneApiFabricDiscoveredNodesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ManagementPlaneApiFabricDiscoveredNodesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createTransportNodeForDiscoveredNodeCreateTransportNode
     * @param body  (required)
     * @param nodeExtId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createTransportNodeForDiscoveredNodeCreateTransportNodeCall(TransportNode body, String nodeExtId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/fabric/discovered-nodes/{node-ext-id}?action=create_transport_node"
            .replaceAll("\\{" + "node-ext-id" + "\\}", apiClient.escapeString(nodeExtId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createTransportNodeForDiscoveredNodeCreateTransportNodeValidateBeforeCall(TransportNode body, String nodeExtId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createTransportNodeForDiscoveredNodeCreateTransportNode(Async)");
        }
        // verify the required parameter 'nodeExtId' is set
        if (nodeExtId == null) {
            throw new ApiException("Missing the required parameter 'nodeExtId' when calling createTransportNodeForDiscoveredNodeCreateTransportNode(Async)");
        }
        
        com.squareup.okhttp.Call call = createTransportNodeForDiscoveredNodeCreateTransportNodeCall(body, nodeExtId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Created Transport Node for Discovered Node
     * NSX components are installaed on host and transport node is created with given configurations.
     * @param body  (required)
     * @param nodeExtId  (required)
     * @return TransportNode
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TransportNode createTransportNodeForDiscoveredNodeCreateTransportNode(TransportNode body, String nodeExtId) throws ApiException {
        ApiResponse<TransportNode> resp = createTransportNodeForDiscoveredNodeCreateTransportNodeWithHttpInfo(body, nodeExtId);
        return resp.getData();
    }

    /**
     * Created Transport Node for Discovered Node
     * NSX components are installaed on host and transport node is created with given configurations.
     * @param body  (required)
     * @param nodeExtId  (required)
     * @return ApiResponse&lt;TransportNode&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TransportNode> createTransportNodeForDiscoveredNodeCreateTransportNodeWithHttpInfo(TransportNode body, String nodeExtId) throws ApiException {
        com.squareup.okhttp.Call call = createTransportNodeForDiscoveredNodeCreateTransportNodeValidateBeforeCall(body, nodeExtId, null, null);
        Type localVarReturnType = new TypeToken<TransportNode>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Created Transport Node for Discovered Node (asynchronously)
     * NSX components are installaed on host and transport node is created with given configurations.
     * @param body  (required)
     * @param nodeExtId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createTransportNodeForDiscoveredNodeCreateTransportNodeAsync(TransportNode body, String nodeExtId, final ApiCallback<TransportNode> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createTransportNodeForDiscoveredNodeCreateTransportNodeValidateBeforeCall(body, nodeExtId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TransportNode>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for hostPrepDiscoveredNodeHostprep
     * @param nodeExtId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call hostPrepDiscoveredNodeHostprepCall(String nodeExtId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/fabric/discovered-nodes/{node-ext-id}?action=hostprep"
            .replaceAll("\\{" + "node-ext-id" + "\\}", apiClient.escapeString(nodeExtId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call hostPrepDiscoveredNodeHostprepValidateBeforeCall(String nodeExtId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'nodeExtId' is set
        if (nodeExtId == null) {
            throw new ApiException("Missing the required parameter 'nodeExtId' when calling hostPrepDiscoveredNodeHostprep(Async)");
        }
        
        com.squareup.okhttp.Call call = hostPrepDiscoveredNodeHostprepCall(nodeExtId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * (Deprecated) Prepares discovered Node for NSX
     * Prepares(hostprep) discovered node for NSX. NSX LCP bundles are installed on this discovered node. This API is deprecated. Use /fabric/discovered-nodes/&lt;node-ext-id&gt;?action&#x3D;create_transport_node
     * @param nodeExtId  (required)
     * @return Node
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Node hostPrepDiscoveredNodeHostprep(String nodeExtId) throws ApiException {
        ApiResponse<Node> resp = hostPrepDiscoveredNodeHostprepWithHttpInfo(nodeExtId);
        return resp.getData();
    }

    /**
     * (Deprecated) Prepares discovered Node for NSX
     * Prepares(hostprep) discovered node for NSX. NSX LCP bundles are installed on this discovered node. This API is deprecated. Use /fabric/discovered-nodes/&lt;node-ext-id&gt;?action&#x3D;create_transport_node
     * @param nodeExtId  (required)
     * @return ApiResponse&lt;Node&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Node> hostPrepDiscoveredNodeHostprepWithHttpInfo(String nodeExtId) throws ApiException {
        com.squareup.okhttp.Call call = hostPrepDiscoveredNodeHostprepValidateBeforeCall(nodeExtId, null, null);
        Type localVarReturnType = new TypeToken<Node>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * (Deprecated) Prepares discovered Node for NSX (asynchronously)
     * Prepares(hostprep) discovered node for NSX. NSX LCP bundles are installed on this discovered node. This API is deprecated. Use /fabric/discovered-nodes/&lt;node-ext-id&gt;?action&#x3D;create_transport_node
     * @param nodeExtId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call hostPrepDiscoveredNodeHostprepAsync(String nodeExtId, final ApiCallback<Node> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = hostPrepDiscoveredNodeHostprepValidateBeforeCall(nodeExtId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Node>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listDiscoveredNodes
     * @param cmLocalId Local Id of the discovered node in the Compute Manager (optional)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param displayName Display name of discovered node (optional)
     * @param externalId External id of the discovered node, ex. a mo-ref from VC (optional)
     * @param hasParent Discovered node has a parent compute collection or is a standalone host (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param ipAddress IP address of the discovered node (optional)
     * @param nodeId Id of the fabric node created from the discovered node (optional)
     * @param nodeType Discovered Node type like HostNode (optional)
     * @param originId Id of the compute manager from where this node was discovered (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param parentComputeCollection External id of the compute collection to which this node belongs (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listDiscoveredNodesCall(String cmLocalId, String cursor, String displayName, String externalId, String hasParent, String includedFields, String ipAddress, String nodeId, String nodeType, String originId, Long pageSize, String parentComputeCollection, Boolean sortAscending, String sortBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/fabric/discovered-nodes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (cmLocalId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cm_local_id", cmLocalId));
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (displayName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("display_name", displayName));
        if (externalId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("external_id", externalId));
        if (hasParent != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("has_parent", hasParent));
        if (includedFields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("included_fields", includedFields));
        if (ipAddress != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ip_address", ipAddress));
        if (nodeId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("node_id", nodeId));
        if (nodeType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("node_type", nodeType));
        if (originId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("origin_id", originId));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page_size", pageSize));
        if (parentComputeCollection != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("parent_compute_collection", parentComputeCollection));
        if (sortAscending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_ascending", sortAscending));
        if (sortBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_by", sortBy));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listDiscoveredNodesValidateBeforeCall(String cmLocalId, String cursor, String displayName, String externalId, String hasParent, String includedFields, String ipAddress, String nodeId, String nodeType, String originId, Long pageSize, String parentComputeCollection, Boolean sortAscending, String sortBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listDiscoveredNodesCall(cmLocalId, cursor, displayName, externalId, hasParent, includedFields, ipAddress, nodeId, nodeType, originId, pageSize, parentComputeCollection, sortAscending, sortBy, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Return the List of Discovered Nodes
     * Returns information about all discovered nodes.
     * @param cmLocalId Local Id of the discovered node in the Compute Manager (optional)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param displayName Display name of discovered node (optional)
     * @param externalId External id of the discovered node, ex. a mo-ref from VC (optional)
     * @param hasParent Discovered node has a parent compute collection or is a standalone host (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param ipAddress IP address of the discovered node (optional)
     * @param nodeId Id of the fabric node created from the discovered node (optional)
     * @param nodeType Discovered Node type like HostNode (optional)
     * @param originId Id of the compute manager from where this node was discovered (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param parentComputeCollection External id of the compute collection to which this node belongs (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @return DiscoveredNodeListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DiscoveredNodeListResult listDiscoveredNodes(String cmLocalId, String cursor, String displayName, String externalId, String hasParent, String includedFields, String ipAddress, String nodeId, String nodeType, String originId, Long pageSize, String parentComputeCollection, Boolean sortAscending, String sortBy) throws ApiException {
        ApiResponse<DiscoveredNodeListResult> resp = listDiscoveredNodesWithHttpInfo(cmLocalId, cursor, displayName, externalId, hasParent, includedFields, ipAddress, nodeId, nodeType, originId, pageSize, parentComputeCollection, sortAscending, sortBy);
        return resp.getData();
    }

    /**
     * Return the List of Discovered Nodes
     * Returns information about all discovered nodes.
     * @param cmLocalId Local Id of the discovered node in the Compute Manager (optional)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param displayName Display name of discovered node (optional)
     * @param externalId External id of the discovered node, ex. a mo-ref from VC (optional)
     * @param hasParent Discovered node has a parent compute collection or is a standalone host (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param ipAddress IP address of the discovered node (optional)
     * @param nodeId Id of the fabric node created from the discovered node (optional)
     * @param nodeType Discovered Node type like HostNode (optional)
     * @param originId Id of the compute manager from where this node was discovered (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param parentComputeCollection External id of the compute collection to which this node belongs (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @return ApiResponse&lt;DiscoveredNodeListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DiscoveredNodeListResult> listDiscoveredNodesWithHttpInfo(String cmLocalId, String cursor, String displayName, String externalId, String hasParent, String includedFields, String ipAddress, String nodeId, String nodeType, String originId, Long pageSize, String parentComputeCollection, Boolean sortAscending, String sortBy) throws ApiException {
        com.squareup.okhttp.Call call = listDiscoveredNodesValidateBeforeCall(cmLocalId, cursor, displayName, externalId, hasParent, includedFields, ipAddress, nodeId, nodeType, originId, pageSize, parentComputeCollection, sortAscending, sortBy, null, null);
        Type localVarReturnType = new TypeToken<DiscoveredNodeListResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Return the List of Discovered Nodes (asynchronously)
     * Returns information about all discovered nodes.
     * @param cmLocalId Local Id of the discovered node in the Compute Manager (optional)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param displayName Display name of discovered node (optional)
     * @param externalId External id of the discovered node, ex. a mo-ref from VC (optional)
     * @param hasParent Discovered node has a parent compute collection or is a standalone host (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param ipAddress IP address of the discovered node (optional)
     * @param nodeId Id of the fabric node created from the discovered node (optional)
     * @param nodeType Discovered Node type like HostNode (optional)
     * @param originId Id of the compute manager from where this node was discovered (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param parentComputeCollection External id of the compute collection to which this node belongs (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listDiscoveredNodesAsync(String cmLocalId, String cursor, String displayName, String externalId, String hasParent, String includedFields, String ipAddress, String nodeId, String nodeType, String originId, Long pageSize, String parentComputeCollection, Boolean sortAscending, String sortBy, final ApiCallback<DiscoveredNodeListResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listDiscoveredNodesValidateBeforeCall(cmLocalId, cursor, displayName, externalId, hasParent, includedFields, ipAddress, nodeId, nodeType, originId, pageSize, parentComputeCollection, sortAscending, sortBy, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DiscoveredNodeListResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for readDiscoveredNode
     * @param nodeExtId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call readDiscoveredNodeCall(String nodeExtId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/fabric/discovered-nodes/{node-ext-id}"
            .replaceAll("\\{" + "node-ext-id" + "\\}", apiClient.escapeString(nodeExtId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call readDiscoveredNodeValidateBeforeCall(String nodeExtId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'nodeExtId' is set
        if (nodeExtId == null) {
            throw new ApiException("Missing the required parameter 'nodeExtId' when calling readDiscoveredNode(Async)");
        }
        
        com.squareup.okhttp.Call call = readDiscoveredNodeCall(nodeExtId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Return Discovered Node Information
     * Returns information about a specific discovered node.
     * @param nodeExtId  (required)
     * @return DiscoveredNode
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DiscoveredNode readDiscoveredNode(String nodeExtId) throws ApiException {
        ApiResponse<DiscoveredNode> resp = readDiscoveredNodeWithHttpInfo(nodeExtId);
        return resp.getData();
    }

    /**
     * Return Discovered Node Information
     * Returns information about a specific discovered node.
     * @param nodeExtId  (required)
     * @return ApiResponse&lt;DiscoveredNode&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DiscoveredNode> readDiscoveredNodeWithHttpInfo(String nodeExtId) throws ApiException {
        com.squareup.okhttp.Call call = readDiscoveredNodeValidateBeforeCall(nodeExtId, null, null);
        Type localVarReturnType = new TypeToken<DiscoveredNode>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Return Discovered Node Information (asynchronously)
     * Returns information about a specific discovered node.
     * @param nodeExtId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call readDiscoveredNodeAsync(String nodeExtId, final ApiCallback<DiscoveredNode> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = readDiscoveredNodeValidateBeforeCall(nodeExtId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DiscoveredNode>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for reapplyTNProfileOnDiscoveredNodeReapplyClusterConfig
     * @param nodeExtId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call reapplyTNProfileOnDiscoveredNodeReapplyClusterConfigCall(String nodeExtId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/fabric/discovered-nodes/{node-ext-id}?action=reapply_cluster_config"
            .replaceAll("\\{" + "node-ext-id" + "\\}", apiClient.escapeString(nodeExtId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call reapplyTNProfileOnDiscoveredNodeReapplyClusterConfigValidateBeforeCall(String nodeExtId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'nodeExtId' is set
        if (nodeExtId == null) {
            throw new ApiException("Missing the required parameter 'nodeExtId' when calling reapplyTNProfileOnDiscoveredNodeReapplyClusterConfig(Async)");
        }
        
        com.squareup.okhttp.Call call = reapplyTNProfileOnDiscoveredNodeReapplyClusterConfigCall(nodeExtId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Apply cluster level config on Discovered Node
     * When transport node profile (TNP) is applied to a cluster, if any validation fails (e.g. VMs running on host) then transport node (TN) is not created. In that case after the required action is taken (e.g. VMs powered off), you can call this API to try to create TN for that discovered node. Do not call this API if Transport Node already exists for the discovered node. In that case use API on transport node. /transport-nodes/&lt;transport-node-id&gt;?action&#x3D;restore_cluster_config
     * @param nodeExtId  (required)
     * @return TransportNode
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TransportNode reapplyTNProfileOnDiscoveredNodeReapplyClusterConfig(String nodeExtId) throws ApiException {
        ApiResponse<TransportNode> resp = reapplyTNProfileOnDiscoveredNodeReapplyClusterConfigWithHttpInfo(nodeExtId);
        return resp.getData();
    }

    /**
     * Apply cluster level config on Discovered Node
     * When transport node profile (TNP) is applied to a cluster, if any validation fails (e.g. VMs running on host) then transport node (TN) is not created. In that case after the required action is taken (e.g. VMs powered off), you can call this API to try to create TN for that discovered node. Do not call this API if Transport Node already exists for the discovered node. In that case use API on transport node. /transport-nodes/&lt;transport-node-id&gt;?action&#x3D;restore_cluster_config
     * @param nodeExtId  (required)
     * @return ApiResponse&lt;TransportNode&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TransportNode> reapplyTNProfileOnDiscoveredNodeReapplyClusterConfigWithHttpInfo(String nodeExtId) throws ApiException {
        com.squareup.okhttp.Call call = reapplyTNProfileOnDiscoveredNodeReapplyClusterConfigValidateBeforeCall(nodeExtId, null, null);
        Type localVarReturnType = new TypeToken<TransportNode>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Apply cluster level config on Discovered Node (asynchronously)
     * When transport node profile (TNP) is applied to a cluster, if any validation fails (e.g. VMs running on host) then transport node (TN) is not created. In that case after the required action is taken (e.g. VMs powered off), you can call this API to try to create TN for that discovered node. Do not call this API if Transport Node already exists for the discovered node. In that case use API on transport node. /transport-nodes/&lt;transport-node-id&gt;?action&#x3D;restore_cluster_config
     * @param nodeExtId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call reapplyTNProfileOnDiscoveredNodeReapplyClusterConfigAsync(String nodeExtId, final ApiCallback<TransportNode> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = reapplyTNProfileOnDiscoveredNodeReapplyClusterConfigValidateBeforeCall(nodeExtId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TransportNode>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
