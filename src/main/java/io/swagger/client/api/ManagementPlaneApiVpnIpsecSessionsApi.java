/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ApiError;
import io.swagger.client.model.IPSecVPNSession;
import io.swagger.client.model.IPSecVPNSessionListResult;
import io.swagger.client.model.IPSecVPNSessionState;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ManagementPlaneApiVpnIpsecSessionsApi {
    private ApiClient apiClient;

    public ManagementPlaneApiVpnIpsecSessionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ManagementPlaneApiVpnIpsecSessionsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createIPSecVPNSession
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createIPSecVPNSessionCall(IPSecVPNSession body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/vpn/ipsec/sessions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createIPSecVPNSessionValidateBeforeCall(IPSecVPNSession body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createIPSecVPNSession(Async)");
        }
        
        com.squareup.okhttp.Call call = createIPSecVPNSessionCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create new VPN session
     * Create new VPN session.
     * @param body  (required)
     * @return IPSecVPNSession
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public IPSecVPNSession createIPSecVPNSession(IPSecVPNSession body) throws ApiException {
        ApiResponse<IPSecVPNSession> resp = createIPSecVPNSessionWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create new VPN session
     * Create new VPN session.
     * @param body  (required)
     * @return ApiResponse&lt;IPSecVPNSession&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<IPSecVPNSession> createIPSecVPNSessionWithHttpInfo(IPSecVPNSession body) throws ApiException {
        com.squareup.okhttp.Call call = createIPSecVPNSessionValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<IPSecVPNSession>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create new VPN session (asynchronously)
     * Create new VPN session.
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createIPSecVPNSessionAsync(IPSecVPNSession body, final ApiCallback<IPSecVPNSession> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createIPSecVPNSessionValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<IPSecVPNSession>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteIPSecVPNSession
     * @param ipsecVpnSessionId  (required)
     * @param force Force delete the resource even if it is being used somewhere  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteIPSecVPNSessionCall(String ipsecVpnSessionId, Boolean force, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/vpn/ipsec/sessions/{ipsec-vpn-session-id}"
            .replaceAll("\\{" + "ipsec-vpn-session-id" + "\\}", apiClient.escapeString(ipsecVpnSessionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (force != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("force", force));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteIPSecVPNSessionValidateBeforeCall(String ipsecVpnSessionId, Boolean force, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'ipsecVpnSessionId' is set
        if (ipsecVpnSessionId == null) {
            throw new ApiException("Missing the required parameter 'ipsecVpnSessionId' when calling deleteIPSecVPNSession(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteIPSecVPNSessionCall(ipsecVpnSessionId, force, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete IPSec VPN session
     * Delete IPSec VPN session.
     * @param ipsecVpnSessionId  (required)
     * @param force Force delete the resource even if it is being used somewhere  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteIPSecVPNSession(String ipsecVpnSessionId, Boolean force) throws ApiException {
        deleteIPSecVPNSessionWithHttpInfo(ipsecVpnSessionId, force);
    }

    /**
     * Delete IPSec VPN session
     * Delete IPSec VPN session.
     * @param ipsecVpnSessionId  (required)
     * @param force Force delete the resource even if it is being used somewhere  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteIPSecVPNSessionWithHttpInfo(String ipsecVpnSessionId, Boolean force) throws ApiException {
        com.squareup.okhttp.Call call = deleteIPSecVPNSessionValidateBeforeCall(ipsecVpnSessionId, force, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete IPSec VPN session (asynchronously)
     * Delete IPSec VPN session.
     * @param ipsecVpnSessionId  (required)
     * @param force Force delete the resource even if it is being used somewhere  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteIPSecVPNSessionAsync(String ipsecVpnSessionId, Boolean force, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteIPSecVPNSessionValidateBeforeCall(ipsecVpnSessionId, force, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getIPSecVPNSession
     * @param ipsecVpnSessionId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getIPSecVPNSessionCall(String ipsecVpnSessionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/vpn/ipsec/sessions/{ipsec-vpn-session-id}"
            .replaceAll("\\{" + "ipsec-vpn-session-id" + "\\}", apiClient.escapeString(ipsecVpnSessionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getIPSecVPNSessionValidateBeforeCall(String ipsecVpnSessionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'ipsecVpnSessionId' is set
        if (ipsecVpnSessionId == null) {
            throw new ApiException("Missing the required parameter 'ipsecVpnSessionId' when calling getIPSecVPNSession(Async)");
        }
        
        com.squareup.okhttp.Call call = getIPSecVPNSessionCall(ipsecVpnSessionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Fetch IPSec VPN session
     * Fetch IPSec VPN session.
     * @param ipsecVpnSessionId  (required)
     * @return IPSecVPNSession
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public IPSecVPNSession getIPSecVPNSession(String ipsecVpnSessionId) throws ApiException {
        ApiResponse<IPSecVPNSession> resp = getIPSecVPNSessionWithHttpInfo(ipsecVpnSessionId);
        return resp.getData();
    }

    /**
     * Fetch IPSec VPN session
     * Fetch IPSec VPN session.
     * @param ipsecVpnSessionId  (required)
     * @return ApiResponse&lt;IPSecVPNSession&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<IPSecVPNSession> getIPSecVPNSessionWithHttpInfo(String ipsecVpnSessionId) throws ApiException {
        com.squareup.okhttp.Call call = getIPSecVPNSessionValidateBeforeCall(ipsecVpnSessionId, null, null);
        Type localVarReturnType = new TypeToken<IPSecVPNSession>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Fetch IPSec VPN session (asynchronously)
     * Fetch IPSec VPN session.
     * @param ipsecVpnSessionId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getIPSecVPNSessionAsync(String ipsecVpnSessionId, final ApiCallback<IPSecVPNSession> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getIPSecVPNSessionValidateBeforeCall(ipsecVpnSessionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<IPSecVPNSession>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getIPSecVPNSessionState
     * @param ipsecVpnSessionId  (required)
     * @param barrierId  (optional)
     * @param requestId Realization request ID (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getIPSecVPNSessionStateCall(String ipsecVpnSessionId, Long barrierId, String requestId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/vpn/ipsec/sessions/{ipsec-vpn-session-id}/state"
            .replaceAll("\\{" + "ipsec-vpn-session-id" + "\\}", apiClient.escapeString(ipsecVpnSessionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (barrierId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("barrier_id", barrierId));
        if (requestId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("request_id", requestId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getIPSecVPNSessionStateValidateBeforeCall(String ipsecVpnSessionId, Long barrierId, String requestId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'ipsecVpnSessionId' is set
        if (ipsecVpnSessionId == null) {
            throw new ApiException("Missing the required parameter 'ipsecVpnSessionId' when calling getIPSecVPNSessionState(Async)");
        }
        
        com.squareup.okhttp.Call call = getIPSecVPNSessionStateCall(ipsecVpnSessionId, barrierId, requestId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the Realized State of a IPSec VPN Session
     * Return realized state information of a ipsec vpn session. Any configuration update that affects the ipsec vpn session can use this API to get its realized state by passing a request_id returned by the configuration change operation. e.g. Update configuration of ipsec vpn session, service, endpoints, profiles, etc. It will return a service disabled error, if the ipsec vpn service associated with the session is disabled. 
     * @param ipsecVpnSessionId  (required)
     * @param barrierId  (optional)
     * @param requestId Realization request ID (optional)
     * @return IPSecVPNSessionState
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public IPSecVPNSessionState getIPSecVPNSessionState(String ipsecVpnSessionId, Long barrierId, String requestId) throws ApiException {
        ApiResponse<IPSecVPNSessionState> resp = getIPSecVPNSessionStateWithHttpInfo(ipsecVpnSessionId, barrierId, requestId);
        return resp.getData();
    }

    /**
     * Get the Realized State of a IPSec VPN Session
     * Return realized state information of a ipsec vpn session. Any configuration update that affects the ipsec vpn session can use this API to get its realized state by passing a request_id returned by the configuration change operation. e.g. Update configuration of ipsec vpn session, service, endpoints, profiles, etc. It will return a service disabled error, if the ipsec vpn service associated with the session is disabled. 
     * @param ipsecVpnSessionId  (required)
     * @param barrierId  (optional)
     * @param requestId Realization request ID (optional)
     * @return ApiResponse&lt;IPSecVPNSessionState&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<IPSecVPNSessionState> getIPSecVPNSessionStateWithHttpInfo(String ipsecVpnSessionId, Long barrierId, String requestId) throws ApiException {
        com.squareup.okhttp.Call call = getIPSecVPNSessionStateValidateBeforeCall(ipsecVpnSessionId, barrierId, requestId, null, null);
        Type localVarReturnType = new TypeToken<IPSecVPNSessionState>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the Realized State of a IPSec VPN Session (asynchronously)
     * Return realized state information of a ipsec vpn session. Any configuration update that affects the ipsec vpn session can use this API to get its realized state by passing a request_id returned by the configuration change operation. e.g. Update configuration of ipsec vpn session, service, endpoints, profiles, etc. It will return a service disabled error, if the ipsec vpn service associated with the session is disabled. 
     * @param ipsecVpnSessionId  (required)
     * @param barrierId  (optional)
     * @param requestId Realization request ID (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getIPSecVPNSessionStateAsync(String ipsecVpnSessionId, Long barrierId, String requestId, final ApiCallback<IPSecVPNSessionState> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getIPSecVPNSessionStateValidateBeforeCall(ipsecVpnSessionId, barrierId, requestId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<IPSecVPNSessionState>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPeerConfig
     * @param ipsecVpnSessionId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPeerConfigCall(String ipsecVpnSessionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/vpn/ipsec/sessions/{ipsec-vpn-session-id}/peer-config"
            .replaceAll("\\{" + "ipsec-vpn-session-id" + "\\}", apiClient.escapeString(ipsecVpnSessionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain; charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPeerConfigValidateBeforeCall(String ipsecVpnSessionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'ipsecVpnSessionId' is set
        if (ipsecVpnSessionId == null) {
            throw new ApiException("Missing the required parameter 'ipsecVpnSessionId' when calling getPeerConfig(Async)");
        }
        
        com.squareup.okhttp.Call call = getPeerConfigCall(ipsecVpnSessionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get VPN configuration for the peer site
     * API to download VPN configuration for the peer site. The configuration contains pre-shared key and secret; be careful when sharing or storing it.
     * @param ipsecVpnSessionId  (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String getPeerConfig(String ipsecVpnSessionId) throws ApiException {
        ApiResponse<String> resp = getPeerConfigWithHttpInfo(ipsecVpnSessionId);
        return resp.getData();
    }

    /**
     * Get VPN configuration for the peer site
     * API to download VPN configuration for the peer site. The configuration contains pre-shared key and secret; be careful when sharing or storing it.
     * @param ipsecVpnSessionId  (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> getPeerConfigWithHttpInfo(String ipsecVpnSessionId) throws ApiException {
        com.squareup.okhttp.Call call = getPeerConfigValidateBeforeCall(ipsecVpnSessionId, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get VPN configuration for the peer site (asynchronously)
     * API to download VPN configuration for the peer site. The configuration contains pre-shared key and secret; be careful when sharing or storing it.
     * @param ipsecVpnSessionId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPeerConfigAsync(String ipsecVpnSessionId, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPeerConfigValidateBeforeCall(ipsecVpnSessionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listIPSecVPNSessions
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param ipsecVpnServiceId Id of the IPSec VPN service (optional)
     * @param logicalRouterId Id of logical router (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sessionType Resource types of IPsec VPN session (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listIPSecVPNSessionsCall(String cursor, String includedFields, String ipsecVpnServiceId, String logicalRouterId, Long pageSize, String sessionType, Boolean sortAscending, String sortBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/vpn/ipsec/sessions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (includedFields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("included_fields", includedFields));
        if (ipsecVpnServiceId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ipsec_vpn_service_id", ipsecVpnServiceId));
        if (logicalRouterId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("logical_router_id", logicalRouterId));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page_size", pageSize));
        if (sessionType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("session_type", sessionType));
        if (sortAscending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_ascending", sortAscending));
        if (sortBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_by", sortBy));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listIPSecVPNSessionsValidateBeforeCall(String cursor, String includedFields, String ipsecVpnServiceId, String logicalRouterId, Long pageSize, String sessionType, Boolean sortAscending, String sortBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listIPSecVPNSessionsCall(cursor, includedFields, ipsecVpnServiceId, logicalRouterId, pageSize, sessionType, sortAscending, sortBy, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get IPSec VPN session list result
     * Get paginated list of all IPSec VPN sessions.
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param ipsecVpnServiceId Id of the IPSec VPN service (optional)
     * @param logicalRouterId Id of logical router (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sessionType Resource types of IPsec VPN session (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @return IPSecVPNSessionListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public IPSecVPNSessionListResult listIPSecVPNSessions(String cursor, String includedFields, String ipsecVpnServiceId, String logicalRouterId, Long pageSize, String sessionType, Boolean sortAscending, String sortBy) throws ApiException {
        ApiResponse<IPSecVPNSessionListResult> resp = listIPSecVPNSessionsWithHttpInfo(cursor, includedFields, ipsecVpnServiceId, logicalRouterId, pageSize, sessionType, sortAscending, sortBy);
        return resp.getData();
    }

    /**
     * Get IPSec VPN session list result
     * Get paginated list of all IPSec VPN sessions.
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param ipsecVpnServiceId Id of the IPSec VPN service (optional)
     * @param logicalRouterId Id of logical router (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sessionType Resource types of IPsec VPN session (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @return ApiResponse&lt;IPSecVPNSessionListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<IPSecVPNSessionListResult> listIPSecVPNSessionsWithHttpInfo(String cursor, String includedFields, String ipsecVpnServiceId, String logicalRouterId, Long pageSize, String sessionType, Boolean sortAscending, String sortBy) throws ApiException {
        com.squareup.okhttp.Call call = listIPSecVPNSessionsValidateBeforeCall(cursor, includedFields, ipsecVpnServiceId, logicalRouterId, pageSize, sessionType, sortAscending, sortBy, null, null);
        Type localVarReturnType = new TypeToken<IPSecVPNSessionListResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get IPSec VPN session list result (asynchronously)
     * Get paginated list of all IPSec VPN sessions.
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param ipsecVpnServiceId Id of the IPSec VPN service (optional)
     * @param logicalRouterId Id of logical router (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sessionType Resource types of IPsec VPN session (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listIPSecVPNSessionsAsync(String cursor, String includedFields, String ipsecVpnServiceId, String logicalRouterId, Long pageSize, String sessionType, Boolean sortAscending, String sortBy, final ApiCallback<IPSecVPNSessionListResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listIPSecVPNSessionsValidateBeforeCall(cursor, includedFields, ipsecVpnServiceId, logicalRouterId, pageSize, sessionType, sortAscending, sortBy, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<IPSecVPNSessionListResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateIPSecVPNSession
     * @param body  (required)
     * @param ipsecVpnSessionId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateIPSecVPNSessionCall(IPSecVPNSession body, String ipsecVpnSessionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/vpn/ipsec/sessions/{ipsec-vpn-session-id}"
            .replaceAll("\\{" + "ipsec-vpn-session-id" + "\\}", apiClient.escapeString(ipsecVpnSessionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateIPSecVPNSessionValidateBeforeCall(IPSecVPNSession body, String ipsecVpnSessionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateIPSecVPNSession(Async)");
        }
        // verify the required parameter 'ipsecVpnSessionId' is set
        if (ipsecVpnSessionId == null) {
            throw new ApiException("Missing the required parameter 'ipsecVpnSessionId' when calling updateIPSecVPNSession(Async)");
        }
        
        com.squareup.okhttp.Call call = updateIPSecVPNSessionCall(body, ipsecVpnSessionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Edit IPSec VPN session
     * Edit IPSec VPN session.
     * @param body  (required)
     * @param ipsecVpnSessionId  (required)
     * @return IPSecVPNSession
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public IPSecVPNSession updateIPSecVPNSession(IPSecVPNSession body, String ipsecVpnSessionId) throws ApiException {
        ApiResponse<IPSecVPNSession> resp = updateIPSecVPNSessionWithHttpInfo(body, ipsecVpnSessionId);
        return resp.getData();
    }

    /**
     * Edit IPSec VPN session
     * Edit IPSec VPN session.
     * @param body  (required)
     * @param ipsecVpnSessionId  (required)
     * @return ApiResponse&lt;IPSecVPNSession&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<IPSecVPNSession> updateIPSecVPNSessionWithHttpInfo(IPSecVPNSession body, String ipsecVpnSessionId) throws ApiException {
        com.squareup.okhttp.Call call = updateIPSecVPNSessionValidateBeforeCall(body, ipsecVpnSessionId, null, null);
        Type localVarReturnType = new TypeToken<IPSecVPNSession>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Edit IPSec VPN session (asynchronously)
     * Edit IPSec VPN session.
     * @param body  (required)
     * @param ipsecVpnSessionId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateIPSecVPNSessionAsync(IPSecVPNSession body, String ipsecVpnSessionId, final ApiCallback<IPSecVPNSession> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateIPSecVPNSessionValidateBeforeCall(body, ipsecVpnSessionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<IPSecVPNSession>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
