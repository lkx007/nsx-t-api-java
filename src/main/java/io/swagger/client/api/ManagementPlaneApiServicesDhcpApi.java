/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ApiError;
import io.swagger.client.model.ConfigurationState;
import io.swagger.client.model.DhcpIpPool;
import io.swagger.client.model.DhcpIpPoolListResult;
import io.swagger.client.model.DhcpLeases;
import io.swagger.client.model.DhcpProfile;
import io.swagger.client.model.DhcpProfileListResult;
import io.swagger.client.model.DhcpServerStatus;
import io.swagger.client.model.DhcpStaticBinding;
import io.swagger.client.model.DhcpStaticBindingListResult;
import io.swagger.client.model.DhcpStatistics;
import io.swagger.client.model.LogicalDhcpServer;
import io.swagger.client.model.LogicalDhcpServerListResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ManagementPlaneApiServicesDhcpApi {
    private ApiClient apiClient;

    public ManagementPlaneApiServicesDhcpApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ManagementPlaneApiServicesDhcpApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createDhcpIpPool
     * @param body  (required)
     * @param serverId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createDhcpIpPoolCall(DhcpIpPool body, String serverId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/dhcp/servers/{server-id}/ip-pools"
            .replaceAll("\\{" + "server-id" + "\\}", apiClient.escapeString(serverId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createDhcpIpPoolValidateBeforeCall(DhcpIpPool body, String serverId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createDhcpIpPool(Async)");
        }
        // verify the required parameter 'serverId' is set
        if (serverId == null) {
            throw new ApiException("Missing the required parameter 'serverId' when calling createDhcpIpPool(Async)");
        }
        
        com.squareup.okhttp.Call call = createDhcpIpPoolCall(body, serverId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create an ip pool for a DHCP server
     * Create an ip pool for a local DHCP server
     * @param body  (required)
     * @param serverId  (required)
     * @return DhcpIpPool
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DhcpIpPool createDhcpIpPool(DhcpIpPool body, String serverId) throws ApiException {
        ApiResponse<DhcpIpPool> resp = createDhcpIpPoolWithHttpInfo(body, serverId);
        return resp.getData();
    }

    /**
     * Create an ip pool for a DHCP server
     * Create an ip pool for a local DHCP server
     * @param body  (required)
     * @param serverId  (required)
     * @return ApiResponse&lt;DhcpIpPool&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DhcpIpPool> createDhcpIpPoolWithHttpInfo(DhcpIpPool body, String serverId) throws ApiException {
        com.squareup.okhttp.Call call = createDhcpIpPoolValidateBeforeCall(body, serverId, null, null);
        Type localVarReturnType = new TypeToken<DhcpIpPool>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create an ip pool for a DHCP server (asynchronously)
     * Create an ip pool for a local DHCP server
     * @param body  (required)
     * @param serverId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createDhcpIpPoolAsync(DhcpIpPool body, String serverId, final ApiCallback<DhcpIpPool> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createDhcpIpPoolValidateBeforeCall(body, serverId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DhcpIpPool>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createDhcpProfile
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createDhcpProfileCall(DhcpProfile body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/dhcp/server-profiles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createDhcpProfileValidateBeforeCall(DhcpProfile body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createDhcpProfile(Async)");
        }
        
        com.squareup.okhttp.Call call = createDhcpProfileCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create a DHCP server profile
     * Create a DHCP server profile. If no edge member is specified, edge members to run the dhcp servers will be auto-allocated from the edge cluster. 
     * @param body  (required)
     * @return DhcpProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DhcpProfile createDhcpProfile(DhcpProfile body) throws ApiException {
        ApiResponse<DhcpProfile> resp = createDhcpProfileWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create a DHCP server profile
     * Create a DHCP server profile. If no edge member is specified, edge members to run the dhcp servers will be auto-allocated from the edge cluster. 
     * @param body  (required)
     * @return ApiResponse&lt;DhcpProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DhcpProfile> createDhcpProfileWithHttpInfo(DhcpProfile body) throws ApiException {
        com.squareup.okhttp.Call call = createDhcpProfileValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<DhcpProfile>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a DHCP server profile (asynchronously)
     * Create a DHCP server profile. If no edge member is specified, edge members to run the dhcp servers will be auto-allocated from the edge cluster. 
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createDhcpProfileAsync(DhcpProfile body, final ApiCallback<DhcpProfile> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createDhcpProfileValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DhcpProfile>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createDhcpServer
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createDhcpServerCall(LogicalDhcpServer body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/dhcp/servers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createDhcpServerValidateBeforeCall(LogicalDhcpServer body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createDhcpServer(Async)");
        }
        
        com.squareup.okhttp.Call call = createDhcpServerCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create a DHCP server
     * Create a logical DHCP server.
     * @param body  (required)
     * @return LogicalDhcpServer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LogicalDhcpServer createDhcpServer(LogicalDhcpServer body) throws ApiException {
        ApiResponse<LogicalDhcpServer> resp = createDhcpServerWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create a DHCP server
     * Create a logical DHCP server.
     * @param body  (required)
     * @return ApiResponse&lt;LogicalDhcpServer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LogicalDhcpServer> createDhcpServerWithHttpInfo(LogicalDhcpServer body) throws ApiException {
        com.squareup.okhttp.Call call = createDhcpServerValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<LogicalDhcpServer>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a DHCP server (asynchronously)
     * Create a logical DHCP server.
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createDhcpServerAsync(LogicalDhcpServer body, final ApiCallback<LogicalDhcpServer> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createDhcpServerValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LogicalDhcpServer>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createDhcpStaticBinding
     * @param body  (required)
     * @param serverId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createDhcpStaticBindingCall(DhcpStaticBinding body, String serverId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/dhcp/servers/{server-id}/static-bindings"
            .replaceAll("\\{" + "server-id" + "\\}", apiClient.escapeString(serverId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createDhcpStaticBindingValidateBeforeCall(DhcpStaticBinding body, String serverId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createDhcpStaticBinding(Async)");
        }
        // verify the required parameter 'serverId' is set
        if (serverId == null) {
            throw new ApiException("Missing the required parameter 'serverId' when calling createDhcpStaticBinding(Async)");
        }
        
        com.squareup.okhttp.Call call = createDhcpStaticBindingCall(body, serverId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create a static binding for a DHCP server
     * Create a static binding for a logical DHCP server.
     * @param body  (required)
     * @param serverId  (required)
     * @return DhcpStaticBinding
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DhcpStaticBinding createDhcpStaticBinding(DhcpStaticBinding body, String serverId) throws ApiException {
        ApiResponse<DhcpStaticBinding> resp = createDhcpStaticBindingWithHttpInfo(body, serverId);
        return resp.getData();
    }

    /**
     * Create a static binding for a DHCP server
     * Create a static binding for a logical DHCP server.
     * @param body  (required)
     * @param serverId  (required)
     * @return ApiResponse&lt;DhcpStaticBinding&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DhcpStaticBinding> createDhcpStaticBindingWithHttpInfo(DhcpStaticBinding body, String serverId) throws ApiException {
        com.squareup.okhttp.Call call = createDhcpStaticBindingValidateBeforeCall(body, serverId, null, null);
        Type localVarReturnType = new TypeToken<DhcpStaticBinding>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a static binding for a DHCP server (asynchronously)
     * Create a static binding for a logical DHCP server.
     * @param body  (required)
     * @param serverId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createDhcpStaticBindingAsync(DhcpStaticBinding body, String serverId, final ApiCallback<DhcpStaticBinding> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createDhcpStaticBindingValidateBeforeCall(body, serverId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DhcpStaticBinding>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteADhcpLease
     * @param serverId  (required)
     * @param ip IPv4 or IPv6 address (required)
     * @param mac MAC Address (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteADhcpLeaseCall(String serverId, String ip, String mac, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/dhcp/servers/{server-id}/leases"
            .replaceAll("\\{" + "server-id" + "\\}", apiClient.escapeString(serverId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (ip != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ip", ip));
        if (mac != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("mac", mac));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteADhcpLeaseValidateBeforeCall(String serverId, String ip, String mac, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'serverId' is set
        if (serverId == null) {
            throw new ApiException("Missing the required parameter 'serverId' when calling deleteADhcpLease(Async)");
        }
        // verify the required parameter 'ip' is set
        if (ip == null) {
            throw new ApiException("Missing the required parameter 'ip' when calling deleteADhcpLease(Async)");
        }
        // verify the required parameter 'mac' is set
        if (mac == null) {
            throw new ApiException("Missing the required parameter 'mac' when calling deleteADhcpLease(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteADhcpLeaseCall(serverId, ip, mac, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete a single DHCP lease entry specified by ip and mac.
     * Delete a single DHCP lease entry specified by ip and mac.  The DHCP server matches the DHCP lease with the given ip address and the mac address. The matched lease entry will be deleted. If no lease matches, the request is ignored.  The DHCP lease to be deleted will be removed by the system from both active and standby node. The system will report error if the DHCP lease could not be removed from both nodes. If the DHCP lease could not be removed on either node, please check the DHCP server status. Once the DHCP server status is UP, please invoke the deletion API again to ensure the lease gets deleted from both nodes. 
     * @param serverId  (required)
     * @param ip IPv4 or IPv6 address (required)
     * @param mac MAC Address (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteADhcpLease(String serverId, String ip, String mac) throws ApiException {
        deleteADhcpLeaseWithHttpInfo(serverId, ip, mac);
    }

    /**
     * Delete a single DHCP lease entry specified by ip and mac.
     * Delete a single DHCP lease entry specified by ip and mac.  The DHCP server matches the DHCP lease with the given ip address and the mac address. The matched lease entry will be deleted. If no lease matches, the request is ignored.  The DHCP lease to be deleted will be removed by the system from both active and standby node. The system will report error if the DHCP lease could not be removed from both nodes. If the DHCP lease could not be removed on either node, please check the DHCP server status. Once the DHCP server status is UP, please invoke the deletion API again to ensure the lease gets deleted from both nodes. 
     * @param serverId  (required)
     * @param ip IPv4 or IPv6 address (required)
     * @param mac MAC Address (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteADhcpLeaseWithHttpInfo(String serverId, String ip, String mac) throws ApiException {
        com.squareup.okhttp.Call call = deleteADhcpLeaseValidateBeforeCall(serverId, ip, mac, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a single DHCP lease entry specified by ip and mac. (asynchronously)
     * Delete a single DHCP lease entry specified by ip and mac.  The DHCP server matches the DHCP lease with the given ip address and the mac address. The matched lease entry will be deleted. If no lease matches, the request is ignored.  The DHCP lease to be deleted will be removed by the system from both active and standby node. The system will report error if the DHCP lease could not be removed from both nodes. If the DHCP lease could not be removed on either node, please check the DHCP server status. Once the DHCP server status is UP, please invoke the deletion API again to ensure the lease gets deleted from both nodes. 
     * @param serverId  (required)
     * @param ip IPv4 or IPv6 address (required)
     * @param mac MAC Address (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteADhcpLeaseAsync(String serverId, String ip, String mac, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteADhcpLeaseValidateBeforeCall(serverId, ip, mac, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteDhcpIpPool
     * @param serverId  (required)
     * @param poolId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteDhcpIpPoolCall(String serverId, String poolId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/dhcp/servers/{server-id}/ip-pools/{pool-id}"
            .replaceAll("\\{" + "server-id" + "\\}", apiClient.escapeString(serverId.toString()))
            .replaceAll("\\{" + "pool-id" + "\\}", apiClient.escapeString(poolId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteDhcpIpPoolValidateBeforeCall(String serverId, String poolId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'serverId' is set
        if (serverId == null) {
            throw new ApiException("Missing the required parameter 'serverId' when calling deleteDhcpIpPool(Async)");
        }
        // verify the required parameter 'poolId' is set
        if (poolId == null) {
            throw new ApiException("Missing the required parameter 'poolId' when calling deleteDhcpIpPool(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteDhcpIpPoolCall(serverId, poolId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete a DHCP server&#x27;s IP pool
     * Delete a specific ip pool of a given logical DHCP server.
     * @param serverId  (required)
     * @param poolId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteDhcpIpPool(String serverId, String poolId) throws ApiException {
        deleteDhcpIpPoolWithHttpInfo(serverId, poolId);
    }

    /**
     * Delete a DHCP server&#x27;s IP pool
     * Delete a specific ip pool of a given logical DHCP server.
     * @param serverId  (required)
     * @param poolId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteDhcpIpPoolWithHttpInfo(String serverId, String poolId) throws ApiException {
        com.squareup.okhttp.Call call = deleteDhcpIpPoolValidateBeforeCall(serverId, poolId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a DHCP server&#x27;s IP pool (asynchronously)
     * Delete a specific ip pool of a given logical DHCP server.
     * @param serverId  (required)
     * @param poolId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteDhcpIpPoolAsync(String serverId, String poolId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteDhcpIpPoolValidateBeforeCall(serverId, poolId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteDhcpProfile
     * @param profileId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteDhcpProfileCall(String profileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/dhcp/server-profiles/{profile-id}"
            .replaceAll("\\{" + "profile-id" + "\\}", apiClient.escapeString(profileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteDhcpProfileValidateBeforeCall(String profileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'profileId' is set
        if (profileId == null) {
            throw new ApiException("Missing the required parameter 'profileId' when calling deleteDhcpProfile(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteDhcpProfileCall(profileId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete a DHCP server profile
     * Delete a DHCP server profile specified by the profile id.
     * @param profileId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteDhcpProfile(String profileId) throws ApiException {
        deleteDhcpProfileWithHttpInfo(profileId);
    }

    /**
     * Delete a DHCP server profile
     * Delete a DHCP server profile specified by the profile id.
     * @param profileId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteDhcpProfileWithHttpInfo(String profileId) throws ApiException {
        com.squareup.okhttp.Call call = deleteDhcpProfileValidateBeforeCall(profileId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a DHCP server profile (asynchronously)
     * Delete a DHCP server profile specified by the profile id.
     * @param profileId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteDhcpProfileAsync(String profileId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteDhcpProfileValidateBeforeCall(profileId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteDhcpServer
     * @param serverId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteDhcpServerCall(String serverId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/dhcp/servers/{server-id}"
            .replaceAll("\\{" + "server-id" + "\\}", apiClient.escapeString(serverId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteDhcpServerValidateBeforeCall(String serverId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'serverId' is set
        if (serverId == null) {
            throw new ApiException("Missing the required parameter 'serverId' when calling deleteDhcpServer(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteDhcpServerCall(serverId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete a DHCP server
     * Delete a logical DHCP server specified by server id.
     * @param serverId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteDhcpServer(String serverId) throws ApiException {
        deleteDhcpServerWithHttpInfo(serverId);
    }

    /**
     * Delete a DHCP server
     * Delete a logical DHCP server specified by server id.
     * @param serverId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteDhcpServerWithHttpInfo(String serverId) throws ApiException {
        com.squareup.okhttp.Call call = deleteDhcpServerValidateBeforeCall(serverId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a DHCP server (asynchronously)
     * Delete a logical DHCP server specified by server id.
     * @param serverId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteDhcpServerAsync(String serverId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteDhcpServerValidateBeforeCall(serverId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteDhcpStaticBinding
     * @param serverId  (required)
     * @param bindingId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteDhcpStaticBindingCall(String serverId, String bindingId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/dhcp/servers/{server-id}/static-bindings/{binding-id}"
            .replaceAll("\\{" + "server-id" + "\\}", apiClient.escapeString(serverId.toString()))
            .replaceAll("\\{" + "binding-id" + "\\}", apiClient.escapeString(bindingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteDhcpStaticBindingValidateBeforeCall(String serverId, String bindingId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'serverId' is set
        if (serverId == null) {
            throw new ApiException("Missing the required parameter 'serverId' when calling deleteDhcpStaticBinding(Async)");
        }
        // verify the required parameter 'bindingId' is set
        if (bindingId == null) {
            throw new ApiException("Missing the required parameter 'bindingId' when calling deleteDhcpStaticBinding(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteDhcpStaticBindingCall(serverId, bindingId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete a static binding
     * Delete a specific static binding of a given logical DHCP server.
     * @param serverId  (required)
     * @param bindingId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteDhcpStaticBinding(String serverId, String bindingId) throws ApiException {
        deleteDhcpStaticBindingWithHttpInfo(serverId, bindingId);
    }

    /**
     * Delete a static binding
     * Delete a specific static binding of a given logical DHCP server.
     * @param serverId  (required)
     * @param bindingId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteDhcpStaticBindingWithHttpInfo(String serverId, String bindingId) throws ApiException {
        com.squareup.okhttp.Call call = deleteDhcpStaticBindingValidateBeforeCall(serverId, bindingId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a static binding (asynchronously)
     * Delete a specific static binding of a given logical DHCP server.
     * @param serverId  (required)
     * @param bindingId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteDhcpStaticBindingAsync(String serverId, String bindingId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteDhcpStaticBindingValidateBeforeCall(serverId, bindingId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getDhcpIpPoolState
     * @param serverId  (required)
     * @param poolId  (required)
     * @param barrierId  (optional)
     * @param requestId Realization request ID (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDhcpIpPoolStateCall(String serverId, String poolId, Long barrierId, String requestId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/dhcp/servers/{server-id}/ip-pools/{pool-id}/state"
            .replaceAll("\\{" + "server-id" + "\\}", apiClient.escapeString(serverId.toString()))
            .replaceAll("\\{" + "pool-id" + "\\}", apiClient.escapeString(poolId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (barrierId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("barrier_id", barrierId));
        if (requestId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("request_id", requestId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDhcpIpPoolStateValidateBeforeCall(String serverId, String poolId, Long barrierId, String requestId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'serverId' is set
        if (serverId == null) {
            throw new ApiException("Missing the required parameter 'serverId' when calling getDhcpIpPoolState(Async)");
        }
        // verify the required parameter 'poolId' is set
        if (poolId == null) {
            throw new ApiException("Missing the required parameter 'poolId' when calling getDhcpIpPoolState(Async)");
        }
        
        com.squareup.okhttp.Call call = getDhcpIpPoolStateCall(serverId, poolId, barrierId, requestId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the realized state of a dhcp ip pool
     * Return realized state information of a dhcp ip pool. After a dhcp ip pool is created or updated, you can invoke this API to get the realization information of the ip pool. 
     * @param serverId  (required)
     * @param poolId  (required)
     * @param barrierId  (optional)
     * @param requestId Realization request ID (optional)
     * @return ConfigurationState
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConfigurationState getDhcpIpPoolState(String serverId, String poolId, Long barrierId, String requestId) throws ApiException {
        ApiResponse<ConfigurationState> resp = getDhcpIpPoolStateWithHttpInfo(serverId, poolId, barrierId, requestId);
        return resp.getData();
    }

    /**
     * Get the realized state of a dhcp ip pool
     * Return realized state information of a dhcp ip pool. After a dhcp ip pool is created or updated, you can invoke this API to get the realization information of the ip pool. 
     * @param serverId  (required)
     * @param poolId  (required)
     * @param barrierId  (optional)
     * @param requestId Realization request ID (optional)
     * @return ApiResponse&lt;ConfigurationState&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConfigurationState> getDhcpIpPoolStateWithHttpInfo(String serverId, String poolId, Long barrierId, String requestId) throws ApiException {
        com.squareup.okhttp.Call call = getDhcpIpPoolStateValidateBeforeCall(serverId, poolId, barrierId, requestId, null, null);
        Type localVarReturnType = new TypeToken<ConfigurationState>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the realized state of a dhcp ip pool (asynchronously)
     * Return realized state information of a dhcp ip pool. After a dhcp ip pool is created or updated, you can invoke this API to get the realization information of the ip pool. 
     * @param serverId  (required)
     * @param poolId  (required)
     * @param barrierId  (optional)
     * @param requestId Realization request ID (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDhcpIpPoolStateAsync(String serverId, String poolId, Long barrierId, String requestId, final ApiCallback<ConfigurationState> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDhcpIpPoolStateValidateBeforeCall(serverId, poolId, barrierId, requestId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConfigurationState>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDhcpLeaseInfo
     * @param serverId  (required)
     * @param address can be an ip address, or an ip range, or a mac address (optional)
     * @param poolId The uuid of dhcp ip pool (optional)
     * @param source Data source type. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDhcpLeaseInfoCall(String serverId, String address, String poolId, String source, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/dhcp/servers/{server-id}/leases"
            .replaceAll("\\{" + "server-id" + "\\}", apiClient.escapeString(serverId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (address != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("address", address));
        if (poolId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pool_id", poolId));
        if (source != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("source", source));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDhcpLeaseInfoValidateBeforeCall(String serverId, String address, String poolId, String source, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'serverId' is set
        if (serverId == null) {
            throw new ApiException("Missing the required parameter 'serverId' when calling getDhcpLeaseInfo(Async)");
        }
        
        com.squareup.okhttp.Call call = getDhcpLeaseInfoCall(serverId, address, poolId, source, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get specific leases of a given dhcp server
     * Get specific leases of a given dhcp server. As a dhcp server could manage millions of leases, the API has to limit the number of the returned leases via two mutually-excluded request parameters, i.e. \&quot;pool_id\&quot; and \&quot;address\&quot;. Either a \&quot;pool_id\&quot; or an \&quot;address\&quot; can be provided, but not both in a same call.  If a \&quot;pool_id\&quot; is specified, the leases of the specific pool are returned. If an \&quot;address\&quot; is specified, only the lease(s) represented y this address is(are) returned. The \&quot;address\&quot; can be a single IP, an ip-range, or a mac address. 
     * @param serverId  (required)
     * @param address can be an ip address, or an ip range, or a mac address (optional)
     * @param poolId The uuid of dhcp ip pool (optional)
     * @param source Data source type. (optional)
     * @return DhcpLeases
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DhcpLeases getDhcpLeaseInfo(String serverId, String address, String poolId, String source) throws ApiException {
        ApiResponse<DhcpLeases> resp = getDhcpLeaseInfoWithHttpInfo(serverId, address, poolId, source);
        return resp.getData();
    }

    /**
     * Get specific leases of a given dhcp server
     * Get specific leases of a given dhcp server. As a dhcp server could manage millions of leases, the API has to limit the number of the returned leases via two mutually-excluded request parameters, i.e. \&quot;pool_id\&quot; and \&quot;address\&quot;. Either a \&quot;pool_id\&quot; or an \&quot;address\&quot; can be provided, but not both in a same call.  If a \&quot;pool_id\&quot; is specified, the leases of the specific pool are returned. If an \&quot;address\&quot; is specified, only the lease(s) represented y this address is(are) returned. The \&quot;address\&quot; can be a single IP, an ip-range, or a mac address. 
     * @param serverId  (required)
     * @param address can be an ip address, or an ip range, or a mac address (optional)
     * @param poolId The uuid of dhcp ip pool (optional)
     * @param source Data source type. (optional)
     * @return ApiResponse&lt;DhcpLeases&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DhcpLeases> getDhcpLeaseInfoWithHttpInfo(String serverId, String address, String poolId, String source) throws ApiException {
        com.squareup.okhttp.Call call = getDhcpLeaseInfoValidateBeforeCall(serverId, address, poolId, source, null, null);
        Type localVarReturnType = new TypeToken<DhcpLeases>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get specific leases of a given dhcp server (asynchronously)
     * Get specific leases of a given dhcp server. As a dhcp server could manage millions of leases, the API has to limit the number of the returned leases via two mutually-excluded request parameters, i.e. \&quot;pool_id\&quot; and \&quot;address\&quot;. Either a \&quot;pool_id\&quot; or an \&quot;address\&quot; can be provided, but not both in a same call.  If a \&quot;pool_id\&quot; is specified, the leases of the specific pool are returned. If an \&quot;address\&quot; is specified, only the lease(s) represented y this address is(are) returned. The \&quot;address\&quot; can be a single IP, an ip-range, or a mac address. 
     * @param serverId  (required)
     * @param address can be an ip address, or an ip range, or a mac address (optional)
     * @param poolId The uuid of dhcp ip pool (optional)
     * @param source Data source type. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDhcpLeaseInfoAsync(String serverId, String address, String poolId, String source, final ApiCallback<DhcpLeases> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDhcpLeaseInfoValidateBeforeCall(serverId, address, poolId, source, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DhcpLeases>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDhcpServerState
     * @param serverId  (required)
     * @param barrierId  (optional)
     * @param requestId Realization request ID (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDhcpServerStateCall(String serverId, Long barrierId, String requestId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/dhcp/servers/{server-id}/state"
            .replaceAll("\\{" + "server-id" + "\\}", apiClient.escapeString(serverId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (barrierId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("barrier_id", barrierId));
        if (requestId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("request_id", requestId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDhcpServerStateValidateBeforeCall(String serverId, Long barrierId, String requestId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'serverId' is set
        if (serverId == null) {
            throw new ApiException("Missing the required parameter 'serverId' when calling getDhcpServerState(Async)");
        }
        
        com.squareup.okhttp.Call call = getDhcpServerStateCall(serverId, barrierId, requestId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the realized state of a dhcp server
     * Return realized state information of a dhcp server. After a dhcp server is created or updated, you can invoke this API to get the realization information of the server. 
     * @param serverId  (required)
     * @param barrierId  (optional)
     * @param requestId Realization request ID (optional)
     * @return ConfigurationState
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConfigurationState getDhcpServerState(String serverId, Long barrierId, String requestId) throws ApiException {
        ApiResponse<ConfigurationState> resp = getDhcpServerStateWithHttpInfo(serverId, barrierId, requestId);
        return resp.getData();
    }

    /**
     * Get the realized state of a dhcp server
     * Return realized state information of a dhcp server. After a dhcp server is created or updated, you can invoke this API to get the realization information of the server. 
     * @param serverId  (required)
     * @param barrierId  (optional)
     * @param requestId Realization request ID (optional)
     * @return ApiResponse&lt;ConfigurationState&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConfigurationState> getDhcpServerStateWithHttpInfo(String serverId, Long barrierId, String requestId) throws ApiException {
        com.squareup.okhttp.Call call = getDhcpServerStateValidateBeforeCall(serverId, barrierId, requestId, null, null);
        Type localVarReturnType = new TypeToken<ConfigurationState>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the realized state of a dhcp server (asynchronously)
     * Return realized state information of a dhcp server. After a dhcp server is created or updated, you can invoke this API to get the realization information of the server. 
     * @param serverId  (required)
     * @param barrierId  (optional)
     * @param requestId Realization request ID (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDhcpServerStateAsync(String serverId, Long barrierId, String requestId, final ApiCallback<ConfigurationState> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDhcpServerStateValidateBeforeCall(serverId, barrierId, requestId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConfigurationState>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDhcpStaticBindingState
     * @param serverId  (required)
     * @param bindingId  (required)
     * @param barrierId  (optional)
     * @param requestId Realization request ID (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDhcpStaticBindingStateCall(String serverId, String bindingId, Long barrierId, String requestId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/dhcp/servers/{server-id}/static-bindings/{binding-id}/state"
            .replaceAll("\\{" + "server-id" + "\\}", apiClient.escapeString(serverId.toString()))
            .replaceAll("\\{" + "binding-id" + "\\}", apiClient.escapeString(bindingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (barrierId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("barrier_id", barrierId));
        if (requestId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("request_id", requestId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDhcpStaticBindingStateValidateBeforeCall(String serverId, String bindingId, Long barrierId, String requestId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'serverId' is set
        if (serverId == null) {
            throw new ApiException("Missing the required parameter 'serverId' when calling getDhcpStaticBindingState(Async)");
        }
        // verify the required parameter 'bindingId' is set
        if (bindingId == null) {
            throw new ApiException("Missing the required parameter 'bindingId' when calling getDhcpStaticBindingState(Async)");
        }
        
        com.squareup.okhttp.Call call = getDhcpStaticBindingStateCall(serverId, bindingId, barrierId, requestId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the realized state of a dhcp static binding
     * Return realized state information of a dhcp static binding. After a dhcp static binding is created or updated, you can invoke this API to get the realization information of the static binding. 
     * @param serverId  (required)
     * @param bindingId  (required)
     * @param barrierId  (optional)
     * @param requestId Realization request ID (optional)
     * @return ConfigurationState
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConfigurationState getDhcpStaticBindingState(String serverId, String bindingId, Long barrierId, String requestId) throws ApiException {
        ApiResponse<ConfigurationState> resp = getDhcpStaticBindingStateWithHttpInfo(serverId, bindingId, barrierId, requestId);
        return resp.getData();
    }

    /**
     * Get the realized state of a dhcp static binding
     * Return realized state information of a dhcp static binding. After a dhcp static binding is created or updated, you can invoke this API to get the realization information of the static binding. 
     * @param serverId  (required)
     * @param bindingId  (required)
     * @param barrierId  (optional)
     * @param requestId Realization request ID (optional)
     * @return ApiResponse&lt;ConfigurationState&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConfigurationState> getDhcpStaticBindingStateWithHttpInfo(String serverId, String bindingId, Long barrierId, String requestId) throws ApiException {
        com.squareup.okhttp.Call call = getDhcpStaticBindingStateValidateBeforeCall(serverId, bindingId, barrierId, requestId, null, null);
        Type localVarReturnType = new TypeToken<ConfigurationState>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the realized state of a dhcp static binding (asynchronously)
     * Return realized state information of a dhcp static binding. After a dhcp static binding is created or updated, you can invoke this API to get the realization information of the static binding. 
     * @param serverId  (required)
     * @param bindingId  (required)
     * @param barrierId  (optional)
     * @param requestId Realization request ID (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDhcpStaticBindingStateAsync(String serverId, String bindingId, Long barrierId, String requestId, final ApiCallback<ConfigurationState> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDhcpStaticBindingStateValidateBeforeCall(serverId, bindingId, barrierId, requestId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConfigurationState>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDhcpStatistics
     * @param serverId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDhcpStatisticsCall(String serverId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/dhcp/servers/{server-id}/statistics"
            .replaceAll("\\{" + "server-id" + "\\}", apiClient.escapeString(serverId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDhcpStatisticsValidateBeforeCall(String serverId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'serverId' is set
        if (serverId == null) {
            throw new ApiException("Missing the required parameter 'serverId' when calling getDhcpStatistics(Async)");
        }
        
        com.squareup.okhttp.Call call = getDhcpStatisticsCall(serverId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get DHCP statistics with given dhcp server id
     * Returns the statistics of the given dhcp server. 
     * @param serverId  (required)
     * @return DhcpStatistics
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DhcpStatistics getDhcpStatistics(String serverId) throws ApiException {
        ApiResponse<DhcpStatistics> resp = getDhcpStatisticsWithHttpInfo(serverId);
        return resp.getData();
    }

    /**
     * Get DHCP statistics with given dhcp server id
     * Returns the statistics of the given dhcp server. 
     * @param serverId  (required)
     * @return ApiResponse&lt;DhcpStatistics&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DhcpStatistics> getDhcpStatisticsWithHttpInfo(String serverId) throws ApiException {
        com.squareup.okhttp.Call call = getDhcpStatisticsValidateBeforeCall(serverId, null, null);
        Type localVarReturnType = new TypeToken<DhcpStatistics>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get DHCP statistics with given dhcp server id (asynchronously)
     * Returns the statistics of the given dhcp server. 
     * @param serverId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDhcpStatisticsAsync(String serverId, final ApiCallback<DhcpStatistics> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDhcpStatisticsValidateBeforeCall(serverId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DhcpStatistics>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDhcpStatus
     * @param serverId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDhcpStatusCall(String serverId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/dhcp/servers/{server-id}/status"
            .replaceAll("\\{" + "server-id" + "\\}", apiClient.escapeString(serverId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDhcpStatusValidateBeforeCall(String serverId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'serverId' is set
        if (serverId == null) {
            throw new ApiException("Missing the required parameter 'serverId' when calling getDhcpStatus(Async)");
        }
        
        com.squareup.okhttp.Call call = getDhcpStatusCall(serverId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get DHCP service status with given dhcp server id
     * Returns the service status of the given dhcp server. 
     * @param serverId  (required)
     * @return DhcpServerStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DhcpServerStatus getDhcpStatus(String serverId) throws ApiException {
        ApiResponse<DhcpServerStatus> resp = getDhcpStatusWithHttpInfo(serverId);
        return resp.getData();
    }

    /**
     * Get DHCP service status with given dhcp server id
     * Returns the service status of the given dhcp server. 
     * @param serverId  (required)
     * @return ApiResponse&lt;DhcpServerStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DhcpServerStatus> getDhcpStatusWithHttpInfo(String serverId) throws ApiException {
        com.squareup.okhttp.Call call = getDhcpStatusValidateBeforeCall(serverId, null, null);
        Type localVarReturnType = new TypeToken<DhcpServerStatus>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get DHCP service status with given dhcp server id (asynchronously)
     * Returns the service status of the given dhcp server. 
     * @param serverId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDhcpStatusAsync(String serverId, final ApiCallback<DhcpServerStatus> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDhcpStatusValidateBeforeCall(serverId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DhcpServerStatus>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listDhcpIpPools
     * @param serverId  (required)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listDhcpIpPoolsCall(String serverId, String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/dhcp/servers/{server-id}/ip-pools"
            .replaceAll("\\{" + "server-id" + "\\}", apiClient.escapeString(serverId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (includedFields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("included_fields", includedFields));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page_size", pageSize));
        if (sortAscending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_ascending", sortAscending));
        if (sortBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_by", sortBy));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listDhcpIpPoolsValidateBeforeCall(String serverId, String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'serverId' is set
        if (serverId == null) {
            throw new ApiException("Missing the required parameter 'serverId' when calling listDhcpIpPools(Async)");
        }
        
        com.squareup.okhttp.Call call = listDhcpIpPoolsCall(serverId, cursor, includedFields, pageSize, sortAscending, sortBy, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get a paginated list of a DHCP server&#x27;s IP pools
     * List the ip pools of a logical DHCP server with pagination support. 
     * @param serverId  (required)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @return DhcpIpPoolListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DhcpIpPoolListResult listDhcpIpPools(String serverId, String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy) throws ApiException {
        ApiResponse<DhcpIpPoolListResult> resp = listDhcpIpPoolsWithHttpInfo(serverId, cursor, includedFields, pageSize, sortAscending, sortBy);
        return resp.getData();
    }

    /**
     * Get a paginated list of a DHCP server&#x27;s IP pools
     * List the ip pools of a logical DHCP server with pagination support. 
     * @param serverId  (required)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @return ApiResponse&lt;DhcpIpPoolListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DhcpIpPoolListResult> listDhcpIpPoolsWithHttpInfo(String serverId, String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy) throws ApiException {
        com.squareup.okhttp.Call call = listDhcpIpPoolsValidateBeforeCall(serverId, cursor, includedFields, pageSize, sortAscending, sortBy, null, null);
        Type localVarReturnType = new TypeToken<DhcpIpPoolListResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a paginated list of a DHCP server&#x27;s IP pools (asynchronously)
     * List the ip pools of a logical DHCP server with pagination support. 
     * @param serverId  (required)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listDhcpIpPoolsAsync(String serverId, String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, final ApiCallback<DhcpIpPoolListResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listDhcpIpPoolsValidateBeforeCall(serverId, cursor, includedFields, pageSize, sortAscending, sortBy, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DhcpIpPoolListResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listDhcpProfiles
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listDhcpProfilesCall(String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/dhcp/server-profiles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (includedFields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("included_fields", includedFields));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page_size", pageSize));
        if (sortAscending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_ascending", sortAscending));
        if (sortBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_by", sortBy));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listDhcpProfilesValidateBeforeCall(String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listDhcpProfilesCall(cursor, includedFields, pageSize, sortAscending, sortBy, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get a paginated list of DHCP server profiles
     * Get a paginated list of DHCP server profiles.
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @return DhcpProfileListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DhcpProfileListResult listDhcpProfiles(String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy) throws ApiException {
        ApiResponse<DhcpProfileListResult> resp = listDhcpProfilesWithHttpInfo(cursor, includedFields, pageSize, sortAscending, sortBy);
        return resp.getData();
    }

    /**
     * Get a paginated list of DHCP server profiles
     * Get a paginated list of DHCP server profiles.
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @return ApiResponse&lt;DhcpProfileListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DhcpProfileListResult> listDhcpProfilesWithHttpInfo(String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy) throws ApiException {
        com.squareup.okhttp.Call call = listDhcpProfilesValidateBeforeCall(cursor, includedFields, pageSize, sortAscending, sortBy, null, null);
        Type localVarReturnType = new TypeToken<DhcpProfileListResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a paginated list of DHCP server profiles (asynchronously)
     * Get a paginated list of DHCP server profiles.
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listDhcpProfilesAsync(String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, final ApiCallback<DhcpProfileListResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listDhcpProfilesValidateBeforeCall(cursor, includedFields, pageSize, sortAscending, sortBy, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DhcpProfileListResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listDhcpServers
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listDhcpServersCall(String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/dhcp/servers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (includedFields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("included_fields", includedFields));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page_size", pageSize));
        if (sortAscending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_ascending", sortAscending));
        if (sortBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_by", sortBy));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listDhcpServersValidateBeforeCall(String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listDhcpServersCall(cursor, includedFields, pageSize, sortAscending, sortBy, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get a paginated list of DHCP servers
     * List logical DHCP servers with pagination support.
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @return LogicalDhcpServerListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LogicalDhcpServerListResult listDhcpServers(String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy) throws ApiException {
        ApiResponse<LogicalDhcpServerListResult> resp = listDhcpServersWithHttpInfo(cursor, includedFields, pageSize, sortAscending, sortBy);
        return resp.getData();
    }

    /**
     * Get a paginated list of DHCP servers
     * List logical DHCP servers with pagination support.
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @return ApiResponse&lt;LogicalDhcpServerListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LogicalDhcpServerListResult> listDhcpServersWithHttpInfo(String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy) throws ApiException {
        com.squareup.okhttp.Call call = listDhcpServersValidateBeforeCall(cursor, includedFields, pageSize, sortAscending, sortBy, null, null);
        Type localVarReturnType = new TypeToken<LogicalDhcpServerListResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a paginated list of DHCP servers (asynchronously)
     * List logical DHCP servers with pagination support.
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listDhcpServersAsync(String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, final ApiCallback<LogicalDhcpServerListResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listDhcpServersValidateBeforeCall(cursor, includedFields, pageSize, sortAscending, sortBy, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LogicalDhcpServerListResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listDhcpStaticBindings
     * @param serverId  (required)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listDhcpStaticBindingsCall(String serverId, String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/dhcp/servers/{server-id}/static-bindings"
            .replaceAll("\\{" + "server-id" + "\\}", apiClient.escapeString(serverId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (includedFields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("included_fields", includedFields));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page_size", pageSize));
        if (sortAscending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_ascending", sortAscending));
        if (sortBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_by", sortBy));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listDhcpStaticBindingsValidateBeforeCall(String serverId, String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'serverId' is set
        if (serverId == null) {
            throw new ApiException("Missing the required parameter 'serverId' when calling listDhcpStaticBindings(Async)");
        }
        
        com.squareup.okhttp.Call call = listDhcpStaticBindingsCall(serverId, cursor, includedFields, pageSize, sortAscending, sortBy, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get a paginated list of a DHCP server&#x27;s static bindings
     * Return a paginated list of a static bindings of a given logical DHCP server. 
     * @param serverId  (required)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @return DhcpStaticBindingListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DhcpStaticBindingListResult listDhcpStaticBindings(String serverId, String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy) throws ApiException {
        ApiResponse<DhcpStaticBindingListResult> resp = listDhcpStaticBindingsWithHttpInfo(serverId, cursor, includedFields, pageSize, sortAscending, sortBy);
        return resp.getData();
    }

    /**
     * Get a paginated list of a DHCP server&#x27;s static bindings
     * Return a paginated list of a static bindings of a given logical DHCP server. 
     * @param serverId  (required)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @return ApiResponse&lt;DhcpStaticBindingListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DhcpStaticBindingListResult> listDhcpStaticBindingsWithHttpInfo(String serverId, String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy) throws ApiException {
        com.squareup.okhttp.Call call = listDhcpStaticBindingsValidateBeforeCall(serverId, cursor, includedFields, pageSize, sortAscending, sortBy, null, null);
        Type localVarReturnType = new TypeToken<DhcpStaticBindingListResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a paginated list of a DHCP server&#x27;s static bindings (asynchronously)
     * Return a paginated list of a static bindings of a given logical DHCP server. 
     * @param serverId  (required)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listDhcpStaticBindingsAsync(String serverId, String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, final ApiCallback<DhcpStaticBindingListResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listDhcpStaticBindingsValidateBeforeCall(serverId, cursor, includedFields, pageSize, sortAscending, sortBy, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DhcpStaticBindingListResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for readDhcpIpPool
     * @param serverId  (required)
     * @param poolId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call readDhcpIpPoolCall(String serverId, String poolId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/dhcp/servers/{server-id}/ip-pools/{pool-id}"
            .replaceAll("\\{" + "server-id" + "\\}", apiClient.escapeString(serverId.toString()))
            .replaceAll("\\{" + "pool-id" + "\\}", apiClient.escapeString(poolId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call readDhcpIpPoolValidateBeforeCall(String serverId, String poolId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'serverId' is set
        if (serverId == null) {
            throw new ApiException("Missing the required parameter 'serverId' when calling readDhcpIpPool(Async)");
        }
        // verify the required parameter 'poolId' is set
        if (poolId == null) {
            throw new ApiException("Missing the required parameter 'poolId' when calling readDhcpIpPool(Async)");
        }
        
        com.squareup.okhttp.Call call = readDhcpIpPoolCall(serverId, poolId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get a DHCP server&#x27;s IP pool with the specified pool ID
     * Return a specific ip pool of a given logical DHCP server.
     * @param serverId  (required)
     * @param poolId  (required)
     * @return DhcpIpPool
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DhcpIpPool readDhcpIpPool(String serverId, String poolId) throws ApiException {
        ApiResponse<DhcpIpPool> resp = readDhcpIpPoolWithHttpInfo(serverId, poolId);
        return resp.getData();
    }

    /**
     * Get a DHCP server&#x27;s IP pool with the specified pool ID
     * Return a specific ip pool of a given logical DHCP server.
     * @param serverId  (required)
     * @param poolId  (required)
     * @return ApiResponse&lt;DhcpIpPool&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DhcpIpPool> readDhcpIpPoolWithHttpInfo(String serverId, String poolId) throws ApiException {
        com.squareup.okhttp.Call call = readDhcpIpPoolValidateBeforeCall(serverId, poolId, null, null);
        Type localVarReturnType = new TypeToken<DhcpIpPool>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a DHCP server&#x27;s IP pool with the specified pool ID (asynchronously)
     * Return a specific ip pool of a given logical DHCP server.
     * @param serverId  (required)
     * @param poolId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call readDhcpIpPoolAsync(String serverId, String poolId, final ApiCallback<DhcpIpPool> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = readDhcpIpPoolValidateBeforeCall(serverId, poolId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DhcpIpPool>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for readDhcpProfile
     * @param profileId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call readDhcpProfileCall(String profileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/dhcp/server-profiles/{profile-id}"
            .replaceAll("\\{" + "profile-id" + "\\}", apiClient.escapeString(profileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call readDhcpProfileValidateBeforeCall(String profileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'profileId' is set
        if (profileId == null) {
            throw new ApiException("Missing the required parameter 'profileId' when calling readDhcpProfile(Async)");
        }
        
        com.squareup.okhttp.Call call = readDhcpProfileCall(profileId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get a DHCP server profile
     * Return the DHCP profile specified by the profile id.
     * @param profileId  (required)
     * @return DhcpProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DhcpProfile readDhcpProfile(String profileId) throws ApiException {
        ApiResponse<DhcpProfile> resp = readDhcpProfileWithHttpInfo(profileId);
        return resp.getData();
    }

    /**
     * Get a DHCP server profile
     * Return the DHCP profile specified by the profile id.
     * @param profileId  (required)
     * @return ApiResponse&lt;DhcpProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DhcpProfile> readDhcpProfileWithHttpInfo(String profileId) throws ApiException {
        com.squareup.okhttp.Call call = readDhcpProfileValidateBeforeCall(profileId, null, null);
        Type localVarReturnType = new TypeToken<DhcpProfile>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a DHCP server profile (asynchronously)
     * Return the DHCP profile specified by the profile id.
     * @param profileId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call readDhcpProfileAsync(String profileId, final ApiCallback<DhcpProfile> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = readDhcpProfileValidateBeforeCall(profileId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DhcpProfile>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for readDhcpServer
     * @param serverId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call readDhcpServerCall(String serverId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/dhcp/servers/{server-id}"
            .replaceAll("\\{" + "server-id" + "\\}", apiClient.escapeString(serverId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call readDhcpServerValidateBeforeCall(String serverId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'serverId' is set
        if (serverId == null) {
            throw new ApiException("Missing the required parameter 'serverId' when calling readDhcpServer(Async)");
        }
        
        com.squareup.okhttp.Call call = readDhcpServerCall(serverId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get a DHCP server
     * Retrieve a logical DHCP server specified by server id.
     * @param serverId  (required)
     * @return LogicalDhcpServer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LogicalDhcpServer readDhcpServer(String serverId) throws ApiException {
        ApiResponse<LogicalDhcpServer> resp = readDhcpServerWithHttpInfo(serverId);
        return resp.getData();
    }

    /**
     * Get a DHCP server
     * Retrieve a logical DHCP server specified by server id.
     * @param serverId  (required)
     * @return ApiResponse&lt;LogicalDhcpServer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LogicalDhcpServer> readDhcpServerWithHttpInfo(String serverId) throws ApiException {
        com.squareup.okhttp.Call call = readDhcpServerValidateBeforeCall(serverId, null, null);
        Type localVarReturnType = new TypeToken<LogicalDhcpServer>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a DHCP server (asynchronously)
     * Retrieve a logical DHCP server specified by server id.
     * @param serverId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call readDhcpServerAsync(String serverId, final ApiCallback<LogicalDhcpServer> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = readDhcpServerValidateBeforeCall(serverId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LogicalDhcpServer>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for readDhcpStaticBinding
     * @param serverId  (required)
     * @param bindingId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call readDhcpStaticBindingCall(String serverId, String bindingId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/dhcp/servers/{server-id}/static-bindings/{binding-id}"
            .replaceAll("\\{" + "server-id" + "\\}", apiClient.escapeString(serverId.toString()))
            .replaceAll("\\{" + "binding-id" + "\\}", apiClient.escapeString(bindingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call readDhcpStaticBindingValidateBeforeCall(String serverId, String bindingId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'serverId' is set
        if (serverId == null) {
            throw new ApiException("Missing the required parameter 'serverId' when calling readDhcpStaticBinding(Async)");
        }
        // verify the required parameter 'bindingId' is set
        if (bindingId == null) {
            throw new ApiException("Missing the required parameter 'bindingId' when calling readDhcpStaticBinding(Async)");
        }
        
        com.squareup.okhttp.Call call = readDhcpStaticBindingCall(serverId, bindingId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get a DHCP server&#x27;s static binding with the specified binding ID
     * Return a specific static binding of a given logical DHCP server. 
     * @param serverId  (required)
     * @param bindingId  (required)
     * @return DhcpStaticBinding
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DhcpStaticBinding readDhcpStaticBinding(String serverId, String bindingId) throws ApiException {
        ApiResponse<DhcpStaticBinding> resp = readDhcpStaticBindingWithHttpInfo(serverId, bindingId);
        return resp.getData();
    }

    /**
     * Get a DHCP server&#x27;s static binding with the specified binding ID
     * Return a specific static binding of a given logical DHCP server. 
     * @param serverId  (required)
     * @param bindingId  (required)
     * @return ApiResponse&lt;DhcpStaticBinding&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DhcpStaticBinding> readDhcpStaticBindingWithHttpInfo(String serverId, String bindingId) throws ApiException {
        com.squareup.okhttp.Call call = readDhcpStaticBindingValidateBeforeCall(serverId, bindingId, null, null);
        Type localVarReturnType = new TypeToken<DhcpStaticBinding>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a DHCP server&#x27;s static binding with the specified binding ID (asynchronously)
     * Return a specific static binding of a given logical DHCP server. 
     * @param serverId  (required)
     * @param bindingId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call readDhcpStaticBindingAsync(String serverId, String bindingId, final ApiCallback<DhcpStaticBinding> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = readDhcpStaticBindingValidateBeforeCall(serverId, bindingId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DhcpStaticBinding>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for reallocateDhcpProfileEdgeClusterReallocate
     * @param body  (required)
     * @param serverProfileId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call reallocateDhcpProfileEdgeClusterReallocateCall(DhcpProfile body, String serverProfileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/dhcp/server-profiles/{server-profile-id}?action=reallocate"
            .replaceAll("\\{" + "server-profile-id" + "\\}", apiClient.escapeString(serverProfileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call reallocateDhcpProfileEdgeClusterReallocateValidateBeforeCall(DhcpProfile body, String serverProfileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling reallocateDhcpProfileEdgeClusterReallocate(Async)");
        }
        // verify the required parameter 'serverProfileId' is set
        if (serverProfileId == null) {
            throw new ApiException("Missing the required parameter 'serverProfileId' when calling reallocateDhcpProfileEdgeClusterReallocate(Async)");
        }
        
        com.squareup.okhttp.Call call = reallocateDhcpProfileEdgeClusterReallocateCall(body, serverProfileId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Reallocate edge cluster and members of given DHCP profile.
     * As changing edge-cluster-id of a DhcpProfile by a PUT is disallowed, this re-allocate API is used to modify the edge-cluster-id and members of a given DhcpProfile.  Only the edge-cluster-id and the edge-cluster-member-indexes fields will be picked up by this re-allication API. The othere fields in the payload will be ignored.  If the edge-cluster-id in the payload DhcpProfile is different from the current edge-cluster-id of the profile, the referencing DHCP server(s) will be re-allocated to the new edge cluster. If the edge-cluster-id is not changed, the referencing DHCP server(s) will be re-allocated to the given edge members in the edge cluster. In this case, this REST API will act same as that of updating a DhcpProfile.  If the edge cluster member indexes are provided, they should exist in the given edge cluster. If the indexes are not specified in the DhcpProfile, edge members will be auto-allocated from the given edge cluster.  Please note that re-allocating edge-cluster will cause lose of all exisitng DHCP lease information. This API is used only when loosing DHCP leases is not a real problem, e.g. cross-site migration or failover and all client hosts will be reboot and get new IP addresses. 
     * @param body  (required)
     * @param serverProfileId  (required)
     * @return DhcpProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DhcpProfile reallocateDhcpProfileEdgeClusterReallocate(DhcpProfile body, String serverProfileId) throws ApiException {
        ApiResponse<DhcpProfile> resp = reallocateDhcpProfileEdgeClusterReallocateWithHttpInfo(body, serverProfileId);
        return resp.getData();
    }

    /**
     * Reallocate edge cluster and members of given DHCP profile.
     * As changing edge-cluster-id of a DhcpProfile by a PUT is disallowed, this re-allocate API is used to modify the edge-cluster-id and members of a given DhcpProfile.  Only the edge-cluster-id and the edge-cluster-member-indexes fields will be picked up by this re-allication API. The othere fields in the payload will be ignored.  If the edge-cluster-id in the payload DhcpProfile is different from the current edge-cluster-id of the profile, the referencing DHCP server(s) will be re-allocated to the new edge cluster. If the edge-cluster-id is not changed, the referencing DHCP server(s) will be re-allocated to the given edge members in the edge cluster. In this case, this REST API will act same as that of updating a DhcpProfile.  If the edge cluster member indexes are provided, they should exist in the given edge cluster. If the indexes are not specified in the DhcpProfile, edge members will be auto-allocated from the given edge cluster.  Please note that re-allocating edge-cluster will cause lose of all exisitng DHCP lease information. This API is used only when loosing DHCP leases is not a real problem, e.g. cross-site migration or failover and all client hosts will be reboot and get new IP addresses. 
     * @param body  (required)
     * @param serverProfileId  (required)
     * @return ApiResponse&lt;DhcpProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DhcpProfile> reallocateDhcpProfileEdgeClusterReallocateWithHttpInfo(DhcpProfile body, String serverProfileId) throws ApiException {
        com.squareup.okhttp.Call call = reallocateDhcpProfileEdgeClusterReallocateValidateBeforeCall(body, serverProfileId, null, null);
        Type localVarReturnType = new TypeToken<DhcpProfile>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Reallocate edge cluster and members of given DHCP profile. (asynchronously)
     * As changing edge-cluster-id of a DhcpProfile by a PUT is disallowed, this re-allocate API is used to modify the edge-cluster-id and members of a given DhcpProfile.  Only the edge-cluster-id and the edge-cluster-member-indexes fields will be picked up by this re-allication API. The othere fields in the payload will be ignored.  If the edge-cluster-id in the payload DhcpProfile is different from the current edge-cluster-id of the profile, the referencing DHCP server(s) will be re-allocated to the new edge cluster. If the edge-cluster-id is not changed, the referencing DHCP server(s) will be re-allocated to the given edge members in the edge cluster. In this case, this REST API will act same as that of updating a DhcpProfile.  If the edge cluster member indexes are provided, they should exist in the given edge cluster. If the indexes are not specified in the DhcpProfile, edge members will be auto-allocated from the given edge cluster.  Please note that re-allocating edge-cluster will cause lose of all exisitng DHCP lease information. This API is used only when loosing DHCP leases is not a real problem, e.g. cross-site migration or failover and all client hosts will be reboot and get new IP addresses. 
     * @param body  (required)
     * @param serverProfileId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call reallocateDhcpProfileEdgeClusterReallocateAsync(DhcpProfile body, String serverProfileId, final ApiCallback<DhcpProfile> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = reallocateDhcpProfileEdgeClusterReallocateValidateBeforeCall(body, serverProfileId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DhcpProfile>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateDhcpIpPool
     * @param body  (required)
     * @param serverId  (required)
     * @param poolId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateDhcpIpPoolCall(DhcpIpPool body, String serverId, String poolId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/dhcp/servers/{server-id}/ip-pools/{pool-id}"
            .replaceAll("\\{" + "server-id" + "\\}", apiClient.escapeString(serverId.toString()))
            .replaceAll("\\{" + "pool-id" + "\\}", apiClient.escapeString(poolId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateDhcpIpPoolValidateBeforeCall(DhcpIpPool body, String serverId, String poolId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateDhcpIpPool(Async)");
        }
        // verify the required parameter 'serverId' is set
        if (serverId == null) {
            throw new ApiException("Missing the required parameter 'serverId' when calling updateDhcpIpPool(Async)");
        }
        // verify the required parameter 'poolId' is set
        if (poolId == null) {
            throw new ApiException("Missing the required parameter 'poolId' when calling updateDhcpIpPool(Async)");
        }
        
        com.squareup.okhttp.Call call = updateDhcpIpPoolCall(body, serverId, poolId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update a DHCP server&#x27;s IP pool
     * Update a specific ip pool of a given logical DHCP server.
     * @param body  (required)
     * @param serverId  (required)
     * @param poolId  (required)
     * @return DhcpIpPool
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DhcpIpPool updateDhcpIpPool(DhcpIpPool body, String serverId, String poolId) throws ApiException {
        ApiResponse<DhcpIpPool> resp = updateDhcpIpPoolWithHttpInfo(body, serverId, poolId);
        return resp.getData();
    }

    /**
     * Update a DHCP server&#x27;s IP pool
     * Update a specific ip pool of a given logical DHCP server.
     * @param body  (required)
     * @param serverId  (required)
     * @param poolId  (required)
     * @return ApiResponse&lt;DhcpIpPool&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DhcpIpPool> updateDhcpIpPoolWithHttpInfo(DhcpIpPool body, String serverId, String poolId) throws ApiException {
        com.squareup.okhttp.Call call = updateDhcpIpPoolValidateBeforeCall(body, serverId, poolId, null, null);
        Type localVarReturnType = new TypeToken<DhcpIpPool>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a DHCP server&#x27;s IP pool (asynchronously)
     * Update a specific ip pool of a given logical DHCP server.
     * @param body  (required)
     * @param serverId  (required)
     * @param poolId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateDhcpIpPoolAsync(DhcpIpPool body, String serverId, String poolId, final ApiCallback<DhcpIpPool> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateDhcpIpPoolValidateBeforeCall(body, serverId, poolId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DhcpIpPool>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateDhcpProfile
     * @param body  (required)
     * @param profileId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateDhcpProfileCall(DhcpProfile body, String profileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/dhcp/server-profiles/{profile-id}"
            .replaceAll("\\{" + "profile-id" + "\\}", apiClient.escapeString(profileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateDhcpProfileValidateBeforeCall(DhcpProfile body, String profileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateDhcpProfile(Async)");
        }
        // verify the required parameter 'profileId' is set
        if (profileId == null) {
            throw new ApiException("Missing the required parameter 'profileId' when calling updateDhcpProfile(Async)");
        }
        
        com.squareup.okhttp.Call call = updateDhcpProfileCall(body, profileId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update a DHCP server profile
     * Please note, the edge_cluster_id in DhcpProfile can NOT be changed by this PUT operation because all existing DHCP leases will lost. If loosing leases is not a problem, a dedicated re-allocation API is suggested to modify the edge-cluster-id.  If both the edge_cluster_member_indexes in the DhcpProfile are changed in a same PUT API, e.g. change from [a,b] to [x,y], the current DHCP server leases will be lost, which could cause the network crash due to ip conflicts. Hence the suggestion is to change only one member index in one single update, e.g. from [a, b] to [a,y]. 
     * @param body  (required)
     * @param profileId  (required)
     * @return DhcpProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DhcpProfile updateDhcpProfile(DhcpProfile body, String profileId) throws ApiException {
        ApiResponse<DhcpProfile> resp = updateDhcpProfileWithHttpInfo(body, profileId);
        return resp.getData();
    }

    /**
     * Update a DHCP server profile
     * Please note, the edge_cluster_id in DhcpProfile can NOT be changed by this PUT operation because all existing DHCP leases will lost. If loosing leases is not a problem, a dedicated re-allocation API is suggested to modify the edge-cluster-id.  If both the edge_cluster_member_indexes in the DhcpProfile are changed in a same PUT API, e.g. change from [a,b] to [x,y], the current DHCP server leases will be lost, which could cause the network crash due to ip conflicts. Hence the suggestion is to change only one member index in one single update, e.g. from [a, b] to [a,y]. 
     * @param body  (required)
     * @param profileId  (required)
     * @return ApiResponse&lt;DhcpProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DhcpProfile> updateDhcpProfileWithHttpInfo(DhcpProfile body, String profileId) throws ApiException {
        com.squareup.okhttp.Call call = updateDhcpProfileValidateBeforeCall(body, profileId, null, null);
        Type localVarReturnType = new TypeToken<DhcpProfile>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a DHCP server profile (asynchronously)
     * Please note, the edge_cluster_id in DhcpProfile can NOT be changed by this PUT operation because all existing DHCP leases will lost. If loosing leases is not a problem, a dedicated re-allocation API is suggested to modify the edge-cluster-id.  If both the edge_cluster_member_indexes in the DhcpProfile are changed in a same PUT API, e.g. change from [a,b] to [x,y], the current DHCP server leases will be lost, which could cause the network crash due to ip conflicts. Hence the suggestion is to change only one member index in one single update, e.g. from [a, b] to [a,y]. 
     * @param body  (required)
     * @param profileId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateDhcpProfileAsync(DhcpProfile body, String profileId, final ApiCallback<DhcpProfile> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateDhcpProfileValidateBeforeCall(body, profileId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DhcpProfile>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateDhcpServer
     * @param body  (required)
     * @param serverId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateDhcpServerCall(LogicalDhcpServer body, String serverId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/dhcp/servers/{server-id}"
            .replaceAll("\\{" + "server-id" + "\\}", apiClient.escapeString(serverId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateDhcpServerValidateBeforeCall(LogicalDhcpServer body, String serverId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateDhcpServer(Async)");
        }
        // verify the required parameter 'serverId' is set
        if (serverId == null) {
            throw new ApiException("Missing the required parameter 'serverId' when calling updateDhcpServer(Async)");
        }
        
        com.squareup.okhttp.Call call = updateDhcpServerCall(body, serverId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update a DHCP server
     * Update a logical DHCP server with new configurations.
     * @param body  (required)
     * @param serverId  (required)
     * @return LogicalDhcpServer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LogicalDhcpServer updateDhcpServer(LogicalDhcpServer body, String serverId) throws ApiException {
        ApiResponse<LogicalDhcpServer> resp = updateDhcpServerWithHttpInfo(body, serverId);
        return resp.getData();
    }

    /**
     * Update a DHCP server
     * Update a logical DHCP server with new configurations.
     * @param body  (required)
     * @param serverId  (required)
     * @return ApiResponse&lt;LogicalDhcpServer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LogicalDhcpServer> updateDhcpServerWithHttpInfo(LogicalDhcpServer body, String serverId) throws ApiException {
        com.squareup.okhttp.Call call = updateDhcpServerValidateBeforeCall(body, serverId, null, null);
        Type localVarReturnType = new TypeToken<LogicalDhcpServer>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a DHCP server (asynchronously)
     * Update a logical DHCP server with new configurations.
     * @param body  (required)
     * @param serverId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateDhcpServerAsync(LogicalDhcpServer body, String serverId, final ApiCallback<LogicalDhcpServer> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateDhcpServerValidateBeforeCall(body, serverId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LogicalDhcpServer>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateDhcpStaticBinding
     * @param body  (required)
     * @param serverId  (required)
     * @param bindingId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateDhcpStaticBindingCall(DhcpStaticBinding body, String serverId, String bindingId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/dhcp/servers/{server-id}/static-bindings/{binding-id}"
            .replaceAll("\\{" + "server-id" + "\\}", apiClient.escapeString(serverId.toString()))
            .replaceAll("\\{" + "binding-id" + "\\}", apiClient.escapeString(bindingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateDhcpStaticBindingValidateBeforeCall(DhcpStaticBinding body, String serverId, String bindingId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateDhcpStaticBinding(Async)");
        }
        // verify the required parameter 'serverId' is set
        if (serverId == null) {
            throw new ApiException("Missing the required parameter 'serverId' when calling updateDhcpStaticBinding(Async)");
        }
        // verify the required parameter 'bindingId' is set
        if (bindingId == null) {
            throw new ApiException("Missing the required parameter 'bindingId' when calling updateDhcpStaticBinding(Async)");
        }
        
        com.squareup.okhttp.Call call = updateDhcpStaticBindingCall(body, serverId, bindingId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update a DHCP server&#x27;s static binding
     * Update a specific static binding of a given local DHCP server.
     * @param body  (required)
     * @param serverId  (required)
     * @param bindingId  (required)
     * @return DhcpStaticBinding
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DhcpStaticBinding updateDhcpStaticBinding(DhcpStaticBinding body, String serverId, String bindingId) throws ApiException {
        ApiResponse<DhcpStaticBinding> resp = updateDhcpStaticBindingWithHttpInfo(body, serverId, bindingId);
        return resp.getData();
    }

    /**
     * Update a DHCP server&#x27;s static binding
     * Update a specific static binding of a given local DHCP server.
     * @param body  (required)
     * @param serverId  (required)
     * @param bindingId  (required)
     * @return ApiResponse&lt;DhcpStaticBinding&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DhcpStaticBinding> updateDhcpStaticBindingWithHttpInfo(DhcpStaticBinding body, String serverId, String bindingId) throws ApiException {
        com.squareup.okhttp.Call call = updateDhcpStaticBindingValidateBeforeCall(body, serverId, bindingId, null, null);
        Type localVarReturnType = new TypeToken<DhcpStaticBinding>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a DHCP server&#x27;s static binding (asynchronously)
     * Update a specific static binding of a given local DHCP server.
     * @param body  (required)
     * @param serverId  (required)
     * @param bindingId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateDhcpStaticBindingAsync(DhcpStaticBinding body, String serverId, String bindingId, final ApiCallback<DhcpStaticBinding> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateDhcpStaticBindingValidateBeforeCall(body, serverId, bindingId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DhcpStaticBinding>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
