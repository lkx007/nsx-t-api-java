/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ApiError;
import io.swagger.client.model.PacketCaptureRequest;
import io.swagger.client.model.PacketCaptureSession;
import io.swagger.client.model.PacketCaptureSessionList;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ManagementPlaneApiTroubleshootingAndMonitoringPacketCaptureApi {
    private ApiClient apiClient;

    public ManagementPlaneApiTroubleshootingAndMonitoringPacketCaptureApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ManagementPlaneApiTroubleshootingAndMonitoringPacketCaptureApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createPacketCaptureSession
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createPacketCaptureSessionCall(PacketCaptureRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/pktcap/session";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createPacketCaptureSessionValidateBeforeCall(PacketCaptureRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createPacketCaptureSession(Async)");
        }
        
        com.squareup.okhttp.Call call = createPacketCaptureSessionCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create an new packet capture session
     * Create an new packet capture session on given node with specified options 
     * @param body  (required)
     * @return PacketCaptureSession
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PacketCaptureSession createPacketCaptureSession(PacketCaptureRequest body) throws ApiException {
        ApiResponse<PacketCaptureSession> resp = createPacketCaptureSessionWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create an new packet capture session
     * Create an new packet capture session on given node with specified options 
     * @param body  (required)
     * @return ApiResponse&lt;PacketCaptureSession&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PacketCaptureSession> createPacketCaptureSessionWithHttpInfo(PacketCaptureRequest body) throws ApiException {
        com.squareup.okhttp.Call call = createPacketCaptureSessionValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<PacketCaptureSession>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create an new packet capture session (asynchronously)
     * Create an new packet capture session on given node with specified options 
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createPacketCaptureSessionAsync(PacketCaptureRequest body, final ApiCallback<PacketCaptureSession> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createPacketCaptureSessionValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PacketCaptureSession>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteAllCaptureSessionsDelete
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteAllCaptureSessionsDeleteCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pktcap/sessions?action=delete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteAllCaptureSessionsDeleteValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = deleteAllCaptureSessionsDeleteCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete all the packet capture sessions
     * Delete all the packet capture sessions. 
     * @return PacketCaptureSessionList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PacketCaptureSessionList deleteAllCaptureSessionsDelete() throws ApiException {
        ApiResponse<PacketCaptureSessionList> resp = deleteAllCaptureSessionsDeleteWithHttpInfo();
        return resp.getData();
    }

    /**
     * Delete all the packet capture sessions
     * Delete all the packet capture sessions. 
     * @return ApiResponse&lt;PacketCaptureSessionList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PacketCaptureSessionList> deleteAllCaptureSessionsDeleteWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = deleteAllCaptureSessionsDeleteValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<PacketCaptureSessionList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete all the packet capture sessions (asynchronously)
     * Delete all the packet capture sessions. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteAllCaptureSessionsDeleteAsync(final ApiCallback<PacketCaptureSessionList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteAllCaptureSessionsDeleteValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PacketCaptureSessionList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deletePacketCaptureSessionDelete
     * @param sessionId Packet capture session id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deletePacketCaptureSessionDeleteCall(String sessionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pktcap/session/{session-id}?action=delete"
            .replaceAll("\\{" + "session-id" + "\\}", apiClient.escapeString(sessionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deletePacketCaptureSessionDeleteValidateBeforeCall(String sessionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling deletePacketCaptureSessionDelete(Async)");
        }
        
        com.squareup.okhttp.Call call = deletePacketCaptureSessionDeleteCall(sessionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete the packet capture session by session id.
     * Before calling this method, terminate any running capture session. 
     * @param sessionId Packet capture session id (required)
     * @return PacketCaptureSession
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PacketCaptureSession deletePacketCaptureSessionDelete(String sessionId) throws ApiException {
        ApiResponse<PacketCaptureSession> resp = deletePacketCaptureSessionDeleteWithHttpInfo(sessionId);
        return resp.getData();
    }

    /**
     * Delete the packet capture session by session id.
     * Before calling this method, terminate any running capture session. 
     * @param sessionId Packet capture session id (required)
     * @return ApiResponse&lt;PacketCaptureSession&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PacketCaptureSession> deletePacketCaptureSessionDeleteWithHttpInfo(String sessionId) throws ApiException {
        com.squareup.okhttp.Call call = deletePacketCaptureSessionDeleteValidateBeforeCall(sessionId, null, null);
        Type localVarReturnType = new TypeToken<PacketCaptureSession>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete the packet capture session by session id. (asynchronously)
     * Before calling this method, terminate any running capture session. 
     * @param sessionId Packet capture session id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deletePacketCaptureSessionDeleteAsync(String sessionId, final ApiCallback<PacketCaptureSession> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deletePacketCaptureSessionDeleteValidateBeforeCall(sessionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PacketCaptureSession>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listPacketCaptureSessions
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listPacketCaptureSessionsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pktcap/sessions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listPacketCaptureSessionsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listPacketCaptureSessionsCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the information of all packet capture sessions
     * Get the information of all packet capture sessions. 
     * @return PacketCaptureSessionList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PacketCaptureSessionList listPacketCaptureSessions() throws ApiException {
        ApiResponse<PacketCaptureSessionList> resp = listPacketCaptureSessionsWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get the information of all packet capture sessions
     * Get the information of all packet capture sessions. 
     * @return ApiResponse&lt;PacketCaptureSessionList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PacketCaptureSessionList> listPacketCaptureSessionsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = listPacketCaptureSessionsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<PacketCaptureSessionList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the information of all packet capture sessions (asynchronously)
     * Get the information of all packet capture sessions. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listPacketCaptureSessionsAsync(final ApiCallback<PacketCaptureSessionList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listPacketCaptureSessionsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PacketCaptureSessionList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for readPacketCaptureSession
     * @param sessionId Packet capture session id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call readPacketCaptureSessionCall(String sessionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pktcap/session/{session-id}"
            .replaceAll("\\{" + "session-id" + "\\}", apiClient.escapeString(sessionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call readPacketCaptureSessionValidateBeforeCall(String sessionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling readPacketCaptureSession(Async)");
        }
        
        com.squareup.okhttp.Call call = readPacketCaptureSessionCall(sessionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the status of packet capture session
     * Get the packet capture status information by session id. 
     * @param sessionId Packet capture session id (required)
     * @return PacketCaptureSession
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PacketCaptureSession readPacketCaptureSession(String sessionId) throws ApiException {
        ApiResponse<PacketCaptureSession> resp = readPacketCaptureSessionWithHttpInfo(sessionId);
        return resp.getData();
    }

    /**
     * Get the status of packet capture session
     * Get the packet capture status information by session id. 
     * @param sessionId Packet capture session id (required)
     * @return ApiResponse&lt;PacketCaptureSession&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PacketCaptureSession> readPacketCaptureSessionWithHttpInfo(String sessionId) throws ApiException {
        com.squareup.okhttp.Call call = readPacketCaptureSessionValidateBeforeCall(sessionId, null, null);
        Type localVarReturnType = new TypeToken<PacketCaptureSession>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the status of packet capture session (asynchronously)
     * Get the packet capture status information by session id. 
     * @param sessionId Packet capture session id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call readPacketCaptureSessionAsync(String sessionId, final ApiCallback<PacketCaptureSession> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = readPacketCaptureSessionValidateBeforeCall(sessionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PacketCaptureSession>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for restartPacketCaptureSessionRestart
     * @param sessionId Packet capture session id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call restartPacketCaptureSessionRestartCall(String sessionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pktcap/session/{session-id}?action=restart"
            .replaceAll("\\{" + "session-id" + "\\}", apiClient.escapeString(sessionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call restartPacketCaptureSessionRestartValidateBeforeCall(String sessionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling restartPacketCaptureSessionRestart(Async)");
        }
        
        com.squareup.okhttp.Call call = restartPacketCaptureSessionRestartCall(sessionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Restart the packet capture session
     * Restart the packet capture session 
     * @param sessionId Packet capture session id (required)
     * @return PacketCaptureSession
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PacketCaptureSession restartPacketCaptureSessionRestart(String sessionId) throws ApiException {
        ApiResponse<PacketCaptureSession> resp = restartPacketCaptureSessionRestartWithHttpInfo(sessionId);
        return resp.getData();
    }

    /**
     * Restart the packet capture session
     * Restart the packet capture session 
     * @param sessionId Packet capture session id (required)
     * @return ApiResponse&lt;PacketCaptureSession&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PacketCaptureSession> restartPacketCaptureSessionRestartWithHttpInfo(String sessionId) throws ApiException {
        com.squareup.okhttp.Call call = restartPacketCaptureSessionRestartValidateBeforeCall(sessionId, null, null);
        Type localVarReturnType = new TypeToken<PacketCaptureSession>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Restart the packet capture session (asynchronously)
     * Restart the packet capture session 
     * @param sessionId Packet capture session id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call restartPacketCaptureSessionRestartAsync(String sessionId, final ApiCallback<PacketCaptureSession> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = restartPacketCaptureSessionRestartValidateBeforeCall(sessionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PacketCaptureSession>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for terminatePacketCaptureSessionTerminate
     * @param sessionId Packet capture session id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call terminatePacketCaptureSessionTerminateCall(String sessionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pktcap/session/{session-id}?action=terminate"
            .replaceAll("\\{" + "session-id" + "\\}", apiClient.escapeString(sessionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call terminatePacketCaptureSessionTerminateValidateBeforeCall(String sessionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling terminatePacketCaptureSessionTerminate(Async)");
        }
        
        com.squareup.okhttp.Call call = terminatePacketCaptureSessionTerminateCall(sessionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Terminate the packet capture session by session id
     * Terminate the packet capture session by session id. 
     * @param sessionId Packet capture session id (required)
     * @return PacketCaptureSession
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PacketCaptureSession terminatePacketCaptureSessionTerminate(String sessionId) throws ApiException {
        ApiResponse<PacketCaptureSession> resp = terminatePacketCaptureSessionTerminateWithHttpInfo(sessionId);
        return resp.getData();
    }

    /**
     * Terminate the packet capture session by session id
     * Terminate the packet capture session by session id. 
     * @param sessionId Packet capture session id (required)
     * @return ApiResponse&lt;PacketCaptureSession&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PacketCaptureSession> terminatePacketCaptureSessionTerminateWithHttpInfo(String sessionId) throws ApiException {
        com.squareup.okhttp.Call call = terminatePacketCaptureSessionTerminateValidateBeforeCall(sessionId, null, null);
        Type localVarReturnType = new TypeToken<PacketCaptureSession>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Terminate the packet capture session by session id (asynchronously)
     * Terminate the packet capture session by session id. 
     * @param sessionId Packet capture session id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call terminatePacketCaptureSessionTerminateAsync(String sessionId, final ApiCallback<PacketCaptureSession> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = terminatePacketCaptureSessionTerminateValidateBeforeCall(sessionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PacketCaptureSession>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
