/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ApiError;
import io.swagger.client.model.MigrationUnitGroup;
import io.swagger.client.model.MigrationUnitGroupAggregateInfoListResult;
import io.swagger.client.model.MigrationUnitGroupListResult;
import io.swagger.client.model.MigrationUnitGroupStatusListResult;
import io.swagger.client.model.MigrationUnitList;
import io.swagger.client.model.MigrationUnitStatusListResult;
import io.swagger.client.model.ReorderMigrationRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ManagementPlaneApiMigrationGroupApi {
    private ApiClient apiClient;

    public ManagementPlaneApiMigrationGroupApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ManagementPlaneApiMigrationGroupApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addMigrationUnitsToGroupAddMigrationUnits
     * @param body  (required)
     * @param groupId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addMigrationUnitsToGroupAddMigrationUnitsCall(MigrationUnitList body, String groupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/migration/migration-unit-groups/{group-id}?action=add_migration_units"
            .replaceAll("\\{" + "group-id" + "\\}", apiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addMigrationUnitsToGroupAddMigrationUnitsValidateBeforeCall(MigrationUnitList body, String groupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addMigrationUnitsToGroupAddMigrationUnits(Async)");
        }
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling addMigrationUnitsToGroupAddMigrationUnits(Async)");
        }
        
        com.squareup.okhttp.Call call = addMigrationUnitsToGroupAddMigrationUnitsCall(body, groupId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add migration units to specified migration unit group
     * Add migration units to specified migration unit group. The migration units will be added at the end of the migration unit list. 
     * @param body  (required)
     * @param groupId  (required)
     * @return MigrationUnitList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MigrationUnitList addMigrationUnitsToGroupAddMigrationUnits(MigrationUnitList body, String groupId) throws ApiException {
        ApiResponse<MigrationUnitList> resp = addMigrationUnitsToGroupAddMigrationUnitsWithHttpInfo(body, groupId);
        return resp.getData();
    }

    /**
     * Add migration units to specified migration unit group
     * Add migration units to specified migration unit group. The migration units will be added at the end of the migration unit list. 
     * @param body  (required)
     * @param groupId  (required)
     * @return ApiResponse&lt;MigrationUnitList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MigrationUnitList> addMigrationUnitsToGroupAddMigrationUnitsWithHttpInfo(MigrationUnitList body, String groupId) throws ApiException {
        com.squareup.okhttp.Call call = addMigrationUnitsToGroupAddMigrationUnitsValidateBeforeCall(body, groupId, null, null);
        Type localVarReturnType = new TypeToken<MigrationUnitList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add migration units to specified migration unit group (asynchronously)
     * Add migration units to specified migration unit group. The migration units will be added at the end of the migration unit list. 
     * @param body  (required)
     * @param groupId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addMigrationUnitsToGroupAddMigrationUnitsAsync(MigrationUnitList body, String groupId, final ApiCallback<MigrationUnitList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addMigrationUnitsToGroupAddMigrationUnitsValidateBeforeCall(body, groupId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MigrationUnitList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createMigrationUnitGroup
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createMigrationUnitGroupCall(MigrationUnitGroup body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/migration/migration-unit-groups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createMigrationUnitGroupValidateBeforeCall(MigrationUnitGroup body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createMigrationUnitGroup(Async)");
        }
        
        com.squareup.okhttp.Call call = createMigrationUnitGroupCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create a group
     * Create a group of migration units. 
     * @param body  (required)
     * @return MigrationUnitGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MigrationUnitGroup createMigrationUnitGroup(MigrationUnitGroup body) throws ApiException {
        ApiResponse<MigrationUnitGroup> resp = createMigrationUnitGroupWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create a group
     * Create a group of migration units. 
     * @param body  (required)
     * @return ApiResponse&lt;MigrationUnitGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MigrationUnitGroup> createMigrationUnitGroupWithHttpInfo(MigrationUnitGroup body) throws ApiException {
        com.squareup.okhttp.Call call = createMigrationUnitGroupValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<MigrationUnitGroup>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a group (asynchronously)
     * Create a group of migration units. 
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createMigrationUnitGroupAsync(MigrationUnitGroup body, final ApiCallback<MigrationUnitGroup> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createMigrationUnitGroupValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MigrationUnitGroup>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteMigrationUnitGroup
     * @param groupId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteMigrationUnitGroupCall(String groupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/migration/migration-unit-groups/{group-id}"
            .replaceAll("\\{" + "group-id" + "\\}", apiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteMigrationUnitGroupValidateBeforeCall(String groupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling deleteMigrationUnitGroup(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteMigrationUnitGroupCall(groupId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete the migration unit group
     * Delete the specified group. NOTE - A group can be deleted only if it is empty. If user tries to delete a group containing one or more migration units, the operation will fail and an error will be returned. 
     * @param groupId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteMigrationUnitGroup(String groupId) throws ApiException {
        deleteMigrationUnitGroupWithHttpInfo(groupId);
    }

    /**
     * Delete the migration unit group
     * Delete the specified group. NOTE - A group can be deleted only if it is empty. If user tries to delete a group containing one or more migration units, the operation will fail and an error will be returned. 
     * @param groupId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteMigrationUnitGroupWithHttpInfo(String groupId) throws ApiException {
        com.squareup.okhttp.Call call = deleteMigrationUnitGroupValidateBeforeCall(groupId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete the migration unit group (asynchronously)
     * Delete the specified group. NOTE - A group can be deleted only if it is empty. If user tries to delete a group containing one or more migration units, the operation will fail and an error will be returned. 
     * @param groupId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteMigrationUnitGroupAsync(String groupId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteMigrationUnitGroupValidateBeforeCall(groupId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getMigrationUnitGroup
     * @param groupId  (required)
     * @param summary Flag indicating whether to return the summary (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getMigrationUnitGroupCall(String groupId, Boolean summary, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/migration/migration-unit-groups/{group-id}"
            .replaceAll("\\{" + "group-id" + "\\}", apiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (summary != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("summary", summary));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getMigrationUnitGroupValidateBeforeCall(String groupId, Boolean summary, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling getMigrationUnitGroup(Async)");
        }
        
        com.squareup.okhttp.Call call = getMigrationUnitGroupCall(groupId, summary, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Return migration unit group information
     * Returns information about a specific migration unit group in the migration plan.  If request parameter summary is set to true, then only count of migration units will be returned, migration units list will be empty. 
     * @param groupId  (required)
     * @param summary Flag indicating whether to return the summary (optional)
     * @return MigrationUnitGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MigrationUnitGroup getMigrationUnitGroup(String groupId, Boolean summary) throws ApiException {
        ApiResponse<MigrationUnitGroup> resp = getMigrationUnitGroupWithHttpInfo(groupId, summary);
        return resp.getData();
    }

    /**
     * Return migration unit group information
     * Returns information about a specific migration unit group in the migration plan.  If request parameter summary is set to true, then only count of migration units will be returned, migration units list will be empty. 
     * @param groupId  (required)
     * @param summary Flag indicating whether to return the summary (optional)
     * @return ApiResponse&lt;MigrationUnitGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MigrationUnitGroup> getMigrationUnitGroupWithHttpInfo(String groupId, Boolean summary) throws ApiException {
        com.squareup.okhttp.Call call = getMigrationUnitGroupValidateBeforeCall(groupId, summary, null, null);
        Type localVarReturnType = new TypeToken<MigrationUnitGroup>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Return migration unit group information (asynchronously)
     * Returns information about a specific migration unit group in the migration plan.  If request parameter summary is set to true, then only count of migration units will be returned, migration units list will be empty. 
     * @param groupId  (required)
     * @param summary Flag indicating whether to return the summary (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getMigrationUnitGroupAsync(String groupId, Boolean summary, final ApiCallback<MigrationUnitGroup> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getMigrationUnitGroupValidateBeforeCall(groupId, summary, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MigrationUnitGroup>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getMigrationUnitGroupAggregateInfo
     * @param componentType Component type based on which migration unit groups to be filtered (optional)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param summary Flag indicating whether to return summary (optional)
     * @param sync Synchronize before returning migration unit groups (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getMigrationUnitGroupAggregateInfoCall(String componentType, String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, Boolean summary, Boolean sync, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/migration/migration-unit-groups/aggregate-info";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (componentType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("component_type", componentType));
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (includedFields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("included_fields", includedFields));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page_size", pageSize));
        if (sortAscending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_ascending", sortAscending));
        if (sortBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_by", sortBy));
        if (summary != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("summary", summary));
        if (sync != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sync", sync));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getMigrationUnitGroupAggregateInfoValidateBeforeCall(String componentType, String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, Boolean summary, Boolean sync, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getMigrationUnitGroupAggregateInfoCall(componentType, cursor, includedFields, pageSize, sortAscending, sortBy, summary, sync, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Return aggregate information of all migration unit groups
     * Return information of all migration unit groups in the migration plan.  If request parameter summary is set to true, then only count of migration units will be returned, migration units list will be empty. If request parameter component type is specified, then all migration unit groups for that component will be returned. 
     * @param componentType Component type based on which migration unit groups to be filtered (optional)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param summary Flag indicating whether to return summary (optional)
     * @param sync Synchronize before returning migration unit groups (optional)
     * @return MigrationUnitGroupAggregateInfoListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MigrationUnitGroupAggregateInfoListResult getMigrationUnitGroupAggregateInfo(String componentType, String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, Boolean summary, Boolean sync) throws ApiException {
        ApiResponse<MigrationUnitGroupAggregateInfoListResult> resp = getMigrationUnitGroupAggregateInfoWithHttpInfo(componentType, cursor, includedFields, pageSize, sortAscending, sortBy, summary, sync);
        return resp.getData();
    }

    /**
     * Return aggregate information of all migration unit groups
     * Return information of all migration unit groups in the migration plan.  If request parameter summary is set to true, then only count of migration units will be returned, migration units list will be empty. If request parameter component type is specified, then all migration unit groups for that component will be returned. 
     * @param componentType Component type based on which migration unit groups to be filtered (optional)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param summary Flag indicating whether to return summary (optional)
     * @param sync Synchronize before returning migration unit groups (optional)
     * @return ApiResponse&lt;MigrationUnitGroupAggregateInfoListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MigrationUnitGroupAggregateInfoListResult> getMigrationUnitGroupAggregateInfoWithHttpInfo(String componentType, String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, Boolean summary, Boolean sync) throws ApiException {
        com.squareup.okhttp.Call call = getMigrationUnitGroupAggregateInfoValidateBeforeCall(componentType, cursor, includedFields, pageSize, sortAscending, sortBy, summary, sync, null, null);
        Type localVarReturnType = new TypeToken<MigrationUnitGroupAggregateInfoListResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Return aggregate information of all migration unit groups (asynchronously)
     * Return information of all migration unit groups in the migration plan.  If request parameter summary is set to true, then only count of migration units will be returned, migration units list will be empty. If request parameter component type is specified, then all migration unit groups for that component will be returned. 
     * @param componentType Component type based on which migration unit groups to be filtered (optional)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param summary Flag indicating whether to return summary (optional)
     * @param sync Synchronize before returning migration unit groups (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getMigrationUnitGroupAggregateInfoAsync(String componentType, String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, Boolean summary, Boolean sync, final ApiCallback<MigrationUnitGroupAggregateInfoListResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getMigrationUnitGroupAggregateInfoValidateBeforeCall(componentType, cursor, includedFields, pageSize, sortAscending, sortBy, summary, sync, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MigrationUnitGroupAggregateInfoListResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getMigrationUnitGroupStatus
     * @param groupId  (required)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param hasErrors Flag to indicate whether to return only migration units with errors (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getMigrationUnitGroupStatusCall(String groupId, String cursor, Boolean hasErrors, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/migration/migration-unit-groups/{group-id}/status"
            .replaceAll("\\{" + "group-id" + "\\}", apiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (hasErrors != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("has_errors", hasErrors));
        if (includedFields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("included_fields", includedFields));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page_size", pageSize));
        if (sortAscending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_ascending", sortAscending));
        if (sortBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_by", sortBy));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getMigrationUnitGroupStatusValidateBeforeCall(String groupId, String cursor, Boolean hasErrors, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling getMigrationUnitGroupStatus(Async)");
        }
        
        com.squareup.okhttp.Call call = getMigrationUnitGroupStatusCall(groupId, cursor, hasErrors, includedFields, pageSize, sortAscending, sortBy, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get migration status for group
     * Get migration status for migration units in the specified group. User can specify whether to show only the migration units with errors. 
     * @param groupId  (required)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param hasErrors Flag to indicate whether to return only migration units with errors (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @return MigrationUnitStatusListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MigrationUnitStatusListResult getMigrationUnitGroupStatus(String groupId, String cursor, Boolean hasErrors, String includedFields, Long pageSize, Boolean sortAscending, String sortBy) throws ApiException {
        ApiResponse<MigrationUnitStatusListResult> resp = getMigrationUnitGroupStatusWithHttpInfo(groupId, cursor, hasErrors, includedFields, pageSize, sortAscending, sortBy);
        return resp.getData();
    }

    /**
     * Get migration status for group
     * Get migration status for migration units in the specified group. User can specify whether to show only the migration units with errors. 
     * @param groupId  (required)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param hasErrors Flag to indicate whether to return only migration units with errors (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @return ApiResponse&lt;MigrationUnitStatusListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MigrationUnitStatusListResult> getMigrationUnitGroupStatusWithHttpInfo(String groupId, String cursor, Boolean hasErrors, String includedFields, Long pageSize, Boolean sortAscending, String sortBy) throws ApiException {
        com.squareup.okhttp.Call call = getMigrationUnitGroupStatusValidateBeforeCall(groupId, cursor, hasErrors, includedFields, pageSize, sortAscending, sortBy, null, null);
        Type localVarReturnType = new TypeToken<MigrationUnitStatusListResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get migration status for group (asynchronously)
     * Get migration status for migration units in the specified group. User can specify whether to show only the migration units with errors. 
     * @param groupId  (required)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param hasErrors Flag to indicate whether to return only migration units with errors (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getMigrationUnitGroupStatusAsync(String groupId, String cursor, Boolean hasErrors, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, final ApiCallback<MigrationUnitStatusListResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getMigrationUnitGroupStatusValidateBeforeCall(groupId, cursor, hasErrors, includedFields, pageSize, sortAscending, sortBy, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MigrationUnitStatusListResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getMigrationUnitGroups
     * @param componentType Component type based on which migration unit groups to be filtered (optional)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param summary Flag indicating whether to return summary (optional)
     * @param sync Synchronize before returning migration unit groups (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getMigrationUnitGroupsCall(String componentType, String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, Boolean summary, Boolean sync, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/migration/migration-unit-groups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (componentType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("component_type", componentType));
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (includedFields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("included_fields", includedFields));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page_size", pageSize));
        if (sortAscending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_ascending", sortAscending));
        if (sortBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_by", sortBy));
        if (summary != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("summary", summary));
        if (sync != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sync", sync));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getMigrationUnitGroupsValidateBeforeCall(String componentType, String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, Boolean summary, Boolean sync, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getMigrationUnitGroupsCall(componentType, cursor, includedFields, pageSize, sortAscending, sortBy, summary, sync, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Return information of all migration unit groups
     * Return information of all migration unit groups in the migration plan.  If request parameter summary is set to true, then only count of migration units will be returned, migration units list will be empty. If request parameter component type is specified, then all migration unit groups for that component will be returned. 
     * @param componentType Component type based on which migration unit groups to be filtered (optional)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param summary Flag indicating whether to return summary (optional)
     * @param sync Synchronize before returning migration unit groups (optional)
     * @return MigrationUnitGroupListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MigrationUnitGroupListResult getMigrationUnitGroups(String componentType, String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, Boolean summary, Boolean sync) throws ApiException {
        ApiResponse<MigrationUnitGroupListResult> resp = getMigrationUnitGroupsWithHttpInfo(componentType, cursor, includedFields, pageSize, sortAscending, sortBy, summary, sync);
        return resp.getData();
    }

    /**
     * Return information of all migration unit groups
     * Return information of all migration unit groups in the migration plan.  If request parameter summary is set to true, then only count of migration units will be returned, migration units list will be empty. If request parameter component type is specified, then all migration unit groups for that component will be returned. 
     * @param componentType Component type based on which migration unit groups to be filtered (optional)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param summary Flag indicating whether to return summary (optional)
     * @param sync Synchronize before returning migration unit groups (optional)
     * @return ApiResponse&lt;MigrationUnitGroupListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MigrationUnitGroupListResult> getMigrationUnitGroupsWithHttpInfo(String componentType, String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, Boolean summary, Boolean sync) throws ApiException {
        com.squareup.okhttp.Call call = getMigrationUnitGroupsValidateBeforeCall(componentType, cursor, includedFields, pageSize, sortAscending, sortBy, summary, sync, null, null);
        Type localVarReturnType = new TypeToken<MigrationUnitGroupListResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Return information of all migration unit groups (asynchronously)
     * Return information of all migration unit groups in the migration plan.  If request parameter summary is set to true, then only count of migration units will be returned, migration units list will be empty. If request parameter component type is specified, then all migration unit groups for that component will be returned. 
     * @param componentType Component type based on which migration unit groups to be filtered (optional)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param summary Flag indicating whether to return summary (optional)
     * @param sync Synchronize before returning migration unit groups (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getMigrationUnitGroupsAsync(String componentType, String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, Boolean summary, Boolean sync, final ApiCallback<MigrationUnitGroupListResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getMigrationUnitGroupsValidateBeforeCall(componentType, cursor, includedFields, pageSize, sortAscending, sortBy, summary, sync, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MigrationUnitGroupListResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getMigrationUnitGroupsStatus
     * @param componentType Component type based on which migration unit groups to be filtered (optional)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getMigrationUnitGroupsStatusCall(String componentType, String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/migration/migration-unit-groups-status";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (componentType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("component_type", componentType));
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (includedFields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("included_fields", includedFields));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page_size", pageSize));
        if (sortAscending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_ascending", sortAscending));
        if (sortBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_by", sortBy));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getMigrationUnitGroupsStatusValidateBeforeCall(String componentType, String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getMigrationUnitGroupsStatusCall(componentType, cursor, includedFields, pageSize, sortAscending, sortBy, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get migration status for migration unit groups
     * Get migration status for migration unit groups
     * @param componentType Component type based on which migration unit groups to be filtered (optional)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @return MigrationUnitGroupStatusListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MigrationUnitGroupStatusListResult getMigrationUnitGroupsStatus(String componentType, String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy) throws ApiException {
        ApiResponse<MigrationUnitGroupStatusListResult> resp = getMigrationUnitGroupsStatusWithHttpInfo(componentType, cursor, includedFields, pageSize, sortAscending, sortBy);
        return resp.getData();
    }

    /**
     * Get migration status for migration unit groups
     * Get migration status for migration unit groups
     * @param componentType Component type based on which migration unit groups to be filtered (optional)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @return ApiResponse&lt;MigrationUnitGroupStatusListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MigrationUnitGroupStatusListResult> getMigrationUnitGroupsStatusWithHttpInfo(String componentType, String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy) throws ApiException {
        com.squareup.okhttp.Call call = getMigrationUnitGroupsStatusValidateBeforeCall(componentType, cursor, includedFields, pageSize, sortAscending, sortBy, null, null);
        Type localVarReturnType = new TypeToken<MigrationUnitGroupStatusListResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get migration status for migration unit groups (asynchronously)
     * Get migration status for migration unit groups
     * @param componentType Component type based on which migration unit groups to be filtered (optional)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getMigrationUnitGroupsStatusAsync(String componentType, String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, final ApiCallback<MigrationUnitGroupStatusListResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getMigrationUnitGroupsStatusValidateBeforeCall(componentType, cursor, includedFields, pageSize, sortAscending, sortBy, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MigrationUnitGroupStatusListResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for reorderMigrationUnitGroupReorder
     * @param body  (required)
     * @param groupId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call reorderMigrationUnitGroupReorderCall(ReorderMigrationRequest body, String groupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/migration/migration-unit-groups/{group-id}?action=reorder"
            .replaceAll("\\{" + "group-id" + "\\}", apiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call reorderMigrationUnitGroupReorderValidateBeforeCall(ReorderMigrationRequest body, String groupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling reorderMigrationUnitGroupReorder(Async)");
        }
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling reorderMigrationUnitGroupReorder(Async)");
        }
        
        com.squareup.okhttp.Call call = reorderMigrationUnitGroupReorderCall(body, groupId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Reorder migration unit group
     * Reorder an migration unit group by placing it before/after the specified migration unit group. 
     * @param body  (required)
     * @param groupId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void reorderMigrationUnitGroupReorder(ReorderMigrationRequest body, String groupId) throws ApiException {
        reorderMigrationUnitGroupReorderWithHttpInfo(body, groupId);
    }

    /**
     * Reorder migration unit group
     * Reorder an migration unit group by placing it before/after the specified migration unit group. 
     * @param body  (required)
     * @param groupId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> reorderMigrationUnitGroupReorderWithHttpInfo(ReorderMigrationRequest body, String groupId) throws ApiException {
        com.squareup.okhttp.Call call = reorderMigrationUnitGroupReorderValidateBeforeCall(body, groupId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Reorder migration unit group (asynchronously)
     * Reorder an migration unit group by placing it before/after the specified migration unit group. 
     * @param body  (required)
     * @param groupId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call reorderMigrationUnitGroupReorderAsync(ReorderMigrationRequest body, String groupId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = reorderMigrationUnitGroupReorderValidateBeforeCall(body, groupId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for reorderMigrationUnitReorder
     * @param body  (required)
     * @param groupId  (required)
     * @param migrationUnitId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call reorderMigrationUnitReorderCall(ReorderMigrationRequest body, String groupId, String migrationUnitId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/migration/migration-unit-groups/{group-id}/migration-unit/{migration-unit-id}?action=reorder"
            .replaceAll("\\{" + "group-id" + "\\}", apiClient.escapeString(groupId.toString()))
            .replaceAll("\\{" + "migration-unit-id" + "\\}", apiClient.escapeString(migrationUnitId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call reorderMigrationUnitReorderValidateBeforeCall(ReorderMigrationRequest body, String groupId, String migrationUnitId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling reorderMigrationUnitReorder(Async)");
        }
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling reorderMigrationUnitReorder(Async)");
        }
        // verify the required parameter 'migrationUnitId' is set
        if (migrationUnitId == null) {
            throw new ApiException("Missing the required parameter 'migrationUnitId' when calling reorderMigrationUnitReorder(Async)");
        }
        
        com.squareup.okhttp.Call call = reorderMigrationUnitReorderCall(body, groupId, migrationUnitId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Reorder an migration unit within the migration unit group
     * Reorder an migration unit within the migration unit group by placing it before/after the specified migration unit 
     * @param body  (required)
     * @param groupId  (required)
     * @param migrationUnitId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void reorderMigrationUnitReorder(ReorderMigrationRequest body, String groupId, String migrationUnitId) throws ApiException {
        reorderMigrationUnitReorderWithHttpInfo(body, groupId, migrationUnitId);
    }

    /**
     * Reorder an migration unit within the migration unit group
     * Reorder an migration unit within the migration unit group by placing it before/after the specified migration unit 
     * @param body  (required)
     * @param groupId  (required)
     * @param migrationUnitId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> reorderMigrationUnitReorderWithHttpInfo(ReorderMigrationRequest body, String groupId, String migrationUnitId) throws ApiException {
        com.squareup.okhttp.Call call = reorderMigrationUnitReorderValidateBeforeCall(body, groupId, migrationUnitId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Reorder an migration unit within the migration unit group (asynchronously)
     * Reorder an migration unit within the migration unit group by placing it before/after the specified migration unit 
     * @param body  (required)
     * @param groupId  (required)
     * @param migrationUnitId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call reorderMigrationUnitReorderAsync(ReorderMigrationRequest body, String groupId, String migrationUnitId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = reorderMigrationUnitReorderValidateBeforeCall(body, groupId, migrationUnitId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateMigrationUnitGroup
     * @param body  (required)
     * @param groupId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateMigrationUnitGroupCall(MigrationUnitGroup body, String groupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/migration/migration-unit-groups/{group-id}"
            .replaceAll("\\{" + "group-id" + "\\}", apiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateMigrationUnitGroupValidateBeforeCall(MigrationUnitGroup body, String groupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateMigrationUnitGroup(Async)");
        }
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling updateMigrationUnitGroup(Async)");
        }
        
        com.squareup.okhttp.Call call = updateMigrationUnitGroupCall(body, groupId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update the migration unit group
     * Update the specified migration unit group. Removal of migration units from the group using this is not allowed. An error will be returned in that case. 
     * @param body  (required)
     * @param groupId  (required)
     * @return MigrationUnitGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MigrationUnitGroup updateMigrationUnitGroup(MigrationUnitGroup body, String groupId) throws ApiException {
        ApiResponse<MigrationUnitGroup> resp = updateMigrationUnitGroupWithHttpInfo(body, groupId);
        return resp.getData();
    }

    /**
     * Update the migration unit group
     * Update the specified migration unit group. Removal of migration units from the group using this is not allowed. An error will be returned in that case. 
     * @param body  (required)
     * @param groupId  (required)
     * @return ApiResponse&lt;MigrationUnitGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MigrationUnitGroup> updateMigrationUnitGroupWithHttpInfo(MigrationUnitGroup body, String groupId) throws ApiException {
        com.squareup.okhttp.Call call = updateMigrationUnitGroupValidateBeforeCall(body, groupId, null, null);
        Type localVarReturnType = new TypeToken<MigrationUnitGroup>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update the migration unit group (asynchronously)
     * Update the specified migration unit group. Removal of migration units from the group using this is not allowed. An error will be returned in that case. 
     * @param body  (required)
     * @param groupId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateMigrationUnitGroupAsync(MigrationUnitGroup body, String groupId, final ApiCallback<MigrationUnitGroup> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateMigrationUnitGroupValidateBeforeCall(body, groupId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MigrationUnitGroup>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
