/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ApiError;
import io.swagger.client.model.BridgeEndpointProfile;
import io.swagger.client.model.BridgeEndpointProfileListResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ManagementPlaneApiNetworkTransportBridgeEndpointProfilesApi {
    private ApiClient apiClient;

    public ManagementPlaneApiNetworkTransportBridgeEndpointProfilesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ManagementPlaneApiNetworkTransportBridgeEndpointProfilesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createBridgeEndpointProfile
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createBridgeEndpointProfileCall(BridgeEndpointProfile body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/bridge-endpoint-profiles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createBridgeEndpointProfileValidateBeforeCall(BridgeEndpointProfile body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createBridgeEndpointProfile(Async)");
        }
        
        com.squareup.okhttp.Call call = createBridgeEndpointProfileCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create a Bridge Endpoint Profile
     * Creates a Bridge Endpoint Profile. Profile contains edge cluster id, indexes of the member nodes, fialover mode and high availability mode for a Bridge EndPoint 
     * @param body  (required)
     * @return BridgeEndpointProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BridgeEndpointProfile createBridgeEndpointProfile(BridgeEndpointProfile body) throws ApiException {
        ApiResponse<BridgeEndpointProfile> resp = createBridgeEndpointProfileWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create a Bridge Endpoint Profile
     * Creates a Bridge Endpoint Profile. Profile contains edge cluster id, indexes of the member nodes, fialover mode and high availability mode for a Bridge EndPoint 
     * @param body  (required)
     * @return ApiResponse&lt;BridgeEndpointProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BridgeEndpointProfile> createBridgeEndpointProfileWithHttpInfo(BridgeEndpointProfile body) throws ApiException {
        com.squareup.okhttp.Call call = createBridgeEndpointProfileValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<BridgeEndpointProfile>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a Bridge Endpoint Profile (asynchronously)
     * Creates a Bridge Endpoint Profile. Profile contains edge cluster id, indexes of the member nodes, fialover mode and high availability mode for a Bridge EndPoint 
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createBridgeEndpointProfileAsync(BridgeEndpointProfile body, final ApiCallback<BridgeEndpointProfile> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createBridgeEndpointProfileValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BridgeEndpointProfile>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteBridgeEndpointProfile
     * @param bridgeendpointprofileId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteBridgeEndpointProfileCall(String bridgeendpointprofileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/bridge-endpoint-profiles/{bridgeendpointprofile-id}"
            .replaceAll("\\{" + "bridgeendpointprofile-id" + "\\}", apiClient.escapeString(bridgeendpointprofileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteBridgeEndpointProfileValidateBeforeCall(String bridgeendpointprofileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'bridgeendpointprofileId' is set
        if (bridgeendpointprofileId == null) {
            throw new ApiException("Missing the required parameter 'bridgeendpointprofileId' when calling deleteBridgeEndpointProfile(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteBridgeEndpointProfileCall(bridgeendpointprofileId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete a Bridge Endpoint Profile
     * Deletes the specified Bridge Endpoint Profile.
     * @param bridgeendpointprofileId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteBridgeEndpointProfile(String bridgeendpointprofileId) throws ApiException {
        deleteBridgeEndpointProfileWithHttpInfo(bridgeendpointprofileId);
    }

    /**
     * Delete a Bridge Endpoint Profile
     * Deletes the specified Bridge Endpoint Profile.
     * @param bridgeendpointprofileId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteBridgeEndpointProfileWithHttpInfo(String bridgeendpointprofileId) throws ApiException {
        com.squareup.okhttp.Call call = deleteBridgeEndpointProfileValidateBeforeCall(bridgeendpointprofileId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a Bridge Endpoint Profile (asynchronously)
     * Deletes the specified Bridge Endpoint Profile.
     * @param bridgeendpointprofileId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteBridgeEndpointProfileAsync(String bridgeendpointprofileId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteBridgeEndpointProfileValidateBeforeCall(bridgeendpointprofileId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getBridgeEndpointProfile
     * @param bridgeendpointprofileId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBridgeEndpointProfileCall(String bridgeendpointprofileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/bridge-endpoint-profiles/{bridgeendpointprofile-id}"
            .replaceAll("\\{" + "bridgeendpointprofile-id" + "\\}", apiClient.escapeString(bridgeendpointprofileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBridgeEndpointProfileValidateBeforeCall(String bridgeendpointprofileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'bridgeendpointprofileId' is set
        if (bridgeendpointprofileId == null) {
            throw new ApiException("Missing the required parameter 'bridgeendpointprofileId' when calling getBridgeEndpointProfile(Async)");
        }
        
        com.squareup.okhttp.Call call = getBridgeEndpointProfileCall(bridgeendpointprofileId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Information about a bridge endpoint Profile
     * Returns information about a specified bridge endpoint profile.
     * @param bridgeendpointprofileId  (required)
     * @return BridgeEndpointProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BridgeEndpointProfile getBridgeEndpointProfile(String bridgeendpointprofileId) throws ApiException {
        ApiResponse<BridgeEndpointProfile> resp = getBridgeEndpointProfileWithHttpInfo(bridgeendpointprofileId);
        return resp.getData();
    }

    /**
     * Get Information about a bridge endpoint Profile
     * Returns information about a specified bridge endpoint profile.
     * @param bridgeendpointprofileId  (required)
     * @return ApiResponse&lt;BridgeEndpointProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BridgeEndpointProfile> getBridgeEndpointProfileWithHttpInfo(String bridgeendpointprofileId) throws ApiException {
        com.squareup.okhttp.Call call = getBridgeEndpointProfileValidateBeforeCall(bridgeendpointprofileId, null, null);
        Type localVarReturnType = new TypeToken<BridgeEndpointProfile>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Information about a bridge endpoint Profile (asynchronously)
     * Returns information about a specified bridge endpoint profile.
     * @param bridgeendpointprofileId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBridgeEndpointProfileAsync(String bridgeendpointprofileId, final ApiCallback<BridgeEndpointProfile> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBridgeEndpointProfileValidateBeforeCall(bridgeendpointprofileId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BridgeEndpointProfile>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listBridgeEndpointProfiles
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param edgeClusterId Edge Cluster Identifier (optional)
     * @param failoverMode  (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listBridgeEndpointProfilesCall(String cursor, String edgeClusterId, String failoverMode, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/bridge-endpoint-profiles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (edgeClusterId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("edge_cluster_id", edgeClusterId));
        if (failoverMode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("failover_mode", failoverMode));
        if (includedFields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("included_fields", includedFields));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page_size", pageSize));
        if (sortAscending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_ascending", sortAscending));
        if (sortBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_by", sortBy));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listBridgeEndpointProfilesValidateBeforeCall(String cursor, String edgeClusterId, String failoverMode, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listBridgeEndpointProfilesCall(cursor, edgeClusterId, failoverMode, includedFields, pageSize, sortAscending, sortBy, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List All Bridge Endpoint Profiles
     * Returns information about all configured bridge endoint profiles 
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param edgeClusterId Edge Cluster Identifier (optional)
     * @param failoverMode  (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @return BridgeEndpointProfileListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BridgeEndpointProfileListResult listBridgeEndpointProfiles(String cursor, String edgeClusterId, String failoverMode, String includedFields, Long pageSize, Boolean sortAscending, String sortBy) throws ApiException {
        ApiResponse<BridgeEndpointProfileListResult> resp = listBridgeEndpointProfilesWithHttpInfo(cursor, edgeClusterId, failoverMode, includedFields, pageSize, sortAscending, sortBy);
        return resp.getData();
    }

    /**
     * List All Bridge Endpoint Profiles
     * Returns information about all configured bridge endoint profiles 
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param edgeClusterId Edge Cluster Identifier (optional)
     * @param failoverMode  (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @return ApiResponse&lt;BridgeEndpointProfileListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BridgeEndpointProfileListResult> listBridgeEndpointProfilesWithHttpInfo(String cursor, String edgeClusterId, String failoverMode, String includedFields, Long pageSize, Boolean sortAscending, String sortBy) throws ApiException {
        com.squareup.okhttp.Call call = listBridgeEndpointProfilesValidateBeforeCall(cursor, edgeClusterId, failoverMode, includedFields, pageSize, sortAscending, sortBy, null, null);
        Type localVarReturnType = new TypeToken<BridgeEndpointProfileListResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List All Bridge Endpoint Profiles (asynchronously)
     * Returns information about all configured bridge endoint profiles 
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param edgeClusterId Edge Cluster Identifier (optional)
     * @param failoverMode  (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listBridgeEndpointProfilesAsync(String cursor, String edgeClusterId, String failoverMode, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, final ApiCallback<BridgeEndpointProfileListResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listBridgeEndpointProfilesValidateBeforeCall(cursor, edgeClusterId, failoverMode, includedFields, pageSize, sortAscending, sortBy, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BridgeEndpointProfileListResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateBridgeEndpointProfile
     * @param body  (required)
     * @param bridgeendpointprofileId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateBridgeEndpointProfileCall(BridgeEndpointProfile body, String bridgeendpointprofileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/bridge-endpoint-profiles/{bridgeendpointprofile-id}"
            .replaceAll("\\{" + "bridgeendpointprofile-id" + "\\}", apiClient.escapeString(bridgeendpointprofileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateBridgeEndpointProfileValidateBeforeCall(BridgeEndpointProfile body, String bridgeendpointprofileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateBridgeEndpointProfile(Async)");
        }
        // verify the required parameter 'bridgeendpointprofileId' is set
        if (bridgeendpointprofileId == null) {
            throw new ApiException("Missing the required parameter 'bridgeendpointprofileId' when calling updateBridgeEndpointProfile(Async)");
        }
        
        com.squareup.okhttp.Call call = updateBridgeEndpointProfileCall(body, bridgeendpointprofileId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update a Bridge Endpoint Profile
     * Modifies a existing bridge endpoint profile. 
     * @param body  (required)
     * @param bridgeendpointprofileId  (required)
     * @return BridgeEndpointProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BridgeEndpointProfile updateBridgeEndpointProfile(BridgeEndpointProfile body, String bridgeendpointprofileId) throws ApiException {
        ApiResponse<BridgeEndpointProfile> resp = updateBridgeEndpointProfileWithHttpInfo(body, bridgeendpointprofileId);
        return resp.getData();
    }

    /**
     * Update a Bridge Endpoint Profile
     * Modifies a existing bridge endpoint profile. 
     * @param body  (required)
     * @param bridgeendpointprofileId  (required)
     * @return ApiResponse&lt;BridgeEndpointProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BridgeEndpointProfile> updateBridgeEndpointProfileWithHttpInfo(BridgeEndpointProfile body, String bridgeendpointprofileId) throws ApiException {
        com.squareup.okhttp.Call call = updateBridgeEndpointProfileValidateBeforeCall(body, bridgeendpointprofileId, null, null);
        Type localVarReturnType = new TypeToken<BridgeEndpointProfile>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a Bridge Endpoint Profile (asynchronously)
     * Modifies a existing bridge endpoint profile. 
     * @param body  (required)
     * @param bridgeendpointprofileId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateBridgeEndpointProfileAsync(BridgeEndpointProfile body, String bridgeendpointprofileId, final ApiCallback<BridgeEndpointProfile> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateBridgeEndpointProfileValidateBeforeCall(body, bridgeendpointprofileId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BridgeEndpointProfile>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
