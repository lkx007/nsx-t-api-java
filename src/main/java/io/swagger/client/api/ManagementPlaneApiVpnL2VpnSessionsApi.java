/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ApiError;
import io.swagger.client.model.L2VpnSession;
import io.swagger.client.model.L2VpnSessionListResult;
import io.swagger.client.model.L2VpnSessionPeerCodes;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ManagementPlaneApiVpnL2VpnSessionsApi {
    private ApiClient apiClient;

    public ManagementPlaneApiVpnL2VpnSessionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ManagementPlaneApiVpnL2VpnSessionsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createL2VpnSession
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createL2VpnSessionCall(L2VpnSession body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/vpn/l2vpn/sessions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createL2VpnSessionValidateBeforeCall(L2VpnSession body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createL2VpnSession(Async)");
        }
        
        com.squareup.okhttp.Call call = createL2VpnSessionCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create L2VPN session
     * Create L2VPN session and bind to a L2VPNService
     * @param body  (required)
     * @return L2VpnSession
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public L2VpnSession createL2VpnSession(L2VpnSession body) throws ApiException {
        ApiResponse<L2VpnSession> resp = createL2VpnSessionWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create L2VPN session
     * Create L2VPN session and bind to a L2VPNService
     * @param body  (required)
     * @return ApiResponse&lt;L2VpnSession&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<L2VpnSession> createL2VpnSessionWithHttpInfo(L2VpnSession body) throws ApiException {
        com.squareup.okhttp.Call call = createL2VpnSessionValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<L2VpnSession>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create L2VPN session (asynchronously)
     * Create L2VPN session and bind to a L2VPNService
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createL2VpnSessionAsync(L2VpnSession body, final ApiCallback<L2VpnSession> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createL2VpnSessionValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<L2VpnSession>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteL2VpnSession
     * @param l2vpnSessionId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteL2VpnSessionCall(String l2vpnSessionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/vpn/l2vpn/sessions/{l2vpn-session-id}"
            .replaceAll("\\{" + "l2vpn-session-id" + "\\}", apiClient.escapeString(l2vpnSessionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteL2VpnSessionValidateBeforeCall(String l2vpnSessionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'l2vpnSessionId' is set
        if (l2vpnSessionId == null) {
            throw new ApiException("Missing the required parameter 'l2vpnSessionId' when calling deleteL2VpnSession(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteL2VpnSessionCall(l2vpnSessionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete a L2VPN session
     * Delete a specific L2VPN session. If there are any logical switch ports attached to it, those needs to be deleted first.
     * @param l2vpnSessionId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteL2VpnSession(String l2vpnSessionId) throws ApiException {
        deleteL2VpnSessionWithHttpInfo(l2vpnSessionId);
    }

    /**
     * Delete a L2VPN session
     * Delete a specific L2VPN session. If there are any logical switch ports attached to it, those needs to be deleted first.
     * @param l2vpnSessionId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteL2VpnSessionWithHttpInfo(String l2vpnSessionId) throws ApiException {
        com.squareup.okhttp.Call call = deleteL2VpnSessionValidateBeforeCall(l2vpnSessionId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a L2VPN session (asynchronously)
     * Delete a specific L2VPN session. If there are any logical switch ports attached to it, those needs to be deleted first.
     * @param l2vpnSessionId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteL2VpnSessionAsync(String l2vpnSessionId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteL2VpnSessionValidateBeforeCall(l2vpnSessionId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getL2VpnSession
     * @param l2vpnSessionId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getL2VpnSessionCall(String l2vpnSessionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/vpn/l2vpn/sessions/{l2vpn-session-id}"
            .replaceAll("\\{" + "l2vpn-session-id" + "\\}", apiClient.escapeString(l2vpnSessionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getL2VpnSessionValidateBeforeCall(String l2vpnSessionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'l2vpnSessionId' is set
        if (l2vpnSessionId == null) {
            throw new ApiException("Missing the required parameter 'l2vpnSessionId' when calling getL2VpnSession(Async)");
        }
        
        com.squareup.okhttp.Call call = getL2VpnSessionCall(l2vpnSessionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get a L2VPN session
     * Get a specific L2VPN session
     * @param l2vpnSessionId  (required)
     * @return L2VpnSession
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public L2VpnSession getL2VpnSession(String l2vpnSessionId) throws ApiException {
        ApiResponse<L2VpnSession> resp = getL2VpnSessionWithHttpInfo(l2vpnSessionId);
        return resp.getData();
    }

    /**
     * Get a L2VPN session
     * Get a specific L2VPN session
     * @param l2vpnSessionId  (required)
     * @return ApiResponse&lt;L2VpnSession&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<L2VpnSession> getL2VpnSessionWithHttpInfo(String l2vpnSessionId) throws ApiException {
        com.squareup.okhttp.Call call = getL2VpnSessionValidateBeforeCall(l2vpnSessionId, null, null);
        Type localVarReturnType = new TypeToken<L2VpnSession>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a L2VPN session (asynchronously)
     * Get a specific L2VPN session
     * @param l2vpnSessionId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getL2VpnSessionAsync(String l2vpnSessionId, final ApiCallback<L2VpnSession> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getL2VpnSessionValidateBeforeCall(l2vpnSessionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<L2VpnSession>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getL2VpnSessionPeerCodes
     * @param l2vpnSessionId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getL2VpnSessionPeerCodesCall(String l2vpnSessionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/vpn/l2vpn/sessions/{l2vpn-session-id}/peer-codes"
            .replaceAll("\\{" + "l2vpn-session-id" + "\\}", apiClient.escapeString(l2vpnSessionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getL2VpnSessionPeerCodesValidateBeforeCall(String l2vpnSessionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'l2vpnSessionId' is set
        if (l2vpnSessionId == null) {
            throw new ApiException("Missing the required parameter 'l2vpnSessionId' when calling getL2VpnSessionPeerCodes(Async)");
        }
        
        com.squareup.okhttp.Call call = getL2VpnSessionPeerCodesCall(l2vpnSessionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get peer codes for the L2VpnSession
     * Get peer codes for the L2VPN session to program the remote side of the tunnel.
     * @param l2vpnSessionId  (required)
     * @return L2VpnSessionPeerCodes
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public L2VpnSessionPeerCodes getL2VpnSessionPeerCodes(String l2vpnSessionId) throws ApiException {
        ApiResponse<L2VpnSessionPeerCodes> resp = getL2VpnSessionPeerCodesWithHttpInfo(l2vpnSessionId);
        return resp.getData();
    }

    /**
     * Get peer codes for the L2VpnSession
     * Get peer codes for the L2VPN session to program the remote side of the tunnel.
     * @param l2vpnSessionId  (required)
     * @return ApiResponse&lt;L2VpnSessionPeerCodes&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<L2VpnSessionPeerCodes> getL2VpnSessionPeerCodesWithHttpInfo(String l2vpnSessionId) throws ApiException {
        com.squareup.okhttp.Call call = getL2VpnSessionPeerCodesValidateBeforeCall(l2vpnSessionId, null, null);
        Type localVarReturnType = new TypeToken<L2VpnSessionPeerCodes>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get peer codes for the L2VpnSession (asynchronously)
     * Get peer codes for the L2VPN session to program the remote side of the tunnel.
     * @param l2vpnSessionId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getL2VpnSessionPeerCodesAsync(String l2vpnSessionId, final ApiCallback<L2VpnSessionPeerCodes> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getL2VpnSessionPeerCodesValidateBeforeCall(l2vpnSessionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<L2VpnSessionPeerCodes>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listL2VpnSessions
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param l2vpnServiceId Id of the L2Vpn Service (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listL2VpnSessionsCall(String cursor, String includedFields, String l2vpnServiceId, Long pageSize, Boolean sortAscending, String sortBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/vpn/l2vpn/sessions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (includedFields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("included_fields", includedFields));
        if (l2vpnServiceId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("l2vpn_service_id", l2vpnServiceId));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page_size", pageSize));
        if (sortAscending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_ascending", sortAscending));
        if (sortBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_by", sortBy));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listL2VpnSessionsValidateBeforeCall(String cursor, String includedFields, String l2vpnServiceId, Long pageSize, Boolean sortAscending, String sortBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listL2VpnSessionsCall(cursor, includedFields, l2vpnServiceId, pageSize, sortAscending, sortBy, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get all L2VPN sessions
     * Get paginated list of all L2VPN sessions
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param l2vpnServiceId Id of the L2Vpn Service (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @return L2VpnSessionListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public L2VpnSessionListResult listL2VpnSessions(String cursor, String includedFields, String l2vpnServiceId, Long pageSize, Boolean sortAscending, String sortBy) throws ApiException {
        ApiResponse<L2VpnSessionListResult> resp = listL2VpnSessionsWithHttpInfo(cursor, includedFields, l2vpnServiceId, pageSize, sortAscending, sortBy);
        return resp.getData();
    }

    /**
     * Get all L2VPN sessions
     * Get paginated list of all L2VPN sessions
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param l2vpnServiceId Id of the L2Vpn Service (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @return ApiResponse&lt;L2VpnSessionListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<L2VpnSessionListResult> listL2VpnSessionsWithHttpInfo(String cursor, String includedFields, String l2vpnServiceId, Long pageSize, Boolean sortAscending, String sortBy) throws ApiException {
        com.squareup.okhttp.Call call = listL2VpnSessionsValidateBeforeCall(cursor, includedFields, l2vpnServiceId, pageSize, sortAscending, sortBy, null, null);
        Type localVarReturnType = new TypeToken<L2VpnSessionListResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all L2VPN sessions (asynchronously)
     * Get paginated list of all L2VPN sessions
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param l2vpnServiceId Id of the L2Vpn Service (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listL2VpnSessionsAsync(String cursor, String includedFields, String l2vpnServiceId, Long pageSize, Boolean sortAscending, String sortBy, final ApiCallback<L2VpnSessionListResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listL2VpnSessionsValidateBeforeCall(cursor, includedFields, l2vpnServiceId, pageSize, sortAscending, sortBy, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<L2VpnSessionListResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateL2VpnSession
     * @param body  (required)
     * @param l2vpnSessionId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateL2VpnSessionCall(L2VpnSession body, String l2vpnSessionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/vpn/l2vpn/sessions/{l2vpn-session-id}"
            .replaceAll("\\{" + "l2vpn-session-id" + "\\}", apiClient.escapeString(l2vpnSessionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateL2VpnSessionValidateBeforeCall(L2VpnSession body, String l2vpnSessionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateL2VpnSession(Async)");
        }
        // verify the required parameter 'l2vpnSessionId' is set
        if (l2vpnSessionId == null) {
            throw new ApiException("Missing the required parameter 'l2vpnSessionId' when calling updateL2VpnSession(Async)");
        }
        
        com.squareup.okhttp.Call call = updateL2VpnSessionCall(body, l2vpnSessionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Edit a L2VPN session
     * Edit a specific L2VPN session
     * @param body  (required)
     * @param l2vpnSessionId  (required)
     * @return L2VpnSession
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public L2VpnSession updateL2VpnSession(L2VpnSession body, String l2vpnSessionId) throws ApiException {
        ApiResponse<L2VpnSession> resp = updateL2VpnSessionWithHttpInfo(body, l2vpnSessionId);
        return resp.getData();
    }

    /**
     * Edit a L2VPN session
     * Edit a specific L2VPN session
     * @param body  (required)
     * @param l2vpnSessionId  (required)
     * @return ApiResponse&lt;L2VpnSession&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<L2VpnSession> updateL2VpnSessionWithHttpInfo(L2VpnSession body, String l2vpnSessionId) throws ApiException {
        com.squareup.okhttp.Call call = updateL2VpnSessionValidateBeforeCall(body, l2vpnSessionId, null, null);
        Type localVarReturnType = new TypeToken<L2VpnSession>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Edit a L2VPN session (asynchronously)
     * Edit a specific L2VPN session
     * @param body  (required)
     * @param l2vpnSessionId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateL2VpnSessionAsync(L2VpnSession body, String l2vpnSessionId, final ApiCallback<L2VpnSession> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateL2VpnSessionValidateBeforeCall(body, l2vpnSessionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<L2VpnSession>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
