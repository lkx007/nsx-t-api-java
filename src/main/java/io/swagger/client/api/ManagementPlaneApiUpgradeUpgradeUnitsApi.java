/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ApiError;
import io.swagger.client.model.UpgradeUnit;
import io.swagger.client.model.UpgradeUnitAggregateInfoListResult;
import io.swagger.client.model.UpgradeUnitListResult;
import io.swagger.client.model.UpgradeUnitTypeStatsList;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ManagementPlaneApiUpgradeUpgradeUnitsApi {
    private ApiClient apiClient;

    public ManagementPlaneApiUpgradeUpgradeUnitsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ManagementPlaneApiUpgradeUpgradeUnitsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getUpgradeUnit
     * @param upgradeUnitId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getUpgradeUnitCall(String upgradeUnitId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/upgrade/upgrade-units/{upgrade-unit-id}"
            .replaceAll("\\{" + "upgrade-unit-id" + "\\}", apiClient.escapeString(upgradeUnitId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getUpgradeUnitValidateBeforeCall(String upgradeUnitId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'upgradeUnitId' is set
        if (upgradeUnitId == null) {
            throw new ApiException("Missing the required parameter 'upgradeUnitId' when calling getUpgradeUnit(Async)");
        }
        
        com.squareup.okhttp.Call call = getUpgradeUnitCall(upgradeUnitId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get a specific upgrade unit
     * Get a specific upgrade unit
     * @param upgradeUnitId  (required)
     * @return UpgradeUnit
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UpgradeUnit getUpgradeUnit(String upgradeUnitId) throws ApiException {
        ApiResponse<UpgradeUnit> resp = getUpgradeUnitWithHttpInfo(upgradeUnitId);
        return resp.getData();
    }

    /**
     * Get a specific upgrade unit
     * Get a specific upgrade unit
     * @param upgradeUnitId  (required)
     * @return ApiResponse&lt;UpgradeUnit&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UpgradeUnit> getUpgradeUnitWithHttpInfo(String upgradeUnitId) throws ApiException {
        com.squareup.okhttp.Call call = getUpgradeUnitValidateBeforeCall(upgradeUnitId, null, null);
        Type localVarReturnType = new TypeToken<UpgradeUnit>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a specific upgrade unit (asynchronously)
     * Get a specific upgrade unit
     * @param upgradeUnitId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getUpgradeUnitAsync(String upgradeUnitId, final ApiCallback<UpgradeUnit> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getUpgradeUnitValidateBeforeCall(upgradeUnitId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UpgradeUnit>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getUpgradeUnitAggregateInfo
     * @param componentType Component type based on which upgrade units to be filtered (optional)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param groupId Identifier of group based on which upgrade units to be filtered (optional)
     * @param hasErrors Flag to indicate whether to return only upgrade units with errors (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param metadata Metadata about upgrade unit to filter on (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param selectionStatus Flag to indicate whether to return only selected, only deselected or both type of upgrade units (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param upgradeUnitDisplayName Display name of upgrade unit (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getUpgradeUnitAggregateInfoCall(String componentType, String cursor, String groupId, Boolean hasErrors, String includedFields, String metadata, Long pageSize, String selectionStatus, Boolean sortAscending, String sortBy, String upgradeUnitDisplayName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/upgrade/upgrade-units/aggregate-info";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (componentType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("component_type", componentType));
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (groupId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("group_id", groupId));
        if (hasErrors != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("has_errors", hasErrors));
        if (includedFields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("included_fields", includedFields));
        if (metadata != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("metadata", metadata));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page_size", pageSize));
        if (selectionStatus != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("selection_status", selectionStatus));
        if (sortAscending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_ascending", sortAscending));
        if (sortBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_by", sortBy));
        if (upgradeUnitDisplayName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("upgrade_unit_display_name", upgradeUnitDisplayName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getUpgradeUnitAggregateInfoValidateBeforeCall(String componentType, String cursor, String groupId, Boolean hasErrors, String includedFields, String metadata, Long pageSize, String selectionStatus, Boolean sortAscending, String sortBy, String upgradeUnitDisplayName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getUpgradeUnitAggregateInfoCall(componentType, cursor, groupId, hasErrors, includedFields, metadata, pageSize, selectionStatus, sortAscending, sortBy, upgradeUnitDisplayName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get upgrade units aggregate-info
     * Get upgrade units aggregate-info
     * @param componentType Component type based on which upgrade units to be filtered (optional)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param groupId Identifier of group based on which upgrade units to be filtered (optional)
     * @param hasErrors Flag to indicate whether to return only upgrade units with errors (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param metadata Metadata about upgrade unit to filter on (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param selectionStatus Flag to indicate whether to return only selected, only deselected or both type of upgrade units (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param upgradeUnitDisplayName Display name of upgrade unit (optional)
     * @return UpgradeUnitAggregateInfoListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UpgradeUnitAggregateInfoListResult getUpgradeUnitAggregateInfo(String componentType, String cursor, String groupId, Boolean hasErrors, String includedFields, String metadata, Long pageSize, String selectionStatus, Boolean sortAscending, String sortBy, String upgradeUnitDisplayName) throws ApiException {
        ApiResponse<UpgradeUnitAggregateInfoListResult> resp = getUpgradeUnitAggregateInfoWithHttpInfo(componentType, cursor, groupId, hasErrors, includedFields, metadata, pageSize, selectionStatus, sortAscending, sortBy, upgradeUnitDisplayName);
        return resp.getData();
    }

    /**
     * Get upgrade units aggregate-info
     * Get upgrade units aggregate-info
     * @param componentType Component type based on which upgrade units to be filtered (optional)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param groupId Identifier of group based on which upgrade units to be filtered (optional)
     * @param hasErrors Flag to indicate whether to return only upgrade units with errors (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param metadata Metadata about upgrade unit to filter on (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param selectionStatus Flag to indicate whether to return only selected, only deselected or both type of upgrade units (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param upgradeUnitDisplayName Display name of upgrade unit (optional)
     * @return ApiResponse&lt;UpgradeUnitAggregateInfoListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UpgradeUnitAggregateInfoListResult> getUpgradeUnitAggregateInfoWithHttpInfo(String componentType, String cursor, String groupId, Boolean hasErrors, String includedFields, String metadata, Long pageSize, String selectionStatus, Boolean sortAscending, String sortBy, String upgradeUnitDisplayName) throws ApiException {
        com.squareup.okhttp.Call call = getUpgradeUnitAggregateInfoValidateBeforeCall(componentType, cursor, groupId, hasErrors, includedFields, metadata, pageSize, selectionStatus, sortAscending, sortBy, upgradeUnitDisplayName, null, null);
        Type localVarReturnType = new TypeToken<UpgradeUnitAggregateInfoListResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get upgrade units aggregate-info (asynchronously)
     * Get upgrade units aggregate-info
     * @param componentType Component type based on which upgrade units to be filtered (optional)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param groupId Identifier of group based on which upgrade units to be filtered (optional)
     * @param hasErrors Flag to indicate whether to return only upgrade units with errors (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param metadata Metadata about upgrade unit to filter on (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param selectionStatus Flag to indicate whether to return only selected, only deselected or both type of upgrade units (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param upgradeUnitDisplayName Display name of upgrade unit (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getUpgradeUnitAggregateInfoAsync(String componentType, String cursor, String groupId, Boolean hasErrors, String includedFields, String metadata, Long pageSize, String selectionStatus, Boolean sortAscending, String sortBy, String upgradeUnitDisplayName, final ApiCallback<UpgradeUnitAggregateInfoListResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getUpgradeUnitAggregateInfoValidateBeforeCall(componentType, cursor, groupId, hasErrors, includedFields, metadata, pageSize, selectionStatus, sortAscending, sortBy, upgradeUnitDisplayName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UpgradeUnitAggregateInfoListResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getUpgradeUnits
     * @param componentType Component type based on which upgrade units to be filtered (optional)
     * @param currentVersion Current version of upgrade unit based on which upgrade units to be filtered (optional)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param groupId UUID of group based on which upgrade units to be filtered (optional)
     * @param hasWarnings Flag to indicate whether to return only upgrade units with warnings (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param metadata Metadata about upgrade unit to filter on (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param upgradeUnitType Upgrade unit type based on which upgrade units to be filtered (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getUpgradeUnitsCall(String componentType, String currentVersion, String cursor, String groupId, Boolean hasWarnings, String includedFields, String metadata, Long pageSize, Boolean sortAscending, String sortBy, String upgradeUnitType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/upgrade/upgrade-units";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (componentType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("component_type", componentType));
        if (currentVersion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("current_version", currentVersion));
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (groupId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("group_id", groupId));
        if (hasWarnings != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("has_warnings", hasWarnings));
        if (includedFields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("included_fields", includedFields));
        if (metadata != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("metadata", metadata));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page_size", pageSize));
        if (sortAscending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_ascending", sortAscending));
        if (sortBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_by", sortBy));
        if (upgradeUnitType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("upgrade_unit_type", upgradeUnitType));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getUpgradeUnitsValidateBeforeCall(String componentType, String currentVersion, String cursor, String groupId, Boolean hasWarnings, String includedFields, String metadata, Long pageSize, Boolean sortAscending, String sortBy, String upgradeUnitType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getUpgradeUnitsCall(componentType, currentVersion, cursor, groupId, hasWarnings, includedFields, metadata, pageSize, sortAscending, sortBy, upgradeUnitType, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get upgrade units
     * Get upgrade units
     * @param componentType Component type based on which upgrade units to be filtered (optional)
     * @param currentVersion Current version of upgrade unit based on which upgrade units to be filtered (optional)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param groupId UUID of group based on which upgrade units to be filtered (optional)
     * @param hasWarnings Flag to indicate whether to return only upgrade units with warnings (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param metadata Metadata about upgrade unit to filter on (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param upgradeUnitType Upgrade unit type based on which upgrade units to be filtered (optional)
     * @return UpgradeUnitListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UpgradeUnitListResult getUpgradeUnits(String componentType, String currentVersion, String cursor, String groupId, Boolean hasWarnings, String includedFields, String metadata, Long pageSize, Boolean sortAscending, String sortBy, String upgradeUnitType) throws ApiException {
        ApiResponse<UpgradeUnitListResult> resp = getUpgradeUnitsWithHttpInfo(componentType, currentVersion, cursor, groupId, hasWarnings, includedFields, metadata, pageSize, sortAscending, sortBy, upgradeUnitType);
        return resp.getData();
    }

    /**
     * Get upgrade units
     * Get upgrade units
     * @param componentType Component type based on which upgrade units to be filtered (optional)
     * @param currentVersion Current version of upgrade unit based on which upgrade units to be filtered (optional)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param groupId UUID of group based on which upgrade units to be filtered (optional)
     * @param hasWarnings Flag to indicate whether to return only upgrade units with warnings (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param metadata Metadata about upgrade unit to filter on (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param upgradeUnitType Upgrade unit type based on which upgrade units to be filtered (optional)
     * @return ApiResponse&lt;UpgradeUnitListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UpgradeUnitListResult> getUpgradeUnitsWithHttpInfo(String componentType, String currentVersion, String cursor, String groupId, Boolean hasWarnings, String includedFields, String metadata, Long pageSize, Boolean sortAscending, String sortBy, String upgradeUnitType) throws ApiException {
        com.squareup.okhttp.Call call = getUpgradeUnitsValidateBeforeCall(componentType, currentVersion, cursor, groupId, hasWarnings, includedFields, metadata, pageSize, sortAscending, sortBy, upgradeUnitType, null, null);
        Type localVarReturnType = new TypeToken<UpgradeUnitListResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get upgrade units (asynchronously)
     * Get upgrade units
     * @param componentType Component type based on which upgrade units to be filtered (optional)
     * @param currentVersion Current version of upgrade unit based on which upgrade units to be filtered (optional)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param groupId UUID of group based on which upgrade units to be filtered (optional)
     * @param hasWarnings Flag to indicate whether to return only upgrade units with warnings (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param metadata Metadata about upgrade unit to filter on (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param upgradeUnitType Upgrade unit type based on which upgrade units to be filtered (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getUpgradeUnitsAsync(String componentType, String currentVersion, String cursor, String groupId, Boolean hasWarnings, String includedFields, String metadata, Long pageSize, Boolean sortAscending, String sortBy, String upgradeUnitType, final ApiCallback<UpgradeUnitListResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getUpgradeUnitsValidateBeforeCall(componentType, currentVersion, cursor, groupId, hasWarnings, includedFields, metadata, pageSize, sortAscending, sortBy, upgradeUnitType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UpgradeUnitListResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getUpgradeUnitsStats
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param sync Synchronize before returning upgrade unit stats (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getUpgradeUnitsStatsCall(String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, Boolean sync, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/upgrade/upgrade-units-stats";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (includedFields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("included_fields", includedFields));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page_size", pageSize));
        if (sortAscending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_ascending", sortAscending));
        if (sortBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_by", sortBy));
        if (sync != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sync", sync));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getUpgradeUnitsStatsValidateBeforeCall(String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, Boolean sync, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getUpgradeUnitsStatsCall(cursor, includedFields, pageSize, sortAscending, sortBy, sync, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get upgrade units stats
     * Get upgrade units stats
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param sync Synchronize before returning upgrade unit stats (optional)
     * @return UpgradeUnitTypeStatsList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UpgradeUnitTypeStatsList getUpgradeUnitsStats(String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, Boolean sync) throws ApiException {
        ApiResponse<UpgradeUnitTypeStatsList> resp = getUpgradeUnitsStatsWithHttpInfo(cursor, includedFields, pageSize, sortAscending, sortBy, sync);
        return resp.getData();
    }

    /**
     * Get upgrade units stats
     * Get upgrade units stats
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param sync Synchronize before returning upgrade unit stats (optional)
     * @return ApiResponse&lt;UpgradeUnitTypeStatsList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UpgradeUnitTypeStatsList> getUpgradeUnitsStatsWithHttpInfo(String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, Boolean sync) throws ApiException {
        com.squareup.okhttp.Call call = getUpgradeUnitsStatsValidateBeforeCall(cursor, includedFields, pageSize, sortAscending, sortBy, sync, null, null);
        Type localVarReturnType = new TypeToken<UpgradeUnitTypeStatsList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get upgrade units stats (asynchronously)
     * Get upgrade units stats
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param sync Synchronize before returning upgrade unit stats (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getUpgradeUnitsStatsAsync(String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, Boolean sync, final ApiCallback<UpgradeUnitTypeStatsList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getUpgradeUnitsStatsValidateBeforeCall(cursor, includedFields, pageSize, sortAscending, sortBy, sync, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UpgradeUnitTypeStatsList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
