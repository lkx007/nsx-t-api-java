/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ApiError;
import io.swagger.client.model.MigrationUnit;
import io.swagger.client.model.MigrationUnitAggregateInfoListResult;
import io.swagger.client.model.MigrationUnitListResult;
import io.swagger.client.model.MigrationUnitTypeStatsList;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ManagementPlaneApiMigrationMigrationunitsApi {
    private ApiClient apiClient;

    public ManagementPlaneApiMigrationMigrationunitsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ManagementPlaneApiMigrationMigrationunitsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getMigrationUnit
     * @param migrationUnitId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getMigrationUnitCall(String migrationUnitId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/migration/migration-units/{migration-unit-id}"
            .replaceAll("\\{" + "migration-unit-id" + "\\}", apiClient.escapeString(migrationUnitId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getMigrationUnitValidateBeforeCall(String migrationUnitId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'migrationUnitId' is set
        if (migrationUnitId == null) {
            throw new ApiException("Missing the required parameter 'migrationUnitId' when calling getMigrationUnit(Async)");
        }
        
        com.squareup.okhttp.Call call = getMigrationUnitCall(migrationUnitId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get a specific migration unit
     * Get a specific migration unit
     * @param migrationUnitId  (required)
     * @return MigrationUnit
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MigrationUnit getMigrationUnit(String migrationUnitId) throws ApiException {
        ApiResponse<MigrationUnit> resp = getMigrationUnitWithHttpInfo(migrationUnitId);
        return resp.getData();
    }

    /**
     * Get a specific migration unit
     * Get a specific migration unit
     * @param migrationUnitId  (required)
     * @return ApiResponse&lt;MigrationUnit&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MigrationUnit> getMigrationUnitWithHttpInfo(String migrationUnitId) throws ApiException {
        com.squareup.okhttp.Call call = getMigrationUnitValidateBeforeCall(migrationUnitId, null, null);
        Type localVarReturnType = new TypeToken<MigrationUnit>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a specific migration unit (asynchronously)
     * Get a specific migration unit
     * @param migrationUnitId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getMigrationUnitAsync(String migrationUnitId, final ApiCallback<MigrationUnit> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getMigrationUnitValidateBeforeCall(migrationUnitId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MigrationUnit>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getMigrationUnitAggregateInfo
     * @param componentType Component type based on which migration units to be filtered (optional)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param groupId Identifier of group based on which migration units to be filtered (optional)
     * @param hasErrors Flag to indicate whether to return only migration units with errors (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param metadata Metadata about migration unit to filter on (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param selectionStatus Flag to indicate whether to return only selected, only deselected or both type of migration units (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getMigrationUnitAggregateInfoCall(String componentType, String cursor, String groupId, Boolean hasErrors, String includedFields, String metadata, Long pageSize, String selectionStatus, Boolean sortAscending, String sortBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/migration/migration-units/aggregate-info";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (componentType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("component_type", componentType));
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (groupId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("group_id", groupId));
        if (hasErrors != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("has_errors", hasErrors));
        if (includedFields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("included_fields", includedFields));
        if (metadata != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("metadata", metadata));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page_size", pageSize));
        if (selectionStatus != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("selection_status", selectionStatus));
        if (sortAscending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_ascending", sortAscending));
        if (sortBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_by", sortBy));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getMigrationUnitAggregateInfoValidateBeforeCall(String componentType, String cursor, String groupId, Boolean hasErrors, String includedFields, String metadata, Long pageSize, String selectionStatus, Boolean sortAscending, String sortBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getMigrationUnitAggregateInfoCall(componentType, cursor, groupId, hasErrors, includedFields, metadata, pageSize, selectionStatus, sortAscending, sortBy, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get migration units aggregate-info
     * Get migration units aggregate-info
     * @param componentType Component type based on which migration units to be filtered (optional)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param groupId Identifier of group based on which migration units to be filtered (optional)
     * @param hasErrors Flag to indicate whether to return only migration units with errors (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param metadata Metadata about migration unit to filter on (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param selectionStatus Flag to indicate whether to return only selected, only deselected or both type of migration units (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @return MigrationUnitAggregateInfoListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MigrationUnitAggregateInfoListResult getMigrationUnitAggregateInfo(String componentType, String cursor, String groupId, Boolean hasErrors, String includedFields, String metadata, Long pageSize, String selectionStatus, Boolean sortAscending, String sortBy) throws ApiException {
        ApiResponse<MigrationUnitAggregateInfoListResult> resp = getMigrationUnitAggregateInfoWithHttpInfo(componentType, cursor, groupId, hasErrors, includedFields, metadata, pageSize, selectionStatus, sortAscending, sortBy);
        return resp.getData();
    }

    /**
     * Get migration units aggregate-info
     * Get migration units aggregate-info
     * @param componentType Component type based on which migration units to be filtered (optional)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param groupId Identifier of group based on which migration units to be filtered (optional)
     * @param hasErrors Flag to indicate whether to return only migration units with errors (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param metadata Metadata about migration unit to filter on (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param selectionStatus Flag to indicate whether to return only selected, only deselected or both type of migration units (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @return ApiResponse&lt;MigrationUnitAggregateInfoListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MigrationUnitAggregateInfoListResult> getMigrationUnitAggregateInfoWithHttpInfo(String componentType, String cursor, String groupId, Boolean hasErrors, String includedFields, String metadata, Long pageSize, String selectionStatus, Boolean sortAscending, String sortBy) throws ApiException {
        com.squareup.okhttp.Call call = getMigrationUnitAggregateInfoValidateBeforeCall(componentType, cursor, groupId, hasErrors, includedFields, metadata, pageSize, selectionStatus, sortAscending, sortBy, null, null);
        Type localVarReturnType = new TypeToken<MigrationUnitAggregateInfoListResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get migration units aggregate-info (asynchronously)
     * Get migration units aggregate-info
     * @param componentType Component type based on which migration units to be filtered (optional)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param groupId Identifier of group based on which migration units to be filtered (optional)
     * @param hasErrors Flag to indicate whether to return only migration units with errors (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param metadata Metadata about migration unit to filter on (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param selectionStatus Flag to indicate whether to return only selected, only deselected or both type of migration units (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getMigrationUnitAggregateInfoAsync(String componentType, String cursor, String groupId, Boolean hasErrors, String includedFields, String metadata, Long pageSize, String selectionStatus, Boolean sortAscending, String sortBy, final ApiCallback<MigrationUnitAggregateInfoListResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getMigrationUnitAggregateInfoValidateBeforeCall(componentType, cursor, groupId, hasErrors, includedFields, metadata, pageSize, selectionStatus, sortAscending, sortBy, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MigrationUnitAggregateInfoListResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getMigrationUnits
     * @param componentType Component type based on which migration units to be filtered (optional)
     * @param currentVersion Current version of migration unit based on which migration units to be filtered (optional)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param groupId UUID of group based on which migration units to be filtered (optional)
     * @param hasWarnings Flag to indicate whether to return only migration units with warnings (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param metadata Metadata about migration unit to filter on (optional)
     * @param migrationUnitType Migration unit type based on which migration units to be filtered (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getMigrationUnitsCall(String componentType, String currentVersion, String cursor, String groupId, Boolean hasWarnings, String includedFields, String metadata, String migrationUnitType, Long pageSize, Boolean sortAscending, String sortBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/migration/migration-units";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (componentType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("component_type", componentType));
        if (currentVersion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("current_version", currentVersion));
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (groupId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("group_id", groupId));
        if (hasWarnings != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("has_warnings", hasWarnings));
        if (includedFields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("included_fields", includedFields));
        if (metadata != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("metadata", metadata));
        if (migrationUnitType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("migration_unit_type", migrationUnitType));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page_size", pageSize));
        if (sortAscending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_ascending", sortAscending));
        if (sortBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_by", sortBy));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getMigrationUnitsValidateBeforeCall(String componentType, String currentVersion, String cursor, String groupId, Boolean hasWarnings, String includedFields, String metadata, String migrationUnitType, Long pageSize, Boolean sortAscending, String sortBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getMigrationUnitsCall(componentType, currentVersion, cursor, groupId, hasWarnings, includedFields, metadata, migrationUnitType, pageSize, sortAscending, sortBy, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get migration units
     * Get migration units
     * @param componentType Component type based on which migration units to be filtered (optional)
     * @param currentVersion Current version of migration unit based on which migration units to be filtered (optional)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param groupId UUID of group based on which migration units to be filtered (optional)
     * @param hasWarnings Flag to indicate whether to return only migration units with warnings (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param metadata Metadata about migration unit to filter on (optional)
     * @param migrationUnitType Migration unit type based on which migration units to be filtered (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @return MigrationUnitListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MigrationUnitListResult getMigrationUnits(String componentType, String currentVersion, String cursor, String groupId, Boolean hasWarnings, String includedFields, String metadata, String migrationUnitType, Long pageSize, Boolean sortAscending, String sortBy) throws ApiException {
        ApiResponse<MigrationUnitListResult> resp = getMigrationUnitsWithHttpInfo(componentType, currentVersion, cursor, groupId, hasWarnings, includedFields, metadata, migrationUnitType, pageSize, sortAscending, sortBy);
        return resp.getData();
    }

    /**
     * Get migration units
     * Get migration units
     * @param componentType Component type based on which migration units to be filtered (optional)
     * @param currentVersion Current version of migration unit based on which migration units to be filtered (optional)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param groupId UUID of group based on which migration units to be filtered (optional)
     * @param hasWarnings Flag to indicate whether to return only migration units with warnings (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param metadata Metadata about migration unit to filter on (optional)
     * @param migrationUnitType Migration unit type based on which migration units to be filtered (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @return ApiResponse&lt;MigrationUnitListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MigrationUnitListResult> getMigrationUnitsWithHttpInfo(String componentType, String currentVersion, String cursor, String groupId, Boolean hasWarnings, String includedFields, String metadata, String migrationUnitType, Long pageSize, Boolean sortAscending, String sortBy) throws ApiException {
        com.squareup.okhttp.Call call = getMigrationUnitsValidateBeforeCall(componentType, currentVersion, cursor, groupId, hasWarnings, includedFields, metadata, migrationUnitType, pageSize, sortAscending, sortBy, null, null);
        Type localVarReturnType = new TypeToken<MigrationUnitListResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get migration units (asynchronously)
     * Get migration units
     * @param componentType Component type based on which migration units to be filtered (optional)
     * @param currentVersion Current version of migration unit based on which migration units to be filtered (optional)
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param groupId UUID of group based on which migration units to be filtered (optional)
     * @param hasWarnings Flag to indicate whether to return only migration units with warnings (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param metadata Metadata about migration unit to filter on (optional)
     * @param migrationUnitType Migration unit type based on which migration units to be filtered (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getMigrationUnitsAsync(String componentType, String currentVersion, String cursor, String groupId, Boolean hasWarnings, String includedFields, String metadata, String migrationUnitType, Long pageSize, Boolean sortAscending, String sortBy, final ApiCallback<MigrationUnitListResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getMigrationUnitsValidateBeforeCall(componentType, currentVersion, cursor, groupId, hasWarnings, includedFields, metadata, migrationUnitType, pageSize, sortAscending, sortBy, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MigrationUnitListResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getMigrationUnitsStats
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param sync Synchronize before returning migration unit stats (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getMigrationUnitsStatsCall(String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, Boolean sync, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/migration/migration-units-stats";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (includedFields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("included_fields", includedFields));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page_size", pageSize));
        if (sortAscending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_ascending", sortAscending));
        if (sortBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_by", sortBy));
        if (sync != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sync", sync));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getMigrationUnitsStatsValidateBeforeCall(String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, Boolean sync, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getMigrationUnitsStatsCall(cursor, includedFields, pageSize, sortAscending, sortBy, sync, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get migration units stats
     * Get migration units stats
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param sync Synchronize before returning migration unit stats (optional)
     * @return MigrationUnitTypeStatsList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MigrationUnitTypeStatsList getMigrationUnitsStats(String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, Boolean sync) throws ApiException {
        ApiResponse<MigrationUnitTypeStatsList> resp = getMigrationUnitsStatsWithHttpInfo(cursor, includedFields, pageSize, sortAscending, sortBy, sync);
        return resp.getData();
    }

    /**
     * Get migration units stats
     * Get migration units stats
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param sync Synchronize before returning migration unit stats (optional)
     * @return ApiResponse&lt;MigrationUnitTypeStatsList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MigrationUnitTypeStatsList> getMigrationUnitsStatsWithHttpInfo(String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, Boolean sync) throws ApiException {
        com.squareup.okhttp.Call call = getMigrationUnitsStatsValidateBeforeCall(cursor, includedFields, pageSize, sortAscending, sortBy, sync, null, null);
        Type localVarReturnType = new TypeToken<MigrationUnitTypeStatsList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get migration units stats (asynchronously)
     * Get migration units stats
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param sync Synchronize before returning migration unit stats (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getMigrationUnitsStatsAsync(String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, Boolean sync, final ApiCallback<MigrationUnitTypeStatsList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getMigrationUnitsStatsValidateBeforeCall(cursor, includedFields, pageSize, sortAscending, sortBy, sync, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MigrationUnitTypeStatsList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
