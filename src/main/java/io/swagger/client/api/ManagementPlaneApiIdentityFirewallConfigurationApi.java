/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ApiError;
import io.swagger.client.model.IdfwEnabledComputeCollection;
import io.swagger.client.model.IdfwEnabledComputeCollectionListResult;
import io.swagger.client.model.IdfwMasterSwitchSetting;
import io.swagger.client.model.IdfwStandaloneHostsSwitchSetting;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ManagementPlaneApiIdentityFirewallConfigurationApi {
    private ApiClient apiClient;

    public ManagementPlaneApiIdentityFirewallConfigurationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ManagementPlaneApiIdentityFirewallConfigurationApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getEnabledComputeCollection
     * @param ccExtId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEnabledComputeCollectionCall(String ccExtId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/idfw/idfw-compute-collections/{cc-ext-id}"
            .replaceAll("\\{" + "cc-ext-id" + "\\}", apiClient.escapeString(ccExtId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEnabledComputeCollectionValidateBeforeCall(String ccExtId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'ccExtId' is set
        if (ccExtId == null) {
            throw new ApiException("Missing the required parameter 'ccExtId' when calling getEnabledComputeCollection(Async)");
        }
        
        com.squareup.okhttp.Call call = getEnabledComputeCollectionCall(ccExtId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get IDFW compute collection.
     * Get enable/disable status of individual compute collections for IDFW. 
     * @param ccExtId  (required)
     * @return IdfwEnabledComputeCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public IdfwEnabledComputeCollection getEnabledComputeCollection(String ccExtId) throws ApiException {
        ApiResponse<IdfwEnabledComputeCollection> resp = getEnabledComputeCollectionWithHttpInfo(ccExtId);
        return resp.getData();
    }

    /**
     * Get IDFW compute collection.
     * Get enable/disable status of individual compute collections for IDFW. 
     * @param ccExtId  (required)
     * @return ApiResponse&lt;IdfwEnabledComputeCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<IdfwEnabledComputeCollection> getEnabledComputeCollectionWithHttpInfo(String ccExtId) throws ApiException {
        com.squareup.okhttp.Call call = getEnabledComputeCollectionValidateBeforeCall(ccExtId, null, null);
        Type localVarReturnType = new TypeToken<IdfwEnabledComputeCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get IDFW compute collection. (asynchronously)
     * Get enable/disable status of individual compute collections for IDFW. 
     * @param ccExtId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEnabledComputeCollectionAsync(String ccExtId, final ApiCallback<IdfwEnabledComputeCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEnabledComputeCollectionValidateBeforeCall(ccExtId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<IdfwEnabledComputeCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getMasterSwitchSetting
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getMasterSwitchSettingCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/idfw/master-switch-setting";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getMasterSwitchSettingValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getMasterSwitchSettingCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Identity Firewall master switch enabled/disabled
     * Fetches IDFW master switch setting to check whether master switch is enabled or disabled 
     * @return IdfwMasterSwitchSetting
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public IdfwMasterSwitchSetting getMasterSwitchSetting() throws ApiException {
        ApiResponse<IdfwMasterSwitchSetting> resp = getMasterSwitchSettingWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get Identity Firewall master switch enabled/disabled
     * Fetches IDFW master switch setting to check whether master switch is enabled or disabled 
     * @return ApiResponse&lt;IdfwMasterSwitchSetting&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<IdfwMasterSwitchSetting> getMasterSwitchSettingWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getMasterSwitchSettingValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<IdfwMasterSwitchSetting>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Identity Firewall master switch enabled/disabled (asynchronously)
     * Fetches IDFW master switch setting to check whether master switch is enabled or disabled 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getMasterSwitchSettingAsync(final ApiCallback<IdfwMasterSwitchSetting> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getMasterSwitchSettingValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<IdfwMasterSwitchSetting>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getStandaloneHostsSwitchSetting
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getStandaloneHostsSwitchSettingCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/idfw/standalone-host-switch-setting";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getStandaloneHostsSwitchSettingValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getStandaloneHostsSwitchSettingCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Standalone hosts switch enabled/disabled
     * Fetches IDFW standalone hosts switch setting to check whether standalone hosts is enabled or disabled 
     * @return IdfwStandaloneHostsSwitchSetting
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public IdfwStandaloneHostsSwitchSetting getStandaloneHostsSwitchSetting() throws ApiException {
        ApiResponse<IdfwStandaloneHostsSwitchSetting> resp = getStandaloneHostsSwitchSettingWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get Standalone hosts switch enabled/disabled
     * Fetches IDFW standalone hosts switch setting to check whether standalone hosts is enabled or disabled 
     * @return ApiResponse&lt;IdfwStandaloneHostsSwitchSetting&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<IdfwStandaloneHostsSwitchSetting> getStandaloneHostsSwitchSettingWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getStandaloneHostsSwitchSettingValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<IdfwStandaloneHostsSwitchSetting>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Standalone hosts switch enabled/disabled (asynchronously)
     * Fetches IDFW standalone hosts switch setting to check whether standalone hosts is enabled or disabled 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getStandaloneHostsSwitchSettingAsync(final ApiCallback<IdfwStandaloneHostsSwitchSetting> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getStandaloneHostsSwitchSettingValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<IdfwStandaloneHostsSwitchSetting>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listEnabledComputeCollections
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listEnabledComputeCollectionsCall(String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/idfw/idfw-compute-collections";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (includedFields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("included_fields", includedFields));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page_size", pageSize));
        if (sortAscending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_ascending", sortAscending));
        if (sortBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_by", sortBy));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listEnabledComputeCollectionsValidateBeforeCall(String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listEnabledComputeCollectionsCall(cursor, includedFields, pageSize, sortAscending, sortBy, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List all Identity firewall compute collections
     * List all Identity firewall compute collections. 
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @return IdfwEnabledComputeCollectionListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public IdfwEnabledComputeCollectionListResult listEnabledComputeCollections(String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy) throws ApiException {
        ApiResponse<IdfwEnabledComputeCollectionListResult> resp = listEnabledComputeCollectionsWithHttpInfo(cursor, includedFields, pageSize, sortAscending, sortBy);
        return resp.getData();
    }

    /**
     * List all Identity firewall compute collections
     * List all Identity firewall compute collections. 
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @return ApiResponse&lt;IdfwEnabledComputeCollectionListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<IdfwEnabledComputeCollectionListResult> listEnabledComputeCollectionsWithHttpInfo(String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy) throws ApiException {
        com.squareup.okhttp.Call call = listEnabledComputeCollectionsValidateBeforeCall(cursor, includedFields, pageSize, sortAscending, sortBy, null, null);
        Type localVarReturnType = new TypeToken<IdfwEnabledComputeCollectionListResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all Identity firewall compute collections (asynchronously)
     * List all Identity firewall compute collections. 
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listEnabledComputeCollectionsAsync(String cursor, String includedFields, Long pageSize, Boolean sortAscending, String sortBy, final ApiCallback<IdfwEnabledComputeCollectionListResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listEnabledComputeCollectionsValidateBeforeCall(cursor, includedFields, pageSize, sortAscending, sortBy, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<IdfwEnabledComputeCollectionListResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateEnabledComputeCollection
     * @param body  (required)
     * @param ccExtId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateEnabledComputeCollectionCall(IdfwEnabledComputeCollection body, String ccExtId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/idfw/idfw-compute-collections/{cc-ext-id}"
            .replaceAll("\\{" + "cc-ext-id" + "\\}", apiClient.escapeString(ccExtId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateEnabledComputeCollectionValidateBeforeCall(IdfwEnabledComputeCollection body, String ccExtId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateEnabledComputeCollection(Async)");
        }
        // verify the required parameter 'ccExtId' is set
        if (ccExtId == null) {
            throw new ApiException("Missing the required parameter 'ccExtId' when calling updateEnabledComputeCollection(Async)");
        }
        
        com.squareup.okhttp.Call call = updateEnabledComputeCollectionCall(body, ccExtId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update IDFW compute collection
     * Enable/disable individual compute collections for IDFW. 
     * @param body  (required)
     * @param ccExtId  (required)
     * @return IdfwEnabledComputeCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public IdfwEnabledComputeCollection updateEnabledComputeCollection(IdfwEnabledComputeCollection body, String ccExtId) throws ApiException {
        ApiResponse<IdfwEnabledComputeCollection> resp = updateEnabledComputeCollectionWithHttpInfo(body, ccExtId);
        return resp.getData();
    }

    /**
     * Update IDFW compute collection
     * Enable/disable individual compute collections for IDFW. 
     * @param body  (required)
     * @param ccExtId  (required)
     * @return ApiResponse&lt;IdfwEnabledComputeCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<IdfwEnabledComputeCollection> updateEnabledComputeCollectionWithHttpInfo(IdfwEnabledComputeCollection body, String ccExtId) throws ApiException {
        com.squareup.okhttp.Call call = updateEnabledComputeCollectionValidateBeforeCall(body, ccExtId, null, null);
        Type localVarReturnType = new TypeToken<IdfwEnabledComputeCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update IDFW compute collection (asynchronously)
     * Enable/disable individual compute collections for IDFW. 
     * @param body  (required)
     * @param ccExtId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateEnabledComputeCollectionAsync(IdfwEnabledComputeCollection body, String ccExtId, final ApiCallback<IdfwEnabledComputeCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateEnabledComputeCollectionValidateBeforeCall(body, ccExtId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<IdfwEnabledComputeCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateMasterSwitchSetting
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateMasterSwitchSettingCall(IdfwMasterSwitchSetting body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/idfw/master-switch-setting";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateMasterSwitchSettingValidateBeforeCall(IdfwMasterSwitchSetting body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateMasterSwitchSetting(Async)");
        }
        
        com.squareup.okhttp.Call call = updateMasterSwitchSettingCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update IDFW master switch setting enabled/disabled
     * Update Identity Firewall master switch setting (true&#x3D;enabled / false&#x3D;disabled). Identity Firewall master switch setting enables or disables Identity Firewall feature across the system.  It affects compute collections, hypervisor and virtual machines.  This operation is expensive and also has big impact and implication on system perforamce. 
     * @param body  (required)
     * @return IdfwMasterSwitchSetting
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public IdfwMasterSwitchSetting updateMasterSwitchSetting(IdfwMasterSwitchSetting body) throws ApiException {
        ApiResponse<IdfwMasterSwitchSetting> resp = updateMasterSwitchSettingWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Update IDFW master switch setting enabled/disabled
     * Update Identity Firewall master switch setting (true&#x3D;enabled / false&#x3D;disabled). Identity Firewall master switch setting enables or disables Identity Firewall feature across the system.  It affects compute collections, hypervisor and virtual machines.  This operation is expensive and also has big impact and implication on system perforamce. 
     * @param body  (required)
     * @return ApiResponse&lt;IdfwMasterSwitchSetting&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<IdfwMasterSwitchSetting> updateMasterSwitchSettingWithHttpInfo(IdfwMasterSwitchSetting body) throws ApiException {
        com.squareup.okhttp.Call call = updateMasterSwitchSettingValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<IdfwMasterSwitchSetting>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update IDFW master switch setting enabled/disabled (asynchronously)
     * Update Identity Firewall master switch setting (true&#x3D;enabled / false&#x3D;disabled). Identity Firewall master switch setting enables or disables Identity Firewall feature across the system.  It affects compute collections, hypervisor and virtual machines.  This operation is expensive and also has big impact and implication on system perforamce. 
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateMasterSwitchSettingAsync(IdfwMasterSwitchSetting body, final ApiCallback<IdfwMasterSwitchSetting> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateMasterSwitchSettingValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<IdfwMasterSwitchSetting>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateStandaloneHostsSwitchSetting
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateStandaloneHostsSwitchSettingCall(IdfwStandaloneHostsSwitchSetting body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/idfw/standalone-host-switch-setting";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateStandaloneHostsSwitchSettingValidateBeforeCall(IdfwStandaloneHostsSwitchSetting body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateStandaloneHostsSwitchSetting(Async)");
        }
        
        com.squareup.okhttp.Call call = updateStandaloneHostsSwitchSettingCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update IDFW master switch setting enabled/disabled
     * Update Identity Firewall standalone hosts switch setting (true&#x3D;enabled / false&#x3D;disabled). 
     * @param body  (required)
     * @return IdfwStandaloneHostsSwitchSetting
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public IdfwStandaloneHostsSwitchSetting updateStandaloneHostsSwitchSetting(IdfwStandaloneHostsSwitchSetting body) throws ApiException {
        ApiResponse<IdfwStandaloneHostsSwitchSetting> resp = updateStandaloneHostsSwitchSettingWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Update IDFW master switch setting enabled/disabled
     * Update Identity Firewall standalone hosts switch setting (true&#x3D;enabled / false&#x3D;disabled). 
     * @param body  (required)
     * @return ApiResponse&lt;IdfwStandaloneHostsSwitchSetting&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<IdfwStandaloneHostsSwitchSetting> updateStandaloneHostsSwitchSettingWithHttpInfo(IdfwStandaloneHostsSwitchSetting body) throws ApiException {
        com.squareup.okhttp.Call call = updateStandaloneHostsSwitchSettingValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<IdfwStandaloneHostsSwitchSetting>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update IDFW master switch setting enabled/disabled (asynchronously)
     * Update Identity Firewall standalone hosts switch setting (true&#x3D;enabled / false&#x3D;disabled). 
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateStandaloneHostsSwitchSettingAsync(IdfwStandaloneHostsSwitchSetting body, final ApiCallback<IdfwStandaloneHostsSwitchSetting> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateStandaloneHostsSwitchSettingValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<IdfwStandaloneHostsSwitchSetting>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
