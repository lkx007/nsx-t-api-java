/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ApiError;
import io.swagger.client.model.ComputeManager;
import io.swagger.client.model.ComputeManagerListResult;
import io.swagger.client.model.ComputeManagerStatus;
import io.swagger.client.model.ConfigurationState;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ManagementPlaneApiFabricComputeManagersApi {
    private ApiClient apiClient;

    public ManagementPlaneApiFabricComputeManagersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ManagementPlaneApiFabricComputeManagersApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addComputeManager
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addComputeManagerCall(ComputeManager body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/fabric/compute-managers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addComputeManagerValidateBeforeCall(ComputeManager body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addComputeManager(Async)");
        }
        
        com.squareup.okhttp.Call call = addComputeManagerCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Register compute manager with NSX
     * Registers compute manager with NSX. Inventory service will collect data from the registered compute manager 
     * @param body  (required)
     * @return ComputeManager
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ComputeManager addComputeManager(ComputeManager body) throws ApiException {
        ApiResponse<ComputeManager> resp = addComputeManagerWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Register compute manager with NSX
     * Registers compute manager with NSX. Inventory service will collect data from the registered compute manager 
     * @param body  (required)
     * @return ApiResponse&lt;ComputeManager&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ComputeManager> addComputeManagerWithHttpInfo(ComputeManager body) throws ApiException {
        com.squareup.okhttp.Call call = addComputeManagerValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<ComputeManager>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Register compute manager with NSX (asynchronously)
     * Registers compute manager with NSX. Inventory service will collect data from the registered compute manager 
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addComputeManagerAsync(ComputeManager body, final ApiCallback<ComputeManager> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addComputeManagerValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ComputeManager>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteComputeManager
     * @param computeManagerId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteComputeManagerCall(String computeManagerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/fabric/compute-managers/{compute-manager-id}"
            .replaceAll("\\{" + "compute-manager-id" + "\\}", apiClient.escapeString(computeManagerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteComputeManagerValidateBeforeCall(String computeManagerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'computeManagerId' is set
        if (computeManagerId == null) {
            throw new ApiException("Missing the required parameter 'computeManagerId' when calling deleteComputeManager(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteComputeManagerCall(computeManagerId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Unregister a compute manager
     * Unregisters a specified compute manager 
     * @param computeManagerId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteComputeManager(String computeManagerId) throws ApiException {
        deleteComputeManagerWithHttpInfo(computeManagerId);
    }

    /**
     * Unregister a compute manager
     * Unregisters a specified compute manager 
     * @param computeManagerId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteComputeManagerWithHttpInfo(String computeManagerId) throws ApiException {
        com.squareup.okhttp.Call call = deleteComputeManagerValidateBeforeCall(computeManagerId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Unregister a compute manager (asynchronously)
     * Unregisters a specified compute manager 
     * @param computeManagerId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteComputeManagerAsync(String computeManagerId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteComputeManagerValidateBeforeCall(computeManagerId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getComputeManagerState
     * @param computeManagerId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getComputeManagerStateCall(String computeManagerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/fabric/compute-managers/{compute-manager-id}/state"
            .replaceAll("\\{" + "compute-manager-id" + "\\}", apiClient.escapeString(computeManagerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getComputeManagerStateValidateBeforeCall(String computeManagerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'computeManagerId' is set
        if (computeManagerId == null) {
            throw new ApiException("Missing the required parameter 'computeManagerId' when calling getComputeManagerState(Async)");
        }
        
        com.squareup.okhttp.Call call = getComputeManagerStateCall(computeManagerId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the realized state of a compute manager
     * Get the realized state of a compute manager
     * @param computeManagerId  (required)
     * @return ConfigurationState
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConfigurationState getComputeManagerState(String computeManagerId) throws ApiException {
        ApiResponse<ConfigurationState> resp = getComputeManagerStateWithHttpInfo(computeManagerId);
        return resp.getData();
    }

    /**
     * Get the realized state of a compute manager
     * Get the realized state of a compute manager
     * @param computeManagerId  (required)
     * @return ApiResponse&lt;ConfigurationState&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConfigurationState> getComputeManagerStateWithHttpInfo(String computeManagerId) throws ApiException {
        com.squareup.okhttp.Call call = getComputeManagerStateValidateBeforeCall(computeManagerId, null, null);
        Type localVarReturnType = new TypeToken<ConfigurationState>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the realized state of a compute manager (asynchronously)
     * Get the realized state of a compute manager
     * @param computeManagerId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getComputeManagerStateAsync(String computeManagerId, final ApiCallback<ConfigurationState> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getComputeManagerStateValidateBeforeCall(computeManagerId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConfigurationState>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listComputeManagers
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param originType Compute manager type like vCenter (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param server IP address or hostname of compute manager (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listComputeManagersCall(String cursor, String includedFields, String originType, Long pageSize, String server, Boolean sortAscending, String sortBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/fabric/compute-managers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (includedFields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("included_fields", includedFields));
        if (originType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("origin_type", originType));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page_size", pageSize));
        if (server != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("server", server));
        if (sortAscending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_ascending", sortAscending));
        if (sortBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_by", sortBy));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listComputeManagersValidateBeforeCall(String cursor, String includedFields, String originType, Long pageSize, String server, Boolean sortAscending, String sortBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listComputeManagersCall(cursor, includedFields, originType, pageSize, server, sortAscending, sortBy, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Return the List of Compute managers
     * Returns information about all compute managers.
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param originType Compute manager type like vCenter (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param server IP address or hostname of compute manager (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @return ComputeManagerListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ComputeManagerListResult listComputeManagers(String cursor, String includedFields, String originType, Long pageSize, String server, Boolean sortAscending, String sortBy) throws ApiException {
        ApiResponse<ComputeManagerListResult> resp = listComputeManagersWithHttpInfo(cursor, includedFields, originType, pageSize, server, sortAscending, sortBy);
        return resp.getData();
    }

    /**
     * Return the List of Compute managers
     * Returns information about all compute managers.
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param originType Compute manager type like vCenter (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param server IP address or hostname of compute manager (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @return ApiResponse&lt;ComputeManagerListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ComputeManagerListResult> listComputeManagersWithHttpInfo(String cursor, String includedFields, String originType, Long pageSize, String server, Boolean sortAscending, String sortBy) throws ApiException {
        com.squareup.okhttp.Call call = listComputeManagersValidateBeforeCall(cursor, includedFields, originType, pageSize, server, sortAscending, sortBy, null, null);
        Type localVarReturnType = new TypeToken<ComputeManagerListResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Return the List of Compute managers (asynchronously)
     * Returns information about all compute managers.
     * @param cursor Opaque cursor to be used for getting next page of records (supplied by current result page) (optional)
     * @param includedFields Comma separated list of fields that should be included in query result (optional)
     * @param originType Compute manager type like vCenter (optional)
     * @param pageSize Maximum number of results to return in this page (server may return fewer) (optional)
     * @param server IP address or hostname of compute manager (optional)
     * @param sortAscending  (optional)
     * @param sortBy Field by which records are sorted (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listComputeManagersAsync(String cursor, String includedFields, String originType, Long pageSize, String server, Boolean sortAscending, String sortBy, final ApiCallback<ComputeManagerListResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listComputeManagersValidateBeforeCall(cursor, includedFields, originType, pageSize, server, sortAscending, sortBy, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ComputeManagerListResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for readComputeManager
     * @param computeManagerId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call readComputeManagerCall(String computeManagerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/fabric/compute-managers/{compute-manager-id}"
            .replaceAll("\\{" + "compute-manager-id" + "\\}", apiClient.escapeString(computeManagerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call readComputeManagerValidateBeforeCall(String computeManagerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'computeManagerId' is set
        if (computeManagerId == null) {
            throw new ApiException("Missing the required parameter 'computeManagerId' when calling readComputeManager(Async)");
        }
        
        com.squareup.okhttp.Call call = readComputeManagerCall(computeManagerId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Return compute manager Information
     * Returns information about a specific compute manager
     * @param computeManagerId  (required)
     * @return ComputeManager
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ComputeManager readComputeManager(String computeManagerId) throws ApiException {
        ApiResponse<ComputeManager> resp = readComputeManagerWithHttpInfo(computeManagerId);
        return resp.getData();
    }

    /**
     * Return compute manager Information
     * Returns information about a specific compute manager
     * @param computeManagerId  (required)
     * @return ApiResponse&lt;ComputeManager&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ComputeManager> readComputeManagerWithHttpInfo(String computeManagerId) throws ApiException {
        com.squareup.okhttp.Call call = readComputeManagerValidateBeforeCall(computeManagerId, null, null);
        Type localVarReturnType = new TypeToken<ComputeManager>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Return compute manager Information (asynchronously)
     * Returns information about a specific compute manager
     * @param computeManagerId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call readComputeManagerAsync(String computeManagerId, final ApiCallback<ComputeManager> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = readComputeManagerValidateBeforeCall(computeManagerId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ComputeManager>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for readComputeManagerStatus
     * @param computeManagerId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call readComputeManagerStatusCall(String computeManagerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/fabric/compute-managers/{compute-manager-id}/status"
            .replaceAll("\\{" + "compute-manager-id" + "\\}", apiClient.escapeString(computeManagerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call readComputeManagerStatusValidateBeforeCall(String computeManagerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'computeManagerId' is set
        if (computeManagerId == null) {
            throw new ApiException("Missing the required parameter 'computeManagerId' when calling readComputeManagerStatus(Async)");
        }
        
        com.squareup.okhttp.Call call = readComputeManagerStatusCall(computeManagerId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Return runtime status information for a compute manager
     * Returns connection and version information about a compute manager 
     * @param computeManagerId  (required)
     * @return ComputeManagerStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ComputeManagerStatus readComputeManagerStatus(String computeManagerId) throws ApiException {
        ApiResponse<ComputeManagerStatus> resp = readComputeManagerStatusWithHttpInfo(computeManagerId);
        return resp.getData();
    }

    /**
     * Return runtime status information for a compute manager
     * Returns connection and version information about a compute manager 
     * @param computeManagerId  (required)
     * @return ApiResponse&lt;ComputeManagerStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ComputeManagerStatus> readComputeManagerStatusWithHttpInfo(String computeManagerId) throws ApiException {
        com.squareup.okhttp.Call call = readComputeManagerStatusValidateBeforeCall(computeManagerId, null, null);
        Type localVarReturnType = new TypeToken<ComputeManagerStatus>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Return runtime status information for a compute manager (asynchronously)
     * Returns connection and version information about a compute manager 
     * @param computeManagerId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call readComputeManagerStatusAsync(String computeManagerId, final ApiCallback<ComputeManagerStatus> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = readComputeManagerStatusValidateBeforeCall(computeManagerId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ComputeManagerStatus>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateComputeManager
     * @param body  (required)
     * @param computeManagerId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateComputeManagerCall(ComputeManager body, String computeManagerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/fabric/compute-managers/{compute-manager-id}"
            .replaceAll("\\{" + "compute-manager-id" + "\\}", apiClient.escapeString(computeManagerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateComputeManagerValidateBeforeCall(ComputeManager body, String computeManagerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateComputeManager(Async)");
        }
        // verify the required parameter 'computeManagerId' is set
        if (computeManagerId == null) {
            throw new ApiException("Missing the required parameter 'computeManagerId' when calling updateComputeManager(Async)");
        }
        
        com.squareup.okhttp.Call call = updateComputeManagerCall(body, computeManagerId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update compute manager
     * Updates a specified compute manager 
     * @param body  (required)
     * @param computeManagerId  (required)
     * @return ComputeManager
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ComputeManager updateComputeManager(ComputeManager body, String computeManagerId) throws ApiException {
        ApiResponse<ComputeManager> resp = updateComputeManagerWithHttpInfo(body, computeManagerId);
        return resp.getData();
    }

    /**
     * Update compute manager
     * Updates a specified compute manager 
     * @param body  (required)
     * @param computeManagerId  (required)
     * @return ApiResponse&lt;ComputeManager&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ComputeManager> updateComputeManagerWithHttpInfo(ComputeManager body, String computeManagerId) throws ApiException {
        com.squareup.okhttp.Call call = updateComputeManagerValidateBeforeCall(body, computeManagerId, null, null);
        Type localVarReturnType = new TypeToken<ComputeManager>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update compute manager (asynchronously)
     * Updates a specified compute manager 
     * @param body  (required)
     * @param computeManagerId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateComputeManagerAsync(ComputeManager body, String computeManagerId, final ApiCallback<ComputeManager> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateComputeManagerValidateBeforeCall(body, computeManagerId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ComputeManager>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
