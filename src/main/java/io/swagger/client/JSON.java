/*
 * NSX-T Manager API
 * VMware NSX-T Manager REST API
 *
 * OpenAPI spec version: 2.5.1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import io.gsonfire.GsonFireBuilder;
import io.gsonfire.PostProcessor;
import io.gsonfire.TypeSelector;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.internal.bind.util.ISO8601Utils;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import org.threeten.bp.LocalDate;
import org.threeten.bp.OffsetDateTime;
import org.threeten.bp.format.DateTimeFormatter;

import io.swagger.client.model.*;

import java.io.IOException;
import java.io.StringReader;
import java.lang.reflect.Type;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.ParsePosition;
import java.util.Date;
import java.util.Map;
import java.util.HashMap;

public class JSON {
    private Gson gson;
    private boolean isLenientOnJson = false;
    private DateTypeAdapter dateTypeAdapter = new DateTypeAdapter();
    private SqlDateTypeAdapter sqlDateTypeAdapter = new SqlDateTypeAdapter();
    private OffsetDateTimeTypeAdapter offsetDateTimeTypeAdapter = new OffsetDateTimeTypeAdapter();
    private LocalDateTypeAdapter localDateTypeAdapter = new LocalDateTypeAdapter();

    public static GsonBuilder createGson() {
        GsonFireBuilder fireBuilder = new GsonFireBuilder()
          .registerTypeSelector(NSServiceElement.class, new TypeSelector<NSServiceElement>() {
            @Override
            public Class<? extends NSServiceElement> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends NSServiceElement>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("ALGTypeNSService".toUpperCase(), ALGTypeNSService.class);
                    classByDiscriminatorValue.put("EtherTypeNSService".toUpperCase(), EtherTypeNSService.class);
                    classByDiscriminatorValue.put("ICMPTypeNSService".toUpperCase(), ICMPTypeNSService.class);
                    classByDiscriminatorValue.put("IGMPTypeNSService".toUpperCase(), IGMPTypeNSService.class);
                    classByDiscriminatorValue.put("IPProtocolNSService".toUpperCase(), IPProtocolNSService.class);
                    classByDiscriminatorValue.put("L4PortSetNSService".toUpperCase(), L4PortSetNSService.class);
                    classByDiscriminatorValue.put("NSServiceElement".toUpperCase(), NSServiceElement.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, "resource_type"));
            }
          })
          .registerPostProcessor(NSServiceElement.class, new PostProcessor<NSServiceElement>() {
              @Override
              public void postDeserialize(NSServiceElement result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, NSServiceElement src, Gson gson) {
                  Map<Class<? extends NSServiceElement>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(ALGTypeNSService.class, "ALGTypeNSService");
                      discriminatorValueByClass.put(EtherTypeNSService.class, "EtherTypeNSService");
                      discriminatorValueByClass.put(ICMPTypeNSService.class, "ICMPTypeNSService");
                      discriminatorValueByClass.put(IGMPTypeNSService.class, "IGMPTypeNSService");
                      discriminatorValueByClass.put(IPProtocolNSService.class, "IPProtocolNSService");
                      discriminatorValueByClass.put(L4PortSetNSService.class, "L4PortSetNSService");
                      discriminatorValueByClass.put(NSServiceElement.class, "NSServiceElement");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has("resource_type"))
                      {
                          ((JsonObject) result).addProperty("resource_type", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(VersionList.class, new TypeSelector<VersionList>() {
            @Override
            public Class<? extends VersionList> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends VersionList>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("AcceptableComponentVersion".toUpperCase(), AcceptableComponentVersion.class);
                    classByDiscriminatorValue.put("VersionList".toUpperCase(), VersionList.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, ""));
            }
          })
          .registerPostProcessor(VersionList.class, new PostProcessor<VersionList>() {
              @Override
              public void postDeserialize(VersionList result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, VersionList src, Gson gson) {
                  Map<Class<? extends VersionList>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(AcceptableComponentVersion.class, "AcceptableComponentVersion");
                      discriminatorValueByClass.put(VersionList.class, "VersionList");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has(""))
                      {
                          ((JsonObject) result).addProperty("", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(ManagedResource.class, new TypeSelector<ManagedResource>() {
            @Override
            public Class<? extends ManagedResource> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends ManagedResource>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("ActionableResource".toUpperCase(), ActionableResource.class);
                    classByDiscriminatorValue.put("AdvertiseRuleList".toUpperCase(), AdvertiseRuleList.class);
                    classByDiscriminatorValue.put("AdvertisementConfig".toUpperCase(), AdvertisementConfig.class);
                    classByDiscriminatorValue.put("AllocationIpAddress".toUpperCase(), AllocationIpAddress.class);
                    classByDiscriminatorValue.put("AppDiscoverySession".toUpperCase(), AppDiscoverySession.class);
                    classByDiscriminatorValue.put("AppInfo".toUpperCase(), AppInfo.class);
                    classByDiscriminatorValue.put("AppProfile".toUpperCase(), AppProfile.class);
                    classByDiscriminatorValue.put("AppProfileMetaInfo".toUpperCase(), AppProfileMetaInfo.class);
                    classByDiscriminatorValue.put("BGPCommunityList".toUpperCase(), BGPCommunityList.class);
                    classByDiscriminatorValue.put("BaseFirewallProfile".toUpperCase(), BaseFirewallProfile.class);
                    classByDiscriminatorValue.put("BaseHostSwitchProfile".toUpperCase(), BaseHostSwitchProfile.class);
                    classByDiscriminatorValue.put("BaseServiceInstance".toUpperCase(), BaseServiceInstance.class);
                    classByDiscriminatorValue.put("BaseServiceProfile".toUpperCase(), BaseServiceProfile.class);
                    classByDiscriminatorValue.put("BaseSwitchingProfile".toUpperCase(), BaseSwitchingProfile.class);
                    classByDiscriminatorValue.put("BfdConfig".toUpperCase(), BfdConfig.class);
                    classByDiscriminatorValue.put("BgpConfig".toUpperCase(), BgpConfig.class);
                    classByDiscriminatorValue.put("BgpNeighbor".toUpperCase(), BgpNeighbor.class);
                    classByDiscriminatorValue.put("BridgeCluster".toUpperCase(), BridgeCluster.class);
                    classByDiscriminatorValue.put("BridgeEndpoint".toUpperCase(), BridgeEndpoint.class);
                    classByDiscriminatorValue.put("BridgeEndpointProfile".toUpperCase(), BridgeEndpointProfile.class);
                    classByDiscriminatorValue.put("CapacityThresholdList".toUpperCase(), CapacityThresholdList.class);
                    classByDiscriminatorValue.put("CapacityUsageResponse".toUpperCase(), CapacityUsageResponse.class);
                    classByDiscriminatorValue.put("Certificate".toUpperCase(), Certificate.class);
                    classByDiscriminatorValue.put("ClusterNodeConfig".toUpperCase(), ClusterNodeConfig.class);
                    classByDiscriminatorValue.put("ClusterProfile".toUpperCase(), ClusterProfile.class);
                    classByDiscriminatorValue.put("ComputeCollectionFabricTemplate".toUpperCase(), ComputeCollectionFabricTemplate.class);
                    classByDiscriminatorValue.put("ComputeCollectionTransportNodeTemplate".toUpperCase(), ComputeCollectionTransportNodeTemplate.class);
                    classByDiscriminatorValue.put("ComputeManager".toUpperCase(), ComputeManager.class);
                    classByDiscriminatorValue.put("Crl".toUpperCase(), Crl.class);
                    classByDiscriminatorValue.put("CrlDistributionPoint".toUpperCase(), CrlDistributionPoint.class);
                    classByDiscriminatorValue.put("CrlObjectData".toUpperCase(), CrlObjectData.class);
                    classByDiscriminatorValue.put("Csr".toUpperCase(), Csr.class);
                    classByDiscriminatorValue.put("DADProfile".toUpperCase(), DADProfile.class);
                    classByDiscriminatorValue.put("DSExcludeList".toUpperCase(), DSExcludeList.class);
                    classByDiscriminatorValue.put("DSSection".toUpperCase(), DSSection.class);
                    classByDiscriminatorValue.put("DhcpProfile".toUpperCase(), DhcpProfile.class);
                    classByDiscriminatorValue.put("DhcpRelayProfile".toUpperCase(), DhcpRelayProfile.class);
                    classByDiscriminatorValue.put("DhcpRelayService".toUpperCase(), DhcpRelayService.class);
                    classByDiscriminatorValue.put("DirectoryDomain".toUpperCase(), DirectoryDomain.class);
                    classByDiscriminatorValue.put("DirectoryGroup".toUpperCase(), DirectoryGroup.class);
                    classByDiscriminatorValue.put("DirectoryGroupMember".toUpperCase(), DirectoryGroupMember.class);
                    classByDiscriminatorValue.put("DirectoryLdapServer".toUpperCase(), DirectoryLdapServer.class);
                    classByDiscriminatorValue.put("DnsForwarder".toUpperCase(), DnsForwarder.class);
                    classByDiscriminatorValue.put("EdgeCluster".toUpperCase(), EdgeCluster.class);
                    classByDiscriminatorValue.put("FailureDomain".toUpperCase(), FailureDomain.class);
                    classByDiscriminatorValue.put("FeatureStackCollectionConfiguration".toUpperCase(), FeatureStackCollectionConfiguration.class);
                    classByDiscriminatorValue.put("FirewallStatus".toUpperCase(), FirewallStatus.class);
                    classByDiscriminatorValue.put("GlobalCollectionConfiguration".toUpperCase(), GlobalCollectionConfiguration.class);
                    classByDiscriminatorValue.put("GlobalConfigs".toUpperCase(), GlobalConfigs.class);
                    classByDiscriminatorValue.put("IPPrefixList".toUpperCase(), IPPrefixList.class);
                    classByDiscriminatorValue.put("IPSecVPNDPDProfile".toUpperCase(), IPSecVPNDPDProfile.class);
                    classByDiscriminatorValue.put("IPSecVPNIKEProfile".toUpperCase(), IPSecVPNIKEProfile.class);
                    classByDiscriminatorValue.put("IPSecVPNLocalEndpoint".toUpperCase(), IPSecVPNLocalEndpoint.class);
                    classByDiscriminatorValue.put("IPSecVPNPeerEndpoint".toUpperCase(), IPSecVPNPeerEndpoint.class);
                    classByDiscriminatorValue.put("IPSecVPNService".toUpperCase(), IPSecVPNService.class);
                    classByDiscriminatorValue.put("IPSecVPNSession".toUpperCase(), IPSecVPNSession.class);
                    classByDiscriminatorValue.put("IPSecVPNTunnelProfile".toUpperCase(), IPSecVPNTunnelProfile.class);
                    classByDiscriminatorValue.put("IPSet".toUpperCase(), IPSet.class);
                    classByDiscriminatorValue.put("IdfwEnabledComputeCollection".toUpperCase(), IdfwEnabledComputeCollection.class);
                    classByDiscriminatorValue.put("InstanceEndpoint".toUpperCase(), InstanceEndpoint.class);
                    classByDiscriminatorValue.put("InstanceRuntime".toUpperCase(), InstanceRuntime.class);
                    classByDiscriminatorValue.put("IntelligenceHostConfigurationInfo".toUpperCase(), IntelligenceHostConfigurationInfo.class);
                    classByDiscriminatorValue.put("InterfaceNeighborProperties".toUpperCase(), InterfaceNeighborProperties.class);
                    classByDiscriminatorValue.put("IpAllocationBase".toUpperCase(), IpAllocationBase.class);
                    classByDiscriminatorValue.put("IpBlock".toUpperCase(), IpBlock.class);
                    classByDiscriminatorValue.put("IpBlockSubnet".toUpperCase(), IpBlockSubnet.class);
                    classByDiscriminatorValue.put("IpPool".toUpperCase(), IpPool.class);
                    classByDiscriminatorValue.put("IpfixCollectorConfig".toUpperCase(), IpfixCollectorConfig.class);
                    classByDiscriminatorValue.put("IpfixCollectorUpmProfile".toUpperCase(), IpfixCollectorUpmProfile.class);
                    classByDiscriminatorValue.put("IpfixConfig".toUpperCase(), IpfixConfig.class);
                    classByDiscriminatorValue.put("IpfixObsPointConfig".toUpperCase(), IpfixObsPointConfig.class);
                    classByDiscriminatorValue.put("IpfixUpmProfile".toUpperCase(), IpfixUpmProfile.class);
                    classByDiscriminatorValue.put("L2VpnService".toUpperCase(), L2VpnService.class);
                    classByDiscriminatorValue.put("L2VpnSession".toUpperCase(), L2VpnSession.class);
                    classByDiscriminatorValue.put("LbAppProfile".toUpperCase(), LbAppProfile.class);
                    classByDiscriminatorValue.put("LbMonitor".toUpperCase(), LbMonitor.class);
                    classByDiscriminatorValue.put("LbPersistenceProfile".toUpperCase(), LbPersistenceProfile.class);
                    classByDiscriminatorValue.put("LbPool".toUpperCase(), LbPool.class);
                    classByDiscriminatorValue.put("LbRule".toUpperCase(), LbRule.class);
                    classByDiscriminatorValue.put("LbService".toUpperCase(), LbService.class);
                    classByDiscriminatorValue.put("LbSslProfile".toUpperCase(), LbSslProfile.class);
                    classByDiscriminatorValue.put("LbTcpProfile".toUpperCase(), LbTcpProfile.class);
                    classByDiscriminatorValue.put("LbVirtualServer".toUpperCase(), LbVirtualServer.class);
                    classByDiscriminatorValue.put("LogicalDhcpServer".toUpperCase(), LogicalDhcpServer.class);
                    classByDiscriminatorValue.put("LogicalPort".toUpperCase(), LogicalPort.class);
                    classByDiscriminatorValue.put("LogicalRouter".toUpperCase(), LogicalRouter.class);
                    classByDiscriminatorValue.put("LogicalRouterPort".toUpperCase(), LogicalRouterPort.class);
                    classByDiscriminatorValue.put("LogicalSwitch".toUpperCase(), LogicalSwitch.class);
                    classByDiscriminatorValue.put("MACSet".toUpperCase(), MACSet.class);
                    classByDiscriminatorValue.put("MacPool".toUpperCase(), MacPool.class);
                    classByDiscriminatorValue.put("ManualHealthCheck".toUpperCase(), ManualHealthCheck.class);
                    classByDiscriminatorValue.put("MetadataProxy".toUpperCase(), MetadataProxy.class);
                    classByDiscriminatorValue.put("MigrationUnitGroup".toUpperCase(), MigrationUnitGroup.class);
                    classByDiscriminatorValue.put("MigrationUnitGroupAggregateInfo".toUpperCase(), MigrationUnitGroupAggregateInfo.class);
                    classByDiscriminatorValue.put("NDRAProfile".toUpperCase(), NDRAProfile.class);
                    classByDiscriminatorValue.put("NSGroup".toUpperCase(), NSGroup.class);
                    classByDiscriminatorValue.put("NSProfile".toUpperCase(), NSProfile.class);
                    classByDiscriminatorValue.put("NSService".toUpperCase(), NSService.class);
                    classByDiscriminatorValue.put("NSServiceGroup".toUpperCase(), NSServiceGroup.class);
                    classByDiscriminatorValue.put("NatRule".toUpperCase(), NatRule.class);
                    classByDiscriminatorValue.put("NetworkMigrationSpec".toUpperCase(), NetworkMigrationSpec.class);
                    classByDiscriminatorValue.put("Node".toUpperCase(), Node.class);
                    classByDiscriminatorValue.put("NotificationWatcher".toUpperCase(), NotificationWatcher.class);
                    classByDiscriminatorValue.put("NotificationsList".toUpperCase(), NotificationsList.class);
                    classByDiscriminatorValue.put("PBRSection".toUpperCase(), PBRSection.class);
                    classByDiscriminatorValue.put("PacketCaptureSession".toUpperCase(), PacketCaptureSession.class);
                    classByDiscriminatorValue.put("PortMirroringSession".toUpperCase(), PortMirroringSession.class);
                    classByDiscriminatorValue.put("PrincipalIdentity".toUpperCase(), PrincipalIdentity.class);
                    classByDiscriminatorValue.put("Proxy".toUpperCase(), Proxy.class);
                    classByDiscriminatorValue.put("RedistributionConfig".toUpperCase(), RedistributionConfig.class);
                    classByDiscriminatorValue.put("RedistributionRuleList".toUpperCase(), RedistributionRuleList.class);
                    classByDiscriminatorValue.put("RoleBinding".toUpperCase(), RoleBinding.class);
                    classByDiscriminatorValue.put("RouteMap".toUpperCase(), RouteMap.class);
                    classByDiscriminatorValue.put("RoutingConfig".toUpperCase(), RoutingConfig.class);
                    classByDiscriminatorValue.put("ServiceAttachment".toUpperCase(), ServiceAttachment.class);
                    classByDiscriminatorValue.put("ServiceChain".toUpperCase(), ServiceChain.class);
                    classByDiscriminatorValue.put("ServiceConfig".toUpperCase(), ServiceConfig.class);
                    classByDiscriminatorValue.put("ServiceDefinition".toUpperCase(), ServiceDefinition.class);
                    classByDiscriminatorValue.put("ServiceDeployment".toUpperCase(), ServiceDeployment.class);
                    classByDiscriminatorValue.put("ServiceInsertionStatus".toUpperCase(), ServiceInsertionStatus.class);
                    classByDiscriminatorValue.put("ServiceManager".toUpperCase(), ServiceManager.class);
                    classByDiscriminatorValue.put("ServiceProfileNSGroups".toUpperCase(), ServiceProfileNSGroups.class);
                    classByDiscriminatorValue.put("SolutionConfig".toUpperCase(), SolutionConfig.class);
                    classByDiscriminatorValue.put("StaticHopBfdPeer".toUpperCase(), StaticHopBfdPeer.class);
                    classByDiscriminatorValue.put("StaticRoute".toUpperCase(), StaticRoute.class);
                    classByDiscriminatorValue.put("TelemetryAgreement".toUpperCase(), TelemetryAgreement.class);
                    classByDiscriminatorValue.put("TelemetryConfig".toUpperCase(), TelemetryConfig.class);
                    classByDiscriminatorValue.put("TelemetryProxy".toUpperCase(), TelemetryProxy.class);
                    classByDiscriminatorValue.put("TransportNode".toUpperCase(), TransportNode.class);
                    classByDiscriminatorValue.put("TransportNodeCollection".toUpperCase(), TransportNodeCollection.class);
                    classByDiscriminatorValue.put("TransportNodeProfile".toUpperCase(), TransportNodeProfile.class);
                    classByDiscriminatorValue.put("TransportZone".toUpperCase(), TransportZone.class);
                    classByDiscriminatorValue.put("TransportZoneProfile".toUpperCase(), TransportZoneProfile.class);
                    classByDiscriminatorValue.put("TrustObjectData".toUpperCase(), TrustObjectData.class);
                    classByDiscriminatorValue.put("UpdatePrincipalIdentityCertificateRequest".toUpperCase(), UpdatePrincipalIdentityCertificateRequest.class);
                    classByDiscriminatorValue.put("UpgradeUnitGroup".toUpperCase(), UpgradeUnitGroup.class);
                    classByDiscriminatorValue.put("UpgradeUnitGroupAggregateInfo".toUpperCase(), UpgradeUnitGroupAggregateInfo.class);
                    classByDiscriminatorValue.put("VendorTemplate".toUpperCase(), VendorTemplate.class);
                    classByDiscriminatorValue.put("VersionList".toUpperCase(), VersionList.class);
                    classByDiscriminatorValue.put("View".toUpperCase(), View.class);
                    classByDiscriminatorValue.put("VniPool".toUpperCase(), VniPool.class);
                    classByDiscriminatorValue.put("VtepLabelPool".toUpperCase(), VtepLabelPool.class);
                    classByDiscriminatorValue.put("WidgetConfiguration".toUpperCase(), WidgetConfiguration.class);
                    classByDiscriminatorValue.put("ManagedResource".toUpperCase(), ManagedResource.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, ""));
            }
          })
          .registerPostProcessor(ManagedResource.class, new PostProcessor<ManagedResource>() {
              @Override
              public void postDeserialize(ManagedResource result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, ManagedResource src, Gson gson) {
                  Map<Class<? extends ManagedResource>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(ActionableResource.class, "ActionableResource");
                      discriminatorValueByClass.put(AdvertiseRuleList.class, "AdvertiseRuleList");
                      discriminatorValueByClass.put(AdvertisementConfig.class, "AdvertisementConfig");
                      discriminatorValueByClass.put(AllocationIpAddress.class, "AllocationIpAddress");
                      discriminatorValueByClass.put(AppDiscoverySession.class, "AppDiscoverySession");
                      discriminatorValueByClass.put(AppInfo.class, "AppInfo");
                      discriminatorValueByClass.put(AppProfile.class, "AppProfile");
                      discriminatorValueByClass.put(AppProfileMetaInfo.class, "AppProfileMetaInfo");
                      discriminatorValueByClass.put(BGPCommunityList.class, "BGPCommunityList");
                      discriminatorValueByClass.put(BaseFirewallProfile.class, "BaseFirewallProfile");
                      discriminatorValueByClass.put(BaseHostSwitchProfile.class, "BaseHostSwitchProfile");
                      discriminatorValueByClass.put(BaseServiceInstance.class, "BaseServiceInstance");
                      discriminatorValueByClass.put(BaseServiceProfile.class, "BaseServiceProfile");
                      discriminatorValueByClass.put(BaseSwitchingProfile.class, "BaseSwitchingProfile");
                      discriminatorValueByClass.put(BfdConfig.class, "BfdConfig");
                      discriminatorValueByClass.put(BgpConfig.class, "BgpConfig");
                      discriminatorValueByClass.put(BgpNeighbor.class, "BgpNeighbor");
                      discriminatorValueByClass.put(BridgeCluster.class, "BridgeCluster");
                      discriminatorValueByClass.put(BridgeEndpoint.class, "BridgeEndpoint");
                      discriminatorValueByClass.put(BridgeEndpointProfile.class, "BridgeEndpointProfile");
                      discriminatorValueByClass.put(CapacityThresholdList.class, "CapacityThresholdList");
                      discriminatorValueByClass.put(CapacityUsageResponse.class, "CapacityUsageResponse");
                      discriminatorValueByClass.put(Certificate.class, "Certificate");
                      discriminatorValueByClass.put(ClusterNodeConfig.class, "ClusterNodeConfig");
                      discriminatorValueByClass.put(ClusterProfile.class, "ClusterProfile");
                      discriminatorValueByClass.put(ComputeCollectionFabricTemplate.class, "ComputeCollectionFabricTemplate");
                      discriminatorValueByClass.put(ComputeCollectionTransportNodeTemplate.class, "ComputeCollectionTransportNodeTemplate");
                      discriminatorValueByClass.put(ComputeManager.class, "ComputeManager");
                      discriminatorValueByClass.put(Crl.class, "Crl");
                      discriminatorValueByClass.put(CrlDistributionPoint.class, "CrlDistributionPoint");
                      discriminatorValueByClass.put(CrlObjectData.class, "CrlObjectData");
                      discriminatorValueByClass.put(Csr.class, "Csr");
                      discriminatorValueByClass.put(DADProfile.class, "DADProfile");
                      discriminatorValueByClass.put(DSExcludeList.class, "DSExcludeList");
                      discriminatorValueByClass.put(DSSection.class, "DSSection");
                      discriminatorValueByClass.put(DhcpProfile.class, "DhcpProfile");
                      discriminatorValueByClass.put(DhcpRelayProfile.class, "DhcpRelayProfile");
                      discriminatorValueByClass.put(DhcpRelayService.class, "DhcpRelayService");
                      discriminatorValueByClass.put(DirectoryDomain.class, "DirectoryDomain");
                      discriminatorValueByClass.put(DirectoryGroup.class, "DirectoryGroup");
                      discriminatorValueByClass.put(DirectoryGroupMember.class, "DirectoryGroupMember");
                      discriminatorValueByClass.put(DirectoryLdapServer.class, "DirectoryLdapServer");
                      discriminatorValueByClass.put(DnsForwarder.class, "DnsForwarder");
                      discriminatorValueByClass.put(EdgeCluster.class, "EdgeCluster");
                      discriminatorValueByClass.put(FailureDomain.class, "FailureDomain");
                      discriminatorValueByClass.put(FeatureStackCollectionConfiguration.class, "FeatureStackCollectionConfiguration");
                      discriminatorValueByClass.put(FirewallStatus.class, "FirewallStatus");
                      discriminatorValueByClass.put(GlobalCollectionConfiguration.class, "GlobalCollectionConfiguration");
                      discriminatorValueByClass.put(GlobalConfigs.class, "GlobalConfigs");
                      discriminatorValueByClass.put(IPPrefixList.class, "IPPrefixList");
                      discriminatorValueByClass.put(IPSecVPNDPDProfile.class, "IPSecVPNDPDProfile");
                      discriminatorValueByClass.put(IPSecVPNIKEProfile.class, "IPSecVPNIKEProfile");
                      discriminatorValueByClass.put(IPSecVPNLocalEndpoint.class, "IPSecVPNLocalEndpoint");
                      discriminatorValueByClass.put(IPSecVPNPeerEndpoint.class, "IPSecVPNPeerEndpoint");
                      discriminatorValueByClass.put(IPSecVPNService.class, "IPSecVPNService");
                      discriminatorValueByClass.put(IPSecVPNSession.class, "IPSecVPNSession");
                      discriminatorValueByClass.put(IPSecVPNTunnelProfile.class, "IPSecVPNTunnelProfile");
                      discriminatorValueByClass.put(IPSet.class, "IPSet");
                      discriminatorValueByClass.put(IdfwEnabledComputeCollection.class, "IdfwEnabledComputeCollection");
                      discriminatorValueByClass.put(InstanceEndpoint.class, "InstanceEndpoint");
                      discriminatorValueByClass.put(InstanceRuntime.class, "InstanceRuntime");
                      discriminatorValueByClass.put(IntelligenceHostConfigurationInfo.class, "IntelligenceHostConfigurationInfo");
                      discriminatorValueByClass.put(InterfaceNeighborProperties.class, "InterfaceNeighborProperties");
                      discriminatorValueByClass.put(IpAllocationBase.class, "IpAllocationBase");
                      discriminatorValueByClass.put(IpBlock.class, "IpBlock");
                      discriminatorValueByClass.put(IpBlockSubnet.class, "IpBlockSubnet");
                      discriminatorValueByClass.put(IpPool.class, "IpPool");
                      discriminatorValueByClass.put(IpfixCollectorConfig.class, "IpfixCollectorConfig");
                      discriminatorValueByClass.put(IpfixCollectorUpmProfile.class, "IpfixCollectorUpmProfile");
                      discriminatorValueByClass.put(IpfixConfig.class, "IpfixConfig");
                      discriminatorValueByClass.put(IpfixObsPointConfig.class, "IpfixObsPointConfig");
                      discriminatorValueByClass.put(IpfixUpmProfile.class, "IpfixUpmProfile");
                      discriminatorValueByClass.put(L2VpnService.class, "L2VpnService");
                      discriminatorValueByClass.put(L2VpnSession.class, "L2VpnSession");
                      discriminatorValueByClass.put(LbAppProfile.class, "LbAppProfile");
                      discriminatorValueByClass.put(LbMonitor.class, "LbMonitor");
                      discriminatorValueByClass.put(LbPersistenceProfile.class, "LbPersistenceProfile");
                      discriminatorValueByClass.put(LbPool.class, "LbPool");
                      discriminatorValueByClass.put(LbRule.class, "LbRule");
                      discriminatorValueByClass.put(LbService.class, "LbService");
                      discriminatorValueByClass.put(LbSslProfile.class, "LbSslProfile");
                      discriminatorValueByClass.put(LbTcpProfile.class, "LbTcpProfile");
                      discriminatorValueByClass.put(LbVirtualServer.class, "LbVirtualServer");
                      discriminatorValueByClass.put(LogicalDhcpServer.class, "LogicalDhcpServer");
                      discriminatorValueByClass.put(LogicalPort.class, "LogicalPort");
                      discriminatorValueByClass.put(LogicalRouter.class, "LogicalRouter");
                      discriminatorValueByClass.put(LogicalRouterPort.class, "LogicalRouterPort");
                      discriminatorValueByClass.put(LogicalSwitch.class, "LogicalSwitch");
                      discriminatorValueByClass.put(MACSet.class, "MACSet");
                      discriminatorValueByClass.put(MacPool.class, "MacPool");
                      discriminatorValueByClass.put(ManualHealthCheck.class, "ManualHealthCheck");
                      discriminatorValueByClass.put(MetadataProxy.class, "MetadataProxy");
                      discriminatorValueByClass.put(MigrationUnitGroup.class, "MigrationUnitGroup");
                      discriminatorValueByClass.put(MigrationUnitGroupAggregateInfo.class, "MigrationUnitGroupAggregateInfo");
                      discriminatorValueByClass.put(NDRAProfile.class, "NDRAProfile");
                      discriminatorValueByClass.put(NSGroup.class, "NSGroup");
                      discriminatorValueByClass.put(NSProfile.class, "NSProfile");
                      discriminatorValueByClass.put(NSService.class, "NSService");
                      discriminatorValueByClass.put(NSServiceGroup.class, "NSServiceGroup");
                      discriminatorValueByClass.put(NatRule.class, "NatRule");
                      discriminatorValueByClass.put(NetworkMigrationSpec.class, "NetworkMigrationSpec");
                      discriminatorValueByClass.put(Node.class, "Node");
                      discriminatorValueByClass.put(NotificationWatcher.class, "NotificationWatcher");
                      discriminatorValueByClass.put(NotificationsList.class, "NotificationsList");
                      discriminatorValueByClass.put(PBRSection.class, "PBRSection");
                      discriminatorValueByClass.put(PacketCaptureSession.class, "PacketCaptureSession");
                      discriminatorValueByClass.put(PortMirroringSession.class, "PortMirroringSession");
                      discriminatorValueByClass.put(PrincipalIdentity.class, "PrincipalIdentity");
                      discriminatorValueByClass.put(Proxy.class, "Proxy");
                      discriminatorValueByClass.put(RedistributionConfig.class, "RedistributionConfig");
                      discriminatorValueByClass.put(RedistributionRuleList.class, "RedistributionRuleList");
                      discriminatorValueByClass.put(RoleBinding.class, "RoleBinding");
                      discriminatorValueByClass.put(RouteMap.class, "RouteMap");
                      discriminatorValueByClass.put(RoutingConfig.class, "RoutingConfig");
                      discriminatorValueByClass.put(ServiceAttachment.class, "ServiceAttachment");
                      discriminatorValueByClass.put(ServiceChain.class, "ServiceChain");
                      discriminatorValueByClass.put(ServiceConfig.class, "ServiceConfig");
                      discriminatorValueByClass.put(ServiceDefinition.class, "ServiceDefinition");
                      discriminatorValueByClass.put(ServiceDeployment.class, "ServiceDeployment");
                      discriminatorValueByClass.put(ServiceInsertionStatus.class, "ServiceInsertionStatus");
                      discriminatorValueByClass.put(ServiceManager.class, "ServiceManager");
                      discriminatorValueByClass.put(ServiceProfileNSGroups.class, "ServiceProfileNSGroups");
                      discriminatorValueByClass.put(SolutionConfig.class, "SolutionConfig");
                      discriminatorValueByClass.put(StaticHopBfdPeer.class, "StaticHopBfdPeer");
                      discriminatorValueByClass.put(StaticRoute.class, "StaticRoute");
                      discriminatorValueByClass.put(TelemetryAgreement.class, "TelemetryAgreement");
                      discriminatorValueByClass.put(TelemetryConfig.class, "TelemetryConfig");
                      discriminatorValueByClass.put(TelemetryProxy.class, "TelemetryProxy");
                      discriminatorValueByClass.put(TransportNode.class, "TransportNode");
                      discriminatorValueByClass.put(TransportNodeCollection.class, "TransportNodeCollection");
                      discriminatorValueByClass.put(TransportNodeProfile.class, "TransportNodeProfile");
                      discriminatorValueByClass.put(TransportZone.class, "TransportZone");
                      discriminatorValueByClass.put(TransportZoneProfile.class, "TransportZoneProfile");
                      discriminatorValueByClass.put(TrustObjectData.class, "TrustObjectData");
                      discriminatorValueByClass.put(UpdatePrincipalIdentityCertificateRequest.class, "UpdatePrincipalIdentityCertificateRequest");
                      discriminatorValueByClass.put(UpgradeUnitGroup.class, "UpgradeUnitGroup");
                      discriminatorValueByClass.put(UpgradeUnitGroupAggregateInfo.class, "UpgradeUnitGroupAggregateInfo");
                      discriminatorValueByClass.put(VendorTemplate.class, "VendorTemplate");
                      discriminatorValueByClass.put(VersionList.class, "VersionList");
                      discriminatorValueByClass.put(View.class, "View");
                      discriminatorValueByClass.put(VniPool.class, "VniPool");
                      discriminatorValueByClass.put(VtepLabelPool.class, "VtepLabelPool");
                      discriminatorValueByClass.put(WidgetConfiguration.class, "WidgetConfiguration");
                      discriminatorValueByClass.put(ManagedResource.class, "ManagedResource");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has(""))
                      {
                          ((JsonObject) result).addProperty("", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(ListResult.class, new TypeSelector<ListResult>() {
            @Override
            public Class<? extends ListResult> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends ListResult>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("ActionableResourceListResult".toUpperCase(), ActionableResourceListResult.class);
                    classByDiscriminatorValue.put("AlarmListResult".toUpperCase(), AlarmListResult.class);
                    classByDiscriminatorValue.put("AllocationIpAddressListResult".toUpperCase(), AllocationIpAddressListResult.class);
                    classByDiscriminatorValue.put("AppDiscoverySessionsListResult".toUpperCase(), AppDiscoverySessionsListResult.class);
                    classByDiscriminatorValue.put("AppDiscoveryVmInfoListResult".toUpperCase(), AppDiscoveryVmInfoListResult.class);
                    classByDiscriminatorValue.put("AppInfoListResult".toUpperCase(), AppInfoListResult.class);
                    classByDiscriminatorValue.put("AppProfileListResult".toUpperCase(), AppProfileListResult.class);
                    classByDiscriminatorValue.put("ApplianceManagementTaskListResult".toUpperCase(), ApplianceManagementTaskListResult.class);
                    classByDiscriminatorValue.put("AssociationListResult".toUpperCase(), AssociationListResult.class);
                    classByDiscriminatorValue.put("AuditLogListResult".toUpperCase(), AuditLogListResult.class);
                    classByDiscriminatorValue.put("BGPCommunityListListResult".toUpperCase(), BGPCommunityListListResult.class);
                    classByDiscriminatorValue.put("BgpNeighborListResult".toUpperCase(), BgpNeighborListResult.class);
                    classByDiscriminatorValue.put("BgpNeighborsStatusListResult".toUpperCase(), BgpNeighborsStatusListResult.class);
                    classByDiscriminatorValue.put("BridgeClusterListResult".toUpperCase(), BridgeClusterListResult.class);
                    classByDiscriminatorValue.put("BridgeEndpointListResult".toUpperCase(), BridgeEndpointListResult.class);
                    classByDiscriminatorValue.put("BridgeEndpointProfileListResult".toUpperCase(), BridgeEndpointProfileListResult.class);
                    classByDiscriminatorValue.put("CertificateList".toUpperCase(), CertificateList.class);
                    classByDiscriminatorValue.put("ClusterBackupInfoListResult".toUpperCase(), ClusterBackupInfoListResult.class);
                    classByDiscriminatorValue.put("ClusterNodeConfigListResult".toUpperCase(), ClusterNodeConfigListResult.class);
                    classByDiscriminatorValue.put("ClusterNodeVMDeploymentRequestList".toUpperCase(), ClusterNodeVMDeploymentRequestList.class);
                    classByDiscriminatorValue.put("ClusterProfileListResult".toUpperCase(), ClusterProfileListResult.class);
                    classByDiscriminatorValue.put("ComponentUpgradeChecksInfoListResult".toUpperCase(), ComponentUpgradeChecksInfoListResult.class);
                    classByDiscriminatorValue.put("ComputeCollectionFabricTemplateListResult".toUpperCase(), ComputeCollectionFabricTemplateListResult.class);
                    classByDiscriminatorValue.put("ComputeCollectionListResult".toUpperCase(), ComputeCollectionListResult.class);
                    classByDiscriminatorValue.put("ComputeCollectionNetworkInterfacesListResult".toUpperCase(), ComputeCollectionNetworkInterfacesListResult.class);
                    classByDiscriminatorValue.put("ComputeCollectionTransportNodeTemplateStateList".toUpperCase(), ComputeCollectionTransportNodeTemplateStateList.class);
                    classByDiscriminatorValue.put("ComputeManagerListResult".toUpperCase(), ComputeManagerListResult.class);
                    classByDiscriminatorValue.put("ContainerApplicationInstanceListResult".toUpperCase(), ContainerApplicationInstanceListResult.class);
                    classByDiscriminatorValue.put("ContainerApplicationListResult".toUpperCase(), ContainerApplicationListResult.class);
                    classByDiscriminatorValue.put("ContainerClusterListResult".toUpperCase(), ContainerClusterListResult.class);
                    classByDiscriminatorValue.put("ContainerClusterNodeListResult".toUpperCase(), ContainerClusterNodeListResult.class);
                    classByDiscriminatorValue.put("ContainerIngressPolicyListResult".toUpperCase(), ContainerIngressPolicyListResult.class);
                    classByDiscriminatorValue.put("ContainerNetworkPolicyListResult".toUpperCase(), ContainerNetworkPolicyListResult.class);
                    classByDiscriminatorValue.put("ContainerProjectListResult".toUpperCase(), ContainerProjectListResult.class);
                    classByDiscriminatorValue.put("CrlDistributionPointList".toUpperCase(), CrlDistributionPointList.class);
                    classByDiscriminatorValue.put("CrlList".toUpperCase(), CrlList.class);
                    classByDiscriminatorValue.put("CsrList".toUpperCase(), CsrList.class);
                    classByDiscriminatorValue.put("DADProfileListResult".toUpperCase(), DADProfileListResult.class);
                    classByDiscriminatorValue.put("DSSectionListResult".toUpperCase(), DSSectionListResult.class);
                    classByDiscriminatorValue.put("DhcpIpPoolListResult".toUpperCase(), DhcpIpPoolListResult.class);
                    classByDiscriminatorValue.put("DhcpProfileListResult".toUpperCase(), DhcpProfileListResult.class);
                    classByDiscriminatorValue.put("DhcpRelayProfileListResult".toUpperCase(), DhcpRelayProfileListResult.class);
                    classByDiscriminatorValue.put("DhcpRelayServiceListResult".toUpperCase(), DhcpRelayServiceListResult.class);
                    classByDiscriminatorValue.put("DhcpStaticBindingListResult".toUpperCase(), DhcpStaticBindingListResult.class);
                    classByDiscriminatorValue.put("DirectoryDomainListResults".toUpperCase(), DirectoryDomainListResults.class);
                    classByDiscriminatorValue.put("DirectoryGroupListResults".toUpperCase(), DirectoryGroupListResults.class);
                    classByDiscriminatorValue.put("DirectoryGroupMemberListResults".toUpperCase(), DirectoryGroupMemberListResults.class);
                    classByDiscriminatorValue.put("DirectoryLdapServerListResults".toUpperCase(), DirectoryLdapServerListResults.class);
                    classByDiscriminatorValue.put("DiscoveredNodeListResult".toUpperCase(), DiscoveredNodeListResult.class);
                    classByDiscriminatorValue.put("DnsForwarderListResult".toUpperCase(), DnsForwarderListResult.class);
                    classByDiscriminatorValue.put("EdgeClusterListResult".toUpperCase(), EdgeClusterListResult.class);
                    classByDiscriminatorValue.put("EffectiveIPAddressMemberListResult".toUpperCase(), EffectiveIPAddressMemberListResult.class);
                    classByDiscriminatorValue.put("EffectiveMemberResourceListResult".toUpperCase(), EffectiveMemberResourceListResult.class);
                    classByDiscriminatorValue.put("EffectiveProfileListResult".toUpperCase(), EffectiveProfileListResult.class);
                    classByDiscriminatorValue.put("FailureDomainListResult".toUpperCase(), FailureDomainListResult.class);
                    classByDiscriminatorValue.put("FilePropertiesListResult".toUpperCase(), FilePropertiesListResult.class);
                    classByDiscriminatorValue.put("FirewallProfileListResult".toUpperCase(), FirewallProfileListResult.class);
                    classByDiscriminatorValue.put("FirewallRuleListResult".toUpperCase(), FirewallRuleListResult.class);
                    classByDiscriminatorValue.put("FirewallStatusListResult".toUpperCase(), FirewallStatusListResult.class);
                    classByDiscriminatorValue.put("GlobalConfigsListResult".toUpperCase(), GlobalConfigsListResult.class);
                    classByDiscriminatorValue.put("GroupedMigrationFeedbackRequestListResult".toUpperCase(), GroupedMigrationFeedbackRequestListResult.class);
                    classByDiscriminatorValue.put("HostNodeStatusListResult".toUpperCase(), HostNodeStatusListResult.class);
                    classByDiscriminatorValue.put("HostSwitchProfilesListResult".toUpperCase(), HostSwitchProfilesListResult.class);
                    classByDiscriminatorValue.put("IPAddressElementListResult".toUpperCase(), IPAddressElementListResult.class);
                    classByDiscriminatorValue.put("IPPrefixListListResult".toUpperCase(), IPPrefixListListResult.class);
                    classByDiscriminatorValue.put("IPSecVPNDPDProfileListResult".toUpperCase(), IPSecVPNDPDProfileListResult.class);
                    classByDiscriminatorValue.put("IPSecVPNIKEProfileListResult".toUpperCase(), IPSecVPNIKEProfileListResult.class);
                    classByDiscriminatorValue.put("IPSecVPNLocalEndpointListResult".toUpperCase(), IPSecVPNLocalEndpointListResult.class);
                    classByDiscriminatorValue.put("IPSecVPNPeerEndpointListResult".toUpperCase(), IPSecVPNPeerEndpointListResult.class);
                    classByDiscriminatorValue.put("IPSecVPNServiceListResult".toUpperCase(), IPSecVPNServiceListResult.class);
                    classByDiscriminatorValue.put("IPSecVPNSessionListResult".toUpperCase(), IPSecVPNSessionListResult.class);
                    classByDiscriminatorValue.put("IPSecVPNTunnelProfileListResult".toUpperCase(), IPSecVPNTunnelProfileListResult.class);
                    classByDiscriminatorValue.put("IPSetListResult".toUpperCase(), IPSetListResult.class);
                    classByDiscriminatorValue.put("IdfwComputeCollectionListResult".toUpperCase(), IdfwComputeCollectionListResult.class);
                    classByDiscriminatorValue.put("IdfwEnabledComputeCollectionListResult".toUpperCase(), IdfwEnabledComputeCollectionListResult.class);
                    classByDiscriminatorValue.put("IdfwNsgroupVmDetailListResult".toUpperCase(), IdfwNsgroupVmDetailListResult.class);
                    classByDiscriminatorValue.put("IdfwTransportNodeStatusListResult".toUpperCase(), IdfwTransportNodeStatusListResult.class);
                    classByDiscriminatorValue.put("IdfwVirtualMachineStatusListResult".toUpperCase(), IdfwVirtualMachineStatusListResult.class);
                    classByDiscriminatorValue.put("InstanceEndpointListResult".toUpperCase(), InstanceEndpointListResult.class);
                    classByDiscriminatorValue.put("InstanceRuntimeListResult".toUpperCase(), InstanceRuntimeListResult.class);
                    classByDiscriminatorValue.put("IntelligenceClusterNodeVMDeploymentRequestList".toUpperCase(), IntelligenceClusterNodeVMDeploymentRequestList.class);
                    classByDiscriminatorValue.put("InterfaceNeighborPropertyListResult".toUpperCase(), InterfaceNeighborPropertyListResult.class);
                    classByDiscriminatorValue.put("IpBlockListResult".toUpperCase(), IpBlockListResult.class);
                    classByDiscriminatorValue.put("IpBlockSubnetListResult".toUpperCase(), IpBlockSubnetListResult.class);
                    classByDiscriminatorValue.put("IpPoolListResult".toUpperCase(), IpPoolListResult.class);
                    classByDiscriminatorValue.put("IpfixCollectorConfigListResult".toUpperCase(), IpfixCollectorConfigListResult.class);
                    classByDiscriminatorValue.put("IpfixCollectorUpmProfileListResult".toUpperCase(), IpfixCollectorUpmProfileListResult.class);
                    classByDiscriminatorValue.put("IpfixConfigListResult".toUpperCase(), IpfixConfigListResult.class);
                    classByDiscriminatorValue.put("IpfixObsPointsListResult".toUpperCase(), IpfixObsPointsListResult.class);
                    classByDiscriminatorValue.put("IpfixUpmProfileListResult".toUpperCase(), IpfixUpmProfileListResult.class);
                    classByDiscriminatorValue.put("L2VpnServiceListResult".toUpperCase(), L2VpnServiceListResult.class);
                    classByDiscriminatorValue.put("L2VpnSessionListResult".toUpperCase(), L2VpnSessionListResult.class);
                    classByDiscriminatorValue.put("LbAppProfileListResult".toUpperCase(), LbAppProfileListResult.class);
                    classByDiscriminatorValue.put("LbClientSslProfileListResult".toUpperCase(), LbClientSslProfileListResult.class);
                    classByDiscriminatorValue.put("LbMonitorListResult".toUpperCase(), LbMonitorListResult.class);
                    classByDiscriminatorValue.put("LbPersistenceProfileListResult".toUpperCase(), LbPersistenceProfileListResult.class);
                    classByDiscriminatorValue.put("LbPoolListResult".toUpperCase(), LbPoolListResult.class);
                    classByDiscriminatorValue.put("LbPoolStatisticsListResult".toUpperCase(), LbPoolStatisticsListResult.class);
                    classByDiscriminatorValue.put("LbPoolStatusListResult".toUpperCase(), LbPoolStatusListResult.class);
                    classByDiscriminatorValue.put("LbRuleListResult".toUpperCase(), LbRuleListResult.class);
                    classByDiscriminatorValue.put("LbServerSslProfileListResult".toUpperCase(), LbServerSslProfileListResult.class);
                    classByDiscriminatorValue.put("LbServiceListResult".toUpperCase(), LbServiceListResult.class);
                    classByDiscriminatorValue.put("LbSslCipherAndProtocolListResult".toUpperCase(), LbSslCipherAndProtocolListResult.class);
                    classByDiscriminatorValue.put("LbTcpProfileListResult".toUpperCase(), LbTcpProfileListResult.class);
                    classByDiscriminatorValue.put("LbVirtualServerListResult".toUpperCase(), LbVirtualServerListResult.class);
                    classByDiscriminatorValue.put("LbVirtualServerStatisticsListResult".toUpperCase(), LbVirtualServerStatisticsListResult.class);
                    classByDiscriminatorValue.put("LbVirtualServerStatusListResult".toUpperCase(), LbVirtualServerStatusListResult.class);
                    classByDiscriminatorValue.put("LicensesListResult".toUpperCase(), LicensesListResult.class);
                    classByDiscriminatorValue.put("LogicalConstructMigrationStatsListResult".toUpperCase(), LogicalConstructMigrationStatsListResult.class);
                    classByDiscriminatorValue.put("LogicalDhcpServerListResult".toUpperCase(), LogicalDhcpServerListResult.class);
                    classByDiscriminatorValue.put("LogicalPortListResult".toUpperCase(), LogicalPortListResult.class);
                    classByDiscriminatorValue.put("LogicalPortMacAddressListResult".toUpperCase(), LogicalPortMacAddressListResult.class);
                    classByDiscriminatorValue.put("LogicalRouterListResult".toUpperCase(), LogicalRouterListResult.class);
                    classByDiscriminatorValue.put("LogicalRouterPortArpTable".toUpperCase(), LogicalRouterPortArpTable.class);
                    classByDiscriminatorValue.put("LogicalRouterPortListResult".toUpperCase(), LogicalRouterPortListResult.class);
                    classByDiscriminatorValue.put("LogicalRouterRouteTable".toUpperCase(), LogicalRouterRouteTable.class);
                    classByDiscriminatorValue.put("LogicalSwitchListResult".toUpperCase(), LogicalSwitchListResult.class);
                    classByDiscriminatorValue.put("LogicalSwitchStateListResult".toUpperCase(), LogicalSwitchStateListResult.class);
                    classByDiscriminatorValue.put("MACAddressElementListResult".toUpperCase(), MACAddressElementListResult.class);
                    classByDiscriminatorValue.put("MACSetListResult".toUpperCase(), MACSetListResult.class);
                    classByDiscriminatorValue.put("MacAddressListResult".toUpperCase(), MacAddressListResult.class);
                    classByDiscriminatorValue.put("MacPoolListResult".toUpperCase(), MacPoolListResult.class);
                    classByDiscriminatorValue.put("ManualHealthCheckListResult".toUpperCase(), ManualHealthCheckListResult.class);
                    classByDiscriminatorValue.put("MetadataProxyListResult".toUpperCase(), MetadataProxyListResult.class);
                    classByDiscriminatorValue.put("MigrationFeedbackRequestListResult".toUpperCase(), MigrationFeedbackRequestListResult.class);
                    classByDiscriminatorValue.put("MigrationFeedbackSummaryListResult".toUpperCase(), MigrationFeedbackSummaryListResult.class);
                    classByDiscriminatorValue.put("MigrationSwitchListResult".toUpperCase(), MigrationSwitchListResult.class);
                    classByDiscriminatorValue.put("MigrationUnitAggregateInfoListResult".toUpperCase(), MigrationUnitAggregateInfoListResult.class);
                    classByDiscriminatorValue.put("MigrationUnitGroupAggregateInfoListResult".toUpperCase(), MigrationUnitGroupAggregateInfoListResult.class);
                    classByDiscriminatorValue.put("MigrationUnitGroupListResult".toUpperCase(), MigrationUnitGroupListResult.class);
                    classByDiscriminatorValue.put("MigrationUnitGroupStatusListResult".toUpperCase(), MigrationUnitGroupStatusListResult.class);
                    classByDiscriminatorValue.put("MigrationUnitListResult".toUpperCase(), MigrationUnitListResult.class);
                    classByDiscriminatorValue.put("MigrationUnitStatusListResult".toUpperCase(), MigrationUnitStatusListResult.class);
                    classByDiscriminatorValue.put("MigrationUnitTypeStatsList".toUpperCase(), MigrationUnitTypeStatsList.class);
                    classByDiscriminatorValue.put("NDRAProfileListResult".toUpperCase(), NDRAProfileListResult.class);
                    classByDiscriminatorValue.put("NSGroupListResult".toUpperCase(), NSGroupListResult.class);
                    classByDiscriminatorValue.put("NSGroupMetaInfoListResult".toUpperCase(), NSGroupMetaInfoListResult.class);
                    classByDiscriminatorValue.put("NSProfileListResult".toUpperCase(), NSProfileListResult.class);
                    classByDiscriminatorValue.put("NSServiceGroupListResult".toUpperCase(), NSServiceGroupListResult.class);
                    classByDiscriminatorValue.put("NSServiceListResult".toUpperCase(), NSServiceListResult.class);
                    classByDiscriminatorValue.put("NSSupportedAttributesListResult".toUpperCase(), NSSupportedAttributesListResult.class);
                    classByDiscriminatorValue.put("NatRuleListResult".toUpperCase(), NatRuleListResult.class);
                    classByDiscriminatorValue.put("NetworkMigrationSpecListResult".toUpperCase(), NetworkMigrationSpecListResult.class);
                    classByDiscriminatorValue.put("NodeInfoListResult".toUpperCase(), NodeInfoListResult.class);
                    classByDiscriminatorValue.put("NodeInterfacePropertiesListResult".toUpperCase(), NodeInterfacePropertiesListResult.class);
                    classByDiscriminatorValue.put("NodeListResult".toUpperCase(), NodeListResult.class);
                    classByDiscriminatorValue.put("NodeLogPropertiesListResult".toUpperCase(), NodeLogPropertiesListResult.class);
                    classByDiscriminatorValue.put("NodeNetworkInterfacePropertiesListResult".toUpperCase(), NodeNetworkInterfacePropertiesListResult.class);
                    classByDiscriminatorValue.put("NodeProcessPropertiesListResult".toUpperCase(), NodeProcessPropertiesListResult.class);
                    classByDiscriminatorValue.put("NodeRoutePropertiesListResult".toUpperCase(), NodeRoutePropertiesListResult.class);
                    classByDiscriminatorValue.put("NodeServicePropertiesListResult".toUpperCase(), NodeServicePropertiesListResult.class);
                    classByDiscriminatorValue.put("NodeSyslogExporterPropertiesListResult".toUpperCase(), NodeSyslogExporterPropertiesListResult.class);
                    classByDiscriminatorValue.put("NodeUserPropertiesListResult".toUpperCase(), NodeUserPropertiesListResult.class);
                    classByDiscriminatorValue.put("NormalizedResourceListResult".toUpperCase(), NormalizedResourceListResult.class);
                    classByDiscriminatorValue.put("NotificationWatcherListResult".toUpperCase(), NotificationWatcherListResult.class);
                    classByDiscriminatorValue.put("PBRRuleListResult".toUpperCase(), PBRRuleListResult.class);
                    classByDiscriminatorValue.put("PBRSectionListResult".toUpperCase(), PBRSectionListResult.class);
                    classByDiscriminatorValue.put("PBRStatsList".toUpperCase(), PBRStatsList.class);
                    classByDiscriminatorValue.put("PacketCaptureOptionList".toUpperCase(), PacketCaptureOptionList.class);
                    classByDiscriminatorValue.put("PacketCaptureSessionList".toUpperCase(), PacketCaptureSessionList.class);
                    classByDiscriminatorValue.put("PerNodeDnsFailedQueries".toUpperCase(), PerNodeDnsFailedQueries.class);
                    classByDiscriminatorValue.put("PnicBondStatusListResult".toUpperCase(), PnicBondStatusListResult.class);
                    classByDiscriminatorValue.put("PortMirroringSessionListResult".toUpperCase(), PortMirroringSessionListResult.class);
                    classByDiscriminatorValue.put("PrincipalIdentityList".toUpperCase(), PrincipalIdentityList.class);
                    classByDiscriminatorValue.put("RoleBindingListResult".toUpperCase(), RoleBindingListResult.class);
                    classByDiscriminatorValue.put("RoleListResult".toUpperCase(), RoleListResult.class);
                    classByDiscriminatorValue.put("RouteMapListResult".toUpperCase(), RouteMapListResult.class);
                    classByDiscriminatorValue.put("SIServiceProfileListResult".toUpperCase(), SIServiceProfileListResult.class);
                    classByDiscriminatorValue.put("ServiceAssociationListResult".toUpperCase(), ServiceAssociationListResult.class);
                    classByDiscriminatorValue.put("ServiceAttachmentListResult".toUpperCase(), ServiceAttachmentListResult.class);
                    classByDiscriminatorValue.put("ServiceChainListResult".toUpperCase(), ServiceChainListResult.class);
                    classByDiscriminatorValue.put("ServiceChainMappingListResult".toUpperCase(), ServiceChainMappingListResult.class);
                    classByDiscriminatorValue.put("ServiceConfigListResult".toUpperCase(), ServiceConfigListResult.class);
                    classByDiscriminatorValue.put("ServiceDeploymentListResult".toUpperCase(), ServiceDeploymentListResult.class);
                    classByDiscriminatorValue.put("ServiceInsertionRuleListResult".toUpperCase(), ServiceInsertionRuleListResult.class);
                    classByDiscriminatorValue.put("ServiceInsertionServiceListResult".toUpperCase(), ServiceInsertionServiceListResult.class);
                    classByDiscriminatorValue.put("ServiceInsertionStatusListResult".toUpperCase(), ServiceInsertionStatusListResult.class);
                    classByDiscriminatorValue.put("ServiceInstanceListResult".toUpperCase(), ServiceInstanceListResult.class);
                    classByDiscriminatorValue.put("ServiceManagerListResult".toUpperCase(), ServiceManagerListResult.class);
                    classByDiscriminatorValue.put("ServicePathListResult".toUpperCase(), ServicePathListResult.class);
                    classByDiscriminatorValue.put("SolutionConfigListResult".toUpperCase(), SolutionConfigListResult.class);
                    classByDiscriminatorValue.put("SourceEntityResult".toUpperCase(), SourceEntityResult.class);
                    classByDiscriminatorValue.put("SshKeyPropertiesListResult".toUpperCase(), SshKeyPropertiesListResult.class);
                    classByDiscriminatorValue.put("StaticHopBfdPeerListResult".toUpperCase(), StaticHopBfdPeerListResult.class);
                    classByDiscriminatorValue.put("StaticRouteListResult".toUpperCase(), StaticRouteListResult.class);
                    classByDiscriminatorValue.put("SwitchingProfilesListResult".toUpperCase(), SwitchingProfilesListResult.class);
                    classByDiscriminatorValue.put("TaskListResult".toUpperCase(), TaskListResult.class);
                    classByDiscriminatorValue.put("TraceflowListResult".toUpperCase(), TraceflowListResult.class);
                    classByDiscriminatorValue.put("TraceflowObservationListResult".toUpperCase(), TraceflowObservationListResult.class);
                    classByDiscriminatorValue.put("TransportNodeCollectionListResult".toUpperCase(), TransportNodeCollectionListResult.class);
                    classByDiscriminatorValue.put("TransportNodeListResult".toUpperCase(), TransportNodeListResult.class);
                    classByDiscriminatorValue.put("TransportNodeProfileListResult".toUpperCase(), TransportNodeProfileListResult.class);
                    classByDiscriminatorValue.put("TransportNodeStateListResult".toUpperCase(), TransportNodeStateListResult.class);
                    classByDiscriminatorValue.put("TransportNodeStatusListResult".toUpperCase(), TransportNodeStatusListResult.class);
                    classByDiscriminatorValue.put("TransportNodeTemplateListResult".toUpperCase(), TransportNodeTemplateListResult.class);
                    classByDiscriminatorValue.put("TransportZoneListResult".toUpperCase(), TransportZoneListResult.class);
                    classByDiscriminatorValue.put("TransportZoneProfileListResult".toUpperCase(), TransportZoneProfileListResult.class);
                    classByDiscriminatorValue.put("TunnelList".toUpperCase(), TunnelList.class);
                    classByDiscriminatorValue.put("UnassociatedVMListResult".toUpperCase(), UnassociatedVMListResult.class);
                    classByDiscriminatorValue.put("UpgradeCheckListResult".toUpperCase(), UpgradeCheckListResult.class);
                    classByDiscriminatorValue.put("UpgradeHistoryList".toUpperCase(), UpgradeHistoryList.class);
                    classByDiscriminatorValue.put("UpgradeUnitAggregateInfoListResult".toUpperCase(), UpgradeUnitAggregateInfoListResult.class);
                    classByDiscriminatorValue.put("UpgradeUnitGroupAggregateInfoListResult".toUpperCase(), UpgradeUnitGroupAggregateInfoListResult.class);
                    classByDiscriminatorValue.put("UpgradeUnitGroupListResult".toUpperCase(), UpgradeUnitGroupListResult.class);
                    classByDiscriminatorValue.put("UpgradeUnitGroupStatusListResult".toUpperCase(), UpgradeUnitGroupStatusListResult.class);
                    classByDiscriminatorValue.put("UpgradeUnitListResult".toUpperCase(), UpgradeUnitListResult.class);
                    classByDiscriminatorValue.put("UpgradeUnitStatusListResult".toUpperCase(), UpgradeUnitStatusListResult.class);
                    classByDiscriminatorValue.put("UpgradeUnitTypeStatsList".toUpperCase(), UpgradeUnitTypeStatsList.class);
                    classByDiscriminatorValue.put("VendorTemplateListResult".toUpperCase(), VendorTemplateListResult.class);
                    classByDiscriminatorValue.put("VidmInfoListResult".toUpperCase(), VidmInfoListResult.class);
                    classByDiscriminatorValue.put("VirtualMachineListResult".toUpperCase(), VirtualMachineListResult.class);
                    classByDiscriminatorValue.put("VirtualNetworkInterfaceListResult".toUpperCase(), VirtualNetworkInterfaceListResult.class);
                    classByDiscriminatorValue.put("VmToolsInfoListResult".toUpperCase(), VmToolsInfoListResult.class);
                    classByDiscriminatorValue.put("VniPoolListResult".toUpperCase(), VniPoolListResult.class);
                    classByDiscriminatorValue.put("VtepLabelPoolListResult".toUpperCase(), VtepLabelPoolListResult.class);
                    classByDiscriminatorValue.put("VtepListResult".toUpperCase(), VtepListResult.class);
                    classByDiscriminatorValue.put("ListResult".toUpperCase(), ListResult.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, ""));
            }
          })
          .registerPostProcessor(ListResult.class, new PostProcessor<ListResult>() {
              @Override
              public void postDeserialize(ListResult result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, ListResult src, Gson gson) {
                  Map<Class<? extends ListResult>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(ActionableResourceListResult.class, "ActionableResourceListResult");
                      discriminatorValueByClass.put(AlarmListResult.class, "AlarmListResult");
                      discriminatorValueByClass.put(AllocationIpAddressListResult.class, "AllocationIpAddressListResult");
                      discriminatorValueByClass.put(AppDiscoverySessionsListResult.class, "AppDiscoverySessionsListResult");
                      discriminatorValueByClass.put(AppDiscoveryVmInfoListResult.class, "AppDiscoveryVmInfoListResult");
                      discriminatorValueByClass.put(AppInfoListResult.class, "AppInfoListResult");
                      discriminatorValueByClass.put(AppProfileListResult.class, "AppProfileListResult");
                      discriminatorValueByClass.put(ApplianceManagementTaskListResult.class, "ApplianceManagementTaskListResult");
                      discriminatorValueByClass.put(AssociationListResult.class, "AssociationListResult");
                      discriminatorValueByClass.put(AuditLogListResult.class, "AuditLogListResult");
                      discriminatorValueByClass.put(BGPCommunityListListResult.class, "BGPCommunityListListResult");
                      discriminatorValueByClass.put(BgpNeighborListResult.class, "BgpNeighborListResult");
                      discriminatorValueByClass.put(BgpNeighborsStatusListResult.class, "BgpNeighborsStatusListResult");
                      discriminatorValueByClass.put(BridgeClusterListResult.class, "BridgeClusterListResult");
                      discriminatorValueByClass.put(BridgeEndpointListResult.class, "BridgeEndpointListResult");
                      discriminatorValueByClass.put(BridgeEndpointProfileListResult.class, "BridgeEndpointProfileListResult");
                      discriminatorValueByClass.put(CertificateList.class, "CertificateList");
                      discriminatorValueByClass.put(ClusterBackupInfoListResult.class, "ClusterBackupInfoListResult");
                      discriminatorValueByClass.put(ClusterNodeConfigListResult.class, "ClusterNodeConfigListResult");
                      discriminatorValueByClass.put(ClusterNodeVMDeploymentRequestList.class, "ClusterNodeVMDeploymentRequestList");
                      discriminatorValueByClass.put(ClusterProfileListResult.class, "ClusterProfileListResult");
                      discriminatorValueByClass.put(ComponentUpgradeChecksInfoListResult.class, "ComponentUpgradeChecksInfoListResult");
                      discriminatorValueByClass.put(ComputeCollectionFabricTemplateListResult.class, "ComputeCollectionFabricTemplateListResult");
                      discriminatorValueByClass.put(ComputeCollectionListResult.class, "ComputeCollectionListResult");
                      discriminatorValueByClass.put(ComputeCollectionNetworkInterfacesListResult.class, "ComputeCollectionNetworkInterfacesListResult");
                      discriminatorValueByClass.put(ComputeCollectionTransportNodeTemplateStateList.class, "ComputeCollectionTransportNodeTemplateStateList");
                      discriminatorValueByClass.put(ComputeManagerListResult.class, "ComputeManagerListResult");
                      discriminatorValueByClass.put(ContainerApplicationInstanceListResult.class, "ContainerApplicationInstanceListResult");
                      discriminatorValueByClass.put(ContainerApplicationListResult.class, "ContainerApplicationListResult");
                      discriminatorValueByClass.put(ContainerClusterListResult.class, "ContainerClusterListResult");
                      discriminatorValueByClass.put(ContainerClusterNodeListResult.class, "ContainerClusterNodeListResult");
                      discriminatorValueByClass.put(ContainerIngressPolicyListResult.class, "ContainerIngressPolicyListResult");
                      discriminatorValueByClass.put(ContainerNetworkPolicyListResult.class, "ContainerNetworkPolicyListResult");
                      discriminatorValueByClass.put(ContainerProjectListResult.class, "ContainerProjectListResult");
                      discriminatorValueByClass.put(CrlDistributionPointList.class, "CrlDistributionPointList");
                      discriminatorValueByClass.put(CrlList.class, "CrlList");
                      discriminatorValueByClass.put(CsrList.class, "CsrList");
                      discriminatorValueByClass.put(DADProfileListResult.class, "DADProfileListResult");
                      discriminatorValueByClass.put(DSSectionListResult.class, "DSSectionListResult");
                      discriminatorValueByClass.put(DhcpIpPoolListResult.class, "DhcpIpPoolListResult");
                      discriminatorValueByClass.put(DhcpProfileListResult.class, "DhcpProfileListResult");
                      discriminatorValueByClass.put(DhcpRelayProfileListResult.class, "DhcpRelayProfileListResult");
                      discriminatorValueByClass.put(DhcpRelayServiceListResult.class, "DhcpRelayServiceListResult");
                      discriminatorValueByClass.put(DhcpStaticBindingListResult.class, "DhcpStaticBindingListResult");
                      discriminatorValueByClass.put(DirectoryDomainListResults.class, "DirectoryDomainListResults");
                      discriminatorValueByClass.put(DirectoryGroupListResults.class, "DirectoryGroupListResults");
                      discriminatorValueByClass.put(DirectoryGroupMemberListResults.class, "DirectoryGroupMemberListResults");
                      discriminatorValueByClass.put(DirectoryLdapServerListResults.class, "DirectoryLdapServerListResults");
                      discriminatorValueByClass.put(DiscoveredNodeListResult.class, "DiscoveredNodeListResult");
                      discriminatorValueByClass.put(DnsForwarderListResult.class, "DnsForwarderListResult");
                      discriminatorValueByClass.put(EdgeClusterListResult.class, "EdgeClusterListResult");
                      discriminatorValueByClass.put(EffectiveIPAddressMemberListResult.class, "EffectiveIPAddressMemberListResult");
                      discriminatorValueByClass.put(EffectiveMemberResourceListResult.class, "EffectiveMemberResourceListResult");
                      discriminatorValueByClass.put(EffectiveProfileListResult.class, "EffectiveProfileListResult");
                      discriminatorValueByClass.put(FailureDomainListResult.class, "FailureDomainListResult");
                      discriminatorValueByClass.put(FilePropertiesListResult.class, "FilePropertiesListResult");
                      discriminatorValueByClass.put(FirewallProfileListResult.class, "FirewallProfileListResult");
                      discriminatorValueByClass.put(FirewallRuleListResult.class, "FirewallRuleListResult");
                      discriminatorValueByClass.put(FirewallStatusListResult.class, "FirewallStatusListResult");
                      discriminatorValueByClass.put(GlobalConfigsListResult.class, "GlobalConfigsListResult");
                      discriminatorValueByClass.put(GroupedMigrationFeedbackRequestListResult.class, "GroupedMigrationFeedbackRequestListResult");
                      discriminatorValueByClass.put(HostNodeStatusListResult.class, "HostNodeStatusListResult");
                      discriminatorValueByClass.put(HostSwitchProfilesListResult.class, "HostSwitchProfilesListResult");
                      discriminatorValueByClass.put(IPAddressElementListResult.class, "IPAddressElementListResult");
                      discriminatorValueByClass.put(IPPrefixListListResult.class, "IPPrefixListListResult");
                      discriminatorValueByClass.put(IPSecVPNDPDProfileListResult.class, "IPSecVPNDPDProfileListResult");
                      discriminatorValueByClass.put(IPSecVPNIKEProfileListResult.class, "IPSecVPNIKEProfileListResult");
                      discriminatorValueByClass.put(IPSecVPNLocalEndpointListResult.class, "IPSecVPNLocalEndpointListResult");
                      discriminatorValueByClass.put(IPSecVPNPeerEndpointListResult.class, "IPSecVPNPeerEndpointListResult");
                      discriminatorValueByClass.put(IPSecVPNServiceListResult.class, "IPSecVPNServiceListResult");
                      discriminatorValueByClass.put(IPSecVPNSessionListResult.class, "IPSecVPNSessionListResult");
                      discriminatorValueByClass.put(IPSecVPNTunnelProfileListResult.class, "IPSecVPNTunnelProfileListResult");
                      discriminatorValueByClass.put(IPSetListResult.class, "IPSetListResult");
                      discriminatorValueByClass.put(IdfwComputeCollectionListResult.class, "IdfwComputeCollectionListResult");
                      discriminatorValueByClass.put(IdfwEnabledComputeCollectionListResult.class, "IdfwEnabledComputeCollectionListResult");
                      discriminatorValueByClass.put(IdfwNsgroupVmDetailListResult.class, "IdfwNsgroupVmDetailListResult");
                      discriminatorValueByClass.put(IdfwTransportNodeStatusListResult.class, "IdfwTransportNodeStatusListResult");
                      discriminatorValueByClass.put(IdfwVirtualMachineStatusListResult.class, "IdfwVirtualMachineStatusListResult");
                      discriminatorValueByClass.put(InstanceEndpointListResult.class, "InstanceEndpointListResult");
                      discriminatorValueByClass.put(InstanceRuntimeListResult.class, "InstanceRuntimeListResult");
                      discriminatorValueByClass.put(IntelligenceClusterNodeVMDeploymentRequestList.class, "IntelligenceClusterNodeVMDeploymentRequestList");
                      discriminatorValueByClass.put(InterfaceNeighborPropertyListResult.class, "InterfaceNeighborPropertyListResult");
                      discriminatorValueByClass.put(IpBlockListResult.class, "IpBlockListResult");
                      discriminatorValueByClass.put(IpBlockSubnetListResult.class, "IpBlockSubnetListResult");
                      discriminatorValueByClass.put(IpPoolListResult.class, "IpPoolListResult");
                      discriminatorValueByClass.put(IpfixCollectorConfigListResult.class, "IpfixCollectorConfigListResult");
                      discriminatorValueByClass.put(IpfixCollectorUpmProfileListResult.class, "IpfixCollectorUpmProfileListResult");
                      discriminatorValueByClass.put(IpfixConfigListResult.class, "IpfixConfigListResult");
                      discriminatorValueByClass.put(IpfixObsPointsListResult.class, "IpfixObsPointsListResult");
                      discriminatorValueByClass.put(IpfixUpmProfileListResult.class, "IpfixUpmProfileListResult");
                      discriminatorValueByClass.put(L2VpnServiceListResult.class, "L2VpnServiceListResult");
                      discriminatorValueByClass.put(L2VpnSessionListResult.class, "L2VpnSessionListResult");
                      discriminatorValueByClass.put(LbAppProfileListResult.class, "LbAppProfileListResult");
                      discriminatorValueByClass.put(LbClientSslProfileListResult.class, "LbClientSslProfileListResult");
                      discriminatorValueByClass.put(LbMonitorListResult.class, "LbMonitorListResult");
                      discriminatorValueByClass.put(LbPersistenceProfileListResult.class, "LbPersistenceProfileListResult");
                      discriminatorValueByClass.put(LbPoolListResult.class, "LbPoolListResult");
                      discriminatorValueByClass.put(LbPoolStatisticsListResult.class, "LbPoolStatisticsListResult");
                      discriminatorValueByClass.put(LbPoolStatusListResult.class, "LbPoolStatusListResult");
                      discriminatorValueByClass.put(LbRuleListResult.class, "LbRuleListResult");
                      discriminatorValueByClass.put(LbServerSslProfileListResult.class, "LbServerSslProfileListResult");
                      discriminatorValueByClass.put(LbServiceListResult.class, "LbServiceListResult");
                      discriminatorValueByClass.put(LbSslCipherAndProtocolListResult.class, "LbSslCipherAndProtocolListResult");
                      discriminatorValueByClass.put(LbTcpProfileListResult.class, "LbTcpProfileListResult");
                      discriminatorValueByClass.put(LbVirtualServerListResult.class, "LbVirtualServerListResult");
                      discriminatorValueByClass.put(LbVirtualServerStatisticsListResult.class, "LbVirtualServerStatisticsListResult");
                      discriminatorValueByClass.put(LbVirtualServerStatusListResult.class, "LbVirtualServerStatusListResult");
                      discriminatorValueByClass.put(LicensesListResult.class, "LicensesListResult");
                      discriminatorValueByClass.put(LogicalConstructMigrationStatsListResult.class, "LogicalConstructMigrationStatsListResult");
                      discriminatorValueByClass.put(LogicalDhcpServerListResult.class, "LogicalDhcpServerListResult");
                      discriminatorValueByClass.put(LogicalPortListResult.class, "LogicalPortListResult");
                      discriminatorValueByClass.put(LogicalPortMacAddressListResult.class, "LogicalPortMacAddressListResult");
                      discriminatorValueByClass.put(LogicalRouterListResult.class, "LogicalRouterListResult");
                      discriminatorValueByClass.put(LogicalRouterPortArpTable.class, "LogicalRouterPortArpTable");
                      discriminatorValueByClass.put(LogicalRouterPortListResult.class, "LogicalRouterPortListResult");
                      discriminatorValueByClass.put(LogicalRouterRouteTable.class, "LogicalRouterRouteTable");
                      discriminatorValueByClass.put(LogicalSwitchListResult.class, "LogicalSwitchListResult");
                      discriminatorValueByClass.put(LogicalSwitchStateListResult.class, "LogicalSwitchStateListResult");
                      discriminatorValueByClass.put(MACAddressElementListResult.class, "MACAddressElementListResult");
                      discriminatorValueByClass.put(MACSetListResult.class, "MACSetListResult");
                      discriminatorValueByClass.put(MacAddressListResult.class, "MacAddressListResult");
                      discriminatorValueByClass.put(MacPoolListResult.class, "MacPoolListResult");
                      discriminatorValueByClass.put(ManualHealthCheckListResult.class, "ManualHealthCheckListResult");
                      discriminatorValueByClass.put(MetadataProxyListResult.class, "MetadataProxyListResult");
                      discriminatorValueByClass.put(MigrationFeedbackRequestListResult.class, "MigrationFeedbackRequestListResult");
                      discriminatorValueByClass.put(MigrationFeedbackSummaryListResult.class, "MigrationFeedbackSummaryListResult");
                      discriminatorValueByClass.put(MigrationSwitchListResult.class, "MigrationSwitchListResult");
                      discriminatorValueByClass.put(MigrationUnitAggregateInfoListResult.class, "MigrationUnitAggregateInfoListResult");
                      discriminatorValueByClass.put(MigrationUnitGroupAggregateInfoListResult.class, "MigrationUnitGroupAggregateInfoListResult");
                      discriminatorValueByClass.put(MigrationUnitGroupListResult.class, "MigrationUnitGroupListResult");
                      discriminatorValueByClass.put(MigrationUnitGroupStatusListResult.class, "MigrationUnitGroupStatusListResult");
                      discriminatorValueByClass.put(MigrationUnitListResult.class, "MigrationUnitListResult");
                      discriminatorValueByClass.put(MigrationUnitStatusListResult.class, "MigrationUnitStatusListResult");
                      discriminatorValueByClass.put(MigrationUnitTypeStatsList.class, "MigrationUnitTypeStatsList");
                      discriminatorValueByClass.put(NDRAProfileListResult.class, "NDRAProfileListResult");
                      discriminatorValueByClass.put(NSGroupListResult.class, "NSGroupListResult");
                      discriminatorValueByClass.put(NSGroupMetaInfoListResult.class, "NSGroupMetaInfoListResult");
                      discriminatorValueByClass.put(NSProfileListResult.class, "NSProfileListResult");
                      discriminatorValueByClass.put(NSServiceGroupListResult.class, "NSServiceGroupListResult");
                      discriminatorValueByClass.put(NSServiceListResult.class, "NSServiceListResult");
                      discriminatorValueByClass.put(NSSupportedAttributesListResult.class, "NSSupportedAttributesListResult");
                      discriminatorValueByClass.put(NatRuleListResult.class, "NatRuleListResult");
                      discriminatorValueByClass.put(NetworkMigrationSpecListResult.class, "NetworkMigrationSpecListResult");
                      discriminatorValueByClass.put(NodeInfoListResult.class, "NodeInfoListResult");
                      discriminatorValueByClass.put(NodeInterfacePropertiesListResult.class, "NodeInterfacePropertiesListResult");
                      discriminatorValueByClass.put(NodeListResult.class, "NodeListResult");
                      discriminatorValueByClass.put(NodeLogPropertiesListResult.class, "NodeLogPropertiesListResult");
                      discriminatorValueByClass.put(NodeNetworkInterfacePropertiesListResult.class, "NodeNetworkInterfacePropertiesListResult");
                      discriminatorValueByClass.put(NodeProcessPropertiesListResult.class, "NodeProcessPropertiesListResult");
                      discriminatorValueByClass.put(NodeRoutePropertiesListResult.class, "NodeRoutePropertiesListResult");
                      discriminatorValueByClass.put(NodeServicePropertiesListResult.class, "NodeServicePropertiesListResult");
                      discriminatorValueByClass.put(NodeSyslogExporterPropertiesListResult.class, "NodeSyslogExporterPropertiesListResult");
                      discriminatorValueByClass.put(NodeUserPropertiesListResult.class, "NodeUserPropertiesListResult");
                      discriminatorValueByClass.put(NormalizedResourceListResult.class, "NormalizedResourceListResult");
                      discriminatorValueByClass.put(NotificationWatcherListResult.class, "NotificationWatcherListResult");
                      discriminatorValueByClass.put(PBRRuleListResult.class, "PBRRuleListResult");
                      discriminatorValueByClass.put(PBRSectionListResult.class, "PBRSectionListResult");
                      discriminatorValueByClass.put(PBRStatsList.class, "PBRStatsList");
                      discriminatorValueByClass.put(PacketCaptureOptionList.class, "PacketCaptureOptionList");
                      discriminatorValueByClass.put(PacketCaptureSessionList.class, "PacketCaptureSessionList");
                      discriminatorValueByClass.put(PerNodeDnsFailedQueries.class, "PerNodeDnsFailedQueries");
                      discriminatorValueByClass.put(PnicBondStatusListResult.class, "PnicBondStatusListResult");
                      discriminatorValueByClass.put(PortMirroringSessionListResult.class, "PortMirroringSessionListResult");
                      discriminatorValueByClass.put(PrincipalIdentityList.class, "PrincipalIdentityList");
                      discriminatorValueByClass.put(RoleBindingListResult.class, "RoleBindingListResult");
                      discriminatorValueByClass.put(RoleListResult.class, "RoleListResult");
                      discriminatorValueByClass.put(RouteMapListResult.class, "RouteMapListResult");
                      discriminatorValueByClass.put(SIServiceProfileListResult.class, "SIServiceProfileListResult");
                      discriminatorValueByClass.put(ServiceAssociationListResult.class, "ServiceAssociationListResult");
                      discriminatorValueByClass.put(ServiceAttachmentListResult.class, "ServiceAttachmentListResult");
                      discriminatorValueByClass.put(ServiceChainListResult.class, "ServiceChainListResult");
                      discriminatorValueByClass.put(ServiceChainMappingListResult.class, "ServiceChainMappingListResult");
                      discriminatorValueByClass.put(ServiceConfigListResult.class, "ServiceConfigListResult");
                      discriminatorValueByClass.put(ServiceDeploymentListResult.class, "ServiceDeploymentListResult");
                      discriminatorValueByClass.put(ServiceInsertionRuleListResult.class, "ServiceInsertionRuleListResult");
                      discriminatorValueByClass.put(ServiceInsertionServiceListResult.class, "ServiceInsertionServiceListResult");
                      discriminatorValueByClass.put(ServiceInsertionStatusListResult.class, "ServiceInsertionStatusListResult");
                      discriminatorValueByClass.put(ServiceInstanceListResult.class, "ServiceInstanceListResult");
                      discriminatorValueByClass.put(ServiceManagerListResult.class, "ServiceManagerListResult");
                      discriminatorValueByClass.put(ServicePathListResult.class, "ServicePathListResult");
                      discriminatorValueByClass.put(SolutionConfigListResult.class, "SolutionConfigListResult");
                      discriminatorValueByClass.put(SourceEntityResult.class, "SourceEntityResult");
                      discriminatorValueByClass.put(SshKeyPropertiesListResult.class, "SshKeyPropertiesListResult");
                      discriminatorValueByClass.put(StaticHopBfdPeerListResult.class, "StaticHopBfdPeerListResult");
                      discriminatorValueByClass.put(StaticRouteListResult.class, "StaticRouteListResult");
                      discriminatorValueByClass.put(SwitchingProfilesListResult.class, "SwitchingProfilesListResult");
                      discriminatorValueByClass.put(TaskListResult.class, "TaskListResult");
                      discriminatorValueByClass.put(TraceflowListResult.class, "TraceflowListResult");
                      discriminatorValueByClass.put(TraceflowObservationListResult.class, "TraceflowObservationListResult");
                      discriminatorValueByClass.put(TransportNodeCollectionListResult.class, "TransportNodeCollectionListResult");
                      discriminatorValueByClass.put(TransportNodeListResult.class, "TransportNodeListResult");
                      discriminatorValueByClass.put(TransportNodeProfileListResult.class, "TransportNodeProfileListResult");
                      discriminatorValueByClass.put(TransportNodeStateListResult.class, "TransportNodeStateListResult");
                      discriminatorValueByClass.put(TransportNodeStatusListResult.class, "TransportNodeStatusListResult");
                      discriminatorValueByClass.put(TransportNodeTemplateListResult.class, "TransportNodeTemplateListResult");
                      discriminatorValueByClass.put(TransportZoneListResult.class, "TransportZoneListResult");
                      discriminatorValueByClass.put(TransportZoneProfileListResult.class, "TransportZoneProfileListResult");
                      discriminatorValueByClass.put(TunnelList.class, "TunnelList");
                      discriminatorValueByClass.put(UnassociatedVMListResult.class, "UnassociatedVMListResult");
                      discriminatorValueByClass.put(UpgradeCheckListResult.class, "UpgradeCheckListResult");
                      discriminatorValueByClass.put(UpgradeHistoryList.class, "UpgradeHistoryList");
                      discriminatorValueByClass.put(UpgradeUnitAggregateInfoListResult.class, "UpgradeUnitAggregateInfoListResult");
                      discriminatorValueByClass.put(UpgradeUnitGroupAggregateInfoListResult.class, "UpgradeUnitGroupAggregateInfoListResult");
                      discriminatorValueByClass.put(UpgradeUnitGroupListResult.class, "UpgradeUnitGroupListResult");
                      discriminatorValueByClass.put(UpgradeUnitGroupStatusListResult.class, "UpgradeUnitGroupStatusListResult");
                      discriminatorValueByClass.put(UpgradeUnitListResult.class, "UpgradeUnitListResult");
                      discriminatorValueByClass.put(UpgradeUnitStatusListResult.class, "UpgradeUnitStatusListResult");
                      discriminatorValueByClass.put(UpgradeUnitTypeStatsList.class, "UpgradeUnitTypeStatsList");
                      discriminatorValueByClass.put(VendorTemplateListResult.class, "VendorTemplateListResult");
                      discriminatorValueByClass.put(VidmInfoListResult.class, "VidmInfoListResult");
                      discriminatorValueByClass.put(VirtualMachineListResult.class, "VirtualMachineListResult");
                      discriminatorValueByClass.put(VirtualNetworkInterfaceListResult.class, "VirtualNetworkInterfaceListResult");
                      discriminatorValueByClass.put(VmToolsInfoListResult.class, "VmToolsInfoListResult");
                      discriminatorValueByClass.put(VniPoolListResult.class, "VniPoolListResult");
                      discriminatorValueByClass.put(VtepLabelPoolListResult.class, "VtepLabelPoolListResult");
                      discriminatorValueByClass.put(VtepListResult.class, "VtepListResult");
                      discriminatorValueByClass.put(ListResult.class, "ListResult");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has(""))
                      {
                          ((JsonObject) result).addProperty("", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(AggregatedDataCounter.class, new TypeSelector<AggregatedDataCounter>() {
            @Override
            public Class<? extends AggregatedDataCounter> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends AggregatedDataCounter>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("AggregatedDataCounterEx".toUpperCase(), AggregatedDataCounterEx.class);
                    classByDiscriminatorValue.put("BridgeEndpointStatistics".toUpperCase(), BridgeEndpointStatistics.class);
                    classByDiscriminatorValue.put("AggregatedDataCounter".toUpperCase(), AggregatedDataCounter.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, ""));
            }
          })
          .registerPostProcessor(AggregatedDataCounter.class, new PostProcessor<AggregatedDataCounter>() {
              @Override
              public void postDeserialize(AggregatedDataCounter result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, AggregatedDataCounter src, Gson gson) {
                  Map<Class<? extends AggregatedDataCounter>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(AggregatedDataCounterEx.class, "AggregatedDataCounterEx");
                      discriminatorValueByClass.put(BridgeEndpointStatistics.class, "BridgeEndpointStatistics");
                      discriminatorValueByClass.put(AggregatedDataCounter.class, "AggregatedDataCounter");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has(""))
                      {
                          ((JsonObject) result).addProperty("", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(AllocationRuleAction.class, new TypeSelector<AllocationRuleAction>() {
            @Override
            public Class<? extends AllocationRuleAction> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends AllocationRuleAction>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("AllocationBasedOnFailureDomain".toUpperCase(), AllocationBasedOnFailureDomain.class);
                    classByDiscriminatorValue.put("AllocationRuleAction".toUpperCase(), AllocationRuleAction.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, "action_type"));
            }
          })
          .registerPostProcessor(AllocationRuleAction.class, new PostProcessor<AllocationRuleAction>() {
              @Override
              public void postDeserialize(AllocationRuleAction result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, AllocationRuleAction src, Gson gson) {
                  Map<Class<? extends AllocationRuleAction>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(AllocationBasedOnFailureDomain.class, "AllocationBasedOnFailureDomain");
                      discriminatorValueByClass.put(AllocationRuleAction.class, "AllocationRuleAction");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has("action_type"))
                      {
                          ((JsonObject) result).addProperty("action_type", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(RelatedApiError.class, new TypeSelector<RelatedApiError>() {
            @Override
            public Class<? extends RelatedApiError> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends RelatedApiError>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("ApiError".toUpperCase(), ApiError.class);
                    classByDiscriminatorValue.put("RelatedApiError".toUpperCase(), RelatedApiError.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, ""));
            }
          })
          .registerPostProcessor(RelatedApiError.class, new PostProcessor<RelatedApiError>() {
              @Override
              public void postDeserialize(RelatedApiError result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, RelatedApiError src, Gson gson) {
                  Map<Class<? extends RelatedApiError>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(ApiError.class, "ApiError");
                      discriminatorValueByClass.put(RelatedApiError.class, "RelatedApiError");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has(""))
                      {
                          ((JsonObject) result).addProperty("", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(AppDiscoverySession.class, new TypeSelector<AppDiscoverySession>() {
            @Override
            public Class<? extends AppDiscoverySession> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends AppDiscoverySession>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("AppDiscoverySessionResultSummary".toUpperCase(), AppDiscoverySessionResultSummary.class);
                    classByDiscriminatorValue.put("AppDiscoverySession".toUpperCase(), AppDiscoverySession.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, ""));
            }
          })
          .registerPostProcessor(AppDiscoverySession.class, new PostProcessor<AppDiscoverySession>() {
              @Override
              public void postDeserialize(AppDiscoverySession result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, AppDiscoverySession src, Gson gson) {
                  Map<Class<? extends AppDiscoverySession>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(AppDiscoverySessionResultSummary.class, "AppDiscoverySessionResultSummary");
                      discriminatorValueByClass.put(AppDiscoverySession.class, "AppDiscoverySession");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has(""))
                      {
                          ((JsonObject) result).addProperty("", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(Resource.class, new TypeSelector<Resource>() {
            @Override
            public Class<? extends Resource> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends Resource>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("AppDiscoveryVmInfo".toUpperCase(), AppDiscoveryVmInfo.class);
                    classByDiscriminatorValue.put("ApplianceManagementTaskProperties".toUpperCase(), ApplianceManagementTaskProperties.class);
                    classByDiscriminatorValue.put("AuthenticationPolicyProperties".toUpperCase(), AuthenticationPolicyProperties.class);
                    classByDiscriminatorValue.put("CapacityUsage".toUpperCase(), CapacityUsage.class);
                    classByDiscriminatorValue.put("ControllerProfilerProperties".toUpperCase(), ControllerProfilerProperties.class);
                    classByDiscriminatorValue.put("DiscoveredResource".toUpperCase(), DiscoveredResource.class);
                    classByDiscriminatorValue.put("EULAAcceptance".toUpperCase(), EULAAcceptance.class);
                    classByDiscriminatorValue.put("EULAContent".toUpperCase(), EULAContent.class);
                    classByDiscriminatorValue.put("FeatureUsage".toUpperCase(), FeatureUsage.class);
                    classByDiscriminatorValue.put("FeatureUsageList".toUpperCase(), FeatureUsageList.class);
                    classByDiscriminatorValue.put("FileProperties".toUpperCase(), FileProperties.class);
                    classByDiscriminatorValue.put("FileThumbprint".toUpperCase(), FileThumbprint.class);
                    classByDiscriminatorValue.put("FirewallSectionsSummary".toUpperCase(), FirewallSectionsSummary.class);
                    classByDiscriminatorValue.put("FirewallStats".toUpperCase(), FirewallStats.class);
                    classByDiscriminatorValue.put("IpPoolRange".toUpperCase(), IpPoolRange.class);
                    classByDiscriminatorValue.put("IpPoolSubnet".toUpperCase(), IpPoolSubnet.class);
                    classByDiscriminatorValue.put("License".toUpperCase(), License.class);
                    classByDiscriminatorValue.put("ListResult".toUpperCase(), ListResult.class);
                    classByDiscriminatorValue.put("MPAConfigProperties".toUpperCase(), MPAConfigProperties.class);
                    classByDiscriminatorValue.put("ManagementPlaneProperties".toUpperCase(), ManagementPlaneProperties.class);
                    classByDiscriminatorValue.put("MandatoryAccessControlProperties".toUpperCase(), MandatoryAccessControlProperties.class);
                    classByDiscriminatorValue.put("MigrationUnit".toUpperCase(), MigrationUnit.class);
                    classByDiscriminatorValue.put("MigrationUnitAggregateInfo".toUpperCase(), MigrationUnitAggregateInfo.class);
                    classByDiscriminatorValue.put("NSGroupMetaInfo".toUpperCase(), NSGroupMetaInfo.class);
                    classByDiscriminatorValue.put("NodeInfo".toUpperCase(), NodeInfo.class);
                    classByDiscriminatorValue.put("NodeInterfaceStatisticsProperties".toUpperCase(), NodeInterfaceStatisticsProperties.class);
                    classByDiscriminatorValue.put("NodeLogProperties".toUpperCase(), NodeLogProperties.class);
                    classByDiscriminatorValue.put("NodeNameServersProperties".toUpperCase(), NodeNameServersProperties.class);
                    classByDiscriminatorValue.put("NodeNetworkInterfaceProperties".toUpperCase(), NodeNetworkInterfaceProperties.class);
                    classByDiscriminatorValue.put("NodeNetworkProperties".toUpperCase(), NodeNetworkProperties.class);
                    classByDiscriminatorValue.put("NodeProcessProperties".toUpperCase(), NodeProcessProperties.class);
                    classByDiscriminatorValue.put("NodeProperties".toUpperCase(), NodeProperties.class);
                    classByDiscriminatorValue.put("NodeRouteProperties".toUpperCase(), NodeRouteProperties.class);
                    classByDiscriminatorValue.put("NodeSearchDomainsProperties".toUpperCase(), NodeSearchDomainsProperties.class);
                    classByDiscriminatorValue.put("NodeServiceProperties".toUpperCase(), NodeServiceProperties.class);
                    classByDiscriminatorValue.put("NodeServiceStatusProperties".toUpperCase(), NodeServiceStatusProperties.class);
                    classByDiscriminatorValue.put("NodeStatusProperties".toUpperCase(), NodeStatusProperties.class);
                    classByDiscriminatorValue.put("NodeSummary".toUpperCase(), NodeSummary.class);
                    classByDiscriminatorValue.put("NodeSyslogExporterProperties".toUpperCase(), NodeSyslogExporterProperties.class);
                    classByDiscriminatorValue.put("NodeUserProperties".toUpperCase(), NodeUserProperties.class);
                    classByDiscriminatorValue.put("PBRStats".toUpperCase(), PBRStats.class);
                    classByDiscriminatorValue.put("RevisionedResource".toUpperCase(), RevisionedResource.class);
                    classByDiscriminatorValue.put("TaskProperties".toUpperCase(), TaskProperties.class);
                    classByDiscriminatorValue.put("Traceflow".toUpperCase(), Traceflow.class);
                    classByDiscriminatorValue.put("TunnelProperties".toUpperCase(), TunnelProperties.class);
                    classByDiscriminatorValue.put("UpgradeUnit".toUpperCase(), UpgradeUnit.class);
                    classByDiscriminatorValue.put("UpgradeUnitAggregateInfo".toUpperCase(), UpgradeUnitAggregateInfo.class);
                    classByDiscriminatorValue.put("VniRange".toUpperCase(), VniRange.class);
                    classByDiscriminatorValue.put("VtepLabelRange".toUpperCase(), VtepLabelRange.class);
                    classByDiscriminatorValue.put("Resource".toUpperCase(), Resource.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, ""));
            }
          })
          .registerPostProcessor(Resource.class, new PostProcessor<Resource>() {
              @Override
              public void postDeserialize(Resource result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, Resource src, Gson gson) {
                  Map<Class<? extends Resource>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(AppDiscoveryVmInfo.class, "AppDiscoveryVmInfo");
                      discriminatorValueByClass.put(ApplianceManagementTaskProperties.class, "ApplianceManagementTaskProperties");
                      discriminatorValueByClass.put(AuthenticationPolicyProperties.class, "AuthenticationPolicyProperties");
                      discriminatorValueByClass.put(CapacityUsage.class, "CapacityUsage");
                      discriminatorValueByClass.put(ControllerProfilerProperties.class, "ControllerProfilerProperties");
                      discriminatorValueByClass.put(DiscoveredResource.class, "DiscoveredResource");
                      discriminatorValueByClass.put(EULAAcceptance.class, "EULAAcceptance");
                      discriminatorValueByClass.put(EULAContent.class, "EULAContent");
                      discriminatorValueByClass.put(FeatureUsage.class, "FeatureUsage");
                      discriminatorValueByClass.put(FeatureUsageList.class, "FeatureUsageList");
                      discriminatorValueByClass.put(FileProperties.class, "FileProperties");
                      discriminatorValueByClass.put(FileThumbprint.class, "FileThumbprint");
                      discriminatorValueByClass.put(FirewallSectionsSummary.class, "FirewallSectionsSummary");
                      discriminatorValueByClass.put(FirewallStats.class, "FirewallStats");
                      discriminatorValueByClass.put(IpPoolRange.class, "IpPoolRange");
                      discriminatorValueByClass.put(IpPoolSubnet.class, "IpPoolSubnet");
                      discriminatorValueByClass.put(License.class, "License");
                      discriminatorValueByClass.put(ListResult.class, "ListResult");
                      discriminatorValueByClass.put(MPAConfigProperties.class, "MPAConfigProperties");
                      discriminatorValueByClass.put(ManagementPlaneProperties.class, "ManagementPlaneProperties");
                      discriminatorValueByClass.put(MandatoryAccessControlProperties.class, "MandatoryAccessControlProperties");
                      discriminatorValueByClass.put(MigrationUnit.class, "MigrationUnit");
                      discriminatorValueByClass.put(MigrationUnitAggregateInfo.class, "MigrationUnitAggregateInfo");
                      discriminatorValueByClass.put(NSGroupMetaInfo.class, "NSGroupMetaInfo");
                      discriminatorValueByClass.put(NodeInfo.class, "NodeInfo");
                      discriminatorValueByClass.put(NodeInterfaceStatisticsProperties.class, "NodeInterfaceStatisticsProperties");
                      discriminatorValueByClass.put(NodeLogProperties.class, "NodeLogProperties");
                      discriminatorValueByClass.put(NodeNameServersProperties.class, "NodeNameServersProperties");
                      discriminatorValueByClass.put(NodeNetworkInterfaceProperties.class, "NodeNetworkInterfaceProperties");
                      discriminatorValueByClass.put(NodeNetworkProperties.class, "NodeNetworkProperties");
                      discriminatorValueByClass.put(NodeProcessProperties.class, "NodeProcessProperties");
                      discriminatorValueByClass.put(NodeProperties.class, "NodeProperties");
                      discriminatorValueByClass.put(NodeRouteProperties.class, "NodeRouteProperties");
                      discriminatorValueByClass.put(NodeSearchDomainsProperties.class, "NodeSearchDomainsProperties");
                      discriminatorValueByClass.put(NodeServiceProperties.class, "NodeServiceProperties");
                      discriminatorValueByClass.put(NodeServiceStatusProperties.class, "NodeServiceStatusProperties");
                      discriminatorValueByClass.put(NodeStatusProperties.class, "NodeStatusProperties");
                      discriminatorValueByClass.put(NodeSummary.class, "NodeSummary");
                      discriminatorValueByClass.put(NodeSyslogExporterProperties.class, "NodeSyslogExporterProperties");
                      discriminatorValueByClass.put(NodeUserProperties.class, "NodeUserProperties");
                      discriminatorValueByClass.put(PBRStats.class, "PBRStats");
                      discriminatorValueByClass.put(RevisionedResource.class, "RevisionedResource");
                      discriminatorValueByClass.put(TaskProperties.class, "TaskProperties");
                      discriminatorValueByClass.put(Traceflow.class, "Traceflow");
                      discriminatorValueByClass.put(TunnelProperties.class, "TunnelProperties");
                      discriminatorValueByClass.put(UpgradeUnit.class, "UpgradeUnit");
                      discriminatorValueByClass.put(UpgradeUnitAggregateInfo.class, "UpgradeUnitAggregateInfo");
                      discriminatorValueByClass.put(VniRange.class, "VniRange");
                      discriminatorValueByClass.put(VtepLabelRange.class, "VtepLabelRange");
                      discriminatorValueByClass.put(Resource.class, "Resource");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has(""))
                      {
                          ((JsonObject) result).addProperty("", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(CsvRecord.class, new TypeSelector<CsvRecord>() {
            @Override
            public Class<? extends CsvRecord> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends CsvRecord>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("AppInfoHostVmCsvRecord".toUpperCase(), AppInfoHostVmCsvRecord.class);
                    classByDiscriminatorValue.put("AppProfileMemberAppsCsvRecord".toUpperCase(), AppProfileMemberAppsCsvRecord.class);
                    classByDiscriminatorValue.put("BgpNeighborRouteDetailsCsvRecord".toUpperCase(), BgpNeighborRouteDetailsCsvRecord.class);
                    classByDiscriminatorValue.put("FeatureUsageCsvRecord".toUpperCase(), FeatureUsageCsvRecord.class);
                    classByDiscriminatorValue.put("LogicalPortMacTableCsvEntry".toUpperCase(), LogicalPortMacTableCsvEntry.class);
                    classByDiscriminatorValue.put("LogicalRouterPortArpCsvRecord".toUpperCase(), LogicalRouterPortArpCsvRecord.class);
                    classByDiscriminatorValue.put("LogicalRouterRouteCsvRecord".toUpperCase(), LogicalRouterRouteCsvRecord.class);
                    classByDiscriminatorValue.put("MacTableCsvRecord".toUpperCase(), MacTableCsvRecord.class);
                    classByDiscriminatorValue.put("UpgradeCheckCsvRecord".toUpperCase(), UpgradeCheckCsvRecord.class);
                    classByDiscriminatorValue.put("VtepTableCsvRecord".toUpperCase(), VtepTableCsvRecord.class);
                    classByDiscriminatorValue.put("CsvRecord".toUpperCase(), CsvRecord.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, ""));
            }
          })
          .registerPostProcessor(CsvRecord.class, new PostProcessor<CsvRecord>() {
              @Override
              public void postDeserialize(CsvRecord result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, CsvRecord src, Gson gson) {
                  Map<Class<? extends CsvRecord>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(AppInfoHostVmCsvRecord.class, "AppInfoHostVmCsvRecord");
                      discriminatorValueByClass.put(AppProfileMemberAppsCsvRecord.class, "AppProfileMemberAppsCsvRecord");
                      discriminatorValueByClass.put(BgpNeighborRouteDetailsCsvRecord.class, "BgpNeighborRouteDetailsCsvRecord");
                      discriminatorValueByClass.put(FeatureUsageCsvRecord.class, "FeatureUsageCsvRecord");
                      discriminatorValueByClass.put(LogicalPortMacTableCsvEntry.class, "LogicalPortMacTableCsvEntry");
                      discriminatorValueByClass.put(LogicalRouterPortArpCsvRecord.class, "LogicalRouterPortArpCsvRecord");
                      discriminatorValueByClass.put(LogicalRouterRouteCsvRecord.class, "LogicalRouterRouteCsvRecord");
                      discriminatorValueByClass.put(MacTableCsvRecord.class, "MacTableCsvRecord");
                      discriminatorValueByClass.put(UpgradeCheckCsvRecord.class, "UpgradeCheckCsvRecord");
                      discriminatorValueByClass.put(VtepTableCsvRecord.class, "VtepTableCsvRecord");
                      discriminatorValueByClass.put(CsvRecord.class, "CsvRecord");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has(""))
                      {
                          ((JsonObject) result).addProperty("", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(CsvListResult.class, new TypeSelector<CsvListResult>() {
            @Override
            public Class<? extends CsvListResult> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends CsvListResult>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("AppInfoHostVmListInCsvFormat".toUpperCase(), AppInfoHostVmListInCsvFormat.class);
                    classByDiscriminatorValue.put("AppProfileMemberAppsListInCsvFormat".toUpperCase(), AppProfileMemberAppsListInCsvFormat.class);
                    classByDiscriminatorValue.put("BgpNeighborRouteDetailsInCsvFormat".toUpperCase(), BgpNeighborRouteDetailsInCsvFormat.class);
                    classByDiscriminatorValue.put("FeatureUsageListInCsvFormat".toUpperCase(), FeatureUsageListInCsvFormat.class);
                    classByDiscriminatorValue.put("LogicalPortMacAddressCsvListResult".toUpperCase(), LogicalPortMacAddressCsvListResult.class);
                    classByDiscriminatorValue.put("LogicalRouterPortArpTableInCsvFormat".toUpperCase(), LogicalRouterPortArpTableInCsvFormat.class);
                    classByDiscriminatorValue.put("LogicalRouterRouteTableInCsvFormat".toUpperCase(), LogicalRouterRouteTableInCsvFormat.class);
                    classByDiscriminatorValue.put("MacAddressCsvListResult".toUpperCase(), MacAddressCsvListResult.class);
                    classByDiscriminatorValue.put("UpgradeCheckCsvListResult".toUpperCase(), UpgradeCheckCsvListResult.class);
                    classByDiscriminatorValue.put("VtepCsvListResult".toUpperCase(), VtepCsvListResult.class);
                    classByDiscriminatorValue.put("CsvListResult".toUpperCase(), CsvListResult.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, ""));
            }
          })
          .registerPostProcessor(CsvListResult.class, new PostProcessor<CsvListResult>() {
              @Override
              public void postDeserialize(CsvListResult result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, CsvListResult src, Gson gson) {
                  Map<Class<? extends CsvListResult>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(AppInfoHostVmListInCsvFormat.class, "AppInfoHostVmListInCsvFormat");
                      discriminatorValueByClass.put(AppProfileMemberAppsListInCsvFormat.class, "AppProfileMemberAppsListInCsvFormat");
                      discriminatorValueByClass.put(BgpNeighborRouteDetailsInCsvFormat.class, "BgpNeighborRouteDetailsInCsvFormat");
                      discriminatorValueByClass.put(FeatureUsageListInCsvFormat.class, "FeatureUsageListInCsvFormat");
                      discriminatorValueByClass.put(LogicalPortMacAddressCsvListResult.class, "LogicalPortMacAddressCsvListResult");
                      discriminatorValueByClass.put(LogicalRouterPortArpTableInCsvFormat.class, "LogicalRouterPortArpTableInCsvFormat");
                      discriminatorValueByClass.put(LogicalRouterRouteTableInCsvFormat.class, "LogicalRouterRouteTableInCsvFormat");
                      discriminatorValueByClass.put(MacAddressCsvListResult.class, "MacAddressCsvListResult");
                      discriminatorValueByClass.put(UpgradeCheckCsvListResult.class, "UpgradeCheckCsvListResult");
                      discriminatorValueByClass.put(VtepCsvListResult.class, "VtepCsvListResult");
                      discriminatorValueByClass.put(CsvListResult.class, "CsvListResult");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has(""))
                      {
                          ((JsonObject) result).addProperty("", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(IpAssignmentSpec.class, new TypeSelector<IpAssignmentSpec>() {
            @Override
            public Class<? extends IpAssignmentSpec> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends IpAssignmentSpec>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("AssignedByDhcp".toUpperCase(), AssignedByDhcp.class);
                    classByDiscriminatorValue.put("StaticIpListSpec".toUpperCase(), StaticIpListSpec.class);
                    classByDiscriminatorValue.put("StaticIpMacListSpec".toUpperCase(), StaticIpMacListSpec.class);
                    classByDiscriminatorValue.put("StaticIpPoolSpec".toUpperCase(), StaticIpPoolSpec.class);
                    classByDiscriminatorValue.put("IpAssignmentSpec".toUpperCase(), IpAssignmentSpec.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, "resource_type"));
            }
          })
          .registerPostProcessor(IpAssignmentSpec.class, new PostProcessor<IpAssignmentSpec>() {
              @Override
              public void postDeserialize(IpAssignmentSpec result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, IpAssignmentSpec src, Gson gson) {
                  Map<Class<? extends IpAssignmentSpec>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(AssignedByDhcp.class, "AssignedByDhcp");
                      discriminatorValueByClass.put(StaticIpListSpec.class, "StaticIpListSpec");
                      discriminatorValueByClass.put(StaticIpMacListSpec.class, "StaticIpMacListSpec");
                      discriminatorValueByClass.put(StaticIpPoolSpec.class, "StaticIpPoolSpec");
                      discriminatorValueByClass.put(IpAssignmentSpec.class, "IpAssignmentSpec");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has("resource_type"))
                      {
                          ((JsonObject) result).addProperty("resource_type", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(AuthenticationScheme.class, new TypeSelector<AuthenticationScheme>() {
            @Override
            public Class<? extends AuthenticationScheme> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends AuthenticationScheme>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("BasicAuthenticationScheme".toUpperCase(), BasicAuthenticationScheme.class);
                    classByDiscriminatorValue.put("PasswordAuthenticationScheme".toUpperCase(), PasswordAuthenticationScheme.class);
                    classByDiscriminatorValue.put("AuthenticationScheme".toUpperCase(), AuthenticationScheme.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, ""));
            }
          })
          .registerPostProcessor(AuthenticationScheme.class, new PostProcessor<AuthenticationScheme>() {
              @Override
              public void postDeserialize(AuthenticationScheme result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, AuthenticationScheme src, Gson gson) {
                  Map<Class<? extends AuthenticationScheme>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(BasicAuthenticationScheme.class, "BasicAuthenticationScheme");
                      discriminatorValueByClass.put(PasswordAuthenticationScheme.class, "PasswordAuthenticationScheme");
                      discriminatorValueByClass.put(AuthenticationScheme.class, "AuthenticationScheme");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has(""))
                      {
                          ((JsonObject) result).addProperty("", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(TransportZoneProfile.class, new TypeSelector<TransportZoneProfile>() {
            @Override
            public Class<? extends TransportZoneProfile> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends TransportZoneProfile>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("BfdHealthMonitoringProfile".toUpperCase(), BfdHealthMonitoringProfile.class);
                    classByDiscriminatorValue.put("TransportZoneProfile".toUpperCase(), TransportZoneProfile.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, "resource_type"));
            }
          })
          .registerPostProcessor(TransportZoneProfile.class, new PostProcessor<TransportZoneProfile>() {
              @Override
              public void postDeserialize(TransportZoneProfile result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, TransportZoneProfile src, Gson gson) {
                  Map<Class<? extends TransportZoneProfile>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(BfdHealthMonitoringProfile.class, "BfdHealthMonitoringProfile");
                      discriminatorValueByClass.put(TransportZoneProfile.class, "TransportZoneProfile");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has("resource_type"))
                      {
                          ((JsonObject) result).addProperty("resource_type", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(PacketData.class, new TypeSelector<PacketData>() {
            @Override
            public Class<? extends PacketData> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends PacketData>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("BinaryPacketData".toUpperCase(), BinaryPacketData.class);
                    classByDiscriminatorValue.put("FieldsPacketData".toUpperCase(), FieldsPacketData.class);
                    classByDiscriminatorValue.put("PacketData".toUpperCase(), PacketData.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, "resource_type"));
            }
          })
          .registerPostProcessor(PacketData.class, new PostProcessor<PacketData>() {
              @Override
              public void postDeserialize(PacketData result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, PacketData src, Gson gson) {
                  Map<Class<? extends PacketData>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(BinaryPacketData.class, "BinaryPacketData");
                      discriminatorValueByClass.put(FieldsPacketData.class, "FieldsPacketData");
                      discriminatorValueByClass.put(PacketData.class, "PacketData");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has("resource_type"))
                      {
                          ((JsonObject) result).addProperty("resource_type", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(ClusterProfile.class, new TypeSelector<ClusterProfile>() {
            @Override
            public Class<? extends ClusterProfile> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends ClusterProfile>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("BridgeHighAvailabilityClusterProfile".toUpperCase(), BridgeHighAvailabilityClusterProfile.class);
                    classByDiscriminatorValue.put("EdgeHighAvailabilityProfile".toUpperCase(), EdgeHighAvailabilityProfile.class);
                    classByDiscriminatorValue.put("ClusterProfile".toUpperCase(), ClusterProfile.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, "resource_type"));
            }
          })
          .registerPostProcessor(ClusterProfile.class, new PostProcessor<ClusterProfile>() {
              @Override
              public void postDeserialize(ClusterProfile result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, ClusterProfile src, Gson gson) {
                  Map<Class<? extends ClusterProfile>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(BridgeHighAvailabilityClusterProfile.class, "BridgeHighAvailabilityClusterProfile");
                      discriminatorValueByClass.put(EdgeHighAvailabilityProfile.class, "EdgeHighAvailabilityProfile");
                      discriminatorValueByClass.put(ClusterProfile.class, "ClusterProfile");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has("resource_type"))
                      {
                          ((JsonObject) result).addProperty("resource_type", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(BaseServiceInstance.class, new TypeSelector<BaseServiceInstance>() {
            @Override
            public Class<? extends BaseServiceInstance> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends BaseServiceInstance>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("ByodServiceInstance".toUpperCase(), ByodServiceInstance.class);
                    classByDiscriminatorValue.put("ServiceInstance".toUpperCase(), ServiceInstance.class);
                    classByDiscriminatorValue.put("VirtualServiceInstance".toUpperCase(), VirtualServiceInstance.class);
                    classByDiscriminatorValue.put("BaseServiceInstance".toUpperCase(), BaseServiceInstance.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, "resource_type"));
            }
          })
          .registerPostProcessor(BaseServiceInstance.class, new PostProcessor<BaseServiceInstance>() {
              @Override
              public void postDeserialize(BaseServiceInstance result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, BaseServiceInstance src, Gson gson) {
                  Map<Class<? extends BaseServiceInstance>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(ByodServiceInstance.class, "ByodServiceInstance");
                      discriminatorValueByClass.put(ServiceInstance.class, "ServiceInstance");
                      discriminatorValueByClass.put(VirtualServiceInstance.class, "VirtualServiceInstance");
                      discriminatorValueByClass.put(BaseServiceInstance.class, "BaseServiceInstance");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has("resource_type"))
                      {
                          ((JsonObject) result).addProperty("resource_type", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(ComponentUpgradeStatus.class, new TypeSelector<ComponentUpgradeStatus>() {
            @Override
            public Class<? extends ComponentUpgradeStatus> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends ComponentUpgradeStatus>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("CCPUpgradeStatus".toUpperCase(), CCPUpgradeStatus.class);
                    classByDiscriminatorValue.put("EdgeUpgradeStatus".toUpperCase(), EdgeUpgradeStatus.class);
                    classByDiscriminatorValue.put("HostUpgradeStatus".toUpperCase(), HostUpgradeStatus.class);
                    classByDiscriminatorValue.put("ComponentUpgradeStatus".toUpperCase(), ComponentUpgradeStatus.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, ""));
            }
          })
          .registerPostProcessor(ComponentUpgradeStatus.class, new PostProcessor<ComponentUpgradeStatus>() {
              @Override
              public void postDeserialize(ComponentUpgradeStatus result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, ComponentUpgradeStatus src, Gson gson) {
                  Map<Class<? extends ComponentUpgradeStatus>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(CCPUpgradeStatus.class, "CCPUpgradeStatus");
                      discriminatorValueByClass.put(EdgeUpgradeStatus.class, "EdgeUpgradeStatus");
                      discriminatorValueByClass.put(HostUpgradeStatus.class, "HostUpgradeStatus");
                      discriminatorValueByClass.put(ComponentUpgradeStatus.class, "ComponentUpgradeStatus");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has(""))
                      {
                          ((JsonObject) result).addProperty("", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(RevisionedResource.class, new TypeSelector<RevisionedResource>() {
            @Override
            public Class<? extends RevisionedResource> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends RevisionedResource>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("ClusterConfig".toUpperCase(), ClusterConfig.class);
                    classByDiscriminatorValue.put("EmbeddedResource".toUpperCase(), EmbeddedResource.class);
                    classByDiscriminatorValue.put("IPAddressElement".toUpperCase(), IPAddressElement.class);
                    classByDiscriminatorValue.put("MACAddressElement".toUpperCase(), MACAddressElement.class);
                    classByDiscriminatorValue.put("ManagedResource".toUpperCase(), ManagedResource.class);
                    classByDiscriminatorValue.put("ManagementConfig".toUpperCase(), ManagementConfig.class);
                    classByDiscriminatorValue.put("RealizationStateBarrierConfig".toUpperCase(), RealizationStateBarrierConfig.class);
                    classByDiscriminatorValue.put("RevisionedResource".toUpperCase(), RevisionedResource.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, ""));
            }
          })
          .registerPostProcessor(RevisionedResource.class, new PostProcessor<RevisionedResource>() {
              @Override
              public void postDeserialize(RevisionedResource result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, RevisionedResource src, Gson gson) {
                  Map<Class<? extends RevisionedResource>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(ClusterConfig.class, "ClusterConfig");
                      discriminatorValueByClass.put(EmbeddedResource.class, "EmbeddedResource");
                      discriminatorValueByClass.put(IPAddressElement.class, "IPAddressElement");
                      discriminatorValueByClass.put(MACAddressElement.class, "MACAddressElement");
                      discriminatorValueByClass.put(ManagedResource.class, "ManagedResource");
                      discriminatorValueByClass.put(ManagementConfig.class, "ManagementConfig");
                      discriminatorValueByClass.put(RealizationStateBarrierConfig.class, "RealizationStateBarrierConfig");
                      discriminatorValueByClass.put(RevisionedResource.class, "RevisionedResource");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has(""))
                      {
                          ((JsonObject) result).addProperty("", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(DiscoveredResource.class, new TypeSelector<DiscoveredResource>() {
            @Override
            public Class<? extends DiscoveredResource> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends DiscoveredResource>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("ComputeCollection".toUpperCase(), ComputeCollection.class);
                    classByDiscriminatorValue.put("ContainerApplication".toUpperCase(), ContainerApplication.class);
                    classByDiscriminatorValue.put("ContainerApplicationInstance".toUpperCase(), ContainerApplicationInstance.class);
                    classByDiscriminatorValue.put("ContainerCluster".toUpperCase(), ContainerCluster.class);
                    classByDiscriminatorValue.put("ContainerClusterNode".toUpperCase(), ContainerClusterNode.class);
                    classByDiscriminatorValue.put("ContainerIngressPolicy".toUpperCase(), ContainerIngressPolicy.class);
                    classByDiscriminatorValue.put("ContainerNetworkPolicy".toUpperCase(), ContainerNetworkPolicy.class);
                    classByDiscriminatorValue.put("ContainerProject".toUpperCase(), ContainerProject.class);
                    classByDiscriminatorValue.put("DiscoveredNode".toUpperCase(), DiscoveredNode.class);
                    classByDiscriminatorValue.put("VirtualMachine".toUpperCase(), VirtualMachine.class);
                    classByDiscriminatorValue.put("VirtualNetworkInterface".toUpperCase(), VirtualNetworkInterface.class);
                    classByDiscriminatorValue.put("VmToolsInfo".toUpperCase(), VmToolsInfo.class);
                    classByDiscriminatorValue.put("DiscoveredResource".toUpperCase(), DiscoveredResource.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, "resource_type"));
            }
          })
          .registerPostProcessor(DiscoveredResource.class, new PostProcessor<DiscoveredResource>() {
              @Override
              public void postDeserialize(DiscoveredResource result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, DiscoveredResource src, Gson gson) {
                  Map<Class<? extends DiscoveredResource>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(ComputeCollection.class, "ComputeCollection");
                      discriminatorValueByClass.put(ContainerApplication.class, "ContainerApplication");
                      discriminatorValueByClass.put(ContainerApplicationInstance.class, "ContainerApplicationInstance");
                      discriminatorValueByClass.put(ContainerCluster.class, "ContainerCluster");
                      discriminatorValueByClass.put(ContainerClusterNode.class, "ContainerClusterNode");
                      discriminatorValueByClass.put(ContainerIngressPolicy.class, "ContainerIngressPolicy");
                      discriminatorValueByClass.put(ContainerNetworkPolicy.class, "ContainerNetworkPolicy");
                      discriminatorValueByClass.put(ContainerProject.class, "ContainerProject");
                      discriminatorValueByClass.put(DiscoveredNode.class, "DiscoveredNode");
                      discriminatorValueByClass.put(VirtualMachine.class, "VirtualMachine");
                      discriminatorValueByClass.put(VirtualNetworkInterface.class, "VirtualNetworkInterface");
                      discriminatorValueByClass.put(VmToolsInfo.class, "VmToolsInfo");
                      discriminatorValueByClass.put(DiscoveredResource.class, "DiscoveredResource");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has("resource_type"))
                      {
                          ((JsonObject) result).addProperty("resource_type", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(ForwarderZone.class, new TypeSelector<ForwarderZone>() {
            @Override
            public Class<? extends ForwarderZone> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends ForwarderZone>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("ConditionalForwarderZone".toUpperCase(), ConditionalForwarderZone.class);
                    classByDiscriminatorValue.put("ForwarderZone".toUpperCase(), ForwarderZone.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, ""));
            }
          })
          .registerPostProcessor(ForwarderZone.class, new PostProcessor<ForwarderZone>() {
              @Override
              public void postDeserialize(ForwarderZone result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, ForwarderZone src, Gson gson) {
                  Map<Class<? extends ForwarderZone>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(ConditionalForwarderZone.class, "ConditionalForwarderZone");
                      discriminatorValueByClass.put(ForwarderZone.class, "ForwarderZone");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has(""))
                      {
                          ((JsonObject) result).addProperty("", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(WidgetConfiguration.class, new TypeSelector<WidgetConfiguration>() {
            @Override
            public Class<? extends WidgetConfiguration> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends WidgetConfiguration>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("ContainerConfiguration".toUpperCase(), ContainerConfiguration.class);
                    classByDiscriminatorValue.put("DonutConfiguration".toUpperCase(), DonutConfiguration.class);
                    classByDiscriminatorValue.put("GraphConfiguration".toUpperCase(), GraphConfiguration.class);
                    classByDiscriminatorValue.put("GridConfiguration".toUpperCase(), GridConfiguration.class);
                    classByDiscriminatorValue.put("LabelValueConfiguration".toUpperCase(), LabelValueConfiguration.class);
                    classByDiscriminatorValue.put("MultiWidgetConfiguration".toUpperCase(), MultiWidgetConfiguration.class);
                    classByDiscriminatorValue.put("StatsConfiguration".toUpperCase(), StatsConfiguration.class);
                    classByDiscriminatorValue.put("WidgetConfiguration".toUpperCase(), WidgetConfiguration.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, "resource_type"));
            }
          })
          .registerPostProcessor(WidgetConfiguration.class, new PostProcessor<WidgetConfiguration>() {
              @Override
              public void postDeserialize(WidgetConfiguration result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, WidgetConfiguration src, Gson gson) {
                  Map<Class<? extends WidgetConfiguration>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(ContainerConfiguration.class, "ContainerConfiguration");
                      discriminatorValueByClass.put(DonutConfiguration.class, "DonutConfiguration");
                      discriminatorValueByClass.put(GraphConfiguration.class, "GraphConfiguration");
                      discriminatorValueByClass.put(GridConfiguration.class, "GridConfiguration");
                      discriminatorValueByClass.put(LabelValueConfiguration.class, "LabelValueConfiguration");
                      discriminatorValueByClass.put(MultiWidgetConfiguration.class, "MultiWidgetConfiguration");
                      discriminatorValueByClass.put(StatsConfiguration.class, "StatsConfiguration");
                      discriminatorValueByClass.put(WidgetConfiguration.class, "WidgetConfiguration");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has("resource_type"))
                      {
                          ((JsonObject) result).addProperty("resource_type", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(ClusteringConfig.class, new TypeSelector<ClusteringConfig>() {
            @Override
            public Class<? extends ClusteringConfig> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends ClusteringConfig>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("ControlClusteringConfig".toUpperCase(), ControlClusteringConfig.class);
                    classByDiscriminatorValue.put("ClusteringConfig".toUpperCase(), ClusteringConfig.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, "clustering_type"));
            }
          })
          .registerPostProcessor(ClusteringConfig.class, new PostProcessor<ClusteringConfig>() {
              @Override
              public void postDeserialize(ClusteringConfig result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, ClusteringConfig src, Gson gson) {
                  Map<Class<? extends ClusteringConfig>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(ControlClusteringConfig.class, "ControlClusteringConfig");
                      discriminatorValueByClass.put(ClusteringConfig.class, "ClusteringConfig");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has("clustering_type"))
                      {
                          ((JsonObject) result).addProperty("clustering_type", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(ClusterRoleConfig.class, new TypeSelector<ClusterRoleConfig>() {
            @Override
            public Class<? extends ClusterRoleConfig> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends ClusterRoleConfig>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("ControllerClusterRoleConfig".toUpperCase(), ControllerClusterRoleConfig.class);
                    classByDiscriminatorValue.put("ManagementClusterRoleConfig".toUpperCase(), ManagementClusterRoleConfig.class);
                    classByDiscriminatorValue.put("ClusterRoleConfig".toUpperCase(), ClusterRoleConfig.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, ""));
            }
          })
          .registerPostProcessor(ClusterRoleConfig.class, new PostProcessor<ClusterRoleConfig>() {
              @Override
              public void postDeserialize(ClusterRoleConfig result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, ClusterRoleConfig src, Gson gson) {
                  Map<Class<? extends ClusterRoleConfig>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(ControllerClusterRoleConfig.class, "ControllerClusterRoleConfig");
                      discriminatorValueByClass.put(ManagementClusterRoleConfig.class, "ManagementClusterRoleConfig");
                      discriminatorValueByClass.put(ClusterRoleConfig.class, "ClusterRoleConfig");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has(""))
                      {
                          ((JsonObject) result).addProperty("", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(BaseNodeAggregateInfo.class, new TypeSelector<BaseNodeAggregateInfo>() {
            @Override
            public Class<? extends BaseNodeAggregateInfo> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends BaseNodeAggregateInfo>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("ControllerNodeAggregateInfo".toUpperCase(), ControllerNodeAggregateInfo.class);
                    classByDiscriminatorValue.put("ManagementNodeAggregateInfo".toUpperCase(), ManagementNodeAggregateInfo.class);
                    classByDiscriminatorValue.put("BaseNodeAggregateInfo".toUpperCase(), BaseNodeAggregateInfo.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, ""));
            }
          })
          .registerPostProcessor(BaseNodeAggregateInfo.class, new PostProcessor<BaseNodeAggregateInfo>() {
              @Override
              public void postDeserialize(BaseNodeAggregateInfo result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, BaseNodeAggregateInfo src, Gson gson) {
                  Map<Class<? extends BaseNodeAggregateInfo>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(ControllerNodeAggregateInfo.class, "ControllerNodeAggregateInfo");
                      discriminatorValueByClass.put(ManagementNodeAggregateInfo.class, "ManagementNodeAggregateInfo");
                      discriminatorValueByClass.put(BaseNodeAggregateInfo.class, "BaseNodeAggregateInfo");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has(""))
                      {
                          ((JsonObject) result).addProperty("", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(CopyRemoteFileProperties.class, new TypeSelector<CopyRemoteFileProperties>() {
            @Override
            public Class<? extends CopyRemoteFileProperties> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends CopyRemoteFileProperties>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("CopyFromRemoteFileProperties".toUpperCase(), CopyFromRemoteFileProperties.class);
                    classByDiscriminatorValue.put("CopyToRemoteFileProperties".toUpperCase(), CopyToRemoteFileProperties.class);
                    classByDiscriminatorValue.put("CreateRemoteDirectoryProperties".toUpperCase(), CreateRemoteDirectoryProperties.class);
                    classByDiscriminatorValue.put("CopyRemoteFileProperties".toUpperCase(), CopyRemoteFileProperties.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, ""));
            }
          })
          .registerPostProcessor(CopyRemoteFileProperties.class, new PostProcessor<CopyRemoteFileProperties>() {
              @Override
              public void postDeserialize(CopyRemoteFileProperties result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, CopyRemoteFileProperties src, Gson gson) {
                  Map<Class<? extends CopyRemoteFileProperties>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(CopyFromRemoteFileProperties.class, "CopyFromRemoteFileProperties");
                      discriminatorValueByClass.put(CopyToRemoteFileProperties.class, "CopyToRemoteFileProperties");
                      discriminatorValueByClass.put(CreateRemoteDirectoryProperties.class, "CreateRemoteDirectoryProperties");
                      discriminatorValueByClass.put(CopyRemoteFileProperties.class, "CopyRemoteFileProperties");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has(""))
                      {
                          ((JsonObject) result).addProperty("", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(EmbeddedResource.class, new TypeSelector<EmbeddedResource>() {
            @Override
            public Class<? extends EmbeddedResource> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends EmbeddedResource>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("DSRule".toUpperCase(), DSRule.class);
                    classByDiscriminatorValue.put("IPSecVPNPolicyRule".toUpperCase(), IPSecVPNPolicyRule.class);
                    classByDiscriminatorValue.put("PBRRule".toUpperCase(), PBRRule.class);
                    classByDiscriminatorValue.put("EmbeddedResource".toUpperCase(), EmbeddedResource.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, ""));
            }
          })
          .registerPostProcessor(EmbeddedResource.class, new PostProcessor<EmbeddedResource>() {
              @Override
              public void postDeserialize(EmbeddedResource result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, EmbeddedResource src, Gson gson) {
                  Map<Class<? extends EmbeddedResource>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(DSRule.class, "DSRule");
                      discriminatorValueByClass.put(IPSecVPNPolicyRule.class, "IPSecVPNPolicyRule");
                      discriminatorValueByClass.put(PBRRule.class, "PBRRule");
                      discriminatorValueByClass.put(EmbeddedResource.class, "EmbeddedResource");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has(""))
                      {
                          ((JsonObject) result).addProperty("", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(ConfigurationState.class, new TypeSelector<ConfigurationState>() {
            @Override
            public Class<? extends ConfigurationState> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends ConfigurationState>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("DSRuleState".toUpperCase(), DSRuleState.class);
                    classByDiscriminatorValue.put("DSSectionState".toUpperCase(), DSSectionState.class);
                    classByDiscriminatorValue.put("EdgeClusterState".toUpperCase(), EdgeClusterState.class);
                    classByDiscriminatorValue.put("IPSecVPNSessionState".toUpperCase(), IPSecVPNSessionState.class);
                    classByDiscriminatorValue.put("LogicalRouterPortState".toUpperCase(), LogicalRouterPortState.class);
                    classByDiscriminatorValue.put("LogicalRouterState".toUpperCase(), LogicalRouterState.class);
                    classByDiscriminatorValue.put("LogicalServiceRouterClusterState".toUpperCase(), LogicalServiceRouterClusterState.class);
                    classByDiscriminatorValue.put("LogicalSwitchState".toUpperCase(), LogicalSwitchState.class);
                    classByDiscriminatorValue.put("TransportNodeState".toUpperCase(), TransportNodeState.class);
                    classByDiscriminatorValue.put("ConfigurationState".toUpperCase(), ConfigurationState.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, ""));
            }
          })
          .registerPostProcessor(ConfigurationState.class, new PostProcessor<ConfigurationState>() {
              @Override
              public void postDeserialize(ConfigurationState result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, ConfigurationState src, Gson gson) {
                  Map<Class<? extends ConfigurationState>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(DSRuleState.class, "DSRuleState");
                      discriminatorValueByClass.put(DSSectionState.class, "DSSectionState");
                      discriminatorValueByClass.put(EdgeClusterState.class, "EdgeClusterState");
                      discriminatorValueByClass.put(IPSecVPNSessionState.class, "IPSecVPNSessionState");
                      discriminatorValueByClass.put(LogicalRouterPortState.class, "LogicalRouterPortState");
                      discriminatorValueByClass.put(LogicalRouterState.class, "LogicalRouterState");
                      discriminatorValueByClass.put(LogicalServiceRouterClusterState.class, "LogicalServiceRouterClusterState");
                      discriminatorValueByClass.put(LogicalSwitchState.class, "LogicalSwitchState");
                      discriminatorValueByClass.put(TransportNodeState.class, "TransportNodeState");
                      discriminatorValueByClass.put(ConfigurationState.class, "ConfigurationState");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has(""))
                      {
                          ((JsonObject) result).addProperty("", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(ResourceReference.class, new TypeSelector<ResourceReference>() {
            @Override
            public Class<? extends ResourceReference> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends ResourceReference>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("DSService".toUpperCase(), DSService.class);
                    classByDiscriminatorValue.put("NSXProfileReference".toUpperCase(), NSXProfileReference.class);
                    classByDiscriminatorValue.put("SelectableResourceReference".toUpperCase(), SelectableResourceReference.class);
                    classByDiscriminatorValue.put("ResourceReference".toUpperCase(), ResourceReference.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, ""));
            }
          })
          .registerPostProcessor(ResourceReference.class, new PostProcessor<ResourceReference>() {
              @Override
              public void postDeserialize(ResourceReference result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, ResourceReference src, Gson gson) {
                  Map<Class<? extends ResourceReference>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(DSService.class, "DSService");
                      discriminatorValueByClass.put(NSXProfileReference.class, "NSXProfileReference");
                      discriminatorValueByClass.put(SelectableResourceReference.class, "SelectableResourceReference");
                      discriminatorValueByClass.put(ResourceReference.class, "ResourceReference");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has(""))
                      {
                          ((JsonObject) result).addProperty("", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(TelemetrySchedule.class, new TypeSelector<TelemetrySchedule>() {
            @Override
            public Class<? extends TelemetrySchedule> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends TelemetrySchedule>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("DailyTelemetrySchedule".toUpperCase(), DailyTelemetrySchedule.class);
                    classByDiscriminatorValue.put("MonthlyTelemetrySchedule".toUpperCase(), MonthlyTelemetrySchedule.class);
                    classByDiscriminatorValue.put("WeeklyTelemetrySchedule".toUpperCase(), WeeklyTelemetrySchedule.class);
                    classByDiscriminatorValue.put("TelemetrySchedule".toUpperCase(), TelemetrySchedule.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, "frequency_type"));
            }
          })
          .registerPostProcessor(TelemetrySchedule.class, new PostProcessor<TelemetrySchedule>() {
              @Override
              public void postDeserialize(TelemetrySchedule result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, TelemetrySchedule src, Gson gson) {
                  Map<Class<? extends TelemetrySchedule>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(DailyTelemetrySchedule.class, "DailyTelemetrySchedule");
                      discriminatorValueByClass.put(MonthlyTelemetrySchedule.class, "MonthlyTelemetrySchedule");
                      discriminatorValueByClass.put(WeeklyTelemetrySchedule.class, "WeeklyTelemetrySchedule");
                      discriminatorValueByClass.put(TelemetrySchedule.class, "TelemetrySchedule");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has("frequency_type"))
                      {
                          ((JsonObject) result).addProperty("frequency_type", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(IpAllocationBase.class, new TypeSelector<IpAllocationBase>() {
            @Override
            public Class<? extends IpAllocationBase> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends IpAllocationBase>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("DhcpIpPool".toUpperCase(), DhcpIpPool.class);
                    classByDiscriminatorValue.put("DhcpStaticBinding".toUpperCase(), DhcpStaticBinding.class);
                    classByDiscriminatorValue.put("IpAllocationBase".toUpperCase(), IpAllocationBase.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, ""));
            }
          })
          .registerPostProcessor(IpAllocationBase.class, new PostProcessor<IpAllocationBase>() {
              @Override
              public void postDeserialize(IpAllocationBase result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, IpAllocationBase src, Gson gson) {
                  Map<Class<? extends IpAllocationBase>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(DhcpIpPool.class, "DhcpIpPool");
                      discriminatorValueByClass.put(DhcpStaticBinding.class, "DhcpStaticBinding");
                      discriminatorValueByClass.put(IpAllocationBase.class, "IpAllocationBase");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has(""))
                      {
                          ((JsonObject) result).addProperty("", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(DirectoryDomain.class, new TypeSelector<DirectoryDomain>() {
            @Override
            public Class<? extends DirectoryDomain> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends DirectoryDomain>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("DirectoryAdDomain".toUpperCase(), DirectoryAdDomain.class);
                    classByDiscriminatorValue.put("DirectoryDomain".toUpperCase(), DirectoryDomain.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, "resource_type"));
            }
          })
          .registerPostProcessor(DirectoryDomain.class, new PostProcessor<DirectoryDomain>() {
              @Override
              public void postDeserialize(DirectoryDomain result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, DirectoryDomain src, Gson gson) {
                  Map<Class<? extends DirectoryDomain>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(DirectoryAdDomain.class, "DirectoryAdDomain");
                      discriminatorValueByClass.put(DirectoryDomain.class, "DirectoryDomain");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has("resource_type"))
                      {
                          ((JsonObject) result).addProperty("resource_type", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(DirectoryGroup.class, new TypeSelector<DirectoryGroup>() {
            @Override
            public Class<? extends DirectoryGroup> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends DirectoryGroup>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("DirectoryAdGroup".toUpperCase(), DirectoryAdGroup.class);
                    classByDiscriminatorValue.put("DirectoryGroup".toUpperCase(), DirectoryGroup.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, "resource_type"));
            }
          })
          .registerPostProcessor(DirectoryGroup.class, new PostProcessor<DirectoryGroup>() {
              @Override
              public void postDeserialize(DirectoryGroup result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, DirectoryGroup src, Gson gson) {
                  Map<Class<? extends DirectoryGroup>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(DirectoryAdGroup.class, "DirectoryAdGroup");
                      discriminatorValueByClass.put(DirectoryGroup.class, "DirectoryGroup");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has("resource_type"))
                      {
                          ((JsonObject) result).addProperty("resource_type", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(AddressBindingEntry.class, new TypeSelector<AddressBindingEntry>() {
            @Override
            public Class<? extends AddressBindingEntry> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends AddressBindingEntry>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("DuplicateAddressBindingEntry".toUpperCase(), DuplicateAddressBindingEntry.class);
                    classByDiscriminatorValue.put("AddressBindingEntry".toUpperCase(), AddressBindingEntry.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, ""));
            }
          })
          .registerPostProcessor(AddressBindingEntry.class, new PostProcessor<AddressBindingEntry>() {
              @Override
              public void postDeserialize(AddressBindingEntry result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, AddressBindingEntry src, Gson gson) {
                  Map<Class<? extends AddressBindingEntry>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(DuplicateAddressBindingEntry.class, "DuplicateAddressBindingEntry");
                      discriminatorValueByClass.put(AddressBindingEntry.class, "AddressBindingEntry");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has(""))
                      {
                          ((JsonObject) result).addProperty("", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(Node.class, new TypeSelector<Node>() {
            @Override
            public Class<? extends Node> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends Node>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("EdgeNode".toUpperCase(), EdgeNode.class);
                    classByDiscriminatorValue.put("HostNode".toUpperCase(), HostNode.class);
                    classByDiscriminatorValue.put("Node".toUpperCase(), Node.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, "resource_type"));
            }
          })
          .registerPostProcessor(Node.class, new PostProcessor<Node>() {
              @Override
              public void postDeserialize(Node result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, Node src, Gson gson) {
                  Map<Class<? extends Node>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(EdgeNode.class, "EdgeNode");
                      discriminatorValueByClass.put(HostNode.class, "HostNode");
                      discriminatorValueByClass.put(Node.class, "Node");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has("resource_type"))
                      {
                          ((JsonObject) result).addProperty("resource_type", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(QosBaseRateShaper.class, new TypeSelector<QosBaseRateShaper>() {
            @Override
            public Class<? extends QosBaseRateShaper> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends QosBaseRateShaper>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("EgressRateShaper".toUpperCase(), EgressRateShaper.class);
                    classByDiscriminatorValue.put("IngressBroadcastRateShaper".toUpperCase(), IngressBroadcastRateShaper.class);
                    classByDiscriminatorValue.put("IngressRateShaper".toUpperCase(), IngressRateShaper.class);
                    classByDiscriminatorValue.put("QosBaseRateShaper".toUpperCase(), QosBaseRateShaper.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, "resource_type"));
            }
          })
          .registerPostProcessor(QosBaseRateShaper.class, new PostProcessor<QosBaseRateShaper>() {
              @Override
              public void postDeserialize(QosBaseRateShaper result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, QosBaseRateShaper src, Gson gson) {
                  Map<Class<? extends QosBaseRateShaper>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(EgressRateShaper.class, "EgressRateShaper");
                      discriminatorValueByClass.put(IngressBroadcastRateShaper.class, "IngressBroadcastRateShaper");
                      discriminatorValueByClass.put(IngressRateShaper.class, "IngressRateShaper");
                      discriminatorValueByClass.put(QosBaseRateShaper.class, "QosBaseRateShaper");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has("resource_type"))
                      {
                          ((JsonObject) result).addProperty("resource_type", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(GlobalConfigs.class, new TypeSelector<GlobalConfigs>() {
            @Override
            public Class<? extends GlobalConfigs> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends GlobalConfigs>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("EsxGlobalOpaqueConfig".toUpperCase(), EsxGlobalOpaqueConfig.class);
                    classByDiscriminatorValue.put("FipsGlobalConfig".toUpperCase(), FipsGlobalConfig.class);
                    classByDiscriminatorValue.put("FirewallGlobalConfig".toUpperCase(), FirewallGlobalConfig.class);
                    classByDiscriminatorValue.put("OperationCollectorGlobalConfig".toUpperCase(), OperationCollectorGlobalConfig.class);
                    classByDiscriminatorValue.put("RoutingGlobalConfig".toUpperCase(), RoutingGlobalConfig.class);
                    classByDiscriminatorValue.put("SecurityGlobalConfig".toUpperCase(), SecurityGlobalConfig.class);
                    classByDiscriminatorValue.put("SwitchingGlobalConfig".toUpperCase(), SwitchingGlobalConfig.class);
                    classByDiscriminatorValue.put("GlobalConfigs".toUpperCase(), GlobalConfigs.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, "resource_type"));
            }
          })
          .registerPostProcessor(GlobalConfigs.class, new PostProcessor<GlobalConfigs>() {
              @Override
              public void postDeserialize(GlobalConfigs result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, GlobalConfigs src, Gson gson) {
                  Map<Class<? extends GlobalConfigs>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(EsxGlobalOpaqueConfig.class, "EsxGlobalOpaqueConfig");
                      discriminatorValueByClass.put(FipsGlobalConfig.class, "FipsGlobalConfig");
                      discriminatorValueByClass.put(FirewallGlobalConfig.class, "FirewallGlobalConfig");
                      discriminatorValueByClass.put(OperationCollectorGlobalConfig.class, "OperationCollectorGlobalConfig");
                      discriminatorValueByClass.put(RoutingGlobalConfig.class, "RoutingGlobalConfig");
                      discriminatorValueByClass.put(SecurityGlobalConfig.class, "SecurityGlobalConfig");
                      discriminatorValueByClass.put(SwitchingGlobalConfig.class, "SwitchingGlobalConfig");
                      discriminatorValueByClass.put(GlobalConfigs.class, "GlobalConfigs");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has("resource_type"))
                      {
                          ((JsonObject) result).addProperty("resource_type", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(DSExcludeList.class, new TypeSelector<DSExcludeList>() {
            @Override
            public Class<? extends DSExcludeList> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends DSExcludeList>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("ExcludeList".toUpperCase(), ExcludeList.class);
                    classByDiscriminatorValue.put("SIExcludeList".toUpperCase(), SIExcludeList.class);
                    classByDiscriminatorValue.put("DSExcludeList".toUpperCase(), DSExcludeList.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, ""));
            }
          })
          .registerPostProcessor(DSExcludeList.class, new PostProcessor<DSExcludeList>() {
              @Override
              public void postDeserialize(DSExcludeList result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, DSExcludeList src, Gson gson) {
                  Map<Class<? extends DSExcludeList>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(ExcludeList.class, "ExcludeList");
                      discriminatorValueByClass.put(SIExcludeList.class, "SIExcludeList");
                      discriminatorValueByClass.put(DSExcludeList.class, "DSExcludeList");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has(""))
                      {
                          ((JsonObject) result).addProperty("", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(BaseHostSwitchProfile.class, new TypeSelector<BaseHostSwitchProfile>() {
            @Override
            public Class<? extends BaseHostSwitchProfile> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends BaseHostSwitchProfile>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("ExtraConfigHostSwitchProfile".toUpperCase(), ExtraConfigHostSwitchProfile.class);
                    classByDiscriminatorValue.put("LldpHostSwitchProfile".toUpperCase(), LldpHostSwitchProfile.class);
                    classByDiscriminatorValue.put("NiocProfile".toUpperCase(), NiocProfile.class);
                    classByDiscriminatorValue.put("UplinkHostSwitchProfile".toUpperCase(), UplinkHostSwitchProfile.class);
                    classByDiscriminatorValue.put("BaseHostSwitchProfile".toUpperCase(), BaseHostSwitchProfile.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, "resource_type"));
            }
          })
          .registerPostProcessor(BaseHostSwitchProfile.class, new PostProcessor<BaseHostSwitchProfile>() {
              @Override
              public void postDeserialize(BaseHostSwitchProfile result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, BaseHostSwitchProfile src, Gson gson) {
                  Map<Class<? extends BaseHostSwitchProfile>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(ExtraConfigHostSwitchProfile.class, "ExtraConfigHostSwitchProfile");
                      discriminatorValueByClass.put(LldpHostSwitchProfile.class, "LldpHostSwitchProfile");
                      discriminatorValueByClass.put(NiocProfile.class, "NiocProfile");
                      discriminatorValueByClass.put(UplinkHostSwitchProfile.class, "UplinkHostSwitchProfile");
                      discriminatorValueByClass.put(BaseHostSwitchProfile.class, "BaseHostSwitchProfile");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has("resource_type"))
                      {
                          ((JsonObject) result).addProperty("resource_type", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(ServiceAssociationListResult.class, new TypeSelector<ServiceAssociationListResult>() {
            @Override
            public Class<? extends ServiceAssociationListResult> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends ServiceAssociationListResult>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("FireWallServiceAssociationListResult".toUpperCase(), FireWallServiceAssociationListResult.class);
                    classByDiscriminatorValue.put("IpfixServiceAssociationListResult".toUpperCase(), IpfixServiceAssociationListResult.class);
                    classByDiscriminatorValue.put("ServiceAssociationListResult".toUpperCase(), ServiceAssociationListResult.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, "service_type"));
            }
          })
          .registerPostProcessor(ServiceAssociationListResult.class, new PostProcessor<ServiceAssociationListResult>() {
              @Override
              public void postDeserialize(ServiceAssociationListResult result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, ServiceAssociationListResult src, Gson gson) {
                  Map<Class<? extends ServiceAssociationListResult>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(FireWallServiceAssociationListResult.class, "FireWallServiceAssociationListResult");
                      discriminatorValueByClass.put(IpfixServiceAssociationListResult.class, "IpfixServiceAssociationListResult");
                      discriminatorValueByClass.put(ServiceAssociationListResult.class, "ServiceAssociationListResult");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has("service_type"))
                      {
                          ((JsonObject) result).addProperty("service_type", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(BaseFirewallProfile.class, new TypeSelector<BaseFirewallProfile>() {
            @Override
            public Class<? extends BaseFirewallProfile> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends BaseFirewallProfile>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("FirewallCpuMemThresholdsProfile".toUpperCase(), FirewallCpuMemThresholdsProfile.class);
                    classByDiscriminatorValue.put("FirewallDnsProfile".toUpperCase(), FirewallDnsProfile.class);
                    classByDiscriminatorValue.put("FirewallFloodProtectionProfile".toUpperCase(), FirewallFloodProtectionProfile.class);
                    classByDiscriminatorValue.put("FirewallSessionTimerProfile".toUpperCase(), FirewallSessionTimerProfile.class);
                    classByDiscriminatorValue.put("BaseFirewallProfile".toUpperCase(), BaseFirewallProfile.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, "resource_type"));
            }
          })
          .registerPostProcessor(BaseFirewallProfile.class, new PostProcessor<BaseFirewallProfile>() {
              @Override
              public void postDeserialize(BaseFirewallProfile result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, BaseFirewallProfile src, Gson gson) {
                  Map<Class<? extends BaseFirewallProfile>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(FirewallCpuMemThresholdsProfile.class, "FirewallCpuMemThresholdsProfile");
                      discriminatorValueByClass.put(FirewallDnsProfile.class, "FirewallDnsProfile");
                      discriminatorValueByClass.put(FirewallFloodProtectionProfile.class, "FirewallFloodProtectionProfile");
                      discriminatorValueByClass.put(FirewallSessionTimerProfile.class, "FirewallSessionTimerProfile");
                      discriminatorValueByClass.put(BaseFirewallProfile.class, "BaseFirewallProfile");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has("resource_type"))
                      {
                          ((JsonObject) result).addProperty("resource_type", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(DSRule.class, new TypeSelector<DSRule>() {
            @Override
            public Class<? extends DSRule> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends DSRule>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("FirewallRule".toUpperCase(), FirewallRule.class);
                    classByDiscriminatorValue.put("ServiceInsertionRule".toUpperCase(), ServiceInsertionRule.class);
                    classByDiscriminatorValue.put("DSRule".toUpperCase(), DSRule.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, ""));
            }
          })
          .registerPostProcessor(DSRule.class, new PostProcessor<DSRule>() {
              @Override
              public void postDeserialize(DSRule result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, DSRule src, Gson gson) {
                  Map<Class<? extends DSRule>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(FirewallRule.class, "FirewallRule");
                      discriminatorValueByClass.put(ServiceInsertionRule.class, "ServiceInsertionRule");
                      discriminatorValueByClass.put(DSRule.class, "DSRule");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has(""))
                      {
                          ((JsonObject) result).addProperty("", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(DSSection.class, new TypeSelector<DSSection>() {
            @Override
            public Class<? extends DSSection> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends DSSection>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("FirewallSection".toUpperCase(), FirewallSection.class);
                    classByDiscriminatorValue.put("ServiceInsertionSection".toUpperCase(), ServiceInsertionSection.class);
                    classByDiscriminatorValue.put("DSSection".toUpperCase(), DSSection.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, ""));
            }
          })
          .registerPostProcessor(DSSection.class, new PostProcessor<DSSection>() {
              @Override
              public void postDeserialize(DSSection result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, DSSection src, Gson gson) {
                  Map<Class<? extends DSSection>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(FirewallSection.class, "FirewallSection");
                      discriminatorValueByClass.put(ServiceInsertionSection.class, "ServiceInsertionSection");
                      discriminatorValueByClass.put(DSSection.class, "DSSection");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has(""))
                      {
                          ((JsonObject) result).addProperty("", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(DSSectionListResult.class, new TypeSelector<DSSectionListResult>() {
            @Override
            public Class<? extends DSSectionListResult> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends DSSectionListResult>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("FirewallSectionListResult".toUpperCase(), FirewallSectionListResult.class);
                    classByDiscriminatorValue.put("ServiceInsertionSectionListResult".toUpperCase(), ServiceInsertionSectionListResult.class);
                    classByDiscriminatorValue.put("DSSectionListResult".toUpperCase(), DSSectionListResult.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, ""));
            }
          })
          .registerPostProcessor(DSSectionListResult.class, new PostProcessor<DSSectionListResult>() {
              @Override
              public void postDeserialize(DSSectionListResult result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, DSSectionListResult src, Gson gson) {
                  Map<Class<? extends DSSectionListResult>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(FirewallSectionListResult.class, "FirewallSectionListResult");
                      discriminatorValueByClass.put(ServiceInsertionSectionListResult.class, "ServiceInsertionSectionListResult");
                      discriminatorValueByClass.put(DSSectionListResult.class, "DSSectionListResult");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has(""))
                      {
                          ((JsonObject) result).addProperty("", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(FirewallSection.class, new TypeSelector<FirewallSection>() {
            @Override
            public Class<? extends FirewallSection> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends FirewallSection>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("FirewallSectionRuleList".toUpperCase(), FirewallSectionRuleList.class);
                    classByDiscriminatorValue.put("FirewallSection".toUpperCase(), FirewallSection.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, ""));
            }
          })
          .registerPostProcessor(FirewallSection.class, new PostProcessor<FirewallSection>() {
              @Override
              public void postDeserialize(FirewallSection result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, FirewallSection src, Gson gson) {
                  Map<Class<? extends FirewallSection>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(FirewallSectionRuleList.class, "FirewallSectionRuleList");
                      discriminatorValueByClass.put(FirewallSection.class, "FirewallSection");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has(""))
                      {
                          ((JsonObject) result).addProperty("", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(DSSectionState.class, new TypeSelector<DSSectionState>() {
            @Override
            public Class<? extends DSSectionState> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends DSSectionState>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("FirewallSectionState".toUpperCase(), FirewallSectionState.class);
                    classByDiscriminatorValue.put("DSSectionState".toUpperCase(), DSSectionState.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, ""));
            }
          })
          .registerPostProcessor(DSSectionState.class, new PostProcessor<DSSectionState>() {
              @Override
              public void postDeserialize(DSSectionState result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, DSSectionState src, Gson gson) {
                  Map<Class<? extends DSSectionState>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(FirewallSectionState.class, "FirewallSectionState");
                      discriminatorValueByClass.put(DSSectionState.class, "DSSectionState");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has(""))
                      {
                          ((JsonObject) result).addProperty("", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(DSService.class, new TypeSelector<DSService>() {
            @Override
            public Class<? extends DSService> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends DSService>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("FirewallService".toUpperCase(), FirewallService.class);
                    classByDiscriminatorValue.put("PBRService".toUpperCase(), PBRService.class);
                    classByDiscriminatorValue.put("ServiceInsertionService".toUpperCase(), ServiceInsertionService.class);
                    classByDiscriminatorValue.put("DSService".toUpperCase(), DSService.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, ""));
            }
          })
          .registerPostProcessor(DSService.class, new PostProcessor<DSService>() {
              @Override
              public void postDeserialize(DSService result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, DSService src, Gson gson) {
                  Map<Class<? extends DSService>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(FirewallService.class, "FirewallService");
                      discriminatorValueByClass.put(PBRService.class, "PBRService");
                      discriminatorValueByClass.put(ServiceInsertionService.class, "ServiceInsertionService");
                      discriminatorValueByClass.put(DSService.class, "DSService");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has(""))
                      {
                          ((JsonObject) result).addProperty("", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(BaseServiceProfile.class, new TypeSelector<BaseServiceProfile>() {
            @Override
            public Class<? extends BaseServiceProfile> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends BaseServiceProfile>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("GiServiceProfile".toUpperCase(), GiServiceProfile.class);
                    classByDiscriminatorValue.put("ServiceInsertionServiceProfile".toUpperCase(), ServiceInsertionServiceProfile.class);
                    classByDiscriminatorValue.put("BaseServiceProfile".toUpperCase(), BaseServiceProfile.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, "resource_type"));
            }
          })
          .registerPostProcessor(BaseServiceProfile.class, new PostProcessor<BaseServiceProfile>() {
              @Override
              public void postDeserialize(BaseServiceProfile result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, BaseServiceProfile src, Gson gson) {
                  Map<Class<? extends BaseServiceProfile>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(GiServiceProfile.class, "GiServiceProfile");
                      discriminatorValueByClass.put(ServiceInsertionServiceProfile.class, "ServiceInsertionServiceProfile");
                      discriminatorValueByClass.put(BaseServiceProfile.class, "BaseServiceProfile");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has("resource_type"))
                      {
                          ((JsonObject) result).addProperty("resource_type", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(NetworkMigrationSpec.class, new TypeSelector<NetworkMigrationSpec>() {
            @Override
            public Class<? extends NetworkMigrationSpec> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends NetworkMigrationSpec>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("HostProfileNetworkMigrationSpec".toUpperCase(), HostProfileNetworkMigrationSpec.class);
                    classByDiscriminatorValue.put("NetworkMigrationSpec".toUpperCase(), NetworkMigrationSpec.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, "resource_type"));
            }
          })
          .registerPostProcessor(NetworkMigrationSpec.class, new PostProcessor<NetworkMigrationSpec>() {
              @Override
              public void postDeserialize(NetworkMigrationSpec result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, NetworkMigrationSpec src, Gson gson) {
                  Map<Class<? extends NetworkMigrationSpec>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(HostProfileNetworkMigrationSpec.class, "HostProfileNetworkMigrationSpec");
                      discriminatorValueByClass.put(NetworkMigrationSpec.class, "NetworkMigrationSpec");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has("resource_type"))
                      {
                          ((JsonObject) result).addProperty("resource_type", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(Protocol.class, new TypeSelector<Protocol>() {
            @Override
            public Class<? extends Protocol> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends Protocol>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("HttpProtocol".toUpperCase(), HttpProtocol.class);
                    classByDiscriminatorValue.put("HttpsProtocol".toUpperCase(), HttpsProtocol.class);
                    classByDiscriminatorValue.put("ScpProtocol".toUpperCase(), ScpProtocol.class);
                    classByDiscriminatorValue.put("SftpProtocol".toUpperCase(), SftpProtocol.class);
                    classByDiscriminatorValue.put("Protocol".toUpperCase(), Protocol.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, "name"));
            }
          })
          .registerPostProcessor(Protocol.class, new PostProcessor<Protocol>() {
              @Override
              public void postDeserialize(Protocol result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, Protocol src, Gson gson) {
                  Map<Class<? extends Protocol>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(HttpProtocol.class, "HttpProtocol");
                      discriminatorValueByClass.put(HttpsProtocol.class, "HttpsProtocol");
                      discriminatorValueByClass.put(ScpProtocol.class, "ScpProtocol");
                      discriminatorValueByClass.put(SftpProtocol.class, "SftpProtocol");
                      discriminatorValueByClass.put(Protocol.class, "Protocol");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has("name"))
                      {
                          ((JsonObject) result).addProperty("name", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(MirrorDestination.class, new TypeSelector<MirrorDestination>() {
            @Override
            public Class<? extends MirrorDestination> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends MirrorDestination>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("IPMirrorDestination".toUpperCase(), IPMirrorDestination.class);
                    classByDiscriminatorValue.put("LogicalPortMirrorDestination".toUpperCase(), LogicalPortMirrorDestination.class);
                    classByDiscriminatorValue.put("PnicMirrorDestination".toUpperCase(), PnicMirrorDestination.class);
                    classByDiscriminatorValue.put("MirrorDestination".toUpperCase(), MirrorDestination.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, "resource_type"));
            }
          })
          .registerPostProcessor(MirrorDestination.class, new PostProcessor<MirrorDestination>() {
              @Override
              public void postDeserialize(MirrorDestination result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, MirrorDestination src, Gson gson) {
                  Map<Class<? extends MirrorDestination>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(IPMirrorDestination.class, "IPMirrorDestination");
                      discriminatorValueByClass.put(LogicalPortMirrorDestination.class, "LogicalPortMirrorDestination");
                      discriminatorValueByClass.put(PnicMirrorDestination.class, "PnicMirrorDestination");
                      discriminatorValueByClass.put(MirrorDestination.class, "MirrorDestination");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has("resource_type"))
                      {
                          ((JsonObject) result).addProperty("resource_type", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(IPSecVPNSessionSummary.class, new TypeSelector<IPSecVPNSessionSummary>() {
            @Override
            public Class<? extends IPSecVPNSessionSummary> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends IPSecVPNSessionSummary>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("IPSecVPNIKEServiceSummary".toUpperCase(), IPSecVPNIKEServiceSummary.class);
                    classByDiscriminatorValue.put("IPSecVPNSessionSummary".toUpperCase(), IPSecVPNSessionSummary.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, ""));
            }
          })
          .registerPostProcessor(IPSecVPNSessionSummary.class, new PostProcessor<IPSecVPNSessionSummary>() {
              @Override
              public void postDeserialize(IPSecVPNSessionSummary result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, IPSecVPNSessionSummary src, Gson gson) {
                  Map<Class<? extends IPSecVPNSessionSummary>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(IPSecVPNIKEServiceSummary.class, "IPSecVPNIKEServiceSummary");
                      discriminatorValueByClass.put(IPSecVPNSessionSummary.class, "IPSecVPNSessionSummary");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has(""))
                      {
                          ((JsonObject) result).addProperty("", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(L2VPNTransportTunnelStatus.class, new TypeSelector<L2VPNTransportTunnelStatus>() {
            @Override
            public Class<? extends L2VPNTransportTunnelStatus> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends L2VPNTransportTunnelStatus>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("IPSecVPNTransportStatus".toUpperCase(), IPSecVPNTransportStatus.class);
                    classByDiscriminatorValue.put("L2VPNTransportTunnelStatus".toUpperCase(), L2VPNTransportTunnelStatus.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, "resource_type"));
            }
          })
          .registerPostProcessor(L2VPNTransportTunnelStatus.class, new PostProcessor<L2VPNTransportTunnelStatus>() {
              @Override
              public void postDeserialize(L2VPNTransportTunnelStatus result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, L2VPNTransportTunnelStatus src, Gson gson) {
                  Map<Class<? extends L2VPNTransportTunnelStatus>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(IPSecVPNTransportStatus.class, "IPSecVPNTransportStatus");
                      discriminatorValueByClass.put(L2VPNTransportTunnelStatus.class, "L2VPNTransportTunnelStatus");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has("resource_type"))
                      {
                          ((JsonObject) result).addProperty("resource_type", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(IntelligenceClusterNodeVMDeploymentConfig.class, new TypeSelector<IntelligenceClusterNodeVMDeploymentConfig>() {
            @Override
            public Class<? extends IntelligenceClusterNodeVMDeploymentConfig> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends IntelligenceClusterNodeVMDeploymentConfig>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("IntelligenceVsphereClusterNodeVMDeploymentConfig".toUpperCase(), IntelligenceVsphereClusterNodeVMDeploymentConfig.class);
                    classByDiscriminatorValue.put("IntelligenceClusterNodeVMDeploymentConfig".toUpperCase(), IntelligenceClusterNodeVMDeploymentConfig.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, "placement_type"));
            }
          })
          .registerPostProcessor(IntelligenceClusterNodeVMDeploymentConfig.class, new PostProcessor<IntelligenceClusterNodeVMDeploymentConfig>() {
              @Override
              public void postDeserialize(IntelligenceClusterNodeVMDeploymentConfig result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, IntelligenceClusterNodeVMDeploymentConfig src, Gson gson) {
                  Map<Class<? extends IntelligenceClusterNodeVMDeploymentConfig>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(IntelligenceVsphereClusterNodeVMDeploymentConfig.class, "IntelligenceVsphereClusterNodeVMDeploymentConfig");
                      discriminatorValueByClass.put(IntelligenceClusterNodeVMDeploymentConfig.class, "IntelligenceClusterNodeVMDeploymentConfig");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has("placement_type"))
                      {
                          ((JsonObject) result).addProperty("placement_type", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(BackupSchedule.class, new TypeSelector<BackupSchedule>() {
            @Override
            public Class<? extends BackupSchedule> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends BackupSchedule>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("IntervalBackupSchedule".toUpperCase(), IntervalBackupSchedule.class);
                    classByDiscriminatorValue.put("WeeklyBackupSchedule".toUpperCase(), WeeklyBackupSchedule.class);
                    classByDiscriminatorValue.put("BackupSchedule".toUpperCase(), BackupSchedule.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, "resource_type"));
            }
          })
          .registerPostProcessor(BackupSchedule.class, new PostProcessor<BackupSchedule>() {
              @Override
              public void postDeserialize(BackupSchedule result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, BackupSchedule src, Gson gson) {
                  Map<Class<? extends BackupSchedule>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(IntervalBackupSchedule.class, "IntervalBackupSchedule");
                      discriminatorValueByClass.put(WeeklyBackupSchedule.class, "WeeklyBackupSchedule");
                      discriminatorValueByClass.put(BackupSchedule.class, "BackupSchedule");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has("resource_type"))
                      {
                          ((JsonObject) result).addProperty("resource_type", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(BaseSwitchingProfile.class, new TypeSelector<BaseSwitchingProfile>() {
            @Override
            public Class<? extends BaseSwitchingProfile> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends BaseSwitchingProfile>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("IpDiscoverySwitchingProfile".toUpperCase(), IpDiscoverySwitchingProfile.class);
                    classByDiscriminatorValue.put("MacManagementSwitchingProfile".toUpperCase(), MacManagementSwitchingProfile.class);
                    classByDiscriminatorValue.put("PortMirroringSwitchingProfile".toUpperCase(), PortMirroringSwitchingProfile.class);
                    classByDiscriminatorValue.put("QosSwitchingProfile".toUpperCase(), QosSwitchingProfile.class);
                    classByDiscriminatorValue.put("SpoofGuardSwitchingProfile".toUpperCase(), SpoofGuardSwitchingProfile.class);
                    classByDiscriminatorValue.put("SwitchSecuritySwitchingProfile".toUpperCase(), SwitchSecuritySwitchingProfile.class);
                    classByDiscriminatorValue.put("BaseSwitchingProfile".toUpperCase(), BaseSwitchingProfile.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, "resource_type"));
            }
          })
          .registerPostProcessor(BaseSwitchingProfile.class, new PostProcessor<BaseSwitchingProfile>() {
              @Override
              public void postDeserialize(BaseSwitchingProfile result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, BaseSwitchingProfile src, Gson gson) {
                  Map<Class<? extends BaseSwitchingProfile>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(IpDiscoverySwitchingProfile.class, "IpDiscoverySwitchingProfile");
                      discriminatorValueByClass.put(MacManagementSwitchingProfile.class, "MacManagementSwitchingProfile");
                      discriminatorValueByClass.put(PortMirroringSwitchingProfile.class, "PortMirroringSwitchingProfile");
                      discriminatorValueByClass.put(QosSwitchingProfile.class, "QosSwitchingProfile");
                      discriminatorValueByClass.put(SpoofGuardSwitchingProfile.class, "SpoofGuardSwitchingProfile");
                      discriminatorValueByClass.put(SwitchSecuritySwitchingProfile.class, "SwitchSecuritySwitchingProfile");
                      discriminatorValueByClass.put(BaseSwitchingProfile.class, "BaseSwitchingProfile");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has("resource_type"))
                      {
                          ((JsonObject) result).addProperty("resource_type", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(IpfixConfig.class, new TypeSelector<IpfixConfig>() {
            @Override
            public Class<? extends IpfixConfig> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends IpfixConfig>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("IpfixDfwConfig".toUpperCase(), IpfixDfwConfig.class);
                    classByDiscriminatorValue.put("IpfixSwitchConfig".toUpperCase(), IpfixSwitchConfig.class);
                    classByDiscriminatorValue.put("IpfixConfig".toUpperCase(), IpfixConfig.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, "resource_type"));
            }
          })
          .registerPostProcessor(IpfixConfig.class, new PostProcessor<IpfixConfig>() {
              @Override
              public void postDeserialize(IpfixConfig result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, IpfixConfig src, Gson gson) {
                  Map<Class<? extends IpfixConfig>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(IpfixDfwConfig.class, "IpfixDfwConfig");
                      discriminatorValueByClass.put(IpfixSwitchConfig.class, "IpfixSwitchConfig");
                      discriminatorValueByClass.put(IpfixConfig.class, "IpfixConfig");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has("resource_type"))
                      {
                          ((JsonObject) result).addProperty("resource_type", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(IpfixUpmProfile.class, new TypeSelector<IpfixUpmProfile>() {
            @Override
            public Class<? extends IpfixUpmProfile> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends IpfixUpmProfile>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("IpfixSwitchUpmProfile".toUpperCase(), IpfixSwitchUpmProfile.class);
                    classByDiscriminatorValue.put("IpfixUpmProfile".toUpperCase(), IpfixUpmProfile.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, "resource_type"));
            }
          })
          .registerPostProcessor(IpfixUpmProfile.class, new PostProcessor<IpfixUpmProfile>() {
              @Override
              public void postDeserialize(IpfixUpmProfile result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, IpfixUpmProfile src, Gson gson) {
                  Map<Class<? extends IpfixUpmProfile>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(IpfixSwitchUpmProfile.class, "IpfixSwitchUpmProfile");
                      discriminatorValueByClass.put(IpfixUpmProfile.class, "IpfixUpmProfile");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has("resource_type"))
                      {
                          ((JsonObject) result).addProperty("resource_type", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(AttachmentContext.class, new TypeSelector<AttachmentContext>() {
            @Override
            public Class<? extends AttachmentContext> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends AttachmentContext>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("L2VpnAttachmentContext".toUpperCase(), L2VpnAttachmentContext.class);
                    classByDiscriminatorValue.put("VifAttachmentContext".toUpperCase(), VifAttachmentContext.class);
                    classByDiscriminatorValue.put("AttachmentContext".toUpperCase(), AttachmentContext.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, "resource_type"));
            }
          })
          .registerPostProcessor(AttachmentContext.class, new PostProcessor<AttachmentContext>() {
              @Override
              public void postDeserialize(AttachmentContext result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, AttachmentContext src, Gson gson) {
                  Map<Class<? extends AttachmentContext>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(L2VpnAttachmentContext.class, "L2VpnAttachmentContext");
                      discriminatorValueByClass.put(VifAttachmentContext.class, "VifAttachmentContext");
                      discriminatorValueByClass.put(AttachmentContext.class, "AttachmentContext");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has("resource_type"))
                      {
                          ((JsonObject) result).addProperty("resource_type", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(LbMonitor.class, new TypeSelector<LbMonitor>() {
            @Override
            public Class<? extends LbMonitor> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends LbMonitor>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("LbActiveMonitor".toUpperCase(), LbActiveMonitor.class);
                    classByDiscriminatorValue.put("LbPassiveMonitor".toUpperCase(), LbPassiveMonitor.class);
                    classByDiscriminatorValue.put("LbMonitor".toUpperCase(), LbMonitor.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, "resource_type"));
            }
          })
          .registerPostProcessor(LbMonitor.class, new PostProcessor<LbMonitor>() {
              @Override
              public void postDeserialize(LbMonitor result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, LbMonitor src, Gson gson) {
                  Map<Class<? extends LbMonitor>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(LbActiveMonitor.class, "LbActiveMonitor");
                      discriminatorValueByClass.put(LbPassiveMonitor.class, "LbPassiveMonitor");
                      discriminatorValueByClass.put(LbMonitor.class, "LbMonitor");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has("resource_type"))
                      {
                          ((JsonObject) result).addProperty("resource_type", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(LbSslProfile.class, new TypeSelector<LbSslProfile>() {
            @Override
            public Class<? extends LbSslProfile> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends LbSslProfile>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("LbClientSslProfile".toUpperCase(), LbClientSslProfile.class);
                    classByDiscriminatorValue.put("LbServerSslProfile".toUpperCase(), LbServerSslProfile.class);
                    classByDiscriminatorValue.put("LbSslProfile".toUpperCase(), LbSslProfile.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, ""));
            }
          })
          .registerPostProcessor(LbSslProfile.class, new PostProcessor<LbSslProfile>() {
              @Override
              public void postDeserialize(LbSslProfile result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, LbSslProfile src, Gson gson) {
                  Map<Class<? extends LbSslProfile>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(LbClientSslProfile.class, "LbClientSslProfile");
                      discriminatorValueByClass.put(LbServerSslProfile.class, "LbServerSslProfile");
                      discriminatorValueByClass.put(LbSslProfile.class, "LbSslProfile");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has(""))
                      {
                          ((JsonObject) result).addProperty("", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(LbPersistenceProfile.class, new TypeSelector<LbPersistenceProfile>() {
            @Override
            public Class<? extends LbPersistenceProfile> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends LbPersistenceProfile>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("LbCookiePersistenceProfile".toUpperCase(), LbCookiePersistenceProfile.class);
                    classByDiscriminatorValue.put("LbGenericPersistenceProfile".toUpperCase(), LbGenericPersistenceProfile.class);
                    classByDiscriminatorValue.put("LbSourceIpPersistenceProfile".toUpperCase(), LbSourceIpPersistenceProfile.class);
                    classByDiscriminatorValue.put("LbPersistenceProfile".toUpperCase(), LbPersistenceProfile.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, "resource_type"));
            }
          })
          .registerPostProcessor(LbPersistenceProfile.class, new PostProcessor<LbPersistenceProfile>() {
              @Override
              public void postDeserialize(LbPersistenceProfile result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, LbPersistenceProfile src, Gson gson) {
                  Map<Class<? extends LbPersistenceProfile>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(LbCookiePersistenceProfile.class, "LbCookiePersistenceProfile");
                      discriminatorValueByClass.put(LbGenericPersistenceProfile.class, "LbGenericPersistenceProfile");
                      discriminatorValueByClass.put(LbSourceIpPersistenceProfile.class, "LbSourceIpPersistenceProfile");
                      discriminatorValueByClass.put(LbPersistenceProfile.class, "LbPersistenceProfile");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has("resource_type"))
                      {
                          ((JsonObject) result).addProperty("resource_type", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(LbNodeUsage.class, new TypeSelector<LbNodeUsage>() {
            @Override
            public Class<? extends LbNodeUsage> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends LbNodeUsage>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("LbEdgeNodeUsage".toUpperCase(), LbEdgeNodeUsage.class);
                    classByDiscriminatorValue.put("LbNodeUsage".toUpperCase(), LbNodeUsage.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, "type"));
            }
          })
          .registerPostProcessor(LbNodeUsage.class, new PostProcessor<LbNodeUsage>() {
              @Override
              public void postDeserialize(LbNodeUsage result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, LbNodeUsage src, Gson gson) {
                  Map<Class<? extends LbNodeUsage>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(LbEdgeNodeUsage.class, "LbEdgeNodeUsage");
                      discriminatorValueByClass.put(LbNodeUsage.class, "LbNodeUsage");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has("type"))
                      {
                          ((JsonObject) result).addProperty("type", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(LbAppProfile.class, new TypeSelector<LbAppProfile>() {
            @Override
            public Class<? extends LbAppProfile> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends LbAppProfile>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("LbFastTcpProfile".toUpperCase(), LbFastTcpProfile.class);
                    classByDiscriminatorValue.put("LbFastUdpProfile".toUpperCase(), LbFastUdpProfile.class);
                    classByDiscriminatorValue.put("LbHttpProfile".toUpperCase(), LbHttpProfile.class);
                    classByDiscriminatorValue.put("LbAppProfile".toUpperCase(), LbAppProfile.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, "resource_type"));
            }
          })
          .registerPostProcessor(LbAppProfile.class, new PostProcessor<LbAppProfile>() {
              @Override
              public void postDeserialize(LbAppProfile result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, LbAppProfile src, Gson gson) {
                  Map<Class<? extends LbAppProfile>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(LbFastTcpProfile.class, "LbFastTcpProfile");
                      discriminatorValueByClass.put(LbFastUdpProfile.class, "LbFastUdpProfile");
                      discriminatorValueByClass.put(LbHttpProfile.class, "LbHttpProfile");
                      discriminatorValueByClass.put(LbAppProfile.class, "LbAppProfile");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has("resource_type"))
                      {
                          ((JsonObject) result).addProperty("resource_type", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(LbActiveMonitor.class, new TypeSelector<LbActiveMonitor>() {
            @Override
            public Class<? extends LbActiveMonitor> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends LbActiveMonitor>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("LbHttpMonitor".toUpperCase(), LbHttpMonitor.class);
                    classByDiscriminatorValue.put("LbHttpsMonitor".toUpperCase(), LbHttpsMonitor.class);
                    classByDiscriminatorValue.put("LbIcmpMonitor".toUpperCase(), LbIcmpMonitor.class);
                    classByDiscriminatorValue.put("LbTcpMonitor".toUpperCase(), LbTcpMonitor.class);
                    classByDiscriminatorValue.put("LbUdpMonitor".toUpperCase(), LbUdpMonitor.class);
                    classByDiscriminatorValue.put("LbActiveMonitor".toUpperCase(), LbActiveMonitor.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, ""));
            }
          })
          .registerPostProcessor(LbActiveMonitor.class, new PostProcessor<LbActiveMonitor>() {
              @Override
              public void postDeserialize(LbActiveMonitor result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, LbActiveMonitor src, Gson gson) {
                  Map<Class<? extends LbActiveMonitor>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(LbHttpMonitor.class, "LbHttpMonitor");
                      discriminatorValueByClass.put(LbHttpsMonitor.class, "LbHttpsMonitor");
                      discriminatorValueByClass.put(LbIcmpMonitor.class, "LbIcmpMonitor");
                      discriminatorValueByClass.put(LbTcpMonitor.class, "LbTcpMonitor");
                      discriminatorValueByClass.put(LbUdpMonitor.class, "LbUdpMonitor");
                      discriminatorValueByClass.put(LbActiveMonitor.class, "LbActiveMonitor");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has(""))
                      {
                          ((JsonObject) result).addProperty("", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(LbRuleAction.class, new TypeSelector<LbRuleAction>() {
            @Override
            public Class<? extends LbRuleAction> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends LbRuleAction>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("LbHttpRedirectAction".toUpperCase(), LbHttpRedirectAction.class);
                    classByDiscriminatorValue.put("LbHttpRejectAction".toUpperCase(), LbHttpRejectAction.class);
                    classByDiscriminatorValue.put("LbHttpRequestHeaderDeleteAction".toUpperCase(), LbHttpRequestHeaderDeleteAction.class);
                    classByDiscriminatorValue.put("LbHttpRequestHeaderRewriteAction".toUpperCase(), LbHttpRequestHeaderRewriteAction.class);
                    classByDiscriminatorValue.put("LbHttpRequestUriRewriteAction".toUpperCase(), LbHttpRequestUriRewriteAction.class);
                    classByDiscriminatorValue.put("LbHttpResponseHeaderDeleteAction".toUpperCase(), LbHttpResponseHeaderDeleteAction.class);
                    classByDiscriminatorValue.put("LbHttpResponseHeaderRewriteAction".toUpperCase(), LbHttpResponseHeaderRewriteAction.class);
                    classByDiscriminatorValue.put("LbSelectPoolAction".toUpperCase(), LbSelectPoolAction.class);
                    classByDiscriminatorValue.put("LbVariableAssignmentAction".toUpperCase(), LbVariableAssignmentAction.class);
                    classByDiscriminatorValue.put("LbVariablePersistenceLearnAction".toUpperCase(), LbVariablePersistenceLearnAction.class);
                    classByDiscriminatorValue.put("LbVariablePersistenceOnAction".toUpperCase(), LbVariablePersistenceOnAction.class);
                    classByDiscriminatorValue.put("LbRuleAction".toUpperCase(), LbRuleAction.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, "type"));
            }
          })
          .registerPostProcessor(LbRuleAction.class, new PostProcessor<LbRuleAction>() {
              @Override
              public void postDeserialize(LbRuleAction result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, LbRuleAction src, Gson gson) {
                  Map<Class<? extends LbRuleAction>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(LbHttpRedirectAction.class, "LbHttpRedirectAction");
                      discriminatorValueByClass.put(LbHttpRejectAction.class, "LbHttpRejectAction");
                      discriminatorValueByClass.put(LbHttpRequestHeaderDeleteAction.class, "LbHttpRequestHeaderDeleteAction");
                      discriminatorValueByClass.put(LbHttpRequestHeaderRewriteAction.class, "LbHttpRequestHeaderRewriteAction");
                      discriminatorValueByClass.put(LbHttpRequestUriRewriteAction.class, "LbHttpRequestUriRewriteAction");
                      discriminatorValueByClass.put(LbHttpResponseHeaderDeleteAction.class, "LbHttpResponseHeaderDeleteAction");
                      discriminatorValueByClass.put(LbHttpResponseHeaderRewriteAction.class, "LbHttpResponseHeaderRewriteAction");
                      discriminatorValueByClass.put(LbSelectPoolAction.class, "LbSelectPoolAction");
                      discriminatorValueByClass.put(LbVariableAssignmentAction.class, "LbVariableAssignmentAction");
                      discriminatorValueByClass.put(LbVariablePersistenceLearnAction.class, "LbVariablePersistenceLearnAction");
                      discriminatorValueByClass.put(LbVariablePersistenceOnAction.class, "LbVariablePersistenceOnAction");
                      discriminatorValueByClass.put(LbRuleAction.class, "LbRuleAction");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has("type"))
                      {
                          ((JsonObject) result).addProperty("type", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(LbRuleCondition.class, new TypeSelector<LbRuleCondition>() {
            @Override
            public Class<? extends LbRuleCondition> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends LbRuleCondition>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("LbHttpRequestBodyCondition".toUpperCase(), LbHttpRequestBodyCondition.class);
                    classByDiscriminatorValue.put("LbHttpRequestCookieCondition".toUpperCase(), LbHttpRequestCookieCondition.class);
                    classByDiscriminatorValue.put("LbHttpRequestHeaderCondition".toUpperCase(), LbHttpRequestHeaderCondition.class);
                    classByDiscriminatorValue.put("LbHttpRequestMethodCondition".toUpperCase(), LbHttpRequestMethodCondition.class);
                    classByDiscriminatorValue.put("LbHttpRequestUriArgumentsCondition".toUpperCase(), LbHttpRequestUriArgumentsCondition.class);
                    classByDiscriminatorValue.put("LbHttpRequestUriCondition".toUpperCase(), LbHttpRequestUriCondition.class);
                    classByDiscriminatorValue.put("LbHttpRequestVersionCondition".toUpperCase(), LbHttpRequestVersionCondition.class);
                    classByDiscriminatorValue.put("LbHttpResponseHeaderCondition".toUpperCase(), LbHttpResponseHeaderCondition.class);
                    classByDiscriminatorValue.put("LbHttpSslCondition".toUpperCase(), LbHttpSslCondition.class);
                    classByDiscriminatorValue.put("LbIpHeaderCondition".toUpperCase(), LbIpHeaderCondition.class);
                    classByDiscriminatorValue.put("LbTcpHeaderCondition".toUpperCase(), LbTcpHeaderCondition.class);
                    classByDiscriminatorValue.put("LbVariableCondition".toUpperCase(), LbVariableCondition.class);
                    classByDiscriminatorValue.put("LbRuleCondition".toUpperCase(), LbRuleCondition.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, "type"));
            }
          })
          .registerPostProcessor(LbRuleCondition.class, new PostProcessor<LbRuleCondition>() {
              @Override
              public void postDeserialize(LbRuleCondition result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, LbRuleCondition src, Gson gson) {
                  Map<Class<? extends LbRuleCondition>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(LbHttpRequestBodyCondition.class, "LbHttpRequestBodyCondition");
                      discriminatorValueByClass.put(LbHttpRequestCookieCondition.class, "LbHttpRequestCookieCondition");
                      discriminatorValueByClass.put(LbHttpRequestHeaderCondition.class, "LbHttpRequestHeaderCondition");
                      discriminatorValueByClass.put(LbHttpRequestMethodCondition.class, "LbHttpRequestMethodCondition");
                      discriminatorValueByClass.put(LbHttpRequestUriArgumentsCondition.class, "LbHttpRequestUriArgumentsCondition");
                      discriminatorValueByClass.put(LbHttpRequestUriCondition.class, "LbHttpRequestUriCondition");
                      discriminatorValueByClass.put(LbHttpRequestVersionCondition.class, "LbHttpRequestVersionCondition");
                      discriminatorValueByClass.put(LbHttpResponseHeaderCondition.class, "LbHttpResponseHeaderCondition");
                      discriminatorValueByClass.put(LbHttpSslCondition.class, "LbHttpSslCondition");
                      discriminatorValueByClass.put(LbIpHeaderCondition.class, "LbIpHeaderCondition");
                      discriminatorValueByClass.put(LbTcpHeaderCondition.class, "LbTcpHeaderCondition");
                      discriminatorValueByClass.put(LbVariableCondition.class, "LbVariableCondition");
                      discriminatorValueByClass.put(LbRuleCondition.class, "LbRuleCondition");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has("type"))
                      {
                          ((JsonObject) result).addProperty("type", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(LbCookieTime.class, new TypeSelector<LbCookieTime>() {
            @Override
            public Class<? extends LbCookieTime> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends LbCookieTime>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("LbPersistenceCookieTime".toUpperCase(), LbPersistenceCookieTime.class);
                    classByDiscriminatorValue.put("LbSessionCookieTime".toUpperCase(), LbSessionCookieTime.class);
                    classByDiscriminatorValue.put("LbCookieTime".toUpperCase(), LbCookieTime.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, "type"));
            }
          })
          .registerPostProcessor(LbCookieTime.class, new PostProcessor<LbCookieTime>() {
              @Override
              public void postDeserialize(LbCookieTime result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, LbCookieTime src, Gson gson) {
                  Map<Class<? extends LbCookieTime>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(LbPersistenceCookieTime.class, "LbPersistenceCookieTime");
                      discriminatorValueByClass.put(LbSessionCookieTime.class, "LbSessionCookieTime");
                      discriminatorValueByClass.put(LbCookieTime.class, "LbCookieTime");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has("type"))
                      {
                          ((JsonObject) result).addProperty("type", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(LbSnatTranslation.class, new TypeSelector<LbSnatTranslation>() {
            @Override
            public Class<? extends LbSnatTranslation> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends LbSnatTranslation>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("LbSnatAutoMap".toUpperCase(), LbSnatAutoMap.class);
                    classByDiscriminatorValue.put("LbSnatIpPool".toUpperCase(), LbSnatIpPool.class);
                    classByDiscriminatorValue.put("LbSnatTranslation".toUpperCase(), LbSnatTranslation.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, "type"));
            }
          })
          .registerPostProcessor(LbSnatTranslation.class, new PostProcessor<LbSnatTranslation>() {
              @Override
              public void postDeserialize(LbSnatTranslation result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, LbSnatTranslation src, Gson gson) {
                  Map<Class<? extends LbSnatTranslation>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(LbSnatAutoMap.class, "LbSnatAutoMap");
                      discriminatorValueByClass.put(LbSnatIpPool.class, "LbSnatIpPool");
                      discriminatorValueByClass.put(LbSnatTranslation.class, "LbSnatTranslation");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has("type"))
                      {
                          ((JsonObject) result).addProperty("type", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(EdgeClusterMemberAllocationPool.class, new TypeSelector<EdgeClusterMemberAllocationPool>() {
            @Override
            public Class<? extends EdgeClusterMemberAllocationPool> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends EdgeClusterMemberAllocationPool>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("LoadBalancerAllocationPool".toUpperCase(), LoadBalancerAllocationPool.class);
                    classByDiscriminatorValue.put("EdgeClusterMemberAllocationPool".toUpperCase(), EdgeClusterMemberAllocationPool.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, "allocation_pool_type"));
            }
          })
          .registerPostProcessor(EdgeClusterMemberAllocationPool.class, new PostProcessor<EdgeClusterMemberAllocationPool>() {
              @Override
              public void postDeserialize(EdgeClusterMemberAllocationPool result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, EdgeClusterMemberAllocationPool src, Gson gson) {
                  Map<Class<? extends EdgeClusterMemberAllocationPool>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(LoadBalancerAllocationPool.class, "LoadBalancerAllocationPool");
                      discriminatorValueByClass.put(EdgeClusterMemberAllocationPool.class, "EdgeClusterMemberAllocationPool");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has("allocation_pool_type"))
                      {
                          ((JsonObject) result).addProperty("allocation_pool_type", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(MirrorSource.class, new TypeSelector<MirrorSource>() {
            @Override
            public Class<? extends MirrorSource> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends MirrorSource>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("LogicalPortMirrorSource".toUpperCase(), LogicalPortMirrorSource.class);
                    classByDiscriminatorValue.put("LogicalSwitchMirrorSource".toUpperCase(), LogicalSwitchMirrorSource.class);
                    classByDiscriminatorValue.put("PnicMirrorSource".toUpperCase(), PnicMirrorSource.class);
                    classByDiscriminatorValue.put("VlanMirrorSource".toUpperCase(), VlanMirrorSource.class);
                    classByDiscriminatorValue.put("MirrorSource".toUpperCase(), MirrorSource.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, "resource_type"));
            }
          })
          .registerPostProcessor(MirrorSource.class, new PostProcessor<MirrorSource>() {
              @Override
              public void postDeserialize(MirrorSource result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, MirrorSource src, Gson gson) {
                  Map<Class<? extends MirrorSource>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(LogicalPortMirrorSource.class, "LogicalPortMirrorSource");
                      discriminatorValueByClass.put(LogicalSwitchMirrorSource.class, "LogicalSwitchMirrorSource");
                      discriminatorValueByClass.put(PnicMirrorSource.class, "PnicMirrorSource");
                      discriminatorValueByClass.put(VlanMirrorSource.class, "VlanMirrorSource");
                      discriminatorValueByClass.put(MirrorSource.class, "MirrorSource");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has("resource_type"))
                      {
                          ((JsonObject) result).addProperty("resource_type", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(AggregatedDataCounterEx.class, new TypeSelector<AggregatedDataCounterEx>() {
            @Override
            public Class<? extends AggregatedDataCounterEx> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends AggregatedDataCounterEx>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("LogicalPortStatistics".toUpperCase(), LogicalPortStatistics.class);
                    classByDiscriminatorValue.put("LogicalSwitchStatistics".toUpperCase(), LogicalSwitchStatistics.class);
                    classByDiscriminatorValue.put("AggregatedDataCounterEx".toUpperCase(), AggregatedDataCounterEx.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, ""));
            }
          })
          .registerPostProcessor(AggregatedDataCounterEx.class, new PostProcessor<AggregatedDataCounterEx>() {
              @Override
              public void postDeserialize(AggregatedDataCounterEx result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, AggregatedDataCounterEx src, Gson gson) {
                  Map<Class<? extends AggregatedDataCounterEx>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(LogicalPortStatistics.class, "LogicalPortStatistics");
                      discriminatorValueByClass.put(LogicalSwitchStatistics.class, "LogicalSwitchStatistics");
                      discriminatorValueByClass.put(AggregatedDataCounterEx.class, "AggregatedDataCounterEx");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has(""))
                      {
                          ((JsonObject) result).addProperty("", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(LogicalRouterPort.class, new TypeSelector<LogicalRouterPort>() {
            @Override
            public Class<? extends LogicalRouterPort> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends LogicalRouterPort>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("LogicalRouterCentralizedServicePort".toUpperCase(), LogicalRouterCentralizedServicePort.class);
                    classByDiscriminatorValue.put("LogicalRouterDownLinkPort".toUpperCase(), LogicalRouterDownLinkPort.class);
                    classByDiscriminatorValue.put("LogicalRouterIPTunnelPort".toUpperCase(), LogicalRouterIPTunnelPort.class);
                    classByDiscriminatorValue.put("LogicalRouterLinkPortOnTIER0".toUpperCase(), LogicalRouterLinkPortOnTIER0.class);
                    classByDiscriminatorValue.put("LogicalRouterLinkPortOnTIER1".toUpperCase(), LogicalRouterLinkPortOnTIER1.class);
                    classByDiscriminatorValue.put("LogicalRouterLoopbackPort".toUpperCase(), LogicalRouterLoopbackPort.class);
                    classByDiscriminatorValue.put("LogicalRouterUpLinkPort".toUpperCase(), LogicalRouterUpLinkPort.class);
                    classByDiscriminatorValue.put("LogicalRouterPort".toUpperCase(), LogicalRouterPort.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, "resource_type"));
            }
          })
          .registerPostProcessor(LogicalRouterPort.class, new PostProcessor<LogicalRouterPort>() {
              @Override
              public void postDeserialize(LogicalRouterPort result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, LogicalRouterPort src, Gson gson) {
                  Map<Class<? extends LogicalRouterPort>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(LogicalRouterCentralizedServicePort.class, "LogicalRouterCentralizedServicePort");
                      discriminatorValueByClass.put(LogicalRouterDownLinkPort.class, "LogicalRouterDownLinkPort");
                      discriminatorValueByClass.put(LogicalRouterIPTunnelPort.class, "LogicalRouterIPTunnelPort");
                      discriminatorValueByClass.put(LogicalRouterLinkPortOnTIER0.class, "LogicalRouterLinkPortOnTIER0");
                      discriminatorValueByClass.put(LogicalRouterLinkPortOnTIER1.class, "LogicalRouterLinkPortOnTIER1");
                      discriminatorValueByClass.put(LogicalRouterLoopbackPort.class, "LogicalRouterLoopbackPort");
                      discriminatorValueByClass.put(LogicalRouterUpLinkPort.class, "LogicalRouterUpLinkPort");
                      discriminatorValueByClass.put(LogicalRouterPort.class, "LogicalRouterPort");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has("resource_type"))
                      {
                          ((JsonObject) result).addProperty("resource_type", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(AggregatedLogicalRouterPortCounters.class, new TypeSelector<AggregatedLogicalRouterPortCounters>() {
            @Override
            public Class<? extends AggregatedLogicalRouterPortCounters> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends AggregatedLogicalRouterPortCounters>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("LogicalRouterPortStatisticsPerNode".toUpperCase(), LogicalRouterPortStatisticsPerNode.class);
                    classByDiscriminatorValue.put("LogicalRouterPortStatisticsSummary".toUpperCase(), LogicalRouterPortStatisticsSummary.class);
                    classByDiscriminatorValue.put("AggregatedLogicalRouterPortCounters".toUpperCase(), AggregatedLogicalRouterPortCounters.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, ""));
            }
          })
          .registerPostProcessor(AggregatedLogicalRouterPortCounters.class, new PostProcessor<AggregatedLogicalRouterPortCounters>() {
              @Override
              public void postDeserialize(AggregatedLogicalRouterPortCounters result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, AggregatedLogicalRouterPortCounters src, Gson gson) {
                  Map<Class<? extends AggregatedLogicalRouterPortCounters>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(LogicalRouterPortStatisticsPerNode.class, "LogicalRouterPortStatisticsPerNode");
                      discriminatorValueByClass.put(LogicalRouterPortStatisticsSummary.class, "LogicalRouterPortStatisticsSummary");
                      discriminatorValueByClass.put(AggregatedLogicalRouterPortCounters.class, "AggregatedLogicalRouterPortCounters");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has(""))
                      {
                          ((JsonObject) result).addProperty("", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(NSGroupExpression.class, new TypeSelector<NSGroupExpression>() {
            @Override
            public Class<? extends NSGroupExpression> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends NSGroupExpression>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("NSGroupComplexExpression".toUpperCase(), NSGroupComplexExpression.class);
                    classByDiscriminatorValue.put("NSGroupSimpleExpression".toUpperCase(), NSGroupSimpleExpression.class);
                    classByDiscriminatorValue.put("NSGroupTagExpression".toUpperCase(), NSGroupTagExpression.class);
                    classByDiscriminatorValue.put("NSGroupExpression".toUpperCase(), NSGroupExpression.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, "resource_type"));
            }
          })
          .registerPostProcessor(NSGroupExpression.class, new PostProcessor<NSGroupExpression>() {
              @Override
              public void postDeserialize(NSGroupExpression result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, NSGroupExpression src, Gson gson) {
                  Map<Class<? extends NSGroupExpression>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(NSGroupComplexExpression.class, "NSGroupComplexExpression");
                      discriminatorValueByClass.put(NSGroupSimpleExpression.class, "NSGroupSimpleExpression");
                      discriminatorValueByClass.put(NSGroupTagExpression.class, "NSGroupTagExpression");
                      discriminatorValueByClass.put(NSGroupExpression.class, "NSGroupExpression");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has("resource_type"))
                      {
                          ((JsonObject) result).addProperty("resource_type", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(TeamingPolicy.class, new TypeSelector<TeamingPolicy>() {
            @Override
            public Class<? extends TeamingPolicy> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends TeamingPolicy>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("NamedTeamingPolicy".toUpperCase(), NamedTeamingPolicy.class);
                    classByDiscriminatorValue.put("TeamingPolicy".toUpperCase(), TeamingPolicy.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, ""));
            }
          })
          .registerPostProcessor(TeamingPolicy.class, new PostProcessor<TeamingPolicy>() {
              @Override
              public void postDeserialize(TeamingPolicy result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, TeamingPolicy src, Gson gson) {
                  Map<Class<? extends TeamingPolicy>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(NamedTeamingPolicy.class, "NamedTeamingPolicy");
                      discriminatorValueByClass.put(TeamingPolicy.class, "TeamingPolicy");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has(""))
                      {
                          ((JsonObject) result).addProperty("", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(NatCounters.class, new TypeSelector<NatCounters>() {
            @Override
            public Class<? extends NatCounters> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends NatCounters>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("NatStatisticsPerRule".toUpperCase(), NatStatisticsPerRule.class);
                    classByDiscriminatorValue.put("NatStatisticsPerTransportNode".toUpperCase(), NatStatisticsPerTransportNode.class);
                    classByDiscriminatorValue.put("NatCounters".toUpperCase(), NatCounters.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, ""));
            }
          })
          .registerPostProcessor(NatCounters.class, new PostProcessor<NatCounters>() {
              @Override
              public void postDeserialize(NatCounters result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, NatCounters src, Gson gson) {
                  Map<Class<? extends NatCounters>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(NatStatisticsPerRule.class, "NatStatisticsPerRule");
                      discriminatorValueByClass.put(NatStatisticsPerTransportNode.class, "NatStatisticsPerTransportNode");
                      discriminatorValueByClass.put(NatCounters.class, "NatCounters");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has(""))
                      {
                          ((JsonObject) result).addProperty("", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(NodeServiceProperties.class, new TypeSelector<NodeServiceProperties>() {
            @Override
            public Class<? extends NodeServiceProperties> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends NodeServiceProperties>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("NodeHttpServiceProperties".toUpperCase(), NodeHttpServiceProperties.class);
                    classByDiscriminatorValue.put("NodeInstallUpgradeServiceProperties".toUpperCase(), NodeInstallUpgradeServiceProperties.class);
                    classByDiscriminatorValue.put("NodeNtpServiceProperties".toUpperCase(), NodeNtpServiceProperties.class);
                    classByDiscriminatorValue.put("NodePolicyServiceProperties".toUpperCase(), NodePolicyServiceProperties.class);
                    classByDiscriminatorValue.put("NodeProtonServiceProperties".toUpperCase(), NodeProtonServiceProperties.class);
                    classByDiscriminatorValue.put("NodeSnmpServiceProperties".toUpperCase(), NodeSnmpServiceProperties.class);
                    classByDiscriminatorValue.put("NodeSnmpV3EngineID".toUpperCase(), NodeSnmpV3EngineID.class);
                    classByDiscriminatorValue.put("NodeSshServiceProperties".toUpperCase(), NodeSshServiceProperties.class);
                    classByDiscriminatorValue.put("NodeServiceProperties".toUpperCase(), NodeServiceProperties.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, ""));
            }
          })
          .registerPostProcessor(NodeServiceProperties.class, new PostProcessor<NodeServiceProperties>() {
              @Override
              public void postDeserialize(NodeServiceProperties result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, NodeServiceProperties src, Gson gson) {
                  Map<Class<? extends NodeServiceProperties>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(NodeHttpServiceProperties.class, "NodeHttpServiceProperties");
                      discriminatorValueByClass.put(NodeInstallUpgradeServiceProperties.class, "NodeInstallUpgradeServiceProperties");
                      discriminatorValueByClass.put(NodeNtpServiceProperties.class, "NodeNtpServiceProperties");
                      discriminatorValueByClass.put(NodePolicyServiceProperties.class, "NodePolicyServiceProperties");
                      discriminatorValueByClass.put(NodeProtonServiceProperties.class, "NodeProtonServiceProperties");
                      discriminatorValueByClass.put(NodeSnmpServiceProperties.class, "NodeSnmpServiceProperties");
                      discriminatorValueByClass.put(NodeSnmpV3EngineID.class, "NodeSnmpV3EngineID");
                      discriminatorValueByClass.put(NodeSshServiceProperties.class, "NodeSshServiceProperties");
                      discriminatorValueByClass.put(NodeServiceProperties.class, "NodeServiceProperties");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has(""))
                      {
                          ((JsonObject) result).addProperty("", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(ResourceLink.class, new TypeSelector<ResourceLink>() {
            @Override
            public Class<? extends ResourceLink> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends ResourceLink>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("OwnerResourceLink".toUpperCase(), OwnerResourceLink.class);
                    classByDiscriminatorValue.put("SelfResourceLink".toUpperCase(), SelfResourceLink.class);
                    classByDiscriminatorValue.put("ResourceLink".toUpperCase(), ResourceLink.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, ""));
            }
          })
          .registerPostProcessor(ResourceLink.class, new PostProcessor<ResourceLink>() {
              @Override
              public void postDeserialize(ResourceLink result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, ResourceLink src, Gson gson) {
                  Map<Class<? extends ResourceLink>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(OwnerResourceLink.class, "OwnerResourceLink");
                      discriminatorValueByClass.put(SelfResourceLink.class, "SelfResourceLink");
                      discriminatorValueByClass.put(ResourceLink.class, "ResourceLink");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has(""))
                      {
                          ((JsonObject) result).addProperty("", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(PBRSection.class, new TypeSelector<PBRSection>() {
            @Override
            public Class<? extends PBRSection> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends PBRSection>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("PBRSectionRuleList".toUpperCase(), PBRSectionRuleList.class);
                    classByDiscriminatorValue.put("PBRSection".toUpperCase(), PBRSection.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, ""));
            }
          })
          .registerPostProcessor(PBRSection.class, new PostProcessor<PBRSection>() {
              @Override
              public void postDeserialize(PBRSection result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, PBRSection src, Gson gson) {
                  Map<Class<? extends PBRSection>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(PBRSectionRuleList.class, "PBRSectionRuleList");
                      discriminatorValueByClass.put(PBRSection.class, "PBRSection");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has(""))
                      {
                          ((JsonObject) result).addProperty("", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(IPSecVPNSession.class, new TypeSelector<IPSecVPNSession>() {
            @Override
            public Class<? extends IPSecVPNSession> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends IPSecVPNSession>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("PolicyBasedIPSecVPNSession".toUpperCase(), PolicyBasedIPSecVPNSession.class);
                    classByDiscriminatorValue.put("RouteBasedIPSecVPNSession".toUpperCase(), RouteBasedIPSecVPNSession.class);
                    classByDiscriminatorValue.put("IPSecVPNSession".toUpperCase(), IPSecVPNSession.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, "resource_type"));
            }
          })
          .registerPostProcessor(IPSecVPNSession.class, new PostProcessor<IPSecVPNSession>() {
              @Override
              public void postDeserialize(IPSecVPNSession result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, IPSecVPNSession src, Gson gson) {
                  Map<Class<? extends IPSecVPNSession>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(PolicyBasedIPSecVPNSession.class, "PolicyBasedIPSecVPNSession");
                      discriminatorValueByClass.put(RouteBasedIPSecVPNSession.class, "RouteBasedIPSecVPNSession");
                      discriminatorValueByClass.put(IPSecVPNSession.class, "IPSecVPNSession");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has("resource_type"))
                      {
                          ((JsonObject) result).addProperty("resource_type", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(PortConnectionEntity.class, new TypeSelector<PortConnectionEntity>() {
            @Override
            public Class<? extends PortConnectionEntity> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends PortConnectionEntity>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("PortConnectionEdgeNodeGroup".toUpperCase(), PortConnectionEdgeNodeGroup.class);
                    classByDiscriminatorValue.put("PortConnectionHypervisor".toUpperCase(), PortConnectionHypervisor.class);
                    classByDiscriminatorValue.put("PortConnectionLogicalSwitch".toUpperCase(), PortConnectionLogicalSwitch.class);
                    classByDiscriminatorValue.put("PortConnectionRouter".toUpperCase(), PortConnectionRouter.class);
                    classByDiscriminatorValue.put("PortConnectionEntity".toUpperCase(), PortConnectionEntity.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, ""));
            }
          })
          .registerPostProcessor(PortConnectionEntity.class, new PostProcessor<PortConnectionEntity>() {
              @Override
              public void postDeserialize(PortConnectionEntity result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, PortConnectionEntity src, Gson gson) {
                  Map<Class<? extends PortConnectionEntity>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(PortConnectionEdgeNodeGroup.class, "PortConnectionEdgeNodeGroup");
                      discriminatorValueByClass.put(PortConnectionHypervisor.class, "PortConnectionHypervisor");
                      discriminatorValueByClass.put(PortConnectionLogicalSwitch.class, "PortConnectionLogicalSwitch");
                      discriminatorValueByClass.put(PortConnectionRouter.class, "PortConnectionRouter");
                      discriminatorValueByClass.put(PortConnectionEntity.class, "PortConnectionEntity");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has(""))
                      {
                          ((JsonObject) result).addProperty("", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(HostSwitchSpec.class, new TypeSelector<HostSwitchSpec>() {
            @Override
            public Class<? extends HostSwitchSpec> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends HostSwitchSpec>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("PreconfiguredHostSwitchSpec".toUpperCase(), PreconfiguredHostSwitchSpec.class);
                    classByDiscriminatorValue.put("StandardHostSwitchSpec".toUpperCase(), StandardHostSwitchSpec.class);
                    classByDiscriminatorValue.put("HostSwitchSpec".toUpperCase(), HostSwitchSpec.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, "resource_type"));
            }
          })
          .registerPostProcessor(HostSwitchSpec.class, new PostProcessor<HostSwitchSpec>() {
              @Override
              public void postDeserialize(HostSwitchSpec result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, HostSwitchSpec src, Gson gson) {
                  Map<Class<? extends HostSwitchSpec>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(PreconfiguredHostSwitchSpec.class, "PreconfiguredHostSwitchSpec");
                      discriminatorValueByClass.put(StandardHostSwitchSpec.class, "StandardHostSwitchSpec");
                      discriminatorValueByClass.put(HostSwitchSpec.class, "HostSwitchSpec");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has("resource_type"))
                      {
                          ((JsonObject) result).addProperty("resource_type", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(PrincipalIdentity.class, new TypeSelector<PrincipalIdentity>() {
            @Override
            public Class<? extends PrincipalIdentity> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends PrincipalIdentity>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("PrincipalIdentityWithCertificate".toUpperCase(), PrincipalIdentityWithCertificate.class);
                    classByDiscriminatorValue.put("PrincipalIdentity".toUpperCase(), PrincipalIdentity.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, ""));
            }
          })
          .registerPostProcessor(PrincipalIdentity.class, new PostProcessor<PrincipalIdentity>() {
              @Override
              public void postDeserialize(PrincipalIdentity result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, PrincipalIdentity src, Gson gson) {
                  Map<Class<? extends PrincipalIdentity>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(PrincipalIdentityWithCertificate.class, "PrincipalIdentityWithCertificate");
                      discriminatorValueByClass.put(PrincipalIdentity.class, "PrincipalIdentity");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has(""))
                      {
                          ((JsonObject) result).addProperty("", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(EdgeNode.class, new TypeSelector<EdgeNode>() {
            @Override
            public Class<? extends EdgeNode> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends EdgeNode>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("PublicCloudGatewayNode".toUpperCase(), PublicCloudGatewayNode.class);
                    classByDiscriminatorValue.put("EdgeNode".toUpperCase(), EdgeNode.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, ""));
            }
          })
          .registerPostProcessor(EdgeNode.class, new PostProcessor<EdgeNode>() {
              @Override
              public void postDeserialize(EdgeNode result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, EdgeNode src, Gson gson) {
                  Map<Class<? extends EdgeNode>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(PublicCloudGatewayNode.class, "PublicCloudGatewayNode");
                      discriminatorValueByClass.put(EdgeNode.class, "EdgeNode");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has(""))
                      {
                          ((JsonObject) result).addProperty("", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(DSRuleState.class, new TypeSelector<DSRuleState>() {
            @Override
            public Class<? extends DSRuleState> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends DSRuleState>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("RuleState".toUpperCase(), RuleState.class);
                    classByDiscriminatorValue.put("DSRuleState".toUpperCase(), DSRuleState.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, ""));
            }
          })
          .registerPostProcessor(DSRuleState.class, new PostProcessor<DSRuleState>() {
              @Override
              public void postDeserialize(DSRuleState result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, DSRuleState src, Gson gson) {
                  Map<Class<? extends DSRuleState>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(RuleState.class, "RuleState");
                      discriminatorValueByClass.put(DSRuleState.class, "DSRuleState");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has(""))
                      {
                          ((JsonObject) result).addProperty("", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(SIAggregatedDataCounterEx.class, new TypeSelector<SIAggregatedDataCounterEx>() {
            @Override
            public Class<? extends SIAggregatedDataCounterEx> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends SIAggregatedDataCounterEx>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("RuntimeInterfaceStatistics".toUpperCase(), RuntimeInterfaceStatistics.class);
                    classByDiscriminatorValue.put("SIAggregatedDataCounterEx".toUpperCase(), SIAggregatedDataCounterEx.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, ""));
            }
          })
          .registerPostProcessor(SIAggregatedDataCounterEx.class, new PostProcessor<SIAggregatedDataCounterEx>() {
              @Override
              public void postDeserialize(SIAggregatedDataCounterEx result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, SIAggregatedDataCounterEx src, Gson gson) {
                  Map<Class<? extends SIAggregatedDataCounterEx>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(RuntimeInterfaceStatistics.class, "RuntimeInterfaceStatistics");
                      discriminatorValueByClass.put(SIAggregatedDataCounterEx.class, "SIAggregatedDataCounterEx");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has(""))
                      {
                          ((JsonObject) result).addProperty("", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(SIAggregatedDataCounter.class, new TypeSelector<SIAggregatedDataCounter>() {
            @Override
            public Class<? extends SIAggregatedDataCounter> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends SIAggregatedDataCounter>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("SIAggregatedDataCounterEx".toUpperCase(), SIAggregatedDataCounterEx.class);
                    classByDiscriminatorValue.put("SIAggregatedDataCounter".toUpperCase(), SIAggregatedDataCounter.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, ""));
            }
          })
          .registerPostProcessor(SIAggregatedDataCounter.class, new PostProcessor<SIAggregatedDataCounter>() {
              @Override
              public void postDeserialize(SIAggregatedDataCounter result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, SIAggregatedDataCounter src, Gson gson) {
                  Map<Class<? extends SIAggregatedDataCounter>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(SIAggregatedDataCounterEx.class, "SIAggregatedDataCounterEx");
                      discriminatorValueByClass.put(SIAggregatedDataCounter.class, "SIAggregatedDataCounter");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has(""))
                      {
                          ((JsonObject) result).addProperty("", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(ServiceInsertionSection.class, new TypeSelector<ServiceInsertionSection>() {
            @Override
            public Class<? extends ServiceInsertionSection> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends ServiceInsertionSection>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("ServiceInsertionSectionRuleList".toUpperCase(), ServiceInsertionSectionRuleList.class);
                    classByDiscriminatorValue.put("ServiceInsertionSection".toUpperCase(), ServiceInsertionSection.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, ""));
            }
          })
          .registerPostProcessor(ServiceInsertionSection.class, new PostProcessor<ServiceInsertionSection>() {
              @Override
              public void postDeserialize(ServiceInsertionSection result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, ServiceInsertionSection src, Gson gson) {
                  Map<Class<? extends ServiceInsertionSection>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(ServiceInsertionSectionRuleList.class, "ServiceInsertionSectionRuleList");
                      discriminatorValueByClass.put(ServiceInsertionSection.class, "ServiceInsertionSection");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has(""))
                      {
                          ((JsonObject) result).addProperty("", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(SshKeyBaseProperties.class, new TypeSelector<SshKeyBaseProperties>() {
            @Override
            public Class<? extends SshKeyBaseProperties> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends SshKeyBaseProperties>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("SshKeyProperties".toUpperCase(), SshKeyProperties.class);
                    classByDiscriminatorValue.put("SshKeyBaseProperties".toUpperCase(), SshKeyBaseProperties.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, ""));
            }
          })
          .registerPostProcessor(SshKeyBaseProperties.class, new PostProcessor<SshKeyBaseProperties>() {
              @Override
              public void postDeserialize(SshKeyBaseProperties result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, SshKeyBaseProperties src, Gson gson) {
                  Map<Class<? extends SshKeyBaseProperties>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(SshKeyProperties.class, "SshKeyProperties");
                      discriminatorValueByClass.put(SshKeyBaseProperties.class, "SshKeyBaseProperties");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has(""))
                      {
                          ((JsonObject) result).addProperty("", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(NodeMode.class, new TypeSelector<NodeMode>() {
            @Override
            public Class<? extends NodeMode> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends NodeMode>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("SwitchingToVmcModeParameters".toUpperCase(), SwitchingToVmcModeParameters.class);
                    classByDiscriminatorValue.put("NodeMode".toUpperCase(), NodeMode.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, ""));
            }
          })
          .registerPostProcessor(NodeMode.class, new PostProcessor<NodeMode>() {
              @Override
              public void postDeserialize(NodeMode result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, NodeMode src, Gson gson) {
                  Map<Class<? extends NodeMode>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(SwitchingToVmcModeParameters.class, "SwitchingToVmcModeParameters");
                      discriminatorValueByClass.put(NodeMode.class, "NodeMode");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has(""))
                      {
                          ((JsonObject) result).addProperty("", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(TraceflowObservation.class, new TypeSelector<TraceflowObservation>() {
            @Override
            public Class<? extends TraceflowObservation> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends TraceflowObservation>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("TraceflowObservationDelivered".toUpperCase(), TraceflowObservationDelivered.class);
                    classByDiscriminatorValue.put("TraceflowObservationDropped".toUpperCase(), TraceflowObservationDropped.class);
                    classByDiscriminatorValue.put("TraceflowObservationForwarded".toUpperCase(), TraceflowObservationForwarded.class);
                    classByDiscriminatorValue.put("TraceflowObservationForwardedLogical".toUpperCase(), TraceflowObservationForwardedLogical.class);
                    classByDiscriminatorValue.put("TraceflowObservationReceived".toUpperCase(), TraceflowObservationReceived.class);
                    classByDiscriminatorValue.put("TraceflowObservationReceivedLogical".toUpperCase(), TraceflowObservationReceivedLogical.class);
                    classByDiscriminatorValue.put("TraceflowObservationRelayedLogical".toUpperCase(), TraceflowObservationRelayedLogical.class);
                    classByDiscriminatorValue.put("TraceflowObservationReplicationLogical".toUpperCase(), TraceflowObservationReplicationLogical.class);
                    classByDiscriminatorValue.put("TraceflowObservation".toUpperCase(), TraceflowObservation.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, "resource_type"));
            }
          })
          .registerPostProcessor(TraceflowObservation.class, new PostProcessor<TraceflowObservation>() {
              @Override
              public void postDeserialize(TraceflowObservation result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, TraceflowObservation src, Gson gson) {
                  Map<Class<? extends TraceflowObservation>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(TraceflowObservationDelivered.class, "TraceflowObservationDelivered");
                      discriminatorValueByClass.put(TraceflowObservationDropped.class, "TraceflowObservationDropped");
                      discriminatorValueByClass.put(TraceflowObservationForwarded.class, "TraceflowObservationForwarded");
                      discriminatorValueByClass.put(TraceflowObservationForwardedLogical.class, "TraceflowObservationForwardedLogical");
                      discriminatorValueByClass.put(TraceflowObservationReceived.class, "TraceflowObservationReceived");
                      discriminatorValueByClass.put(TraceflowObservationReceivedLogical.class, "TraceflowObservationReceivedLogical");
                      discriminatorValueByClass.put(TraceflowObservationRelayedLogical.class, "TraceflowObservationRelayedLogical");
                      discriminatorValueByClass.put(TraceflowObservationReplicationLogical.class, "TraceflowObservationReplicationLogical");
                      discriminatorValueByClass.put(TraceflowObservation.class, "TraceflowObservation");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has("resource_type"))
                      {
                          ((JsonObject) result).addProperty("resource_type", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(TraceflowObservationDropped.class, new TypeSelector<TraceflowObservationDropped>() {
            @Override
            public Class<? extends TraceflowObservationDropped> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends TraceflowObservationDropped>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("TraceflowObservationDroppedLogical".toUpperCase(), TraceflowObservationDroppedLogical.class);
                    classByDiscriminatorValue.put("TraceflowObservationDropped".toUpperCase(), TraceflowObservationDropped.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, ""));
            }
          })
          .registerPostProcessor(TraceflowObservationDropped.class, new PostProcessor<TraceflowObservationDropped>() {
              @Override
              public void postDeserialize(TraceflowObservationDropped result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, TraceflowObservationDropped src, Gson gson) {
                  Map<Class<? extends TraceflowObservationDropped>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(TraceflowObservationDroppedLogical.class, "TraceflowObservationDroppedLogical");
                      discriminatorValueByClass.put(TraceflowObservationDropped.class, "TraceflowObservationDropped");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has(""))
                      {
                          ((JsonObject) result).addProperty("", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(StatusCount.class, new TypeSelector<StatusCount>() {
            @Override
            public Class<? extends StatusCount> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends StatusCount>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("TunnelStatusCount".toUpperCase(), TunnelStatusCount.class);
                    classByDiscriminatorValue.put("StatusCount".toUpperCase(), StatusCount.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, ""));
            }
          })
          .registerPostProcessor(StatusCount.class, new PostProcessor<StatusCount>() {
              @Override
              public void postDeserialize(StatusCount result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, StatusCount src, Gson gson) {
                  Map<Class<? extends StatusCount>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(TunnelStatusCount.class, "TunnelStatusCount");
                      discriminatorValueByClass.put(StatusCount.class, "StatusCount");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has(""))
                      {
                          ((JsonObject) result).addProperty("", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(LoginCredential.class, new TypeSelector<LoginCredential>() {
            @Override
            public Class<? extends LoginCredential> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends LoginCredential>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("UsernamePasswordLoginCredential".toUpperCase(), UsernamePasswordLoginCredential.class);
                    classByDiscriminatorValue.put("VerifiableAsymmetricLoginCredential".toUpperCase(), VerifiableAsymmetricLoginCredential.class);
                    classByDiscriminatorValue.put("LoginCredential".toUpperCase(), LoginCredential.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, "credential_type"));
            }
          })
          .registerPostProcessor(LoginCredential.class, new PostProcessor<LoginCredential>() {
              @Override
              public void postDeserialize(LoginCredential result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, LoginCredential src, Gson gson) {
                  Map<Class<? extends LoginCredential>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(UsernamePasswordLoginCredential.class, "UsernamePasswordLoginCredential");
                      discriminatorValueByClass.put(VerifiableAsymmetricLoginCredential.class, "VerifiableAsymmetricLoginCredential");
                      discriminatorValueByClass.put(LoginCredential.class, "LoginCredential");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has("credential_type"))
                      {
                          ((JsonObject) result).addProperty("credential_type", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(ClusterNodeVMDeploymentConfig.class, new TypeSelector<ClusterNodeVMDeploymentConfig>() {
            @Override
            public Class<? extends ClusterNodeVMDeploymentConfig> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends ClusterNodeVMDeploymentConfig>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("VsphereClusterNodeVMDeploymentConfig".toUpperCase(), VsphereClusterNodeVMDeploymentConfig.class);
                    classByDiscriminatorValue.put("ClusterNodeVMDeploymentConfig".toUpperCase(), ClusterNodeVMDeploymentConfig.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, "placement_type"));
            }
          })
          .registerPostProcessor(ClusterNodeVMDeploymentConfig.class, new PostProcessor<ClusterNodeVMDeploymentConfig>() {
              @Override
              public void postDeserialize(ClusterNodeVMDeploymentConfig result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, ClusterNodeVMDeploymentConfig src, Gson gson) {
                  Map<Class<? extends ClusterNodeVMDeploymentConfig>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(VsphereClusterNodeVMDeploymentConfig.class, "VsphereClusterNodeVMDeploymentConfig");
                      discriminatorValueByClass.put(ClusterNodeVMDeploymentConfig.class, "ClusterNodeVMDeploymentConfig");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has("placement_type"))
                      {
                          ((JsonObject) result).addProperty("placement_type", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(DeploymentConfig.class, new TypeSelector<DeploymentConfig>() {
            @Override
            public Class<? extends DeploymentConfig> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends DeploymentConfig>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("VsphereDeploymentConfig".toUpperCase(), VsphereDeploymentConfig.class);
                    classByDiscriminatorValue.put("DeploymentConfig".toUpperCase(), DeploymentConfig.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, "placement_type"));
            }
          })
          .registerPostProcessor(DeploymentConfig.class, new PostProcessor<DeploymentConfig>() {
              @Override
              public void postDeserialize(DeploymentConfig result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, DeploymentConfig src, Gson gson) {
                  Map<Class<? extends DeploymentConfig>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(VsphereDeploymentConfig.class, "VsphereDeploymentConfig");
                      discriminatorValueByClass.put(DeploymentConfig.class, "DeploymentConfig");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has("placement_type"))
                      {
                          ((JsonObject) result).addProperty("placement_type", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
        ;
        return fireBuilder.createGsonBuilder();
    }

    private static String getDiscriminatorValue(JsonElement readElement, String discriminatorField) {
        JsonElement element = readElement.getAsJsonObject().get(discriminatorField);
        if(null == element) {
            throw new IllegalArgumentException("missing discriminator field: <" + discriminatorField + ">");
        }
        return element.getAsString();
    }

    private static <T> Class<? extends T> getClassByDiscriminator(Map<String, Class<? extends T>> classByDiscriminatorValue, String discriminatorValue) {
        Class<? extends T> clazz = classByDiscriminatorValue.get(discriminatorValue.toUpperCase());
        if(null == clazz) {
            throw new IllegalArgumentException("cannot determine model class of name: <" + discriminatorValue + ">");
        }
        return clazz;
    }

    public JSON() {
        gson = createGson()
            .registerTypeAdapter(Date.class, dateTypeAdapter)
            .registerTypeAdapter(java.sql.Date.class, sqlDateTypeAdapter)
            .registerTypeAdapter(OffsetDateTime.class, offsetDateTimeTypeAdapter)
            .registerTypeAdapter(LocalDate.class, localDateTypeAdapter)
            .create();
    }

    /**
     * Get Gson.
     *
     * @return Gson
     */
    public Gson getGson() {
        return gson;
    }

    /**
     * Set Gson.
     *
     * @param gson Gson
     * @return JSON
     */
    public JSON setGson(Gson gson) {
        this.gson = gson;
        return this;
    }

    public JSON setLenientOnJson(boolean lenientOnJson) {
        isLenientOnJson = lenientOnJson;
        return this;
    }

    /**
     * Serialize the given Java object into JSON string.
     *
     * @param obj Object
     * @return String representation of the JSON
     */
    public String serialize(Object obj) {
        return gson.toJson(obj);
    }

    /**
     * Deserialize the given JSON string to Java object.
     *
     * @param <T>        Type
     * @param body       The JSON string
     * @param returnType The type to deserialize into
     * @return The deserialized Java object
     */
    @SuppressWarnings("unchecked")
    public <T> T deserialize(String body, Type returnType) {
        try {
            if (isLenientOnJson) {
                JsonReader jsonReader = new JsonReader(new StringReader(body));
                // see https://google-gson.googlecode.com/svn/trunk/gson/docs/javadocs/com/google/gson/stream/JsonReader.html#setLenient(boolean)
                jsonReader.setLenient(true);
                return gson.fromJson(jsonReader, returnType);
            } else {
                return gson.fromJson(body, returnType);
            }
        } catch (JsonParseException e) {
            // Fallback processing when failed to parse JSON form response body:
            // return the response body string directly for the String return type;
            if (returnType.equals(String.class))
                return (T) body;
            else throw (e);
        }
    }

    /**
     * Gson TypeAdapter for JSR310 OffsetDateTime type
     */
    public static class OffsetDateTimeTypeAdapter extends TypeAdapter<OffsetDateTime> {

        private DateTimeFormatter formatter;

        public OffsetDateTimeTypeAdapter() {
            this(DateTimeFormatter.ISO_OFFSET_DATE_TIME);
        }

        public OffsetDateTimeTypeAdapter(DateTimeFormatter formatter) {
            this.formatter = formatter;
        }

        public void setFormat(DateTimeFormatter dateFormat) {
            this.formatter = dateFormat;
        }

        @Override
        public void write(JsonWriter out, OffsetDateTime date) throws IOException {
            if (date == null) {
                out.nullValue();
            } else {
                out.value(formatter.format(date));
            }
        }

        @Override
        public OffsetDateTime read(JsonReader in) throws IOException {
            switch (in.peek()) {
                case NULL:
                    in.nextNull();
                    return null;
                default:
                    String date = in.nextString();
                    if (date.endsWith("+0000")) {
                        date = date.substring(0, date.length()-5) + "Z";
                    }
                    return OffsetDateTime.parse(date, formatter);
            }
        }
    }

    /**
     * Gson TypeAdapter for JSR310 LocalDate type
     */
    public class LocalDateTypeAdapter extends TypeAdapter<LocalDate> {

        private DateTimeFormatter formatter;

        public LocalDateTypeAdapter() {
            this(DateTimeFormatter.ISO_LOCAL_DATE);
        }

        public LocalDateTypeAdapter(DateTimeFormatter formatter) {
            this.formatter = formatter;
        }

        public void setFormat(DateTimeFormatter dateFormat) {
            this.formatter = dateFormat;
        }

        @Override
        public void write(JsonWriter out, LocalDate date) throws IOException {
            if (date == null) {
                out.nullValue();
            } else {
                out.value(formatter.format(date));
            }
        }

        @Override
        public LocalDate read(JsonReader in) throws IOException {
            switch (in.peek()) {
                case NULL:
                    in.nextNull();
                    return null;
                default:
                    String date = in.nextString();
                    return LocalDate.parse(date, formatter);
            }
        }
    }

    public JSON setOffsetDateTimeFormat(DateTimeFormatter dateFormat) {
        offsetDateTimeTypeAdapter.setFormat(dateFormat);
        return this;
    }

    public JSON setLocalDateFormat(DateTimeFormatter dateFormat) {
        localDateTypeAdapter.setFormat(dateFormat);
        return this;
    }

    /**
     * Gson TypeAdapter for java.sql.Date type
     * If the dateFormat is null, a simple "yyyy-MM-dd" format will be used
     * (more efficient than SimpleDateFormat).
     */
    public static class SqlDateTypeAdapter extends TypeAdapter<java.sql.Date> {

        private DateFormat dateFormat;

        public SqlDateTypeAdapter() {
        }

        public SqlDateTypeAdapter(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        public void setFormat(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        @Override
        public void write(JsonWriter out, java.sql.Date date) throws IOException {
            if (date == null) {
                out.nullValue();
            } else {
                String value;
                if (dateFormat != null) {
                    value = dateFormat.format(date);
                } else {
                    value = date.toString();
                }
                out.value(value);
            }
        }

        @Override
        public java.sql.Date read(JsonReader in) throws IOException {
            switch (in.peek()) {
                case NULL:
                    in.nextNull();
                    return null;
                default:
                    String date = in.nextString();
                    try {
                        if (dateFormat != null) {
                            return new java.sql.Date(dateFormat.parse(date).getTime());
                        }
                        return new java.sql.Date(ISO8601Utils.parse(date, new ParsePosition(0)).getTime());
                    } catch (ParseException e) {
                        throw new JsonParseException(e);
                    }
            }
        }
    }

    /**
     * Gson TypeAdapter for java.util.Date type
     * If the dateFormat is null, ISO8601Utils will be used.
     */
    public static class DateTypeAdapter extends TypeAdapter<Date> {

        private DateFormat dateFormat;

        public DateTypeAdapter() {
        }

        public DateTypeAdapter(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        public void setFormat(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        @Override
        public void write(JsonWriter out, Date date) throws IOException {
            if (date == null) {
                out.nullValue();
            } else {
                String value;
                if (dateFormat != null) {
                    value = dateFormat.format(date);
                } else {
                    value = ISO8601Utils.format(date, true);
                }
                out.value(value);
            }
        }

        @Override
        public Date read(JsonReader in) throws IOException {
            try {
                switch (in.peek()) {
                    case NULL:
                        in.nextNull();
                        return null;
                    default:
                        String date = in.nextString();
                        try {
                            if (dateFormat != null) {
                                return dateFormat.parse(date);
                            }
                            return ISO8601Utils.parse(date, new ParsePosition(0));
                        } catch (ParseException e) {
                            throw new JsonParseException(e);
                        }
                }
            } catch (IllegalArgumentException e) {
                throw new JsonParseException(e);
            }
        }
    }

    public JSON setDateFormat(DateFormat dateFormat) {
        dateTypeAdapter.setFormat(dateFormat);
        return this;
    }

    public JSON setSqlDateFormat(DateFormat dateFormat) {
        sqlDateTypeAdapter.setFormat(dateFormat);
        return this;
    }

}
